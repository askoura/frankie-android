{"version":3,"file":"index-2354cab4.js","sources":["../../src/pages/manage/ResponseEvent/index.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport Box from \"@mui/material/Box\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport { CircularProgress, Typography } from \"@mui/material\";\nimport { rtlLanguage } from \"~/utils/common\";\nimport { Header } from \"~/components/manage/Header\";\nimport SurveyService from \"~/services/SurveyService\";\nimport ProcessedError from \"~/components/manage/ProcessedError\";\nimport { PROCESSED_ERRORS, processError } from \"~/utils/errorsProcessor\";\nimport {\n  formatlocalDateTime,\n  serverDateTimeToLocalDateTime,\n} from \"~/utils/DateUtils\";\nimport styles from \"./ResponseEvent.module.css\";\n\nfunction ResponsesSurvey() {\n  const { t, i18n } = useTranslation(\"manage\");\n  const dir = rtlLanguage.includes(i18n.language) ? \"rtl\" : \"ltr\";\n  const [fetching, setFetching] = useState(true);\n\n  const [processedError, setProcessedError] = useState(\"\");\n  const [showError, setShowError] = useState(false);\n\n  const { surveyId, responseId } = useParams();\n\n  const processApirror = (e) => {\n    setFetching(false);\n    const processed = processError(e);\n    switch (processed) {\n      case PROCESSED_ERRORS.NETWORK_ERR:\n      case PROCESSED_ERRORS.BACKEND_DOWN:\n        setShowError(true);\n        setProcessedError(processed);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const [eventResponse, setEventResponse] = useState(null);\n\n  const fetchResponses = () => {\n    setFetching(true);\n    SurveyService.eventResponse(surveyId, responseId)\n      .then((data) => {\n        if (data) {\n          setEventResponse(data.data);\n        }\n        setFetching(false);\n      })\n      .catch((err) => {\n        processApirror(err);\n      });\n  };\n\n  useEffect(() => {\n    fetchResponses();\n  }, []);\n\n  return (\n    <Box className={styles.mainContainer}>\n      {showError && (\n        <ProcessedError\n          error={processedError}\n          handleClose={() => setShowError(false)}\n        />\n      )}\n      <Header />\n      <Typography variant=\"h4\" sx={{ mb: \"10px\" }}>\n        {t(\"event_response.title\")}\n      </Typography>\n      {fetching ? (\n        <div className={styles.loadingWrapper}>\n          <CircularProgress />\n        </div>\n      ) : (\n        <TableContainer component={Paper}>\n          <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n            <TableHead>\n              {eventResponse && (\n                <TableRow>\n                  <TableCell key=\"name\" align=\"left\">\n                    {t(\"event_response.name\")}\n                  </TableCell>\n                  <TableCell key=\"time\" align=\"left\">\n                    {t(\"event_response.time\")}\n                  </TableCell>\n                  <TableCell key=\"details\" align=\"left\">\n                    {t(\"event_response.details\")}\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableHead>\n            <TableBody>\n              {eventResponse?.map((event) => {\n                return (\n                  <TableRow key={event.time} sx={{ minHeight: \"100px\" }}>\n                    <TableCell key=\"name\" align=\"left\">\n                      {event.name}\n                    </TableCell>\n                    <TableCell key=\"time\" align=\"left\">\n                      {formatlocalDateTime(\n                        serverDateTimeToLocalDateTime(event.time)\n                      )}\n                    </TableCell>\n                    <TableCell key=\"details\" align=\"left\">\n                      {event.name == \"Navigation\" ? (\n                        <>\n                          <Box>\n                            <strong>{t(\"label.from\")}</strong>: {event.from}\n                          </Box>\n                          <Box>\n                            <strong>{t(\"label.to\")}</strong>: {event.to}\n                          </Box>\n                          <Box>\n                            <strong>{t(\"event_response.direction\")}</strong>:{\" \"}\n                            {event.direction?.name}\n                          </Box>\n                        </>\n                      ) : (\n                        <Box>\n                          <strong>{t(\"label.code\")}</strong>: {event.code}\n                        </Box>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      )}\n    </Box>\n  );\n}\n\nexport default ResponsesSurvey;\n"],"names":["useState","useEffect","jsxs","jsx","Fragment"],"mappings":"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"}