;
(function () {
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
  function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread3(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  function _defineProperty2(obj, key, value) { key = _toPropertyKey2(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey2(t) { var i = _toPrimitive2(t, "string"); return "symbol" == typeof i ? i : String(i); }
  function _toPrimitive2(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
  function _slicedToArray2(arr, i) { return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest2(); }
  function _iterableToArrayLimit2(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
  function _toArray2(arr) { return _arrayWithHoles2(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray2(arr) || _nonIterableRest2(); }
  function _nonIterableRest2() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  function _iterableToArray2(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
  function _arrayWithHoles2(arr) { if (Array.isArray(arr)) return arr; }
  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray2(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
  function _unsupportedIterableToArray2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray2(o, minLen); }
  function _arrayLikeToArray2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
  System.register([], function (exports, module) {
    'use strict';

    return {
      execute: function execute() {
        var __vite_style__ = document.createElement('style');
        __vite_style__.textContent = "body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n    \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n    sans-serif;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n    monospace;\n}\n.MuiFormControl-root {\n  width: 100%;\n}\n\n.text-left {\n  text-align: left !important;\n}\n\n.mt-20 {\n  margin-top: 20px !important;\n}\n\n.mt-40 {\n  margin-top: 40px !important;\n}\n\n.mr-10 {\n  margin-right: 10px !important;\n}\n\n.mr-14 {\n  margin-right: 14px !important;\n}\n\n.ml-14 {\n  margin-left: 14px !important;\n}\n\n.ml-5 {\n  margin-left: 5px !important;\n}\n\n.mb-0 {\n  margin-bottom: 0 !important;\n}\n\n.mb-10 {\n  margin-bottom: 10px !important;\n}\n\n.pb-10 {\n  padding-bottom: 10px !important;\n}\n\n.ta-center {\n  text-align: center;\n}\n\n.d-flex {\n  display: flex;\n}\n\n.w-100 {\n  width: 100%;\n}\n\n.card-custom {\n  position: relative;\n  margin-top: 12px;\n  margin-bottom: 12px;\n  border: 1px solid;\n  border-radius: 8px;\n  cursor: default;\n}\n\n.required {\n  font-size: 16px;\n  line-height: 24px;\n  letter-spacing: 0.1px;\n}\n\n.inputSurvey {\n  max-width: 400px;\n  width: 100%;\n  margin-bottom: 15px;\n}\n\n.MuiSelect-select {\n  display: flex !important;\n  align-items: center;\n}\n\n.MuiSwitch-root {\n  margin-right: -4px;\n}\n\n.jsx-parser {\n  p {\n    margin: 0;\n  }\n}\n._leftPanelGroupItem_1wa4u_1 {\n  width: 100%;\n  margin-bottom: 20px;\n}\n\n._groupTitle_1wa4u_6 {\n  margin-bottom: 10px;\n  font-size: 24px;\n  font-weight: bold;\n}\n\n._iconMenu_1wa4u_12 {\n  min-width: 35px;\n}\n\n._tabHeader_1wa4u_16 {\n  position: relative;\n}\n\n._tabHeader_1wa4u_16::after {\n  content: \"\";\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: block;\n  border-bottom: 1px solid;\n}\n\n._leftContent_1wa4u_30 {\n  background-color: white;\n  width: 30%;\n  overflow-y: auto;\n  height: calc(100vh - 80px);\n}\n\n._close_1wa4u_37 {\n  padding: 8px;\n  text-align: right;\n}\n._leftPannelItem_3isj2_1 {\n  display: inline-flex;\n  width: 100%;\n  margin-bottom: 10px;\n  border: 1px solid;\n  border-radius: 4px;\n  font-size: 16px;\n  line-height: 23px;\n}\n\n._icon_3isj2_11 {\n  margin: 8px;\n}\n\n._title_3isj2_15 {\n  margin: 8px;\n}\n\n._offlineOnly_3isj2_19 {\n  color: red;\n  margin: 4px;\n  font-weight: bold;\n  font-size: 12px;\n}\n\n._leftPannelItem_3isj2_1._isDrayLayer_3isj2_26 {\n  border: 3px dotted rgba(0, 0, 0, .5);\n  margin-bottom: 0;\n  box-sizing: border-box;\n}\n._mainContainer_1xzji_1 {\n  margin: auto;\n}\n\n._surveyDesignError_1xzji_5 {\n  position: absolute;\n  text-align: center;\n  font-size: 32px;\n  padding: 16px;\n  top: 33%;\n  right: 20%;\n  left: 20%;\n  color: red;\n  margin: 16px;\n  border: 2px dashed gray;\n  border-radius: 4px;\n}._surveyContent_11qtt_1 {\n  margin: 0;\n}\n\n._surveyGroups_11qtt_5 {\n  margin: auto;\n  max-width: 800px;\n  min-width: 300px;\n}\n\n._cardImage_11qtt_11 {\n  max-height: 22.5vw;\n  height: 160px;\n  margin: 12px auto;\n  background-size: cover;\n  background-position: center;\n  border-radius: 8px;\n}\n._content_vh4hz_1 {\n  width: 100%;\n  margin: 0;\n  letter-spacing: 0.1px;\n  word-break: break-word;\n}\n\n._content_vh4hz_1._question_vh4hz_8 {\n  margin-bottom: 4px;\n}\n\n._content_vh4hz_1 ._required_vh4hz_12 {\n  margin-left: 5px;\n}\n\n._header_vh4hz_16 {\n  margin-bottom: 12px;\n}\n\n._textDescription_vh4hz_20 {\n  max-width: 100%;\n  margin-bottom: 4px;\n}\n\n._groupQuestion_vh4hz_25 {\n  margin-bottom: 12px;\n  padding: 24px;\n  border-style: solid;\n  border-width: 1px;\n  border-radius: 8px;\n  word-wrap: break-word;\n  page-break-inside: avoid;\n  transition: all 200ms cubic-bezier(0, 0, 0.2, 1);\n}\n/*!\n * Quill Editor v1.3.7\n * https://quilljs.com/\n * Copyright (c) 2014, Jason Chen\n * Copyright (c) 2013, salesforce.com\n */\n.ql-container {\n  box-sizing: border-box;\n  font-family: Helvetica, Arial, sans-serif;\n  font-size: 13px;\n  height: 100%;\n  margin: 0px;\n  position: relative;\n}\n.ql-container.ql-disabled .ql-tooltip {\n  visibility: hidden;\n}\n.ql-container.ql-disabled .ql-editor ul[data-checked] > li::before {\n  pointer-events: none;\n}\n.ql-clipboard {\n  left: -100000px;\n  height: 1px;\n  overflow-y: hidden;\n  position: absolute;\n  top: 50%;\n}\n.ql-clipboard p {\n  margin: 0;\n  padding: 0;\n}\n.ql-editor {\n  box-sizing: border-box;\n  line-height: 1.42;\n  height: 100%;\n  outline: none;\n  overflow-y: auto;\n  padding: 12px 15px;\n  tab-size: 4;\n  -moz-tab-size: 4;\n  text-align: left;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n}\n.ql-editor > * {\n  cursor: text;\n}\n.ql-editor p,\n.ql-editor ol,\n.ql-editor ul,\n.ql-editor pre,\n.ql-editor blockquote,\n.ql-editor h1,\n.ql-editor h2,\n.ql-editor h3,\n.ql-editor h4,\n.ql-editor h5,\n.ql-editor h6 {\n  margin: 0;\n  padding: 0;\n  counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol,\n.ql-editor ul {\n  padding-left: 1.5em;\n}\n.ql-editor ol > li,\n.ql-editor ul > li {\n  list-style-type: none;\n}\n.ql-editor ul > li::before {\n  content: '\\2022';\n}\n.ql-editor ul[data-checked=true],\n.ql-editor ul[data-checked=false] {\n  pointer-events: none;\n}\n.ql-editor ul[data-checked=true] > li *,\n.ql-editor ul[data-checked=false] > li * {\n  pointer-events: all;\n}\n.ql-editor ul[data-checked=true] > li::before,\n.ql-editor ul[data-checked=false] > li::before {\n  color: #777;\n  cursor: pointer;\n  pointer-events: all;\n}\n.ql-editor ul[data-checked=true] > li::before {\n  content: '\\2611';\n}\n.ql-editor ul[data-checked=false] > li::before {\n  content: '\\2610';\n}\n.ql-editor li::before {\n  display: inline-block;\n  white-space: nowrap;\n  width: 1.2em;\n}\n.ql-editor li:not(.ql-direction-rtl)::before {\n  margin-left: -1.5em;\n  margin-right: 0.3em;\n  text-align: right;\n}\n.ql-editor li.ql-direction-rtl::before {\n  margin-left: 0.3em;\n  margin-right: -1.5em;\n}\n.ql-editor ol li:not(.ql-direction-rtl),\n.ql-editor ul li:not(.ql-direction-rtl) {\n  padding-left: 1.5em;\n}\n.ql-editor ol li.ql-direction-rtl,\n.ql-editor ul li.ql-direction-rtl {\n  padding-right: 1.5em;\n}\n.ql-editor ol li {\n  counter-reset: list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n  counter-increment: list-0;\n}\n.ql-editor ol li:before {\n  content: counter(list-0, decimal) '. ';\n}\n.ql-editor ol li.ql-indent-1 {\n  counter-increment: list-1;\n}\n.ql-editor ol li.ql-indent-1:before {\n  content: counter(list-1, lower-alpha) '. ';\n}\n.ql-editor ol li.ql-indent-1 {\n  counter-reset: list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-2 {\n  counter-increment: list-2;\n}\n.ql-editor ol li.ql-indent-2:before {\n  content: counter(list-2, lower-roman) '. ';\n}\n.ql-editor ol li.ql-indent-2 {\n  counter-reset: list-3 list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-3 {\n  counter-increment: list-3;\n}\n.ql-editor ol li.ql-indent-3:before {\n  content: counter(list-3, decimal) '. ';\n}\n.ql-editor ol li.ql-indent-3 {\n  counter-reset: list-4 list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-4 {\n  counter-increment: list-4;\n}\n.ql-editor ol li.ql-indent-4:before {\n  content: counter(list-4, lower-alpha) '. ';\n}\n.ql-editor ol li.ql-indent-4 {\n  counter-reset: list-5 list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-5 {\n  counter-increment: list-5;\n}\n.ql-editor ol li.ql-indent-5:before {\n  content: counter(list-5, lower-roman) '. ';\n}\n.ql-editor ol li.ql-indent-5 {\n  counter-reset: list-6 list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-6 {\n  counter-increment: list-6;\n}\n.ql-editor ol li.ql-indent-6:before {\n  content: counter(list-6, decimal) '. ';\n}\n.ql-editor ol li.ql-indent-6 {\n  counter-reset: list-7 list-8 list-9;\n}\n.ql-editor ol li.ql-indent-7 {\n  counter-increment: list-7;\n}\n.ql-editor ol li.ql-indent-7:before {\n  content: counter(list-7, lower-alpha) '. ';\n}\n.ql-editor ol li.ql-indent-7 {\n  counter-reset: list-8 list-9;\n}\n.ql-editor ol li.ql-indent-8 {\n  counter-increment: list-8;\n}\n.ql-editor ol li.ql-indent-8:before {\n  content: counter(list-8, lower-roman) '. ';\n}\n.ql-editor ol li.ql-indent-8 {\n  counter-reset: list-9;\n}\n.ql-editor ol li.ql-indent-9 {\n  counter-increment: list-9;\n}\n.ql-editor ol li.ql-indent-9:before {\n  content: counter(list-9, decimal) '. ';\n}\n.ql-editor .ql-indent-1:not(.ql-direction-rtl) {\n  padding-left: 3em;\n}\n.ql-editor li.ql-indent-1:not(.ql-direction-rtl) {\n  padding-left: 4.5em;\n}\n.ql-editor .ql-indent-1.ql-direction-rtl.ql-align-right {\n  padding-right: 3em;\n}\n.ql-editor li.ql-indent-1.ql-direction-rtl.ql-align-right {\n  padding-right: 4.5em;\n}\n.ql-editor .ql-indent-2:not(.ql-direction-rtl) {\n  padding-left: 6em;\n}\n.ql-editor li.ql-indent-2:not(.ql-direction-rtl) {\n  padding-left: 7.5em;\n}\n.ql-editor .ql-indent-2.ql-direction-rtl.ql-align-right {\n  padding-right: 6em;\n}\n.ql-editor li.ql-indent-2.ql-direction-rtl.ql-align-right {\n  padding-right: 7.5em;\n}\n.ql-editor .ql-indent-3:not(.ql-direction-rtl) {\n  padding-left: 9em;\n}\n.ql-editor li.ql-indent-3:not(.ql-direction-rtl) {\n  padding-left: 10.5em;\n}\n.ql-editor .ql-indent-3.ql-direction-rtl.ql-align-right {\n  padding-right: 9em;\n}\n.ql-editor li.ql-indent-3.ql-direction-rtl.ql-align-right {\n  padding-right: 10.5em;\n}\n.ql-editor .ql-indent-4:not(.ql-direction-rtl) {\n  padding-left: 12em;\n}\n.ql-editor li.ql-indent-4:not(.ql-direction-rtl) {\n  padding-left: 13.5em;\n}\n.ql-editor .ql-indent-4.ql-direction-rtl.ql-align-right {\n  padding-right: 12em;\n}\n.ql-editor li.ql-indent-4.ql-direction-rtl.ql-align-right {\n  padding-right: 13.5em;\n}\n.ql-editor .ql-indent-5:not(.ql-direction-rtl) {\n  padding-left: 15em;\n}\n.ql-editor li.ql-indent-5:not(.ql-direction-rtl) {\n  padding-left: 16.5em;\n}\n.ql-editor .ql-indent-5.ql-direction-rtl.ql-align-right {\n  padding-right: 15em;\n}\n.ql-editor li.ql-indent-5.ql-direction-rtl.ql-align-right {\n  padding-right: 16.5em;\n}\n.ql-editor .ql-indent-6:not(.ql-direction-rtl) {\n  padding-left: 18em;\n}\n.ql-editor li.ql-indent-6:not(.ql-direction-rtl) {\n  padding-left: 19.5em;\n}\n.ql-editor .ql-indent-6.ql-direction-rtl.ql-align-right {\n  padding-right: 18em;\n}\n.ql-editor li.ql-indent-6.ql-direction-rtl.ql-align-right {\n  padding-right: 19.5em;\n}\n.ql-editor .ql-indent-7:not(.ql-direction-rtl) {\n  padding-left: 21em;\n}\n.ql-editor li.ql-indent-7:not(.ql-direction-rtl) {\n  padding-left: 22.5em;\n}\n.ql-editor .ql-indent-7.ql-direction-rtl.ql-align-right {\n  padding-right: 21em;\n}\n.ql-editor li.ql-indent-7.ql-direction-rtl.ql-align-right {\n  padding-right: 22.5em;\n}\n.ql-editor .ql-indent-8:not(.ql-direction-rtl) {\n  padding-left: 24em;\n}\n.ql-editor li.ql-indent-8:not(.ql-direction-rtl) {\n  padding-left: 25.5em;\n}\n.ql-editor .ql-indent-8.ql-direction-rtl.ql-align-right {\n  padding-right: 24em;\n}\n.ql-editor li.ql-indent-8.ql-direction-rtl.ql-align-right {\n  padding-right: 25.5em;\n}\n.ql-editor .ql-indent-9:not(.ql-direction-rtl) {\n  padding-left: 27em;\n}\n.ql-editor li.ql-indent-9:not(.ql-direction-rtl) {\n  padding-left: 28.5em;\n}\n.ql-editor .ql-indent-9.ql-direction-rtl.ql-align-right {\n  padding-right: 27em;\n}\n.ql-editor li.ql-indent-9.ql-direction-rtl.ql-align-right {\n  padding-right: 28.5em;\n}\n.ql-editor .ql-video {\n  display: block;\n  max-width: 100%;\n}\n.ql-editor .ql-video.ql-align-center {\n  margin: 0 auto;\n}\n.ql-editor .ql-video.ql-align-right {\n  margin: 0 0 0 auto;\n}\n.ql-editor .ql-bg-black {\n  background-color: #000;\n}\n.ql-editor .ql-bg-red {\n  background-color: #e60000;\n}\n.ql-editor .ql-bg-orange {\n  background-color: #f90;\n}\n.ql-editor .ql-bg-yellow {\n  background-color: #ff0;\n}\n.ql-editor .ql-bg-green {\n  background-color: #008a00;\n}\n.ql-editor .ql-bg-blue {\n  background-color: #06c;\n}\n.ql-editor .ql-bg-purple {\n  background-color: #93f;\n}\n.ql-editor .ql-color-white {\n  color: #fff;\n}\n.ql-editor .ql-color-red {\n  color: #e60000;\n}\n.ql-editor .ql-color-orange {\n  color: #f90;\n}\n.ql-editor .ql-color-yellow {\n  color: #ff0;\n}\n.ql-editor .ql-color-green {\n  color: #008a00;\n}\n.ql-editor .ql-color-blue {\n  color: #06c;\n}\n.ql-editor .ql-color-purple {\n  color: #93f;\n}\n.ql-editor .ql-font-serif {\n  font-family: Georgia, Times New Roman, serif;\n}\n.ql-editor .ql-font-monospace {\n  font-family: Monaco, Courier New, monospace;\n}\n.ql-editor .ql-size-small {\n  font-size: 0.75em;\n}\n.ql-editor .ql-size-large {\n  font-size: 1.5em;\n}\n.ql-editor .ql-size-huge {\n  font-size: 2.5em;\n}\n.ql-editor .ql-direction-rtl {\n  direction: rtl;\n  text-align: inherit;\n}\n.ql-editor .ql-align-center {\n  text-align: center;\n}\n.ql-editor .ql-align-justify {\n  text-align: justify;\n}\n.ql-editor .ql-align-right {\n  text-align: right;\n}\n.ql-editor.ql-blank::before {\n  color: rgba(0,0,0,0.6);\n  content: attr(data-placeholder);\n  font-style: italic;\n  left: 15px;\n  pointer-events: none;\n  position: absolute;\n  right: 15px;\n}\n.rtl {\n  direction: rtl !important;\n  text-align: right !important;\n}\n\n.no-padding {\n  padding: 0 !important;\n}\n\n.no-padding > :last-child {\n  margin-bottom: 0;\n}\n\n.no-padding > :first-child {\n  margin-top: 0;\n}\n._textHeader_1i8wa_1 {\n  max-width: 100%;\n}\n\n._textDescription_1i8wa_5 {\n  max-width: 100%;\n  margin-top: 8px;\n}\n._titleRow_1i8wa_9 {\n  display: block;\n  justify-content: space-between;\n  align-items: center;\n  box-align: center;\n  margin: 24px;\n  flex-wrap: wrap;\n  box-pack: justify;\n}\n\n._groupHeader_1i8wa_19 {\n  border: 1px solid transparent;\n  border-top-right-radius: 8px;\n  border-top-left-radius: 8px;\n}\n\n\n._topLevel_1i8wa_26 {\n  max-width: 800px;\n  min-width: 350px;\n  margin-right: 16px;\n  margin-left: 16px;\n  padding-right: 8px;\n  padding-left: 8px;\n  margin: auto;\n}\n._drawer_k998h_2 {\n  padding: 16px;\n}._groupCard_1t5ma_1 {\n  padding: 8px;\n  margin: 8px;\n}\n\n._groupTitle_1t5ma_6 {\n  font-weight: bolder;\n}\n\n._questionTitle_1t5ma_10 {\n  display: flex;\n  padding: 8px;\n  margin: 8px;\n}\n\n._validationIcon_1t5ma_16 {\n  margin-left: 8px;\n  margin-right: 8px;\n  color: green;\n  font-size: 1.2rem;\n}\n\n._bullet_1t5ma_23 {\n  margin-right: 8px;\n  margin-left: 8px;\n  font-size: 1.2rem;\n}\n._loading_c5al4_1 {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: block;\n  width: 100vw;\n  height: 100vh;\n  z-index: 1000;\n  background: rgba(0, 0, 0, .2);\n}\n\n._loadingWrapper_c5al4_14 {\n  position: relative;\n  top: 50%;\n  left: 50%;\n  display: inline-block;\n  margin: auto;\n  transform: translate(-50%, -50%);\n}\n";
        document.head.appendChild(__vite_style__);
        function _mergeNamespaces(n, m) {
          for (var i = 0; i < m.length; i++) {
            const e = m[i];
            if (typeof e !== 'string' && !Array.isArray(e)) {
              for (const k in e) {
                if (k !== 'default' && !(k in n)) {
                  const d = Object.getOwnPropertyDescriptor(e, k);
                  if (d) {
                    Object.defineProperty(n, k, d.get ? d : {
                      enumerable: true,
                      get: () => e[k]
                    });
                  }
                }
              }
            }
          }
          return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, {
            value: 'Module'
          }));
        }
        exports({
          F: ErrorDialog,
          J: createTheme,
          Q: Provider,
          V: ThemeProvider,
          W: StatefulLoadingIndicator,
          X: requireCreateSvgIcon,
          _: _extends,
          a: generateUtilityClass,
          a$: useId,
          a8: getDefaultExportFromCjs,
          aA: Routes,
          aB: Route,
          aC: LoadingIndicator,
          aE: useLocation,
          aF: Navigate,
          aH: useTheme$2,
          aI: shallowEqual$1,
          aK: _inheritsLoose,
          aP: useClassNamesOverride,
          aQ: useTheme$3,
          aR: getThemeProps,
          aS: useFormControl,
          aV: debounce,
          aW: ownerWindow,
          aZ: FocusTrap,
          a_: useControlled,
          ap: useParams,
          aq: useSearchParams,
          at: GetData,
          b: capitalize,
          b0: alpha,
          b6: getAugmentedNamespace,
          bA: shallowEqual,
          bB: wrapConnectorHooks,
          bC: isRef,
          bD: useDragDropManager,
          bF: registerTarget,
          bG: useOptionalFactory,
          bH: useCollectedProps,
          bI: getPath,
          bJ: useIsFocusVisible,
          bN: isHostComponent,
          bR: getTransitionProps,
          bT: warnOnce,
          bU: getDefaults,
          bV: _defineProperty$5,
          bW: warn,
          bX: _typeof,
          bY: getI18n,
          bZ: setRef$1,
          bb: getFileFromPath,
          bd: createStyled,
          be: createTheme$1,
          bf: useThemeProps$1,
          bg: handleBreakpoints,
          bh: resolveBreakpointValues,
          bi: createUnarySpacing,
          bj: deepmerge,
          bk: mergeBreakpointsInOrder,
          bl: extendSxProp,
          bm: getValue,
          bn: formControlState,
          bv: useDrag,
          by: createChainedFunction,
          bz: invariant,
          c: createSvgIcon$1,
          c5: getListItemIconUtilityClass,
          c7: getListItemTextUtilityClass,
          c9: appendOwnerState,
          cC: _slicedToArray,
          cD: _arrayLikeToArray,
          cE: _iterableToArray,
          cF: _unsupportedIterableToArray,
          cG: _toArray,
          cI: _inherits,
          cJ: _classCallCheck,
          cK: _assertThisInitialized,
          cL: _createClass,
          cM: _getPrototypeOf,
          cN: _possibleConstructorReturn,
          cO: createStore,
          d: darken,
          d0: I18nextProvider,
          e: _objectWithoutPropertiesLoose$2,
          f: clsx,
          g: generateUtilityClasses,
          h: composeClasses,
          i: useForkRef,
          k: useEventCallback,
          l: lighten,
          m: extractEventHandlers,
          n: emphasize,
          o: ownerDocument,
          p: useTheme,
          q: useSlotProps,
          u: useThemeProps,
          w: useNavigate,
          x: useTranslation
        });
        false && function polyfill() {
          const relList = document.createElement('link').relList;
          if (relList && relList.supports && relList.supports('modulepreload')) {
            return;
          }
          var _iterator = _createForOfIteratorHelper(document.querySelectorAll('link[rel="modulepreload"]')),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              const link = _step.value;
              processPreload(link);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          new MutationObserver(mutations => {
            var _iterator2 = _createForOfIteratorHelper(mutations),
              _step2;
            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                const mutation = _step2.value;
                if (mutation.type !== 'childList') {
                  continue;
                }
                var _iterator3 = _createForOfIteratorHelper(mutation.addedNodes),
                  _step3;
                try {
                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                    const node = _step3.value;
                    if (node.tagName === 'LINK' && node.rel === 'modulepreload') processPreload(node);
                  }
                } catch (err) {
                  _iterator3.e(err);
                } finally {
                  _iterator3.f();
                }
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          }).observe(document, {
            childList: true,
            subtree: true
          });
          function getFetchOpts(link) {
            const fetchOpts = {};
            if (link.integrity) fetchOpts.integrity = link.integrity;
            if (link.referrerPolicy) fetchOpts.referrerPolicy = link.referrerPolicy;
            if (link.crossOrigin === 'use-credentials') fetchOpts.credentials = 'include';else if (link.crossOrigin === 'anonymous') fetchOpts.credentials = 'omit';else fetchOpts.credentials = 'same-origin';
            return fetchOpts;
          }
          function processPreload(link) {
            if (link.ep)
              // ep marker = processed
              return;
            link.ep = true;
            // prepopulate the load record
            const fetchOpts = getFetchOpts(link);
            fetch(link.href, fetchOpts);
          }
        }();
        var commonjsGlobal = exports("aX", typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {});
        function getDefaultExportFromCjs(x) {
          return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
        }
        function getAugmentedNamespace(n) {
          if (n.__esModule) return n;
          var f = n.default;
          if (typeof f == "function") {
            var a = function a() {
              if (this instanceof a) {
                return Reflect.construct(f, arguments, this.constructor);
              }
              return f.apply(this, arguments);
            };
            a.prototype = f.prototype;
          } else a = {};
          Object.defineProperty(a, '__esModule', {
            value: true
          });
          Object.keys(n).forEach(function (k) {
            var d = Object.getOwnPropertyDescriptor(n, k);
            Object.defineProperty(a, k, d.get ? d : {
              enumerable: true,
              get: function get() {
                return n[k];
              }
            });
          });
          return a;
        }
        var jsxRuntime = {
          exports: {}
        };
        var reactJsxRuntime_production_min = {};
        var react = {
          exports: {}
        };
        var react_production_min = {};

        /**
         * @license React
         * react.production.min.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        var l$5 = Symbol.for("react.element"),
          n$6 = Symbol.for("react.portal"),
          p$7 = Symbol.for("react.fragment"),
          q$6 = Symbol.for("react.strict_mode"),
          r$5 = Symbol.for("react.profiler"),
          t$5 = Symbol.for("react.provider"),
          u$4 = Symbol.for("react.context"),
          v$5 = Symbol.for("react.forward_ref"),
          w$3 = Symbol.for("react.suspense"),
          x$2 = Symbol.for("react.memo"),
          y$2 = Symbol.for("react.lazy"),
          z$3 = Symbol.iterator;
        function A$3(a) {
          if (null === a || "object" !== typeof a) return null;
          a = z$3 && a[z$3] || a["@@iterator"];
          return "function" === typeof a ? a : null;
        }
        var B$2 = {
            isMounted: function isMounted() {
              return !1;
            },
            enqueueForceUpdate: function enqueueForceUpdate() {},
            enqueueReplaceState: function enqueueReplaceState() {},
            enqueueSetState: function enqueueSetState() {}
          },
          C$1 = Object.assign,
          D$2 = {};
        function E$2(a, b, e) {
          this.props = a;
          this.context = b;
          this.refs = D$2;
          this.updater = e || B$2;
        }
        E$2.prototype.isReactComponent = {};
        E$2.prototype.setState = function (a, b) {
          if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          this.updater.enqueueSetState(this, a, b, "setState");
        };
        E$2.prototype.forceUpdate = function (a) {
          this.updater.enqueueForceUpdate(this, a, "forceUpdate");
        };
        function F$1() {}
        F$1.prototype = E$2.prototype;
        function G$2(a, b, e) {
          this.props = a;
          this.context = b;
          this.refs = D$2;
          this.updater = e || B$2;
        }
        var H$2 = G$2.prototype = new F$1();
        H$2.constructor = G$2;
        C$1(H$2, E$2.prototype);
        H$2.isPureReactComponent = !0;
        var I$2 = Array.isArray,
          J = Object.prototype.hasOwnProperty,
          K$1 = {
            current: null
          },
          L$2 = {
            key: !0,
            ref: !0,
            __self: !0,
            __source: !0
          };
        function M$2(a, b, e) {
          var d,
            c = {},
            k = null,
            h = null;
          if (null != b) for (d in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) J.call(b, d) && !L$2.hasOwnProperty(d) && (c[d] = b[d]);
          var g = arguments.length - 2;
          if (1 === g) c.children = e;else if (1 < g) {
            for (var f = Array(g), m = 0; m < g; m++) f[m] = arguments[m + 2];
            c.children = f;
          }
          if (a && a.defaultProps) for (d in g = a.defaultProps, g) void 0 === c[d] && (c[d] = g[d]);
          return {
            $$typeof: l$5,
            type: a,
            key: k,
            ref: h,
            props: c,
            _owner: K$1.current
          };
        }
        function N$2(a, b) {
          return {
            $$typeof: l$5,
            type: a.type,
            key: b,
            ref: a.ref,
            props: a.props,
            _owner: a._owner
          };
        }
        function O$2(a) {
          return "object" === typeof a && null !== a && a.$$typeof === l$5;
        }
        function escape$2(a) {
          var b = {
            "=": "=0",
            ":": "=2"
          };
          return "$" + a.replace(/[=:]/g, function (a) {
            return b[a];
          });
        }
        var P$2 = /\/+/g;
        function Q$2(a, b) {
          return "object" === typeof a && null !== a && null != a.key ? escape$2("" + a.key) : b.toString(36);
        }
        function R$2(a, b, e, d, c) {
          var k = typeof a;
          if ("undefined" === k || "boolean" === k) a = null;
          var h = !1;
          if (null === a) h = !0;else switch (k) {
            case "string":
            case "number":
              h = !0;
              break;
            case "object":
              switch (a.$$typeof) {
                case l$5:
                case n$6:
                  h = !0;
              }
          }
          if (h) return h = a, c = c(h), a = "" === d ? "." + Q$2(h, 0) : d, I$2(c) ? (e = "", null != a && (e = a.replace(P$2, "$&/") + "/"), R$2(c, b, e, "", function (a) {
            return a;
          })) : null != c && (O$2(c) && (c = N$2(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace(P$2, "$&/") + "/") + a)), b.push(c)), 1;
          h = 0;
          d = "" === d ? "." : d + ":";
          if (I$2(a)) for (var g = 0; g < a.length; g++) {
            k = a[g];
            var f = d + Q$2(k, g);
            h += R$2(k, b, e, f, c);
          } else if (f = A$3(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done;) k = k.value, f = d + Q$2(k, g++), h += R$2(k, b, e, f, c);else if ("object" === k) throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
          return h;
        }
        function S$2(a, b, e) {
          if (null == a) return a;
          var d = [],
            c = 0;
          R$2(a, d, "", "", function (a) {
            return b.call(e, a, c++);
          });
          return d;
        }
        function T$1(a) {
          if (-1 === a._status) {
            var b = a._result;
            b = b();
            b.then(function (b) {
              if (0 === a._status || -1 === a._status) a._status = 1, a._result = b;
            }, function (b) {
              if (0 === a._status || -1 === a._status) a._status = 2, a._result = b;
            });
            -1 === a._status && (a._status = 0, a._result = b);
          }
          if (1 === a._status) return a._result.default;
          throw a._result;
        }
        var U$2 = {
            current: null
          },
          V$1 = {
            transition: null
          },
          W$2 = {
            ReactCurrentDispatcher: U$2,
            ReactCurrentBatchConfig: V$1,
            ReactCurrentOwner: K$1
          };
        react_production_min.Children = {
          map: S$2,
          forEach: function forEach(a, b, e) {
            S$2(a, function () {
              b.apply(this, arguments);
            }, e);
          },
          count: function count(a) {
            var b = 0;
            S$2(a, function () {
              b++;
            });
            return b;
          },
          toArray: function toArray(a) {
            return S$2(a, function (a) {
              return a;
            }) || [];
          },
          only: function only(a) {
            if (!O$2(a)) throw Error("React.Children.only expected to receive a single React element child.");
            return a;
          }
        };
        react_production_min.Component = E$2;
        react_production_min.Fragment = p$7;
        react_production_min.Profiler = r$5;
        react_production_min.PureComponent = G$2;
        react_production_min.StrictMode = q$6;
        react_production_min.Suspense = w$3;
        react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W$2;
        react_production_min.cloneElement = function (a, b, e) {
          if (null === a || void 0 === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
          var d = C$1({}, a.props),
            c = a.key,
            k = a.ref,
            h = a._owner;
          if (null != b) {
            void 0 !== b.ref && (k = b.ref, h = K$1.current);
            void 0 !== b.key && (c = "" + b.key);
            if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
            for (f in b) J.call(b, f) && !L$2.hasOwnProperty(f) && (d[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
          }
          var f = arguments.length - 2;
          if (1 === f) d.children = e;else if (1 < f) {
            g = Array(f);
            for (var m = 0; m < f; m++) g[m] = arguments[m + 2];
            d.children = g;
          }
          return {
            $$typeof: l$5,
            type: a.type,
            key: c,
            ref: k,
            props: d,
            _owner: h
          };
        };
        react_production_min.createContext = function (a) {
          a = {
            $$typeof: u$4,
            _currentValue: a,
            _currentValue2: a,
            _threadCount: 0,
            Provider: null,
            Consumer: null,
            _defaultValue: null,
            _globalName: null
          };
          a.Provider = {
            $$typeof: t$5,
            _context: a
          };
          return a.Consumer = a;
        };
        react_production_min.createElement = M$2;
        react_production_min.createFactory = function (a) {
          var b = M$2.bind(null, a);
          b.type = a;
          return b;
        };
        react_production_min.createRef = function () {
          return {
            current: null
          };
        };
        react_production_min.forwardRef = function (a) {
          return {
            $$typeof: v$5,
            render: a
          };
        };
        react_production_min.isValidElement = O$2;
        react_production_min.lazy = function (a) {
          return {
            $$typeof: y$2,
            _payload: {
              _status: -1,
              _result: a
            },
            _init: T$1
          };
        };
        react_production_min.memo = function (a, b) {
          return {
            $$typeof: x$2,
            type: a,
            compare: void 0 === b ? null : b
          };
        };
        react_production_min.startTransition = function (a) {
          var b = V$1.transition;
          V$1.transition = {};
          try {
            a();
          } finally {
            V$1.transition = b;
          }
        };
        react_production_min.unstable_act = function () {
          throw Error("act(...) is not supported in production builds of React.");
        };
        react_production_min.useCallback = function (a, b) {
          return U$2.current.useCallback(a, b);
        };
        react_production_min.useContext = function (a) {
          return U$2.current.useContext(a);
        };
        react_production_min.useDebugValue = function () {};
        react_production_min.useDeferredValue = function (a) {
          return U$2.current.useDeferredValue(a);
        };
        react_production_min.useEffect = function (a, b) {
          return U$2.current.useEffect(a, b);
        };
        react_production_min.useId = function () {
          return U$2.current.useId();
        };
        react_production_min.useImperativeHandle = function (a, b, e) {
          return U$2.current.useImperativeHandle(a, b, e);
        };
        react_production_min.useInsertionEffect = function (a, b) {
          return U$2.current.useInsertionEffect(a, b);
        };
        react_production_min.useLayoutEffect = function (a, b) {
          return U$2.current.useLayoutEffect(a, b);
        };
        react_production_min.useMemo = function (a, b) {
          return U$2.current.useMemo(a, b);
        };
        react_production_min.useReducer = function (a, b, e) {
          return U$2.current.useReducer(a, b, e);
        };
        react_production_min.useRef = function (a) {
          return U$2.current.useRef(a);
        };
        react_production_min.useState = function (a) {
          return U$2.current.useState(a);
        };
        react_production_min.useSyncExternalStore = function (a, b, e) {
          return U$2.current.useSyncExternalStore(a, b, e);
        };
        react_production_min.useTransition = function () {
          return U$2.current.useTransition();
        };
        react_production_min.version = "18.2.0";
        {
          react.exports = react_production_min;
        }
        var reactExports = exports("r", react.exports);
        const React = exports('R', /*@__PURE__*/getDefaultExportFromCjs(reactExports));
        const React$1 = /*#__PURE__*/_mergeNamespaces({
          __proto__: null,
          default: React
        }, [reactExports]);

        /**
         * @license React
         * react-jsx-runtime.production.min.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        var f$3 = reactExports,
          k$4 = Symbol.for("react.element"),
          l$4 = Symbol.for("react.fragment"),
          m$5 = Object.prototype.hasOwnProperty,
          n$5 = f$3.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,
          p$6 = {
            key: !0,
            ref: !0,
            __self: !0,
            __source: !0
          };
        function q$5(c, a, g) {
          var b,
            d = {},
            e = null,
            h = null;
          void 0 !== g && (e = "" + g);
          void 0 !== a.key && (e = "" + a.key);
          void 0 !== a.ref && (h = a.ref);
          for (b in a) m$5.call(a, b) && !p$6.hasOwnProperty(b) && (d[b] = a[b]);
          if (c && c.defaultProps) for (b in a = c.defaultProps, a) void 0 === d[b] && (d[b] = a[b]);
          return {
            $$typeof: k$4,
            type: c,
            key: e,
            ref: h,
            props: d,
            _owner: n$5.current
          };
        }
        reactJsxRuntime_production_min.Fragment = l$4;
        reactJsxRuntime_production_min.jsx = q$5;
        reactJsxRuntime_production_min.jsxs = q$5;
        {
          jsxRuntime.exports = reactJsxRuntime_production_min;
        }
        var jsxRuntimeExports = exports("j", jsxRuntime.exports);
        function _typeof(obj) {
          "@babel/helpers - typeof";

          return exports("bX", _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
            return typeof obj;
          } : function (obj) {
            return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          }), _typeof(obj);
        }
        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _toPrimitive(input, hint) {
          if (_typeof(input) !== "object" || input === null) return input;
          var prim = input[Symbol.toPrimitive];
          if (prim !== undefined) {
            var res = prim.call(input, hint || "default");
            if (_typeof(res) !== "object") return res;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return (hint === "string" ? String : Number)(input);
        }
        function _toPropertyKey(arg) {
          var key = _toPrimitive(arg, "string");
          return _typeof(key) === "symbol" ? key : String(key);
        }
        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
          }
        }
        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          Object.defineProperty(Constructor, "prototype", {
            writable: false
          });
          return Constructor;
        }
        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return self;
        }
        function _setPrototypeOf(o, p) {
          _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
          };
          return _setPrototypeOf(o, p);
        }
        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              writable: true,
              configurable: true
            }
          });
          Object.defineProperty(subClass, "prototype", {
            writable: false
          });
          if (superClass) _setPrototypeOf(subClass, superClass);
        }
        function _possibleConstructorReturn(self, call) {
          if (call && (_typeof(call) === "object" || typeof call === "function")) {
            return call;
          } else if (call !== void 0) {
            throw new TypeError("Derived constructors may only return object or undefined");
          }
          return _assertThisInitialized(self);
        }
        function _getPrototypeOf(o) {
          exports("cM", _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
          });
          return _getPrototypeOf(o);
        }
        function _defineProperty$5(obj, key, value) {
          key = _toPropertyKey(key);
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function _arrayWithHoles(arr) {
          if (Array.isArray(arr)) return arr;
        }
        function _iterableToArray(iter) {
          if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
        }
        function _arrayLikeToArray(arr, len) {
          if (len == null || len > arr.length) len = arr.length;
          for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
          return arr2;
        }
        function _unsupportedIterableToArray(o, minLen) {
          if (!o) return;
          if (typeof o === "string") return _arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor) n = o.constructor.name;
          if (n === "Map" || n === "Set") return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
        }
        function _nonIterableRest() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        function _toArray(arr) {
          return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
        }
        function ownKeys$2(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly) {
              symbols = symbols.filter(function (sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            }
            keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread$6(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            if (i % 2) {
              ownKeys$2(Object(source), true).forEach(function (key) {
                _defineProperty$5(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys$2(Object(source)).forEach(function (key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }
          return target;
        }
        var consoleLogger = {
          type: 'logger',
          log: function log(args) {
            this.output('log', args);
          },
          warn: function warn(args) {
            this.output('warn', args);
          },
          error: function error(args) {
            this.output('error', args);
          },
          output: function output(type, args) {
            if (console && console[type]) console[type].apply(console, args);
          }
        };
        var Logger = function () {
          function Logger(concreteLogger) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            _classCallCheck(this, Logger);
            this.init(concreteLogger, options);
          }
          _createClass(Logger, [{
            key: "init",
            value: function init(concreteLogger) {
              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
              this.prefix = options.prefix || 'i18next:';
              this.logger = concreteLogger || consoleLogger;
              this.options = options;
              this.debug = options.debug;
            }
          }, {
            key: "setDebug",
            value: function setDebug(bool) {
              this.debug = bool;
            }
          }, {
            key: "log",
            value: function log() {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              return this.forward(args, 'log', '', true);
            }
          }, {
            key: "warn",
            value: function warn() {
              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }
              return this.forward(args, 'warn', '', true);
            }
          }, {
            key: "error",
            value: function error() {
              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
              }
              return this.forward(args, 'error', '');
            }
          }, {
            key: "deprecate",
            value: function deprecate() {
              for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                args[_key4] = arguments[_key4];
              }
              return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);
            }
          }, {
            key: "forward",
            value: function forward(args, lvl, prefix, debugOnly) {
              if (debugOnly && !this.debug) return null;
              if (typeof args[0] === 'string') args[0] = "".concat(prefix).concat(this.prefix, " ").concat(args[0]);
              return this.logger[lvl](args);
            }
          }, {
            key: "create",
            value: function create(moduleName) {
              return new Logger(this.logger, _objectSpread$6(_objectSpread$6({}, {
                prefix: "".concat(this.prefix, ":").concat(moduleName, ":")
              }), this.options));
            }
          }, {
            key: "clone",
            value: function clone(options) {
              options = options || this.options;
              options.prefix = options.prefix || this.prefix;
              return new Logger(this.logger, options);
            }
          }]);
          return Logger;
        }();
        var baseLogger = new Logger();
        var EventEmitter = function () {
          function EventEmitter() {
            _classCallCheck(this, EventEmitter);
            this.observers = {};
          }
          _createClass(EventEmitter, [{
            key: "on",
            value: function on(events, listener) {
              var _this = this;
              events.split(' ').forEach(function (event) {
                _this.observers[event] = _this.observers[event] || [];
                _this.observers[event].push(listener);
              });
              return this;
            }
          }, {
            key: "off",
            value: function off(event, listener) {
              if (!this.observers[event]) return;
              if (!listener) {
                delete this.observers[event];
                return;
              }
              this.observers[event] = this.observers[event].filter(function (l) {
                return l !== listener;
              });
            }
          }, {
            key: "emit",
            value: function emit(event) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              if (this.observers[event]) {
                var cloned = [].concat(this.observers[event]);
                cloned.forEach(function (observer) {
                  observer.apply(void 0, args);
                });
              }
              if (this.observers['*']) {
                var _cloned = [].concat(this.observers['*']);
                _cloned.forEach(function (observer) {
                  observer.apply(observer, [event].concat(args));
                });
              }
            }
          }]);
          return EventEmitter;
        }();
        function defer() {
          var res;
          var rej;
          var promise = new Promise(function (resolve, reject) {
            res = resolve;
            rej = reject;
          });
          promise.resolve = res;
          promise.reject = rej;
          return promise;
        }
        function makeString(object) {
          if (object == null) return '';
          return '' + object;
        }
        function copy$2(a, s, t) {
          a.forEach(function (m) {
            if (s[m]) t[m] = s[m];
          });
        }
        function getLastOfPath(object, path, Empty) {
          function cleanKey(key) {
            return key && key.indexOf('###') > -1 ? key.replace(/###/g, '.') : key;
          }
          function canNotTraverseDeeper() {
            return !object || typeof object === 'string';
          }
          var stack = typeof path !== 'string' ? [].concat(path) : path.split('.');
          while (stack.length > 1) {
            if (canNotTraverseDeeper()) return {};
            var key = cleanKey(stack.shift());
            if (!object[key] && Empty) object[key] = new Empty();
            if (Object.prototype.hasOwnProperty.call(object, key)) {
              object = object[key];
            } else {
              object = {};
            }
          }
          if (canNotTraverseDeeper()) return {};
          return {
            obj: object,
            k: cleanKey(stack.shift())
          };
        }
        function setPath(object, path, newValue) {
          var _getLastOfPath = getLastOfPath(object, path, Object),
            obj = _getLastOfPath.obj,
            k = _getLastOfPath.k;
          obj[k] = newValue;
        }
        function pushPath(object, path, newValue, concat) {
          var _getLastOfPath2 = getLastOfPath(object, path, Object),
            obj = _getLastOfPath2.obj,
            k = _getLastOfPath2.k;
          obj[k] = obj[k] || [];
          if (concat) obj[k] = obj[k].concat(newValue);
          if (!concat) obj[k].push(newValue);
        }
        function getPath$1(object, path) {
          var _getLastOfPath3 = getLastOfPath(object, path),
            obj = _getLastOfPath3.obj,
            k = _getLastOfPath3.k;
          if (!obj) return undefined;
          return obj[k];
        }
        function getPathWithDefaults(data, defaultData, key) {
          var value = getPath$1(data, key);
          if (value !== undefined) {
            return value;
          }
          return getPath$1(defaultData, key);
        }
        function deepExtend(target, source, overwrite) {
          for (var prop in source) {
            if (prop !== '__proto__' && prop !== 'constructor') {
              if (prop in target) {
                if (typeof target[prop] === 'string' || target[prop] instanceof String || typeof source[prop] === 'string' || source[prop] instanceof String) {
                  if (overwrite) target[prop] = source[prop];
                } else {
                  deepExtend(target[prop], source[prop], overwrite);
                }
              } else {
                target[prop] = source[prop];
              }
            }
          }
          return target;
        }
        function regexEscape(str) {
          return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
        }
        var _entityMap = {
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          "'": '&#39;',
          '/': '&#x2F;'
        };
        function escape$1(data) {
          if (typeof data === 'string') {
            return data.replace(/[&<>"'\/]/g, function (s) {
              return _entityMap[s];
            });
          }
          return data;
        }
        var isIE10 = typeof window !== 'undefined' && window.navigator && typeof window.navigator.userAgentData === 'undefined' && window.navigator.userAgent && window.navigator.userAgent.indexOf('MSIE') > -1;
        var chars = [' ', ',', '?', '!', ';'];
        function looksLikeObjectPath(key, nsSeparator, keySeparator) {
          nsSeparator = nsSeparator || '';
          keySeparator = keySeparator || '';
          var possibleChars = chars.filter(function (c) {
            return nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0;
          });
          if (possibleChars.length === 0) return true;
          var r = new RegExp("(".concat(possibleChars.map(function (c) {
            return c === '?' ? '\\?' : c;
          }).join('|'), ")"));
          var matched = !r.test(key);
          if (!matched) {
            var ki = key.indexOf(keySeparator);
            if (ki > 0 && !r.test(key.substring(0, ki))) {
              matched = true;
            }
          }
          return matched;
        }
        function ownKeys$1$1(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly) {
              symbols = symbols.filter(function (sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            }
            keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread$1$1(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            if (i % 2) {
              ownKeys$1$1(Object(source), true).forEach(function (key) {
                _defineProperty$5(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys$1$1(Object(source)).forEach(function (key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }
          return target;
        }
        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
          };
        }
        function _isNativeReflectConstruct() {
          if (typeof Reflect === "undefined" || !Reflect.construct) return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === "function") return true;
          try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
          } catch (e) {
            return false;
          }
        }
        function deepFind(obj, path) {
          var keySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';
          if (!obj) return undefined;
          if (obj[path]) return obj[path];
          var paths = path.split(keySeparator);
          var current = obj;
          for (var i = 0; i < paths.length; ++i) {
            if (!current) return undefined;
            if (typeof current[paths[i]] === 'string' && i + 1 < paths.length) {
              return undefined;
            }
            if (current[paths[i]] === undefined) {
              var j = 2;
              var p = paths.slice(i, i + j).join(keySeparator);
              var mix = current[p];
              while (mix === undefined && paths.length > i + j) {
                j++;
                p = paths.slice(i, i + j).join(keySeparator);
                mix = current[p];
              }
              if (mix === undefined) return undefined;
              if (mix === null) return null;
              if (path.endsWith(p)) {
                if (typeof mix === 'string') return mix;
                if (p && typeof mix[p] === 'string') return mix[p];
              }
              var joinedPath = paths.slice(i + j).join(keySeparator);
              if (joinedPath) return deepFind(mix, joinedPath, keySeparator);
              return undefined;
            }
            current = current[paths[i]];
          }
          return current;
        }
        var ResourceStore = function (_EventEmitter) {
          _inherits(ResourceStore, _EventEmitter);
          var _super = _createSuper(ResourceStore);
          function ResourceStore(data) {
            var _this;
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
              ns: ['translation'],
              defaultNS: 'translation'
            };
            _classCallCheck(this, ResourceStore);
            _this = _super.call(this);
            if (isIE10) {
              EventEmitter.call(_assertThisInitialized(_this));
            }
            _this.data = data || {};
            _this.options = options;
            if (_this.options.keySeparator === undefined) {
              _this.options.keySeparator = '.';
            }
            if (_this.options.ignoreJSONStructure === undefined) {
              _this.options.ignoreJSONStructure = true;
            }
            return _this;
          }
          _createClass(ResourceStore, [{
            key: "addNamespaces",
            value: function addNamespaces(ns) {
              if (this.options.ns.indexOf(ns) < 0) {
                this.options.ns.push(ns);
              }
            }
          }, {
            key: "removeNamespaces",
            value: function removeNamespaces(ns) {
              var index = this.options.ns.indexOf(ns);
              if (index > -1) {
                this.options.ns.splice(index, 1);
              }
            }
          }, {
            key: "getResource",
            value: function getResource(lng, ns, key) {
              var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
              var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
              var ignoreJSONStructure = options.ignoreJSONStructure !== undefined ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;
              var path = [lng, ns];
              if (key && typeof key !== 'string') path = path.concat(key);
              if (key && typeof key === 'string') path = path.concat(keySeparator ? key.split(keySeparator) : key);
              if (lng.indexOf('.') > -1) {
                path = lng.split('.');
              }
              var result = getPath$1(this.data, path);
              if (result || !ignoreJSONStructure || typeof key !== 'string') return result;
              return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);
            }
          }, {
            key: "addResource",
            value: function addResource(lng, ns, key, value) {
              var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
                silent: false
              };
              var keySeparator = this.options.keySeparator;
              if (keySeparator === undefined) keySeparator = '.';
              var path = [lng, ns];
              if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);
              if (lng.indexOf('.') > -1) {
                path = lng.split('.');
                value = ns;
                ns = path[1];
              }
              this.addNamespaces(ns);
              setPath(this.data, path, value);
              if (!options.silent) this.emit('added', lng, ns, key, value);
            }
          }, {
            key: "addResources",
            value: function addResources(lng, ns, resources) {
              var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
                silent: false
              };
              for (var m in resources) {
                if (typeof resources[m] === 'string' || Object.prototype.toString.apply(resources[m]) === '[object Array]') this.addResource(lng, ns, m, resources[m], {
                  silent: true
                });
              }
              if (!options.silent) this.emit('added', lng, ns, resources);
            }
          }, {
            key: "addResourceBundle",
            value: function addResourceBundle(lng, ns, resources, deep, overwrite) {
              var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {
                silent: false
              };
              var path = [lng, ns];
              if (lng.indexOf('.') > -1) {
                path = lng.split('.');
                deep = resources;
                resources = ns;
                ns = path[1];
              }
              this.addNamespaces(ns);
              var pack = getPath$1(this.data, path) || {};
              if (deep) {
                deepExtend(pack, resources, overwrite);
              } else {
                pack = _objectSpread$1$1(_objectSpread$1$1({}, pack), resources);
              }
              setPath(this.data, path, pack);
              if (!options.silent) this.emit('added', lng, ns, resources);
            }
          }, {
            key: "removeResourceBundle",
            value: function removeResourceBundle(lng, ns) {
              if (this.hasResourceBundle(lng, ns)) {
                delete this.data[lng][ns];
              }
              this.removeNamespaces(ns);
              this.emit('removed', lng, ns);
            }
          }, {
            key: "hasResourceBundle",
            value: function hasResourceBundle(lng, ns) {
              return this.getResource(lng, ns) !== undefined;
            }
          }, {
            key: "getResourceBundle",
            value: function getResourceBundle(lng, ns) {
              if (!ns) ns = this.options.defaultNS;
              if (this.options.compatibilityAPI === 'v1') return _objectSpread$1$1(_objectSpread$1$1({}, {}), this.getResource(lng, ns));
              return this.getResource(lng, ns);
            }
          }, {
            key: "getDataByLanguage",
            value: function getDataByLanguage(lng) {
              return this.data[lng];
            }
          }, {
            key: "hasLanguageSomeTranslations",
            value: function hasLanguageSomeTranslations(lng) {
              var data = this.getDataByLanguage(lng);
              var n = data && Object.keys(data) || [];
              return !!n.find(function (v) {
                return data[v] && Object.keys(data[v]).length > 0;
              });
            }
          }, {
            key: "toJSON",
            value: function toJSON() {
              return this.data;
            }
          }]);
          return ResourceStore;
        }(EventEmitter);
        var postProcessor = {
          processors: {},
          addPostProcessor: function addPostProcessor(module) {
            this.processors[module.name] = module;
          },
          handle: function handle(processors, value, key, options, translator) {
            var _this = this;
            processors.forEach(function (processor) {
              if (_this.processors[processor]) value = _this.processors[processor].process(value, key, options, translator);
            });
            return value;
          }
        };
        function ownKeys$2$1(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly) {
              symbols = symbols.filter(function (sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            }
            keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread$2$1(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            if (i % 2) {
              ownKeys$2$1(Object(source), true).forEach(function (key) {
                _defineProperty$5(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys$2$1(Object(source)).forEach(function (key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }
          return target;
        }
        function _createSuper$1(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
          };
        }
        function _isNativeReflectConstruct$1() {
          if (typeof Reflect === "undefined" || !Reflect.construct) return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === "function") return true;
          try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
          } catch (e) {
            return false;
          }
        }
        var checkedLoadedFor = {};
        var Translator = function (_EventEmitter) {
          _inherits(Translator, _EventEmitter);
          var _super = _createSuper$1(Translator);
          function Translator(services) {
            var _this;
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            _classCallCheck(this, Translator);
            _this = _super.call(this);
            if (isIE10) {
              EventEmitter.call(_assertThisInitialized(_this));
            }
            copy$2(['resourceStore', 'languageUtils', 'pluralResolver', 'interpolator', 'backendConnector', 'i18nFormat', 'utils'], services, _assertThisInitialized(_this));
            _this.options = options;
            if (_this.options.keySeparator === undefined) {
              _this.options.keySeparator = '.';
            }
            _this.logger = baseLogger.create('translator');
            return _this;
          }
          _createClass(Translator, [{
            key: "changeLanguage",
            value: function changeLanguage(lng) {
              if (lng) this.language = lng;
            }
          }, {
            key: "exists",
            value: function exists(key) {
              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                interpolation: {}
              };
              if (key === undefined || key === null) {
                return false;
              }
              var resolved = this.resolve(key, options);
              return resolved && resolved.res !== undefined;
            }
          }, {
            key: "extractFromKey",
            value: function extractFromKey(key, options) {
              var nsSeparator = options.nsSeparator !== undefined ? options.nsSeparator : this.options.nsSeparator;
              if (nsSeparator === undefined) nsSeparator = ':';
              var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
              var namespaces = options.ns || this.options.defaultNS || [];
              var wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
              var seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !this.options.userDefinedNsSeparator && !options.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);
              if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
                var m = key.match(this.interpolator.nestingRegexp);
                if (m && m.length > 0) {
                  return {
                    key: key,
                    namespaces: namespaces
                  };
                }
                var parts = key.split(nsSeparator);
                if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
                key = parts.join(keySeparator);
              }
              if (typeof namespaces === 'string') namespaces = [namespaces];
              return {
                key: key,
                namespaces: namespaces
              };
            }
          }, {
            key: "translate",
            value: function translate(keys, options, lastKey) {
              var _this2 = this;
              if (_typeof(options) !== 'object' && this.options.overloadTranslationOptionHandler) {
                options = this.options.overloadTranslationOptionHandler(arguments);
              }
              if (!options) options = {};
              if (keys === undefined || keys === null) return '';
              if (!Array.isArray(keys)) keys = [String(keys)];
              var returnDetails = options.returnDetails !== undefined ? options.returnDetails : this.options.returnDetails;
              var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
              var _this$extractFromKey = this.extractFromKey(keys[keys.length - 1], options),
                key = _this$extractFromKey.key,
                namespaces = _this$extractFromKey.namespaces;
              var namespace = namespaces[namespaces.length - 1];
              var lng = options.lng || this.language;
              var appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
              if (lng && lng.toLowerCase() === 'cimode') {
                if (appendNamespaceToCIMode) {
                  var nsSeparator = options.nsSeparator || this.options.nsSeparator;
                  if (returnDetails) {
                    resolved.res = "".concat(namespace).concat(nsSeparator).concat(key);
                    return resolved;
                  }
                  return "".concat(namespace).concat(nsSeparator).concat(key);
                }
                if (returnDetails) {
                  resolved.res = key;
                  return resolved;
                }
                return key;
              }
              var resolved = this.resolve(keys, options);
              var res = resolved && resolved.res;
              var resUsedKey = resolved && resolved.usedKey || key;
              var resExactUsedKey = resolved && resolved.exactUsedKey || key;
              var resType = Object.prototype.toString.apply(res);
              var noObject = ['[object Number]', '[object Function]', '[object RegExp]'];
              var joinArrays = options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;
              var handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
              var handleAsObject = typeof res !== 'string' && typeof res !== 'boolean' && typeof res !== 'number';
              if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === 'string' && resType === '[object Array]')) {
                if (!options.returnObjects && !this.options.returnObjects) {
                  if (!this.options.returnedObjectHandler) {
                    this.logger.warn('accessing an object - but returnObjects options is not enabled!');
                  }
                  var r = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, _objectSpread$2$1(_objectSpread$2$1({}, options), {}, {
                    ns: namespaces
                  })) : "key '".concat(key, " (").concat(this.language, ")' returned an object instead of string.");
                  if (returnDetails) {
                    resolved.res = r;
                    return resolved;
                  }
                  return r;
                }
                if (keySeparator) {
                  var resTypeIsArray = resType === '[object Array]';
                  var copy = resTypeIsArray ? [] : {};
                  var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
                  for (var m in res) {
                    if (Object.prototype.hasOwnProperty.call(res, m)) {
                      var deepKey = "".concat(newKeyToUse).concat(keySeparator).concat(m);
                      copy[m] = this.translate(deepKey, _objectSpread$2$1(_objectSpread$2$1({}, options), {
                        joinArrays: false,
                        ns: namespaces
                      }));
                      if (copy[m] === deepKey) copy[m] = res[m];
                    }
                  }
                  res = copy;
                }
              } else if (handleAsObjectInI18nFormat && typeof joinArrays === 'string' && resType === '[object Array]') {
                res = res.join(joinArrays);
                if (res) res = this.extendTranslation(res, keys, options, lastKey);
              } else {
                var usedDefault = false;
                var usedKey = false;
                var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
                var hasDefaultValue = Translator.hasDefaultValue(options);
                var defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : '';
                var defaultValue = options["defaultValue".concat(defaultValueSuffix)] || options.defaultValue;
                if (!this.isValidLookup(res) && hasDefaultValue) {
                  usedDefault = true;
                  res = defaultValue;
                }
                if (!this.isValidLookup(res)) {
                  usedKey = true;
                  res = key;
                }
                var missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
                var resForMissing = missingKeyNoValueFallbackToKey && usedKey ? undefined : res;
                var updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
                if (usedKey || usedDefault || updateMissing) {
                  this.logger.log(updateMissing ? 'updateKey' : 'missingKey', lng, namespace, key, updateMissing ? defaultValue : res);
                  if (keySeparator) {
                    var fk = this.resolve(key, _objectSpread$2$1(_objectSpread$2$1({}, options), {}, {
                      keySeparator: false
                    }));
                    if (fk && fk.res) this.logger.warn('Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.');
                  }
                  var lngs = [];
                  var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
                  if (this.options.saveMissingTo === 'fallback' && fallbackLngs && fallbackLngs[0]) {
                    for (var i = 0; i < fallbackLngs.length; i++) {
                      lngs.push(fallbackLngs[i]);
                    }
                  } else if (this.options.saveMissingTo === 'all') {
                    lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
                  } else {
                    lngs.push(options.lng || this.language);
                  }
                  var send = function send(l, k, specificDefaultValue) {
                    var defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;
                    if (_this2.options.missingKeyHandler) {
                      _this2.options.missingKeyHandler(l, namespace, k, defaultForMissing, updateMissing, options);
                    } else if (_this2.backendConnector && _this2.backendConnector.saveMissing) {
                      _this2.backendConnector.saveMissing(l, namespace, k, defaultForMissing, updateMissing, options);
                    }
                    _this2.emit('missingKey', l, namespace, k, res);
                  };
                  if (this.options.saveMissing) {
                    if (this.options.saveMissingPlurals && needsPluralHandling) {
                      lngs.forEach(function (language) {
                        _this2.pluralResolver.getSuffixes(language, options).forEach(function (suffix) {
                          send([language], key + suffix, options["defaultValue".concat(suffix)] || defaultValue);
                        });
                      });
                    } else {
                      send(lngs, key, defaultValue);
                    }
                  }
                }
                res = this.extendTranslation(res, keys, options, resolved, lastKey);
                if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = "".concat(namespace, ":").concat(key);
                if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
                  if (this.options.compatibilityAPI !== 'v1') {
                    res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? "".concat(namespace, ":").concat(key) : key, usedDefault ? res : undefined);
                  } else {
                    res = this.options.parseMissingKeyHandler(res);
                  }
                }
              }
              if (returnDetails) {
                resolved.res = res;
                return resolved;
              }
              return res;
            }
          }, {
            key: "extendTranslation",
            value: function extendTranslation(res, key, options, resolved, lastKey) {
              var _this3 = this;
              if (this.i18nFormat && this.i18nFormat.parse) {
                res = this.i18nFormat.parse(res, _objectSpread$2$1(_objectSpread$2$1({}, this.options.interpolation.defaultVariables), options), resolved.usedLng, resolved.usedNS, resolved.usedKey, {
                  resolved: resolved
                });
              } else if (!options.skipInterpolation) {
                if (options.interpolation) this.interpolator.init(_objectSpread$2$1(_objectSpread$2$1({}, options), {
                  interpolation: _objectSpread$2$1(_objectSpread$2$1({}, this.options.interpolation), options.interpolation)
                }));
                var skipOnVariables = typeof res === 'string' && (options && options.interpolation && options.interpolation.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
                var nestBef;
                if (skipOnVariables) {
                  var nb = res.match(this.interpolator.nestingRegexp);
                  nestBef = nb && nb.length;
                }
                var data = options.replace && typeof options.replace !== 'string' ? options.replace : options;
                if (this.options.interpolation.defaultVariables) data = _objectSpread$2$1(_objectSpread$2$1({}, this.options.interpolation.defaultVariables), data);
                res = this.interpolator.interpolate(res, data, options.lng || this.language, options);
                if (skipOnVariables) {
                  var na = res.match(this.interpolator.nestingRegexp);
                  var nestAft = na && na.length;
                  if (nestBef < nestAft) options.nest = false;
                }
                if (options.nest !== false) res = this.interpolator.nest(res, function () {
                  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                  }
                  if (lastKey && lastKey[0] === args[0] && !options.context) {
                    _this3.logger.warn("It seems you are nesting recursively key: ".concat(args[0], " in key: ").concat(key[0]));
                    return null;
                  }
                  return _this3.translate.apply(_this3, args.concat([key]));
                }, options);
                if (options.interpolation) this.interpolator.reset();
              }
              var postProcess = options.postProcess || this.options.postProcess;
              var postProcessorNames = typeof postProcess === 'string' ? [postProcess] : postProcess;
              if (res !== undefined && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
                res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? _objectSpread$2$1({
                  i18nResolved: resolved
                }, options) : options, this);
              }
              return res;
            }
          }, {
            key: "resolve",
            value: function resolve(keys) {
              var _this4 = this;
              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
              var found;
              var usedKey;
              var exactUsedKey;
              var usedLng;
              var usedNS;
              if (typeof keys === 'string') keys = [keys];
              keys.forEach(function (k) {
                if (_this4.isValidLookup(found)) return;
                var extracted = _this4.extractFromKey(k, options);
                var key = extracted.key;
                usedKey = key;
                var namespaces = extracted.namespaces;
                if (_this4.options.fallbackNS) namespaces = namespaces.concat(_this4.options.fallbackNS);
                var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
                var needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && _this4.pluralResolver.shouldUseIntlApi();
                var needsContextHandling = options.context !== undefined && (typeof options.context === 'string' || typeof options.context === 'number') && options.context !== '';
                var codes = options.lngs ? options.lngs : _this4.languageUtils.toResolveHierarchy(options.lng || _this4.language, options.fallbackLng);
                namespaces.forEach(function (ns) {
                  if (_this4.isValidLookup(found)) return;
                  usedNS = ns;
                  if (!checkedLoadedFor["".concat(codes[0], "-").concat(ns)] && _this4.utils && _this4.utils.hasLoadedNamespace && !_this4.utils.hasLoadedNamespace(usedNS)) {
                    checkedLoadedFor["".concat(codes[0], "-").concat(ns)] = true;
                    _this4.logger.warn("key \"".concat(usedKey, "\" for languages \"").concat(codes.join(', '), "\" won't get resolved as namespace \"").concat(usedNS, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
                  }
                  codes.forEach(function (code) {
                    if (_this4.isValidLookup(found)) return;
                    usedLng = code;
                    var finalKeys = [key];
                    if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {
                      _this4.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
                    } else {
                      var pluralSuffix;
                      if (needsPluralHandling) pluralSuffix = _this4.pluralResolver.getSuffix(code, options.count, options);
                      var zeroSuffix = "".concat(_this4.options.pluralSeparator, "zero");
                      if (needsPluralHandling) {
                        finalKeys.push(key + pluralSuffix);
                        if (needsZeroSuffixLookup) {
                          finalKeys.push(key + zeroSuffix);
                        }
                      }
                      if (needsContextHandling) {
                        var contextKey = "".concat(key).concat(_this4.options.contextSeparator).concat(options.context);
                        finalKeys.push(contextKey);
                        if (needsPluralHandling) {
                          finalKeys.push(contextKey + pluralSuffix);
                          if (needsZeroSuffixLookup) {
                            finalKeys.push(contextKey + zeroSuffix);
                          }
                        }
                      }
                    }
                    var possibleKey;
                    while (possibleKey = finalKeys.pop()) {
                      if (!_this4.isValidLookup(found)) {
                        exactUsedKey = possibleKey;
                        found = _this4.getResource(code, ns, possibleKey, options);
                      }
                    }
                  });
                });
              });
              return {
                res: found,
                usedKey: usedKey,
                exactUsedKey: exactUsedKey,
                usedLng: usedLng,
                usedNS: usedNS
              };
            }
          }, {
            key: "isValidLookup",
            value: function isValidLookup(res) {
              return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === '');
            }
          }, {
            key: "getResource",
            value: function getResource(code, ns, key) {
              var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
              if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns, key, options);
              return this.resourceStore.getResource(code, ns, key, options);
            }
          }], [{
            key: "hasDefaultValue",
            value: function hasDefaultValue(options) {
              var prefix = 'defaultValue';
              for (var option in options) {
                if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && undefined !== options[option]) {
                  return true;
                }
              }
              return false;
            }
          }]);
          return Translator;
        }(EventEmitter);
        function capitalize$1(string) {
          return string.charAt(0).toUpperCase() + string.slice(1);
        }
        var LanguageUtil = function () {
          function LanguageUtil(options) {
            _classCallCheck(this, LanguageUtil);
            this.options = options;
            this.supportedLngs = this.options.supportedLngs || false;
            this.logger = baseLogger.create('languageUtils');
          }
          _createClass(LanguageUtil, [{
            key: "getScriptPartFromCode",
            value: function getScriptPartFromCode(code) {
              if (!code || code.indexOf('-') < 0) return null;
              var p = code.split('-');
              if (p.length === 2) return null;
              p.pop();
              if (p[p.length - 1].toLowerCase() === 'x') return null;
              return this.formatLanguageCode(p.join('-'));
            }
          }, {
            key: "getLanguagePartFromCode",
            value: function getLanguagePartFromCode(code) {
              if (!code || code.indexOf('-') < 0) return code;
              var p = code.split('-');
              return this.formatLanguageCode(p[0]);
            }
          }, {
            key: "formatLanguageCode",
            value: function formatLanguageCode(code) {
              if (typeof code === 'string' && code.indexOf('-') > -1) {
                var specialCases = ['hans', 'hant', 'latn', 'cyrl', 'cans', 'mong', 'arab'];
                var p = code.split('-');
                if (this.options.lowerCaseLng) {
                  p = p.map(function (part) {
                    return part.toLowerCase();
                  });
                } else if (p.length === 2) {
                  p[0] = p[0].toLowerCase();
                  p[1] = p[1].toUpperCase();
                  if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize$1(p[1].toLowerCase());
                } else if (p.length === 3) {
                  p[0] = p[0].toLowerCase();
                  if (p[1].length === 2) p[1] = p[1].toUpperCase();
                  if (p[0] !== 'sgn' && p[2].length === 2) p[2] = p[2].toUpperCase();
                  if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize$1(p[1].toLowerCase());
                  if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize$1(p[2].toLowerCase());
                }
                return p.join('-');
              }
              return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
            }
          }, {
            key: "isSupportedCode",
            value: function isSupportedCode(code) {
              if (this.options.load === 'languageOnly' || this.options.nonExplicitSupportedLngs) {
                code = this.getLanguagePartFromCode(code);
              }
              return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
            }
          }, {
            key: "getBestMatchFromCodes",
            value: function getBestMatchFromCodes(codes) {
              var _this = this;
              if (!codes) return null;
              var found;
              codes.forEach(function (code) {
                if (found) return;
                var cleanedLng = _this.formatLanguageCode(code);
                if (!_this.options.supportedLngs || _this.isSupportedCode(cleanedLng)) found = cleanedLng;
              });
              if (!found && this.options.supportedLngs) {
                codes.forEach(function (code) {
                  if (found) return;
                  var lngOnly = _this.getLanguagePartFromCode(code);
                  if (_this.isSupportedCode(lngOnly)) return found = lngOnly;
                  found = _this.options.supportedLngs.find(function (supportedLng) {
                    if (supportedLng.indexOf(lngOnly) === 0) return supportedLng;
                  });
                });
              }
              if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
              return found;
            }
          }, {
            key: "getFallbackCodes",
            value: function getFallbackCodes(fallbacks, code) {
              if (!fallbacks) return [];
              if (typeof fallbacks === 'function') fallbacks = fallbacks(code);
              if (typeof fallbacks === 'string') fallbacks = [fallbacks];
              if (Object.prototype.toString.apply(fallbacks) === '[object Array]') return fallbacks;
              if (!code) return fallbacks["default"] || [];
              var found = fallbacks[code];
              if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
              if (!found) found = fallbacks[this.formatLanguageCode(code)];
              if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];
              if (!found) found = fallbacks["default"];
              return found || [];
            }
          }, {
            key: "toResolveHierarchy",
            value: function toResolveHierarchy(code, fallbackCode) {
              var _this2 = this;
              var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
              var codes = [];
              var addCode = function addCode(c) {
                if (!c) return;
                if (_this2.isSupportedCode(c)) {
                  codes.push(c);
                } else {
                  _this2.logger.warn("rejecting language code not found in supportedLngs: ".concat(c));
                }
              };
              if (typeof code === 'string' && code.indexOf('-') > -1) {
                if (this.options.load !== 'languageOnly') addCode(this.formatLanguageCode(code));
                if (this.options.load !== 'languageOnly' && this.options.load !== 'currentOnly') addCode(this.getScriptPartFromCode(code));
                if (this.options.load !== 'currentOnly') addCode(this.getLanguagePartFromCode(code));
              } else if (typeof code === 'string') {
                addCode(this.formatLanguageCode(code));
              }
              fallbackCodes.forEach(function (fc) {
                if (codes.indexOf(fc) < 0) addCode(_this2.formatLanguageCode(fc));
              });
              return codes;
            }
          }]);
          return LanguageUtil;
        }();
        var sets = [{
          lngs: ['ach', 'ak', 'am', 'arn', 'br', 'fil', 'gun', 'ln', 'mfe', 'mg', 'mi', 'oc', 'pt', 'pt-BR', 'tg', 'tl', 'ti', 'tr', 'uz', 'wa'],
          nr: [1, 2],
          fc: 1
        }, {
          lngs: ['af', 'an', 'ast', 'az', 'bg', 'bn', 'ca', 'da', 'de', 'dev', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fi', 'fo', 'fur', 'fy', 'gl', 'gu', 'ha', 'hi', 'hu', 'hy', 'ia', 'it', 'kk', 'kn', 'ku', 'lb', 'mai', 'ml', 'mn', 'mr', 'nah', 'nap', 'nb', 'ne', 'nl', 'nn', 'no', 'nso', 'pa', 'pap', 'pms', 'ps', 'pt-PT', 'rm', 'sco', 'se', 'si', 'so', 'son', 'sq', 'sv', 'sw', 'ta', 'te', 'tk', 'ur', 'yo'],
          nr: [1, 2],
          fc: 2
        }, {
          lngs: ['ay', 'bo', 'cgg', 'fa', 'ht', 'id', 'ja', 'jbo', 'ka', 'km', 'ko', 'ky', 'lo', 'ms', 'sah', 'su', 'th', 'tt', 'ug', 'vi', 'wo', 'zh'],
          nr: [1],
          fc: 3
        }, {
          lngs: ['be', 'bs', 'cnr', 'dz', 'hr', 'ru', 'sr', 'uk'],
          nr: [1, 2, 5],
          fc: 4
        }, {
          lngs: ['ar'],
          nr: [0, 1, 2, 3, 11, 100],
          fc: 5
        }, {
          lngs: ['cs', 'sk'],
          nr: [1, 2, 5],
          fc: 6
        }, {
          lngs: ['csb', 'pl'],
          nr: [1, 2, 5],
          fc: 7
        }, {
          lngs: ['cy'],
          nr: [1, 2, 3, 8],
          fc: 8
        }, {
          lngs: ['fr'],
          nr: [1, 2],
          fc: 9
        }, {
          lngs: ['ga'],
          nr: [1, 2, 3, 7, 11],
          fc: 10
        }, {
          lngs: ['gd'],
          nr: [1, 2, 3, 20],
          fc: 11
        }, {
          lngs: ['is'],
          nr: [1, 2],
          fc: 12
        }, {
          lngs: ['jv'],
          nr: [0, 1],
          fc: 13
        }, {
          lngs: ['kw'],
          nr: [1, 2, 3, 4],
          fc: 14
        }, {
          lngs: ['lt'],
          nr: [1, 2, 10],
          fc: 15
        }, {
          lngs: ['lv'],
          nr: [1, 2, 0],
          fc: 16
        }, {
          lngs: ['mk'],
          nr: [1, 2],
          fc: 17
        }, {
          lngs: ['mnk'],
          nr: [0, 1, 2],
          fc: 18
        }, {
          lngs: ['mt'],
          nr: [1, 2, 11, 20],
          fc: 19
        }, {
          lngs: ['or'],
          nr: [2, 1],
          fc: 2
        }, {
          lngs: ['ro'],
          nr: [1, 2, 20],
          fc: 20
        }, {
          lngs: ['sl'],
          nr: [5, 1, 2, 3],
          fc: 21
        }, {
          lngs: ['he', 'iw'],
          nr: [1, 2, 20, 21],
          fc: 22
        }];
        var _rulesPluralsTypes = {
          1: function _(n) {
            return Number(n > 1);
          },
          2: function _(n) {
            return Number(n != 1);
          },
          3: function _(n) {
            return 0;
          },
          4: function _(n) {
            return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
          },
          5: function _(n) {
            return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
          },
          6: function _(n) {
            return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
          },
          7: function _(n) {
            return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
          },
          8: function _(n) {
            return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
          },
          9: function _(n) {
            return Number(n >= 2);
          },
          10: function _(n) {
            return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
          },
          11: function _(n) {
            return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
          },
          12: function _(n) {
            return Number(n % 10 != 1 || n % 100 == 11);
          },
          13: function _(n) {
            return Number(n !== 0);
          },
          14: function _(n) {
            return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
          },
          15: function _(n) {
            return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
          },
          16: function _(n) {
            return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
          },
          17: function _(n) {
            return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);
          },
          18: function _(n) {
            return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
          },
          19: function _(n) {
            return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
          },
          20: function _(n) {
            return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
          },
          21: function _(n) {
            return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
          },
          22: function _(n) {
            return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);
          }
        };
        var deprecatedJsonVersions = ['v1', 'v2', 'v3'];
        var suffixesOrder = {
          zero: 0,
          one: 1,
          two: 2,
          few: 3,
          many: 4,
          other: 5
        };
        function createRules() {
          var rules = {};
          sets.forEach(function (set) {
            set.lngs.forEach(function (l) {
              rules[l] = {
                numbers: set.nr,
                plurals: _rulesPluralsTypes[set.fc]
              };
            });
          });
          return rules;
        }
        var PluralResolver = function () {
          function PluralResolver(languageUtils) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            _classCallCheck(this, PluralResolver);
            this.languageUtils = languageUtils;
            this.options = options;
            this.logger = baseLogger.create('pluralResolver');
            if ((!this.options.compatibilityJSON || this.options.compatibilityJSON === 'v4') && (typeof Intl === 'undefined' || !Intl.PluralRules)) {
              this.options.compatibilityJSON = 'v3';
              this.logger.error('Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.');
            }
            this.rules = createRules();
          }
          _createClass(PluralResolver, [{
            key: "addRule",
            value: function addRule(lng, obj) {
              this.rules[lng] = obj;
            }
          }, {
            key: "getRule",
            value: function getRule(code) {
              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
              if (this.shouldUseIntlApi()) {
                try {
                  return new Intl.PluralRules(code, {
                    type: options.ordinal ? 'ordinal' : 'cardinal'
                  });
                } catch (_unused) {
                  return;
                }
              }
              return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
            }
          }, {
            key: "needsPlural",
            value: function needsPlural(code) {
              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
              var rule = this.getRule(code, options);
              if (this.shouldUseIntlApi()) {
                return rule && rule.resolvedOptions().pluralCategories.length > 1;
              }
              return rule && rule.numbers.length > 1;
            }
          }, {
            key: "getPluralFormsOfKey",
            value: function getPluralFormsOfKey(code, key) {
              var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
              return this.getSuffixes(code, options).map(function (suffix) {
                return "".concat(key).concat(suffix);
              });
            }
          }, {
            key: "getSuffixes",
            value: function getSuffixes(code) {
              var _this = this;
              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
              var rule = this.getRule(code, options);
              if (!rule) {
                return [];
              }
              if (this.shouldUseIntlApi()) {
                return rule.resolvedOptions().pluralCategories.sort(function (pluralCategory1, pluralCategory2) {
                  return suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2];
                }).map(function (pluralCategory) {
                  return "".concat(_this.options.prepend).concat(pluralCategory);
                });
              }
              return rule.numbers.map(function (number) {
                return _this.getSuffix(code, number, options);
              });
            }
          }, {
            key: "getSuffix",
            value: function getSuffix(code, count) {
              var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
              var rule = this.getRule(code, options);
              if (rule) {
                if (this.shouldUseIntlApi()) {
                  return "".concat(this.options.prepend).concat(rule.select(count));
                }
                return this.getSuffixRetroCompatible(rule, count);
              }
              this.logger.warn("no plural rule found for: ".concat(code));
              return '';
            }
          }, {
            key: "getSuffixRetroCompatible",
            value: function getSuffixRetroCompatible(rule, count) {
              var _this2 = this;
              var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
              var suffix = rule.numbers[idx];
              if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
                if (suffix === 2) {
                  suffix = 'plural';
                } else if (suffix === 1) {
                  suffix = '';
                }
              }
              var returnSuffix = function returnSuffix() {
                return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();
              };
              if (this.options.compatibilityJSON === 'v1') {
                if (suffix === 1) return '';
                if (typeof suffix === 'number') return "_plural_".concat(suffix.toString());
                return returnSuffix();
              } else if (this.options.compatibilityJSON === 'v2') {
                return returnSuffix();
              } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
                return returnSuffix();
              }
              return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
            }
          }, {
            key: "shouldUseIntlApi",
            value: function shouldUseIntlApi() {
              return !deprecatedJsonVersions.includes(this.options.compatibilityJSON);
            }
          }]);
          return PluralResolver;
        }();
        function ownKeys$3(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly) {
              symbols = symbols.filter(function (sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            }
            keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread$3$1(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            if (i % 2) {
              ownKeys$3(Object(source), true).forEach(function (key) {
                _defineProperty$5(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys$3(Object(source)).forEach(function (key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }
          return target;
        }
        var Interpolator = function () {
          function Interpolator() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            _classCallCheck(this, Interpolator);
            this.logger = baseLogger.create('interpolator');
            this.options = options;
            this.format = options.interpolation && options.interpolation.format || function (value) {
              return value;
            };
            this.init(options);
          }
          _createClass(Interpolator, [{
            key: "init",
            value: function init() {
              var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
              if (!options.interpolation) options.interpolation = {
                escapeValue: true
              };
              var iOpts = options.interpolation;
              this.escape = iOpts.escape !== undefined ? iOpts.escape : escape$1;
              this.escapeValue = iOpts.escapeValue !== undefined ? iOpts.escapeValue : true;
              this.useRawValueToEscape = iOpts.useRawValueToEscape !== undefined ? iOpts.useRawValueToEscape : false;
              this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || '{{';
              this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || '}}';
              this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ',';
              this.unescapePrefix = iOpts.unescapeSuffix ? '' : iOpts.unescapePrefix || '-';
              this.unescapeSuffix = this.unescapePrefix ? '' : iOpts.unescapeSuffix || '';
              this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape('$t(');
              this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(')');
              this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ',';
              this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1000;
              this.alwaysFormat = iOpts.alwaysFormat !== undefined ? iOpts.alwaysFormat : false;
              this.resetRegExp();
            }
          }, {
            key: "reset",
            value: function reset() {
              if (this.options) this.init(this.options);
            }
          }, {
            key: "resetRegExp",
            value: function resetRegExp() {
              var regexpStr = "".concat(this.prefix, "(.+?)").concat(this.suffix);
              this.regexp = new RegExp(regexpStr, 'g');
              var regexpUnescapeStr = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix);
              this.regexpUnescape = new RegExp(regexpUnescapeStr, 'g');
              var nestingRegexpStr = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix);
              this.nestingRegexp = new RegExp(nestingRegexpStr, 'g');
            }
          }, {
            key: "interpolate",
            value: function interpolate(str, data, lng, options) {
              var _this = this;
              var match;
              var value;
              var replaces;
              var defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
              function regexSafe(val) {
                return val.replace(/\$/g, '$$$$');
              }
              var handleFormat = function handleFormat(key) {
                if (key.indexOf(_this.formatSeparator) < 0) {
                  var path = getPathWithDefaults(data, defaultData, key);
                  return _this.alwaysFormat ? _this.format(path, undefined, lng, _objectSpread$3$1(_objectSpread$3$1(_objectSpread$3$1({}, options), data), {}, {
                    interpolationkey: key
                  })) : path;
                }
                var p = key.split(_this.formatSeparator);
                var k = p.shift().trim();
                var f = p.join(_this.formatSeparator).trim();
                return _this.format(getPathWithDefaults(data, defaultData, k), f, lng, _objectSpread$3$1(_objectSpread$3$1(_objectSpread$3$1({}, options), data), {}, {
                  interpolationkey: k
                }));
              };
              this.resetRegExp();
              var missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
              var skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
              var todos = [{
                regex: this.regexpUnescape,
                safeValue: function safeValue(val) {
                  return regexSafe(val);
                }
              }, {
                regex: this.regexp,
                safeValue: function safeValue(val) {
                  return _this.escapeValue ? regexSafe(_this.escape(val)) : regexSafe(val);
                }
              }];
              todos.forEach(function (todo) {
                replaces = 0;
                while (match = todo.regex.exec(str)) {
                  var matchedVar = match[1].trim();
                  value = handleFormat(matchedVar);
                  if (value === undefined) {
                    if (typeof missingInterpolationHandler === 'function') {
                      var temp = missingInterpolationHandler(str, match, options);
                      value = typeof temp === 'string' ? temp : '';
                    } else if (options && options.hasOwnProperty(matchedVar)) {
                      value = '';
                    } else if (skipOnVariables) {
                      value = match[0];
                      continue;
                    } else {
                      _this.logger.warn("missed to pass in variable ".concat(matchedVar, " for interpolating ").concat(str));
                      value = '';
                    }
                  } else if (typeof value !== 'string' && !_this.useRawValueToEscape) {
                    value = makeString(value);
                  }
                  var safeValue = todo.safeValue(value);
                  str = str.replace(match[0], safeValue);
                  if (skipOnVariables) {
                    todo.regex.lastIndex += value.length;
                    todo.regex.lastIndex -= match[0].length;
                  } else {
                    todo.regex.lastIndex = 0;
                  }
                  replaces++;
                  if (replaces >= _this.maxReplaces) {
                    break;
                  }
                }
              });
              return str;
            }
          }, {
            key: "nest",
            value: function nest(str, fc) {
              var _this2 = this;
              var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
              var match;
              var value;
              var clonedOptions = _objectSpread$3$1({}, options);
              clonedOptions.applyPostProcessor = false;
              delete clonedOptions.defaultValue;
              function handleHasOptions(key, inheritedOptions) {
                var sep = this.nestingOptionsSeparator;
                if (key.indexOf(sep) < 0) return key;
                var c = key.split(new RegExp("".concat(sep, "[ ]*{")));
                var optionsString = "{".concat(c[1]);
                key = c[0];
                optionsString = this.interpolate(optionsString, clonedOptions);
                var matchedSingleQuotes = optionsString.match(/'/g);
                var matchedDoubleQuotes = optionsString.match(/"/g);
                if (matchedSingleQuotes && matchedSingleQuotes.length % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {
                  optionsString = optionsString.replace(/'/g, '"');
                }
                try {
                  clonedOptions = JSON.parse(optionsString);
                  if (inheritedOptions) clonedOptions = _objectSpread$3$1(_objectSpread$3$1({}, inheritedOptions), clonedOptions);
                } catch (e) {
                  this.logger.warn("failed parsing options string in nesting for key ".concat(key), e);
                  return "".concat(key).concat(sep).concat(optionsString);
                }
                delete clonedOptions.defaultValue;
                return key;
              }
              while (match = this.nestingRegexp.exec(str)) {
                var formatters = [];
                var doReduce = false;
                if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {
                  var r = match[1].split(this.formatSeparator).map(function (elem) {
                    return elem.trim();
                  });
                  match[1] = r.shift();
                  formatters = r;
                  doReduce = true;
                }
                value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
                if (value && match[0] === str && typeof value !== 'string') return value;
                if (typeof value !== 'string') value = makeString(value);
                if (!value) {
                  this.logger.warn("missed to resolve ".concat(match[1], " for nesting ").concat(str));
                  value = '';
                }
                if (doReduce) {
                  value = formatters.reduce(function (v, f) {
                    return _this2.format(v, f, options.lng, _objectSpread$3$1(_objectSpread$3$1({}, options), {}, {
                      interpolationkey: match[1].trim()
                    }));
                  }, value.trim());
                }
                str = str.replace(match[0], value);
                this.regexp.lastIndex = 0;
              }
              return str;
            }
          }]);
          return Interpolator;
        }();
        function ownKeys$4(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly) {
              symbols = symbols.filter(function (sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            }
            keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread$4$1(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            if (i % 2) {
              ownKeys$4(Object(source), true).forEach(function (key) {
                _defineProperty$5(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys$4(Object(source)).forEach(function (key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }
          return target;
        }
        function parseFormatStr(formatStr) {
          var formatName = formatStr.toLowerCase().trim();
          var formatOptions = {};
          if (formatStr.indexOf('(') > -1) {
            var p = formatStr.split('(');
            formatName = p[0].toLowerCase().trim();
            var optStr = p[1].substring(0, p[1].length - 1);
            if (formatName === 'currency' && optStr.indexOf(':') < 0) {
              if (!formatOptions.currency) formatOptions.currency = optStr.trim();
            } else if (formatName === 'relativetime' && optStr.indexOf(':') < 0) {
              if (!formatOptions.range) formatOptions.range = optStr.trim();
            } else {
              var opts = optStr.split(';');
              opts.forEach(function (opt) {
                if (!opt) return;
                var _opt$split = opt.split(':'),
                  _opt$split2 = _toArray(_opt$split),
                  key = _opt$split2[0],
                  rest = _opt$split2.slice(1);
                var val = rest.join(':').trim().replace(/^'+|'+$/g, '');
                if (!formatOptions[key.trim()]) formatOptions[key.trim()] = val;
                if (val === 'false') formatOptions[key.trim()] = false;
                if (val === 'true') formatOptions[key.trim()] = true;
                if (!isNaN(val)) formatOptions[key.trim()] = parseInt(val, 10);
              });
            }
          }
          return {
            formatName: formatName,
            formatOptions: formatOptions
          };
        }
        function createCachedFormatter(fn) {
          var cache = {};
          return function invokeFormatter(val, lng, options) {
            var key = lng + JSON.stringify(options);
            var formatter = cache[key];
            if (!formatter) {
              formatter = fn(lng, options);
              cache[key] = formatter;
            }
            return formatter(val);
          };
        }
        var Formatter = function () {
          function Formatter() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            _classCallCheck(this, Formatter);
            this.logger = baseLogger.create('formatter');
            this.options = options;
            this.formats = {
              number: createCachedFormatter(function (lng, options) {
                var formatter = new Intl.NumberFormat(lng, options);
                return function (val) {
                  return formatter.format(val);
                };
              }),
              currency: createCachedFormatter(function (lng, options) {
                var formatter = new Intl.NumberFormat(lng, _objectSpread$4$1(_objectSpread$4$1({}, options), {}, {
                  style: 'currency'
                }));
                return function (val) {
                  return formatter.format(val);
                };
              }),
              datetime: createCachedFormatter(function (lng, options) {
                var formatter = new Intl.DateTimeFormat(lng, _objectSpread$4$1({}, options));
                return function (val) {
                  return formatter.format(val);
                };
              }),
              relativetime: createCachedFormatter(function (lng, options) {
                var formatter = new Intl.RelativeTimeFormat(lng, _objectSpread$4$1({}, options));
                return function (val) {
                  return formatter.format(val, options.range || 'day');
                };
              }),
              list: createCachedFormatter(function (lng, options) {
                var formatter = new Intl.ListFormat(lng, _objectSpread$4$1({}, options));
                return function (val) {
                  return formatter.format(val);
                };
              })
            };
            this.init(options);
          }
          _createClass(Formatter, [{
            key: "init",
            value: function init(services) {
              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                interpolation: {}
              };
              var iOpts = options.interpolation;
              this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ',';
            }
          }, {
            key: "add",
            value: function add(name, fc) {
              this.formats[name.toLowerCase().trim()] = fc;
            }
          }, {
            key: "addCached",
            value: function addCached(name, fc) {
              this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc);
            }
          }, {
            key: "format",
            value: function format(value, _format, lng, options) {
              var _this = this;
              var formats = _format.split(this.formatSeparator);
              var result = formats.reduce(function (mem, f) {
                var _parseFormatStr = parseFormatStr(f),
                  formatName = _parseFormatStr.formatName,
                  formatOptions = _parseFormatStr.formatOptions;
                if (_this.formats[formatName]) {
                  var formatted = mem;
                  try {
                    var valOptions = options && options.formatParams && options.formatParams[options.interpolationkey] || {};
                    var l = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;
                    formatted = _this.formats[formatName](mem, l, _objectSpread$4$1(_objectSpread$4$1(_objectSpread$4$1({}, formatOptions), options), valOptions));
                  } catch (error) {
                    _this.logger.warn(error);
                  }
                  return formatted;
                } else {
                  _this.logger.warn("there was no format function for ".concat(formatName));
                }
                return mem;
              }, value);
              return result;
            }
          }]);
          return Formatter;
        }();
        function ownKeys$5(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly) {
              symbols = symbols.filter(function (sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            }
            keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread$5$1(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            if (i % 2) {
              ownKeys$5(Object(source), true).forEach(function (key) {
                _defineProperty$5(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys$5(Object(source)).forEach(function (key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }
          return target;
        }
        function _createSuper$2(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct$2();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
          };
        }
        function _isNativeReflectConstruct$2() {
          if (typeof Reflect === "undefined" || !Reflect.construct) return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === "function") return true;
          try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
          } catch (e) {
            return false;
          }
        }
        function removePending(q, name) {
          if (q.pending[name] !== undefined) {
            delete q.pending[name];
            q.pendingCount--;
          }
        }
        var Connector = function (_EventEmitter) {
          _inherits(Connector, _EventEmitter);
          var _super = _createSuper$2(Connector);
          function Connector(backend, store, services) {
            var _this;
            var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            _classCallCheck(this, Connector);
            _this = _super.call(this);
            if (isIE10) {
              EventEmitter.call(_assertThisInitialized(_this));
            }
            _this.backend = backend;
            _this.store = store;
            _this.services = services;
            _this.languageUtils = services.languageUtils;
            _this.options = options;
            _this.logger = baseLogger.create('backendConnector');
            _this.waitingReads = [];
            _this.maxParallelReads = options.maxParallelReads || 10;
            _this.readingCalls = 0;
            _this.maxRetries = options.maxRetries >= 0 ? options.maxRetries : 5;
            _this.retryTimeout = options.retryTimeout >= 1 ? options.retryTimeout : 350;
            _this.state = {};
            _this.queue = [];
            if (_this.backend && _this.backend.init) {
              _this.backend.init(services, options.backend, options);
            }
            return _this;
          }
          _createClass(Connector, [{
            key: "queueLoad",
            value: function queueLoad(languages, namespaces, options, callback) {
              var _this2 = this;
              var toLoad = {};
              var pending = {};
              var toLoadLanguages = {};
              var toLoadNamespaces = {};
              languages.forEach(function (lng) {
                var hasAllNamespaces = true;
                namespaces.forEach(function (ns) {
                  var name = "".concat(lng, "|").concat(ns);
                  if (!options.reload && _this2.store.hasResourceBundle(lng, ns)) {
                    _this2.state[name] = 2;
                  } else if (_this2.state[name] < 0) ;else if (_this2.state[name] === 1) {
                    if (pending[name] === undefined) pending[name] = true;
                  } else {
                    _this2.state[name] = 1;
                    hasAllNamespaces = false;
                    if (pending[name] === undefined) pending[name] = true;
                    if (toLoad[name] === undefined) toLoad[name] = true;
                    if (toLoadNamespaces[ns] === undefined) toLoadNamespaces[ns] = true;
                  }
                });
                if (!hasAllNamespaces) toLoadLanguages[lng] = true;
              });
              if (Object.keys(toLoad).length || Object.keys(pending).length) {
                this.queue.push({
                  pending: pending,
                  pendingCount: Object.keys(pending).length,
                  loaded: {},
                  errors: [],
                  callback: callback
                });
              }
              return {
                toLoad: Object.keys(toLoad),
                pending: Object.keys(pending),
                toLoadLanguages: Object.keys(toLoadLanguages),
                toLoadNamespaces: Object.keys(toLoadNamespaces)
              };
            }
          }, {
            key: "loaded",
            value: function loaded(name, err, data) {
              var s = name.split('|');
              var lng = s[0];
              var ns = s[1];
              if (err) this.emit('failedLoading', lng, ns, err);
              if (data) {
                this.store.addResourceBundle(lng, ns, data);
              }
              this.state[name] = err ? -1 : 2;
              var loaded = {};
              this.queue.forEach(function (q) {
                pushPath(q.loaded, [lng], ns);
                removePending(q, name);
                if (err) q.errors.push(err);
                if (q.pendingCount === 0 && !q.done) {
                  Object.keys(q.loaded).forEach(function (l) {
                    if (!loaded[l]) loaded[l] = {};
                    var loadedKeys = q.loaded[l];
                    if (loadedKeys.length) {
                      loadedKeys.forEach(function (ns) {
                        if (loaded[l][ns] === undefined) loaded[l][ns] = true;
                      });
                    }
                  });
                  q.done = true;
                  if (q.errors.length) {
                    q.callback(q.errors);
                  } else {
                    q.callback();
                  }
                }
              });
              this.emit('loaded', loaded);
              this.queue = this.queue.filter(function (q) {
                return !q.done;
              });
            }
          }, {
            key: "read",
            value: function read(lng, ns, fcName) {
              var _this3 = this;
              var tried = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
              var wait = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.retryTimeout;
              var callback = arguments.length > 5 ? arguments[5] : undefined;
              if (!lng.length) return callback(null, {});
              if (this.readingCalls >= this.maxParallelReads) {
                this.waitingReads.push({
                  lng: lng,
                  ns: ns,
                  fcName: fcName,
                  tried: tried,
                  wait: wait,
                  callback: callback
                });
                return;
              }
              this.readingCalls++;
              return this.backend[fcName](lng, ns, function (err, data) {
                _this3.readingCalls--;
                if (_this3.waitingReads.length > 0) {
                  var next = _this3.waitingReads.shift();
                  _this3.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);
                }
                if (err && data && tried < _this3.maxRetries) {
                  setTimeout(function () {
                    _this3.read.call(_this3, lng, ns, fcName, tried + 1, wait * 2, callback);
                  }, wait);
                  return;
                }
                callback(err, data);
              });
            }
          }, {
            key: "prepareLoading",
            value: function prepareLoading(languages, namespaces) {
              var _this4 = this;
              var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
              var callback = arguments.length > 3 ? arguments[3] : undefined;
              if (!this.backend) {
                this.logger.warn('No backend was added via i18next.use. Will not load resources.');
                return callback && callback();
              }
              if (typeof languages === 'string') languages = this.languageUtils.toResolveHierarchy(languages);
              if (typeof namespaces === 'string') namespaces = [namespaces];
              var toLoad = this.queueLoad(languages, namespaces, options, callback);
              if (!toLoad.toLoad.length) {
                if (!toLoad.pending.length) callback();
                return null;
              }
              toLoad.toLoad.forEach(function (name) {
                _this4.loadOne(name);
              });
            }
          }, {
            key: "load",
            value: function load(languages, namespaces, callback) {
              this.prepareLoading(languages, namespaces, {}, callback);
            }
          }, {
            key: "reload",
            value: function reload(languages, namespaces, callback) {
              this.prepareLoading(languages, namespaces, {
                reload: true
              }, callback);
            }
          }, {
            key: "loadOne",
            value: function loadOne(name) {
              var _this5 = this;
              var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
              var s = name.split('|');
              var lng = s[0];
              var ns = s[1];
              this.read(lng, ns, 'read', undefined, undefined, function (err, data) {
                if (err) _this5.logger.warn("".concat(prefix, "loading namespace ").concat(ns, " for language ").concat(lng, " failed"), err);
                if (!err && data) _this5.logger.log("".concat(prefix, "loaded namespace ").concat(ns, " for language ").concat(lng), data);
                _this5.loaded(name, err, data);
              });
            }
          }, {
            key: "saveMissing",
            value: function saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
              var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
              if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
                this.logger.warn("did not save key \"".concat(key, "\" as the namespace \"").concat(namespace, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
                return;
              }
              if (key === undefined || key === null || key === '') return;
              if (this.backend && this.backend.create) {
                this.backend.create(languages, namespace, key, fallbackValue, null, _objectSpread$5$1(_objectSpread$5$1({}, options), {}, {
                  isUpdate: isUpdate
                }));
              }
              if (!languages || !languages[0]) return;
              this.store.addResource(languages[0], namespace, key, fallbackValue);
            }
          }]);
          return Connector;
        }(EventEmitter);
        function get$1() {
          return {
            debug: false,
            initImmediate: true,
            ns: ['translation'],
            defaultNS: ['translation'],
            fallbackLng: ['dev'],
            fallbackNS: false,
            supportedLngs: false,
            nonExplicitSupportedLngs: false,
            load: 'all',
            preload: false,
            simplifyPluralSuffix: true,
            keySeparator: '.',
            nsSeparator: ':',
            pluralSeparator: '_',
            contextSeparator: '_',
            partialBundledLanguages: false,
            saveMissing: false,
            updateMissing: false,
            saveMissingTo: 'fallback',
            saveMissingPlurals: true,
            missingKeyHandler: false,
            missingInterpolationHandler: false,
            postProcess: false,
            postProcessPassResolved: false,
            returnNull: true,
            returnEmptyString: true,
            returnObjects: false,
            joinArrays: false,
            returnedObjectHandler: false,
            parseMissingKeyHandler: false,
            appendNamespaceToMissingKey: false,
            appendNamespaceToCIMode: false,
            overloadTranslationOptionHandler: function handle(args) {
              var ret = {};
              if (_typeof(args[1]) === 'object') ret = args[1];
              if (typeof args[1] === 'string') ret.defaultValue = args[1];
              if (typeof args[2] === 'string') ret.tDescription = args[2];
              if (_typeof(args[2]) === 'object' || _typeof(args[3]) === 'object') {
                var options = args[3] || args[2];
                Object.keys(options).forEach(function (key) {
                  ret[key] = options[key];
                });
              }
              return ret;
            },
            interpolation: {
              escapeValue: true,
              format: function format(value, _format, lng, options) {
                return value;
              },
              prefix: '{{',
              suffix: '}}',
              formatSeparator: ',',
              unescapePrefix: '-',
              nestingPrefix: '$t(',
              nestingSuffix: ')',
              nestingOptionsSeparator: ',',
              maxReplaces: 1000,
              skipOnVariables: true
            }
          };
        }
        function transformOptions(options) {
          if (typeof options.ns === 'string') options.ns = [options.ns];
          if (typeof options.fallbackLng === 'string') options.fallbackLng = [options.fallbackLng];
          if (typeof options.fallbackNS === 'string') options.fallbackNS = [options.fallbackNS];
          if (options.supportedLngs && options.supportedLngs.indexOf('cimode') < 0) {
            options.supportedLngs = options.supportedLngs.concat(['cimode']);
          }
          return options;
        }
        function ownKeys$6(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly) {
              symbols = symbols.filter(function (sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            }
            keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread$6$1(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            if (i % 2) {
              ownKeys$6(Object(source), true).forEach(function (key) {
                _defineProperty$5(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys$6(Object(source)).forEach(function (key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }
          return target;
        }
        function _createSuper$3(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct$3();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
          };
        }
        function _isNativeReflectConstruct$3() {
          if (typeof Reflect === "undefined" || !Reflect.construct) return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === "function") return true;
          try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
          } catch (e) {
            return false;
          }
        }
        function noop$2() {}
        function bindMemberFunctions(inst) {
          var mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
          mems.forEach(function (mem) {
            if (typeof inst[mem] === 'function') {
              inst[mem] = inst[mem].bind(inst);
            }
          });
        }
        var I18n = function (_EventEmitter) {
          _inherits(I18n, _EventEmitter);
          var _super = _createSuper$3(I18n);
          function I18n() {
            var _this;
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var callback = arguments.length > 1 ? arguments[1] : undefined;
            _classCallCheck(this, I18n);
            _this = _super.call(this);
            if (isIE10) {
              EventEmitter.call(_assertThisInitialized(_this));
            }
            _this.options = transformOptions(options);
            _this.services = {};
            _this.logger = baseLogger;
            _this.modules = {
              external: []
            };
            bindMemberFunctions(_assertThisInitialized(_this));
            if (callback && !_this.isInitialized && !options.isClone) {
              if (!_this.options.initImmediate) {
                _this.init(options, callback);
                return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
              }
              setTimeout(function () {
                _this.init(options, callback);
              }, 0);
            }
            return _this;
          }
          _createClass(I18n, [{
            key: "init",
            value: function init() {
              var _this2 = this;
              var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
              var callback = arguments.length > 1 ? arguments[1] : undefined;
              if (typeof options === 'function') {
                callback = options;
                options = {};
              }
              if (!options.defaultNS && options.defaultNS !== false && options.ns) {
                if (typeof options.ns === 'string') {
                  options.defaultNS = options.ns;
                } else if (options.ns.indexOf('translation') < 0) {
                  options.defaultNS = options.ns[0];
                }
              }
              var defOpts = get$1();
              this.options = _objectSpread$6$1(_objectSpread$6$1(_objectSpread$6$1({}, defOpts), this.options), transformOptions(options));
              if (this.options.compatibilityAPI !== 'v1') {
                this.options.interpolation = _objectSpread$6$1(_objectSpread$6$1({}, defOpts.interpolation), this.options.interpolation);
              }
              if (options.keySeparator !== undefined) {
                this.options.userDefinedKeySeparator = options.keySeparator;
              }
              if (options.nsSeparator !== undefined) {
                this.options.userDefinedNsSeparator = options.nsSeparator;
              }
              function createClassOnDemand(ClassOrObject) {
                if (!ClassOrObject) return null;
                if (typeof ClassOrObject === 'function') return new ClassOrObject();
                return ClassOrObject;
              }
              if (!this.options.isClone) {
                if (this.modules.logger) {
                  baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
                } else {
                  baseLogger.init(null, this.options);
                }
                var formatter;
                if (this.modules.formatter) {
                  formatter = this.modules.formatter;
                } else if (typeof Intl !== 'undefined') {
                  formatter = Formatter;
                }
                var lu = new LanguageUtil(this.options);
                this.store = new ResourceStore(this.options.resources, this.options);
                var s = this.services;
                s.logger = baseLogger;
                s.resourceStore = this.store;
                s.languageUtils = lu;
                s.pluralResolver = new PluralResolver(lu, {
                  prepend: this.options.pluralSeparator,
                  compatibilityJSON: this.options.compatibilityJSON,
                  simplifyPluralSuffix: this.options.simplifyPluralSuffix
                });
                if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
                  s.formatter = createClassOnDemand(formatter);
                  s.formatter.init(s, this.options);
                  this.options.interpolation.format = s.formatter.format.bind(s.formatter);
                }
                s.interpolator = new Interpolator(this.options);
                s.utils = {
                  hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
                };
                s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
                s.backendConnector.on('*', function (event) {
                  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    args[_key - 1] = arguments[_key];
                  }
                  _this2.emit.apply(_this2, [event].concat(args));
                });
                if (this.modules.languageDetector) {
                  s.languageDetector = createClassOnDemand(this.modules.languageDetector);
                  s.languageDetector.init(s, this.options.detection, this.options);
                }
                if (this.modules.i18nFormat) {
                  s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
                  if (s.i18nFormat.init) s.i18nFormat.init(this);
                }
                this.translator = new Translator(this.services, this.options);
                this.translator.on('*', function (event) {
                  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                    args[_key2 - 1] = arguments[_key2];
                  }
                  _this2.emit.apply(_this2, [event].concat(args));
                });
                this.modules.external.forEach(function (m) {
                  if (m.init) m.init(_this2);
                });
              }
              this.format = this.options.interpolation.format;
              if (!callback) callback = noop$2;
              if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
                var codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
                if (codes.length > 0 && codes[0] !== 'dev') this.options.lng = codes[0];
              }
              if (!this.services.languageDetector && !this.options.lng) {
                this.logger.warn('init: no languageDetector is used and no lng is defined');
              }
              var storeApi = ['getResource', 'hasResourceBundle', 'getResourceBundle', 'getDataByLanguage'];
              storeApi.forEach(function (fcName) {
                _this2[fcName] = function () {
                  var _this2$store;
                  return (_this2$store = _this2.store)[fcName].apply(_this2$store, arguments);
                };
              });
              var storeApiChained = ['addResource', 'addResources', 'addResourceBundle', 'removeResourceBundle'];
              storeApiChained.forEach(function (fcName) {
                _this2[fcName] = function () {
                  var _this2$store2;
                  (_this2$store2 = _this2.store)[fcName].apply(_this2$store2, arguments);
                  return _this2;
                };
              });
              var deferred = defer();
              var load = function load() {
                var finish = function finish(err, t) {
                  if (_this2.isInitialized && !_this2.initializedStoreOnce) _this2.logger.warn('init: i18next is already initialized. You should call init just once!');
                  _this2.isInitialized = true;
                  if (!_this2.options.isClone) _this2.logger.log('initialized', _this2.options);
                  _this2.emit('initialized', _this2.options);
                  deferred.resolve(t);
                  callback(err, t);
                };
                if (_this2.languages && _this2.options.compatibilityAPI !== 'v1' && !_this2.isInitialized) return finish(null, _this2.t.bind(_this2));
                _this2.changeLanguage(_this2.options.lng, finish);
              };
              if (this.options.resources || !this.options.initImmediate) {
                load();
              } else {
                setTimeout(load, 0);
              }
              return deferred;
            }
          }, {
            key: "loadResources",
            value: function loadResources(language) {
              var _this3 = this;
              var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop$2;
              var usedCallback = callback;
              var usedLng = typeof language === 'string' ? language : this.language;
              if (typeof language === 'function') usedCallback = language;
              if (!this.options.resources || this.options.partialBundledLanguages) {
                if (usedLng && usedLng.toLowerCase() === 'cimode') return usedCallback();
                var toLoad = [];
                var append = function append(lng) {
                  if (!lng) return;
                  var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);
                  lngs.forEach(function (l) {
                    if (toLoad.indexOf(l) < 0) toLoad.push(l);
                  });
                };
                if (!usedLng) {
                  var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
                  fallbacks.forEach(function (l) {
                    return append(l);
                  });
                } else {
                  append(usedLng);
                }
                if (this.options.preload) {
                  this.options.preload.forEach(function (l) {
                    return append(l);
                  });
                }
                this.services.backendConnector.load(toLoad, this.options.ns, function (e) {
                  if (!e && !_this3.resolvedLanguage && _this3.language) _this3.setResolvedLanguage(_this3.language);
                  usedCallback(e);
                });
              } else {
                usedCallback(null);
              }
            }
          }, {
            key: "reloadResources",
            value: function reloadResources(lngs, ns, callback) {
              var deferred = defer();
              if (!lngs) lngs = this.languages;
              if (!ns) ns = this.options.ns;
              if (!callback) callback = noop$2;
              this.services.backendConnector.reload(lngs, ns, function (err) {
                deferred.resolve();
                callback(err);
              });
              return deferred;
            }
          }, {
            key: "use",
            value: function use(module) {
              if (!module) throw new Error('You are passing an undefined module! Please check the object you are passing to i18next.use()');
              if (!module.type) throw new Error('You are passing a wrong module! Please check the object you are passing to i18next.use()');
              if (module.type === 'backend') {
                this.modules.backend = module;
              }
              if (module.type === 'logger' || module.log && module.warn && module.error) {
                this.modules.logger = module;
              }
              if (module.type === 'languageDetector') {
                this.modules.languageDetector = module;
              }
              if (module.type === 'i18nFormat') {
                this.modules.i18nFormat = module;
              }
              if (module.type === 'postProcessor') {
                postProcessor.addPostProcessor(module);
              }
              if (module.type === 'formatter') {
                this.modules.formatter = module;
              }
              if (module.type === '3rdParty') {
                this.modules.external.push(module);
              }
              return this;
            }
          }, {
            key: "setResolvedLanguage",
            value: function setResolvedLanguage(l) {
              if (!l || !this.languages) return;
              if (['cimode', 'dev'].indexOf(l) > -1) return;
              for (var li = 0; li < this.languages.length; li++) {
                var lngInLngs = this.languages[li];
                if (['cimode', 'dev'].indexOf(lngInLngs) > -1) continue;
                if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
                  this.resolvedLanguage = lngInLngs;
                  break;
                }
              }
            }
          }, {
            key: "changeLanguage",
            value: function changeLanguage(lng, callback) {
              var _this4 = this;
              this.isLanguageChangingTo = lng;
              var deferred = defer();
              this.emit('languageChanging', lng);
              var setLngProps = function setLngProps(l) {
                _this4.language = l;
                _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);
                _this4.resolvedLanguage = undefined;
                _this4.setResolvedLanguage(l);
              };
              var done = function done(err, l) {
                if (l) {
                  setLngProps(l);
                  _this4.translator.changeLanguage(l);
                  _this4.isLanguageChangingTo = undefined;
                  _this4.emit('languageChanged', l);
                  _this4.logger.log('languageChanged', l);
                } else {
                  _this4.isLanguageChangingTo = undefined;
                }
                deferred.resolve(function () {
                  return _this4.t.apply(_this4, arguments);
                });
                if (callback) callback(err, function () {
                  return _this4.t.apply(_this4, arguments);
                });
              };
              var setLng = function setLng(lngs) {
                if (!lng && !lngs && _this4.services.languageDetector) lngs = [];
                var l = typeof lngs === 'string' ? lngs : _this4.services.languageUtils.getBestMatchFromCodes(lngs);
                if (l) {
                  if (!_this4.language) {
                    setLngProps(l);
                  }
                  if (!_this4.translator.language) _this4.translator.changeLanguage(l);
                  if (_this4.services.languageDetector) _this4.services.languageDetector.cacheUserLanguage(l);
                }
                _this4.loadResources(l, function (err) {
                  done(err, l);
                });
              };
              if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
                setLng(this.services.languageDetector.detect());
              } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
                this.services.languageDetector.detect(setLng);
              } else {
                setLng(lng);
              }
              return deferred;
            }
          }, {
            key: "getFixedT",
            value: function getFixedT(lng, ns, keyPrefix) {
              var _this5 = this;
              var fixedT = function fixedT(key, opts) {
                var options;
                if (_typeof(opts) !== 'object') {
                  for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
                    rest[_key3 - 2] = arguments[_key3];
                  }
                  options = _this5.options.overloadTranslationOptionHandler([key, opts].concat(rest));
                } else {
                  options = _objectSpread$6$1({}, opts);
                }
                options.lng = options.lng || fixedT.lng;
                options.lngs = options.lngs || fixedT.lngs;
                options.ns = options.ns || fixedT.ns;
                options.keyPrefix = options.keyPrefix || keyPrefix || fixedT.keyPrefix;
                var keySeparator = _this5.options.keySeparator || '.';
                var resultKey = options.keyPrefix ? "".concat(options.keyPrefix).concat(keySeparator).concat(key) : key;
                return _this5.t(resultKey, options);
              };
              if (typeof lng === 'string') {
                fixedT.lng = lng;
              } else {
                fixedT.lngs = lng;
              }
              fixedT.ns = ns;
              fixedT.keyPrefix = keyPrefix;
              return fixedT;
            }
          }, {
            key: "t",
            value: function t() {
              var _this$translator;
              return this.translator && (_this$translator = this.translator).translate.apply(_this$translator, arguments);
            }
          }, {
            key: "exists",
            value: function exists() {
              var _this$translator2;
              return this.translator && (_this$translator2 = this.translator).exists.apply(_this$translator2, arguments);
            }
          }, {
            key: "setDefaultNamespace",
            value: function setDefaultNamespace(ns) {
              this.options.defaultNS = ns;
            }
          }, {
            key: "hasLoadedNamespace",
            value: function hasLoadedNamespace(ns) {
              var _this6 = this;
              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
              if (!this.isInitialized) {
                this.logger.warn('hasLoadedNamespace: i18next was not initialized', this.languages);
                return false;
              }
              if (!this.languages || !this.languages.length) {
                this.logger.warn('hasLoadedNamespace: i18n.languages were undefined or empty', this.languages);
                return false;
              }
              var lng = this.resolvedLanguage || this.languages[0];
              var fallbackLng = this.options ? this.options.fallbackLng : false;
              var lastLng = this.languages[this.languages.length - 1];
              if (lng.toLowerCase() === 'cimode') return true;
              var loadNotPending = function loadNotPending(l, n) {
                var loadState = _this6.services.backendConnector.state["".concat(l, "|").concat(n)];
                return loadState === -1 || loadState === 2;
              };
              if (options.precheck) {
                var preResult = options.precheck(this, loadNotPending);
                if (preResult !== undefined) return preResult;
              }
              if (this.hasResourceBundle(lng, ns)) return true;
              if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages) return true;
              if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
              return false;
            }
          }, {
            key: "loadNamespaces",
            value: function loadNamespaces(ns, callback) {
              var _this7 = this;
              var deferred = defer();
              if (!this.options.ns) {
                callback && callback();
                return Promise.resolve();
              }
              if (typeof ns === 'string') ns = [ns];
              ns.forEach(function (n) {
                if (_this7.options.ns.indexOf(n) < 0) _this7.options.ns.push(n);
              });
              this.loadResources(function (err) {
                deferred.resolve();
                if (callback) callback(err);
              });
              return deferred;
            }
          }, {
            key: "loadLanguages",
            value: function loadLanguages(lngs, callback) {
              var deferred = defer();
              if (typeof lngs === 'string') lngs = [lngs];
              var preloaded = this.options.preload || [];
              var newLngs = lngs.filter(function (lng) {
                return preloaded.indexOf(lng) < 0;
              });
              if (!newLngs.length) {
                if (callback) callback();
                return Promise.resolve();
              }
              this.options.preload = preloaded.concat(newLngs);
              this.loadResources(function (err) {
                deferred.resolve();
                if (callback) callback(err);
              });
              return deferred;
            }
          }, {
            key: "dir",
            value: function dir(lng) {
              if (!lng) lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);
              if (!lng) return 'rtl';
              var rtlLngs = ['ar', 'shu', 'sqr', 'ssh', 'xaa', 'yhd', 'yud', 'aao', 'abh', 'abv', 'acm', 'acq', 'acw', 'acx', 'acy', 'adf', 'ads', 'aeb', 'aec', 'afb', 'ajp', 'apc', 'apd', 'arb', 'arq', 'ars', 'ary', 'arz', 'auz', 'avl', 'ayh', 'ayl', 'ayn', 'ayp', 'bbz', 'pga', 'he', 'iw', 'ps', 'pbt', 'pbu', 'pst', 'prp', 'prd', 'ug', 'ur', 'ydd', 'yds', 'yih', 'ji', 'yi', 'hbo', 'men', 'xmn', 'fa', 'jpr', 'peo', 'pes', 'prs', 'dv', 'sam', 'ckb'];
              return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf('-arab') > 1 ? 'rtl' : 'ltr';
            }
          }, {
            key: "cloneInstance",
            value: function cloneInstance() {
              var _this8 = this;
              var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
              var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop$2;
              var mergedOptions = _objectSpread$6$1(_objectSpread$6$1(_objectSpread$6$1({}, this.options), options), {
                isClone: true
              });
              var clone = new I18n(mergedOptions);
              if (options.debug !== undefined || options.prefix !== undefined) {
                clone.logger = clone.logger.clone(options);
              }
              var membersToCopy = ['store', 'services', 'language'];
              membersToCopy.forEach(function (m) {
                clone[m] = _this8[m];
              });
              clone.services = _objectSpread$6$1({}, this.services);
              clone.services.utils = {
                hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
              };
              clone.translator = new Translator(clone.services, clone.options);
              clone.translator.on('*', function (event) {
                for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
                  args[_key4 - 1] = arguments[_key4];
                }
                clone.emit.apply(clone, [event].concat(args));
              });
              clone.init(mergedOptions, callback);
              clone.translator.options = clone.options;
              clone.translator.backendConnector.services.utils = {
                hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
              };
              return clone;
            }
          }, {
            key: "toJSON",
            value: function toJSON() {
              return {
                options: this.options,
                store: this.store,
                language: this.language,
                languages: this.languages,
                resolvedLanguage: this.resolvedLanguage
              };
            }
          }]);
          return I18n;
        }(EventEmitter);
        _defineProperty$5(I18n, "createInstance", function () {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var callback = arguments.length > 1 ? arguments[1] : undefined;
          return new I18n(options, callback);
        });
        var instance$2 = I18n.createInstance();
        instance$2.createInstance = I18n.createInstance;
        instance$2.createInstance;
        instance$2.init;
        instance$2.loadResources;
        instance$2.reloadResources;
        instance$2.use;
        instance$2.changeLanguage;
        instance$2.getFixedT;
        instance$2.t;
        instance$2.exists;
        instance$2.setDefaultNamespace;
        instance$2.hasLoadedNamespace;
        instance$2.loadNamespaces;
        instance$2.loadLanguages;
        function _objectWithoutPropertiesLoose$2(source, excluded) {
          if (source == null) return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;
          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            target[key] = source[key];
          }
          return target;
        }
        var matchHtmlEntity = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34|nbsp|#160|copy|#169|reg|#174|hellip|#8230|#x2F|#47);/g;
        var htmlEntities = {
          '&amp;': '&',
          '&#38;': '&',
          '&lt;': '<',
          '&#60;': '<',
          '&gt;': '>',
          '&#62;': '>',
          '&apos;': "'",
          '&#39;': "'",
          '&quot;': '"',
          '&#34;': '"',
          '&nbsp;': ' ',
          '&#160;': ' ',
          '&copy;': '©',
          '&#169;': '©',
          '&reg;': '®',
          '&#174;': '®',
          '&hellip;': '…',
          '&#8230;': '…',
          '&#x2F;': '/',
          '&#47;': '/'
        };
        var unescapeHtmlEntity = function unescapeHtmlEntity(m) {
          return htmlEntities[m];
        };
        var unescape$1 = function unescape(text) {
          return text.replace(matchHtmlEntity, unescapeHtmlEntity);
        };
        var defaultOptions = {
          bindI18n: 'languageChanged',
          bindI18nStore: '',
          transEmptyNodeValue: '',
          transSupportBasicHtmlNodes: true,
          transWrapTextNodes: '',
          transKeepBasicHtmlNodesFor: ['br', 'strong', 'i', 'p'],
          useSuspense: true,
          unescape: unescape$1
        };
        var i18nInstance;
        var I18nContext = exports("bS", reactExports.createContext());
        function getDefaults() {
          return defaultOptions;
        }
        var ReportNamespaces = function () {
          function ReportNamespaces() {
            _classCallCheck(this, ReportNamespaces);
            this.usedNamespaces = {};
          }
          _createClass(ReportNamespaces, [{
            key: "addUsedNamespaces",
            value: function addUsedNamespaces(namespaces) {
              var _this = this;
              namespaces.forEach(function (ns) {
                if (!_this.usedNamespaces[ns]) _this.usedNamespaces[ns] = true;
              });
            }
          }, {
            key: "getUsedNamespaces",
            value: function getUsedNamespaces() {
              return Object.keys(this.usedNamespaces);
            }
          }]);
          return ReportNamespaces;
        }();
        function getI18n() {
          return i18nInstance;
        }
        function warn() {
          if (console && console.warn) {
            var _console;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            if (typeof args[0] === 'string') args[0] = "react-i18next:: ".concat(args[0]);
            (_console = console).warn.apply(_console, args);
          }
        }
        var alreadyWarned = {};
        function warnOnce() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          if (typeof args[0] === 'string' && alreadyWarned[args[0]]) return;
          if (typeof args[0] === 'string') alreadyWarned[args[0]] = new Date();
          warn.apply(void 0, args);
        }
        function loadNamespaces(i18n, ns, cb) {
          i18n.loadNamespaces(ns, function () {
            if (i18n.isInitialized) {
              cb();
            } else {
              var initialized = function initialized() {
                setTimeout(function () {
                  i18n.off('initialized', initialized);
                }, 0);
                cb();
              };
              i18n.on('initialized', initialized);
            }
          });
        }
        function oldI18nextHasLoadedNamespace(ns, i18n) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          var lng = i18n.languages[0];
          var fallbackLng = i18n.options ? i18n.options.fallbackLng : false;
          var lastLng = i18n.languages[i18n.languages.length - 1];
          if (lng.toLowerCase() === 'cimode') return true;
          var loadNotPending = function loadNotPending(l, n) {
            var loadState = i18n.services.backendConnector.state["".concat(l, "|").concat(n)];
            return loadState === -1 || loadState === 2;
          };
          if (options.bindI18n && options.bindI18n.indexOf('languageChanging') > -1 && i18n.services.backendConnector.backend && i18n.isLanguageChangingTo && !loadNotPending(i18n.isLanguageChangingTo, ns)) return false;
          if (i18n.hasResourceBundle(lng, ns)) return true;
          if (!i18n.services.backendConnector.backend || i18n.options.resources && !i18n.options.partialBundledLanguages) return true;
          if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
          return false;
        }
        function hasLoadedNamespace(ns, i18n) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          if (!i18n.languages || !i18n.languages.length) {
            warnOnce('i18n.languages were undefined or empty', i18n.languages);
            return true;
          }
          var isNewerI18next = i18n.options.ignoreJSONStructure !== undefined;
          if (!isNewerI18next) {
            return oldI18nextHasLoadedNamespace(ns, i18n, options);
          }
          return i18n.hasLoadedNamespace(ns, {
            precheck: function precheck(i18nInstance, loadNotPending) {
              if (options.bindI18n && options.bindI18n.indexOf('languageChanging') > -1 && i18nInstance.services.backendConnector.backend && i18nInstance.isLanguageChangingTo && !loadNotPending(i18nInstance.isLanguageChangingTo, ns)) return false;
            }
          });
        }
        function _iterableToArrayLimit(arr, i) {
          var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
          if (null != _i) {
            var _s,
              _e,
              _x,
              _r,
              _arr = [],
              _n = !0,
              _d = !1;
            try {
              if (_x = (_i = _i.call(arr)).next, 0 === i) {
                if (Object(_i) !== _i) return;
                _n = !1;
              } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);
            } catch (err) {
              _d = !0, _e = err;
            } finally {
              try {
                if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          }
        }
        function _slicedToArray(arr, i) {
          return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
        }
        function ownKeys$1(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly) {
              symbols = symbols.filter(function (sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            }
            keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread$5(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            if (i % 2) {
              ownKeys$1(Object(source), true).forEach(function (key) {
                _defineProperty$5(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys$1(Object(source)).forEach(function (key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }
          return target;
        }
        var usePrevious = function usePrevious(value, ignore) {
          var ref = reactExports.useRef();
          reactExports.useEffect(function () {
            ref.current = ignore ? ref.current : value;
          }, [value, ignore]);
          return ref.current;
        };
        function useTranslation(ns) {
          var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var i18nFromProps = props.i18n;
          var _ref = reactExports.useContext(I18nContext) || {},
            i18nFromContext = _ref.i18n,
            defaultNSFromContext = _ref.defaultNS;
          var i18n = i18nFromProps || i18nFromContext || getI18n();
          if (i18n && !i18n.reportNamespaces) i18n.reportNamespaces = new ReportNamespaces();
          if (!i18n) {
            warnOnce('You will need to pass in an i18next instance by using initReactI18next');
            var notReadyT = function notReadyT(k) {
              return Array.isArray(k) ? k[k.length - 1] : k;
            };
            var retNotReady = [notReadyT, {}, false];
            retNotReady.t = notReadyT;
            retNotReady.i18n = {};
            retNotReady.ready = false;
            return retNotReady;
          }
          if (i18n.options.react && i18n.options.react.wait !== undefined) warnOnce('It seems you are still using the old wait option, you may migrate to the new useSuspense behaviour.');
          var i18nOptions = _objectSpread$5(_objectSpread$5(_objectSpread$5({}, getDefaults()), i18n.options.react), props);
          var useSuspense = i18nOptions.useSuspense,
            keyPrefix = i18nOptions.keyPrefix;
          var namespaces = ns || defaultNSFromContext || i18n.options && i18n.options.defaultNS;
          namespaces = typeof namespaces === 'string' ? [namespaces] : namespaces || ['translation'];
          if (i18n.reportNamespaces.addUsedNamespaces) i18n.reportNamespaces.addUsedNamespaces(namespaces);
          var ready = (i18n.isInitialized || i18n.initializedStoreOnce) && namespaces.every(function (n) {
            return hasLoadedNamespace(n, i18n, i18nOptions);
          });
          function getT() {
            return i18n.getFixedT(null, i18nOptions.nsMode === 'fallback' ? namespaces : namespaces[0], keyPrefix);
          }
          var _useState = reactExports.useState(getT),
            _useState2 = _slicedToArray(_useState, 2),
            t = _useState2[0],
            setT = _useState2[1];
          var joinedNS = namespaces.join();
          var previousJoinedNS = usePrevious(joinedNS);
          var isMounted = reactExports.useRef(true);
          reactExports.useEffect(function () {
            var bindI18n = i18nOptions.bindI18n,
              bindI18nStore = i18nOptions.bindI18nStore;
            isMounted.current = true;
            if (!ready && !useSuspense) {
              loadNamespaces(i18n, namespaces, function () {
                if (isMounted.current) setT(getT);
              });
            }
            if (ready && previousJoinedNS && previousJoinedNS !== joinedNS && isMounted.current) {
              setT(getT);
            }
            function boundReset() {
              if (isMounted.current) setT(getT);
            }
            if (bindI18n && i18n) i18n.on(bindI18n, boundReset);
            if (bindI18nStore && i18n) i18n.store.on(bindI18nStore, boundReset);
            return function () {
              isMounted.current = false;
              if (bindI18n && i18n) bindI18n.split(' ').forEach(function (e) {
                return i18n.off(e, boundReset);
              });
              if (bindI18nStore && i18n) bindI18nStore.split(' ').forEach(function (e) {
                return i18n.store.off(e, boundReset);
              });
            };
          }, [i18n, joinedNS]);
          var isInitial = reactExports.useRef(true);
          reactExports.useEffect(function () {
            if (isMounted.current && !isInitial.current) {
              setT(getT);
            }
            isInitial.current = false;
          }, [i18n, keyPrefix]);
          var ret = [t, i18n, ready];
          ret.t = t;
          ret.i18n = i18n;
          ret.ready = ready;
          if (ready) return ret;
          if (!ready && !useSuspense) return ret;
          throw new Promise(function (resolve) {
            loadNamespaces(i18n, namespaces, function () {
              resolve();
            });
          });
        }
        function I18nextProvider(_ref) {
          var i18n = _ref.i18n,
            defaultNS = _ref.defaultNS,
            children = _ref.children;
          var value = reactExports.useMemo(function () {
            return {
              i18n: i18n,
              defaultNS: defaultNS
            };
          }, [i18n, defaultNS]);
          return reactExports.createElement(I18nContext.Provider, {
            value: value
          }, children);
        }
        var reactDom = {
          exports: {}
        };
        var reactDom_production_min = {};
        var scheduler = {
          exports: {}
        };
        var scheduler_production_min = {};

        /**
         * @license React
         * scheduler.production.min.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        (function (exports) {
          function f(a, b) {
            var c = a.length;
            a.push(b);
            a: for (; 0 < c;) {
              var d = c - 1 >>> 1,
                e = a[d];
              if (0 < g(e, b)) a[d] = b, a[c] = e, c = d;else break a;
            }
          }
          function h(a) {
            return 0 === a.length ? null : a[0];
          }
          function k(a) {
            if (0 === a.length) return null;
            var b = a[0],
              c = a.pop();
            if (c !== b) {
              a[0] = c;
              a: for (var d = 0, e = a.length, w = e >>> 1; d < w;) {
                var m = 2 * (d + 1) - 1,
                  C = a[m],
                  n = m + 1,
                  x = a[n];
                if (0 > g(C, c)) n < e && 0 > g(x, C) ? (a[d] = x, a[n] = c, d = n) : (a[d] = C, a[m] = c, d = m);else if (n < e && 0 > g(x, c)) a[d] = x, a[n] = c, d = n;else break a;
              }
            }
            return b;
          }
          function g(a, b) {
            var c = a.sortIndex - b.sortIndex;
            return 0 !== c ? c : a.id - b.id;
          }
          if ("object" === typeof performance && "function" === typeof performance.now) {
            var l = performance;
            exports.unstable_now = function () {
              return l.now();
            };
          } else {
            var p = Date,
              q = p.now();
            exports.unstable_now = function () {
              return p.now() - q;
            };
          }
          var r = [],
            t = [],
            u = 1,
            v = null,
            y = 3,
            z = !1,
            A = !1,
            B = !1,
            D = "function" === typeof setTimeout ? setTimeout : null,
            E = "function" === typeof clearTimeout ? clearTimeout : null,
            F = "undefined" !== typeof setImmediate ? setImmediate : null;
          "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
          function G(a) {
            for (var b = h(t); null !== b;) {
              if (null === b.callback) k(t);else if (b.startTime <= a) k(t), b.sortIndex = b.expirationTime, f(r, b);else break;
              b = h(t);
            }
          }
          function H(a) {
            B = !1;
            G(a);
            if (!A) if (null !== h(r)) A = !0, I(J);else {
              var b = h(t);
              null !== b && K(H, b.startTime - a);
            }
          }
          function J(a, b) {
            A = !1;
            B && (B = !1, E(L), L = -1);
            z = !0;
            var c = y;
            try {
              G(b);
              for (v = h(r); null !== v && (!(v.expirationTime > b) || a && !M());) {
                var d = v.callback;
                if ("function" === typeof d) {
                  v.callback = null;
                  y = v.priorityLevel;
                  var e = d(v.expirationTime <= b);
                  b = exports.unstable_now();
                  "function" === typeof e ? v.callback = e : v === h(r) && k(r);
                  G(b);
                } else k(r);
                v = h(r);
              }
              if (null !== v) var w = !0;else {
                var m = h(t);
                null !== m && K(H, m.startTime - b);
                w = !1;
              }
              return w;
            } finally {
              v = null, y = c, z = !1;
            }
          }
          var N = !1,
            O = null,
            L = -1,
            P = 5,
            Q = -1;
          function M() {
            return exports.unstable_now() - Q < P ? !1 : !0;
          }
          function R() {
            if (null !== O) {
              var a = exports.unstable_now();
              Q = a;
              var b = !0;
              try {
                b = O(!0, a);
              } finally {
                b ? S() : (N = !1, O = null);
              }
            } else N = !1;
          }
          var S;
          if ("function" === typeof F) S = function S() {
            F(R);
          };else if ("undefined" !== typeof MessageChannel) {
            var T = new MessageChannel(),
              U = T.port2;
            T.port1.onmessage = R;
            S = function S() {
              U.postMessage(null);
            };
          } else S = function S() {
            D(R, 0);
          };
          function I(a) {
            O = a;
            N || (N = !0, S());
          }
          function K(a, b) {
            L = D(function () {
              a(exports.unstable_now());
            }, b);
          }
          exports.unstable_IdlePriority = 5;
          exports.unstable_ImmediatePriority = 1;
          exports.unstable_LowPriority = 4;
          exports.unstable_NormalPriority = 3;
          exports.unstable_Profiling = null;
          exports.unstable_UserBlockingPriority = 2;
          exports.unstable_cancelCallback = function (a) {
            a.callback = null;
          };
          exports.unstable_continueExecution = function () {
            A || z || (A = !0, I(J));
          };
          exports.unstable_forceFrameRate = function (a) {
            0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P = 0 < a ? Math.floor(1E3 / a) : 5;
          };
          exports.unstable_getCurrentPriorityLevel = function () {
            return y;
          };
          exports.unstable_getFirstCallbackNode = function () {
            return h(r);
          };
          exports.unstable_next = function (a) {
            switch (y) {
              case 1:
              case 2:
              case 3:
                var b = 3;
                break;
              default:
                b = y;
            }
            var c = y;
            y = b;
            try {
              return a();
            } finally {
              y = c;
            }
          };
          exports.unstable_pauseExecution = function () {};
          exports.unstable_requestPaint = function () {};
          exports.unstable_runWithPriority = function (a, b) {
            switch (a) {
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
                break;
              default:
                a = 3;
            }
            var c = y;
            y = a;
            try {
              return b();
            } finally {
              y = c;
            }
          };
          exports.unstable_scheduleCallback = function (a, b, c) {
            var d = exports.unstable_now();
            "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;
            switch (a) {
              case 1:
                var e = -1;
                break;
              case 2:
                e = 250;
                break;
              case 5:
                e = 1073741823;
                break;
              case 4:
                e = 1E4;
                break;
              default:
                e = 5E3;
            }
            e = c + e;
            a = {
              id: u++,
              callback: b,
              priorityLevel: a,
              startTime: c,
              expirationTime: e,
              sortIndex: -1
            };
            c > d ? (a.sortIndex = c, f(t, a), null === h(r) && a === h(t) && (B ? (E(L), L = -1) : B = !0, K(H, c - d))) : (a.sortIndex = e, f(r, a), A || z || (A = !0, I(J)));
            return a;
          };
          exports.unstable_shouldYield = M;
          exports.unstable_wrapCallback = function (a) {
            var b = y;
            return function () {
              var c = y;
              y = b;
              try {
                return a.apply(this, arguments);
              } finally {
                y = c;
              }
            };
          };
        })(scheduler_production_min);
        {
          scheduler.exports = scheduler_production_min;
        }
        var schedulerExports = scheduler.exports;

        /**
         * @license React
         * react-dom.production.min.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        var aa = reactExports,
          ca = schedulerExports;
        function p$5(a) {
          for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) b += "&args[]=" + encodeURIComponent(arguments[c]);
          return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
        }
        var da = new Set(),
          ea = {};
        function fa(a, b) {
          ha(a, b);
          ha(a + "Capture", b);
        }
        function ha(a, b) {
          ea[a] = b;
          for (a = 0; a < b.length; a++) da.add(b[a]);
        }
        var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement),
          ja = Object.prototype.hasOwnProperty,
          ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
          la = {},
          ma = {};
        function oa(a) {
          if (ja.call(ma, a)) return !0;
          if (ja.call(la, a)) return !1;
          if (ka.test(a)) return ma[a] = !0;
          la[a] = !0;
          return !1;
        }
        function pa(a, b, c, d) {
          if (null !== c && 0 === c.type) return !1;
          switch (typeof b) {
            case "function":
            case "symbol":
              return !0;
            case "boolean":
              if (d) return !1;
              if (null !== c) return !c.acceptsBooleans;
              a = a.toLowerCase().slice(0, 5);
              return "data-" !== a && "aria-" !== a;
            default:
              return !1;
          }
        }
        function qa(a, b, c, d) {
          if (null === b || "undefined" === typeof b || pa(a, b, c, d)) return !0;
          if (d) return !1;
          if (null !== c) switch (c.type) {
            case 3:
              return !b;
            case 4:
              return !1 === b;
            case 5:
              return isNaN(b);
            case 6:
              return isNaN(b) || 1 > b;
          }
          return !1;
        }
        function v$4(a, b, c, d, e, f, g) {
          this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
          this.attributeName = d;
          this.attributeNamespace = e;
          this.mustUseProperty = c;
          this.propertyName = a;
          this.type = b;
          this.sanitizeURL = f;
          this.removeEmptyString = g;
        }
        var z$2 = {};
        "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function (a) {
          z$2[a] = new v$4(a, 0, !1, a, null, !1, !1);
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function (a) {
          var b = a[0];
          z$2[b] = new v$4(b, 1, !1, a[1], null, !1, !1);
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function (a) {
          z$2[a] = new v$4(a, 2, !1, a.toLowerCase(), null, !1, !1);
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function (a) {
          z$2[a] = new v$4(a, 2, !1, a, null, !1, !1);
        });
        "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function (a) {
          z$2[a] = new v$4(a, 3, !1, a.toLowerCase(), null, !1, !1);
        });
        ["checked", "multiple", "muted", "selected"].forEach(function (a) {
          z$2[a] = new v$4(a, 3, !0, a, null, !1, !1);
        });
        ["capture", "download"].forEach(function (a) {
          z$2[a] = new v$4(a, 4, !1, a, null, !1, !1);
        });
        ["cols", "rows", "size", "span"].forEach(function (a) {
          z$2[a] = new v$4(a, 6, !1, a, null, !1, !1);
        });
        ["rowSpan", "start"].forEach(function (a) {
          z$2[a] = new v$4(a, 5, !1, a.toLowerCase(), null, !1, !1);
        });
        var ra = /[\-:]([a-z])/g;
        function sa(a) {
          return a[1].toUpperCase();
        }
        "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function (a) {
          var b = a.replace(ra, sa);
          z$2[b] = new v$4(b, 1, !1, a, null, !1, !1);
        });
        "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function (a) {
          var b = a.replace(ra, sa);
          z$2[b] = new v$4(b, 1, !1, a, "http://www.w3.org/1999/xlink", !1, !1);
        });
        ["xml:base", "xml:lang", "xml:space"].forEach(function (a) {
          var b = a.replace(ra, sa);
          z$2[b] = new v$4(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1, !1);
        });
        ["tabIndex", "crossOrigin"].forEach(function (a) {
          z$2[a] = new v$4(a, 1, !1, a.toLowerCase(), null, !1, !1);
        });
        z$2.xlinkHref = new v$4("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);
        ["src", "href", "action", "formAction"].forEach(function (a) {
          z$2[a] = new v$4(a, 1, !1, a.toLowerCase(), null, !0, !0);
        });
        function ta(a, b, c, d) {
          var e = z$2.hasOwnProperty(b) ? z$2[b] : null;
          if (null !== e ? 0 !== e.type : d || !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1]) qa(b, c, e, d) && (c = null), d || null === e ? oa(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c)));
        }
        var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
          va = Symbol.for("react.element"),
          wa = Symbol.for("react.portal"),
          ya = Symbol.for("react.fragment"),
          za = Symbol.for("react.strict_mode"),
          Aa = Symbol.for("react.profiler"),
          Ba = Symbol.for("react.provider"),
          Ca = Symbol.for("react.context"),
          Da = Symbol.for("react.forward_ref"),
          Ea = Symbol.for("react.suspense"),
          Fa = Symbol.for("react.suspense_list"),
          Ga = Symbol.for("react.memo"),
          Ha = Symbol.for("react.lazy");
        var Ia = Symbol.for("react.offscreen");
        var Ja = Symbol.iterator;
        function Ka(a) {
          if (null === a || "object" !== typeof a) return null;
          a = Ja && a[Ja] || a["@@iterator"];
          return "function" === typeof a ? a : null;
        }
        var A$2 = Object.assign,
          La;
        function Ma(a) {
          if (void 0 === La) try {
            throw Error();
          } catch (c) {
            var b = c.stack.trim().match(/\n( *(at )?)/);
            La = b && b[1] || "";
          }
          return "\n" + La + a;
        }
        var Na = !1;
        function Oa(a, b) {
          if (!a || Na) return "";
          Na = !0;
          var c = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          try {
            if (b) {
              if (b = function b() {
                throw Error();
              }, Object.defineProperty(b.prototype, "props", {
                set: function set() {
                  throw Error();
                }
              }), "object" === typeof Reflect && Reflect.construct) {
                try {
                  Reflect.construct(b, []);
                } catch (l) {
                  var d = l;
                }
                Reflect.construct(a, [], b);
              } else {
                try {
                  b.call();
                } catch (l) {
                  d = l;
                }
                a.call(b.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (l) {
                d = l;
              }
              a();
            }
          } catch (l) {
            if (l && d && "string" === typeof l.stack) {
              for (var e = l.stack.split("\n"), f = d.stack.split("\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h];) h--;
              for (; 1 <= g && 0 <= h; g--, h--) if (e[g] !== f[h]) {
                if (1 !== g || 1 !== h) {
                  do if (g--, h--, 0 > h || e[g] !== f[h]) {
                    var k = "\n" + e[g].replace(" at new ", " at ");
                    a.displayName && k.includes("<anonymous>") && (k = k.replace("<anonymous>", a.displayName));
                    return k;
                  } while (1 <= g && 0 <= h);
                }
                break;
              }
            }
          } finally {
            Na = !1, Error.prepareStackTrace = c;
          }
          return (a = a ? a.displayName || a.name : "") ? Ma(a) : "";
        }
        function Pa(a) {
          switch (a.tag) {
            case 5:
              return Ma(a.type);
            case 16:
              return Ma("Lazy");
            case 13:
              return Ma("Suspense");
            case 19:
              return Ma("SuspenseList");
            case 0:
            case 2:
            case 15:
              return a = Oa(a.type, !1), a;
            case 11:
              return a = Oa(a.type.render, !1), a;
            case 1:
              return a = Oa(a.type, !0), a;
            default:
              return "";
          }
        }
        function Qa(a) {
          if (null == a) return null;
          if ("function" === typeof a) return a.displayName || a.name || null;
          if ("string" === typeof a) return a;
          switch (a) {
            case ya:
              return "Fragment";
            case wa:
              return "Portal";
            case Aa:
              return "Profiler";
            case za:
              return "StrictMode";
            case Ea:
              return "Suspense";
            case Fa:
              return "SuspenseList";
          }
          if ("object" === typeof a) switch (a.$$typeof) {
            case Ca:
              return (a.displayName || "Context") + ".Consumer";
            case Ba:
              return (a._context.displayName || "Context") + ".Provider";
            case Da:
              var b = a.render;
              a = a.displayName;
              a || (a = b.displayName || b.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
              return a;
            case Ga:
              return b = a.displayName || null, null !== b ? b : Qa(a.type) || "Memo";
            case Ha:
              b = a._payload;
              a = a._init;
              try {
                return Qa(a(b));
              } catch (c) {}
          }
          return null;
        }
        function Ra(a) {
          var b = a.type;
          switch (a.tag) {
            case 24:
              return "Cache";
            case 9:
              return (b.displayName || "Context") + ".Consumer";
            case 10:
              return (b._context.displayName || "Context") + ".Provider";
            case 18:
              return "DehydratedFragment";
            case 11:
              return a = b.render, a = a.displayName || a.name || "", b.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
            case 7:
              return "Fragment";
            case 5:
              return b;
            case 4:
              return "Portal";
            case 3:
              return "Root";
            case 6:
              return "Text";
            case 16:
              return Qa(b);
            case 8:
              return b === za ? "StrictMode" : "Mode";
            case 22:
              return "Offscreen";
            case 12:
              return "Profiler";
            case 21:
              return "Scope";
            case 13:
              return "Suspense";
            case 19:
              return "SuspenseList";
            case 25:
              return "TracingMarker";
            case 1:
            case 0:
            case 17:
            case 2:
            case 14:
            case 15:
              if ("function" === typeof b) return b.displayName || b.name || null;
              if ("string" === typeof b) return b;
          }
          return null;
        }
        function Sa(a) {
          switch (typeof a) {
            case "boolean":
            case "number":
            case "string":
            case "undefined":
              return a;
            case "object":
              return a;
            default:
              return "";
          }
        }
        function Ta(a) {
          var b = a.type;
          return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
        }
        function Ua(a) {
          var b = Ta(a) ? "checked" : "value",
            c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),
            d = "" + a[b];
          if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
            var e = c.get,
              f = c.set;
            Object.defineProperty(a, b, {
              configurable: !0,
              get: function get() {
                return e.call(this);
              },
              set: function set(a) {
                d = "" + a;
                f.call(this, a);
              }
            });
            Object.defineProperty(a, b, {
              enumerable: c.enumerable
            });
            return {
              getValue: function getValue() {
                return d;
              },
              setValue: function setValue(a) {
                d = "" + a;
              },
              stopTracking: function stopTracking() {
                a._valueTracker = null;
                delete a[b];
              }
            };
          }
        }
        function Va(a) {
          a._valueTracker || (a._valueTracker = Ua(a));
        }
        function Wa(a) {
          if (!a) return !1;
          var b = a._valueTracker;
          if (!b) return !0;
          var c = b.getValue();
          var d = "";
          a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);
          a = d;
          return a !== c ? (b.setValue(a), !0) : !1;
        }
        function Xa(a) {
          a = a || ("undefined" !== typeof document ? document : void 0);
          if ("undefined" === typeof a) return null;
          try {
            return a.activeElement || a.body;
          } catch (b) {
            return a.body;
          }
        }
        function Ya(a, b) {
          var c = b.checked;
          return A$2({}, b, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: null != c ? c : a._wrapperState.initialChecked
          });
        }
        function Za(a, b) {
          var c = null == b.defaultValue ? "" : b.defaultValue,
            d = null != b.checked ? b.checked : b.defaultChecked;
          c = Sa(null != b.value ? b.value : c);
          a._wrapperState = {
            initialChecked: d,
            initialValue: c,
            controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value
          };
        }
        function ab(a, b) {
          b = b.checked;
          null != b && ta(a, "checked", b, !1);
        }
        function bb(a, b) {
          ab(a, b);
          var c = Sa(b.value),
            d = b.type;
          if (null != c) {
            if ("number" === d) {
              if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
            } else a.value !== "" + c && (a.value = "" + c);
          } else if ("submit" === d || "reset" === d) {
            a.removeAttribute("value");
            return;
          }
          b.hasOwnProperty("value") ? cb(a, b.type, c) : b.hasOwnProperty("defaultValue") && cb(a, b.type, Sa(b.defaultValue));
          null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
        }
        function db(a, b, c) {
          if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
            var d = b.type;
            if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;
            b = "" + a._wrapperState.initialValue;
            c || b === a.value || (a.value = b);
            a.defaultValue = b;
          }
          c = a.name;
          "" !== c && (a.name = "");
          a.defaultChecked = !!a._wrapperState.initialChecked;
          "" !== c && (a.name = c);
        }
        function cb(a, b, c) {
          if ("number" !== b || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
        }
        var eb = Array.isArray;
        function fb(a, b, c, d) {
          a = a.options;
          if (b) {
            b = {};
            for (var e = 0; e < c.length; e++) b["$" + c[e]] = !0;
            for (c = 0; c < a.length; c++) e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);
          } else {
            c = "" + Sa(c);
            b = null;
            for (e = 0; e < a.length; e++) {
              if (a[e].value === c) {
                a[e].selected = !0;
                d && (a[e].defaultSelected = !0);
                return;
              }
              null !== b || a[e].disabled || (b = a[e]);
            }
            null !== b && (b.selected = !0);
          }
        }
        function gb(a, b) {
          if (null != b.dangerouslySetInnerHTML) throw Error(p$5(91));
          return A$2({}, b, {
            value: void 0,
            defaultValue: void 0,
            children: "" + a._wrapperState.initialValue
          });
        }
        function hb(a, b) {
          var c = b.value;
          if (null == c) {
            c = b.children;
            b = b.defaultValue;
            if (null != c) {
              if (null != b) throw Error(p$5(92));
              if (eb(c)) {
                if (1 < c.length) throw Error(p$5(93));
                c = c[0];
              }
              b = c;
            }
            null == b && (b = "");
            c = b;
          }
          a._wrapperState = {
            initialValue: Sa(c)
          };
        }
        function ib(a, b) {
          var c = Sa(b.value),
            d = Sa(b.defaultValue);
          null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
          null != d && (a.defaultValue = "" + d);
        }
        function jb(a) {
          var b = a.textContent;
          b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);
        }
        function kb(a) {
          switch (a) {
            case "svg":
              return "http://www.w3.org/2000/svg";
            case "math":
              return "http://www.w3.org/1998/Math/MathML";
            default:
              return "http://www.w3.org/1999/xhtml";
          }
        }
        function lb(a, b) {
          return null == a || "http://www.w3.org/1999/xhtml" === a ? kb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
        }
        var mb,
          nb = function (a) {
            return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {
              MSApp.execUnsafeLocalFunction(function () {
                return a(b, c, d, e);
              });
            } : a;
          }(function (a, b) {
            if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a) a.innerHTML = b;else {
              mb = mb || document.createElement("div");
              mb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";
              for (b = mb.firstChild; a.firstChild;) a.removeChild(a.firstChild);
              for (; b.firstChild;) a.appendChild(b.firstChild);
            }
          });
        function ob(a, b) {
          if (b) {
            var c = a.firstChild;
            if (c && c === a.lastChild && 3 === c.nodeType) {
              c.nodeValue = b;
              return;
            }
          }
          a.textContent = b;
        }
        var pb = {
            animationIterationCount: !0,
            aspectRatio: !0,
            borderImageOutset: !0,
            borderImageSlice: !0,
            borderImageWidth: !0,
            boxFlex: !0,
            boxFlexGroup: !0,
            boxOrdinalGroup: !0,
            columnCount: !0,
            columns: !0,
            flex: !0,
            flexGrow: !0,
            flexPositive: !0,
            flexShrink: !0,
            flexNegative: !0,
            flexOrder: !0,
            gridArea: !0,
            gridRow: !0,
            gridRowEnd: !0,
            gridRowSpan: !0,
            gridRowStart: !0,
            gridColumn: !0,
            gridColumnEnd: !0,
            gridColumnSpan: !0,
            gridColumnStart: !0,
            fontWeight: !0,
            lineClamp: !0,
            lineHeight: !0,
            opacity: !0,
            order: !0,
            orphans: !0,
            tabSize: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0,
            fillOpacity: !0,
            floodOpacity: !0,
            stopOpacity: !0,
            strokeDasharray: !0,
            strokeDashoffset: !0,
            strokeMiterlimit: !0,
            strokeOpacity: !0,
            strokeWidth: !0
          },
          qb = ["Webkit", "ms", "Moz", "O"];
        Object.keys(pb).forEach(function (a) {
          qb.forEach(function (b) {
            b = b + a.charAt(0).toUpperCase() + a.substring(1);
            pb[b] = pb[a];
          });
        });
        function rb(a, b, c) {
          return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || pb.hasOwnProperty(a) && pb[a] ? ("" + b).trim() : b + "px";
        }
        function sb(a, b) {
          a = a.style;
          for (var c in b) if (b.hasOwnProperty(c)) {
            var d = 0 === c.indexOf("--"),
              e = rb(c, b[c], d);
            "float" === c && (c = "cssFloat");
            d ? a.setProperty(c, e) : a[c] = e;
          }
        }
        var tb = A$2({
          menuitem: !0
        }, {
          area: !0,
          base: !0,
          br: !0,
          col: !0,
          embed: !0,
          hr: !0,
          img: !0,
          input: !0,
          keygen: !0,
          link: !0,
          meta: !0,
          param: !0,
          source: !0,
          track: !0,
          wbr: !0
        });
        function ub(a, b) {
          if (b) {
            if (tb[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(p$5(137, a));
            if (null != b.dangerouslySetInnerHTML) {
              if (null != b.children) throw Error(p$5(60));
              if ("object" !== typeof b.dangerouslySetInnerHTML || !("__html" in b.dangerouslySetInnerHTML)) throw Error(p$5(61));
            }
            if (null != b.style && "object" !== typeof b.style) throw Error(p$5(62));
          }
        }
        function vb(a, b) {
          if (-1 === a.indexOf("-")) return "string" === typeof b.is;
          switch (a) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return !1;
            default:
              return !0;
          }
        }
        var wb = null;
        function xb(a) {
          a = a.target || a.srcElement || window;
          a.correspondingUseElement && (a = a.correspondingUseElement);
          return 3 === a.nodeType ? a.parentNode : a;
        }
        var yb = null,
          zb = null,
          Ab = null;
        function Bb(a) {
          if (a = Cb(a)) {
            if ("function" !== typeof yb) throw Error(p$5(280));
            var b = a.stateNode;
            b && (b = Db(b), yb(a.stateNode, a.type, b));
          }
        }
        function Eb(a) {
          zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
        }
        function Fb() {
          if (zb) {
            var a = zb,
              b = Ab;
            Ab = zb = null;
            Bb(a);
            if (b) for (a = 0; a < b.length; a++) Bb(b[a]);
          }
        }
        function Gb(a, b) {
          return a(b);
        }
        function Hb() {}
        var Ib = !1;
        function Jb(a, b, c) {
          if (Ib) return a(b, c);
          Ib = !0;
          try {
            return Gb(a, b, c);
          } finally {
            if (Ib = !1, null !== zb || null !== Ab) Hb(), Fb();
          }
        }
        function Kb(a, b) {
          var c = a.stateNode;
          if (null === c) return null;
          var d = Db(c);
          if (null === d) return null;
          c = d[b];
          a: switch (b) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
              a = !d;
              break a;
            default:
              a = !1;
          }
          if (a) return null;
          if (c && "function" !== typeof c) throw Error(p$5(231, b, typeof c));
          return c;
        }
        var Lb = !1;
        if (ia) try {
          var Mb = {};
          Object.defineProperty(Mb, "passive", {
            get: function get() {
              Lb = !0;
            }
          });
          window.addEventListener("test", Mb, Mb);
          window.removeEventListener("test", Mb, Mb);
        } catch (a) {
          Lb = !1;
        }
        function Nb(a, b, c, d, e, f, g, h, k) {
          var l = Array.prototype.slice.call(arguments, 3);
          try {
            b.apply(c, l);
          } catch (m) {
            this.onError(m);
          }
        }
        var Ob = !1,
          Pb = null,
          Qb = !1,
          Rb = null,
          Sb = {
            onError: function onError(a) {
              Ob = !0;
              Pb = a;
            }
          };
        function Tb(a, b, c, d, e, f, g, h, k) {
          Ob = !1;
          Pb = null;
          Nb.apply(Sb, arguments);
        }
        function Ub(a, b, c, d, e, f, g, h, k) {
          Tb.apply(this, arguments);
          if (Ob) {
            if (Ob) {
              var l = Pb;
              Ob = !1;
              Pb = null;
            } else throw Error(p$5(198));
            Qb || (Qb = !0, Rb = l);
          }
        }
        function Vb(a) {
          var b = a,
            c = a;
          if (a.alternate) for (; b.return;) b = b.return;else {
            a = b;
            do b = a, 0 !== (b.flags & 4098) && (c = b.return), a = b.return; while (a);
          }
          return 3 === b.tag ? c : null;
        }
        function Wb(a) {
          if (13 === a.tag) {
            var b = a.memoizedState;
            null === b && (a = a.alternate, null !== a && (b = a.memoizedState));
            if (null !== b) return b.dehydrated;
          }
          return null;
        }
        function Xb(a) {
          if (Vb(a) !== a) throw Error(p$5(188));
        }
        function Yb(a) {
          var b = a.alternate;
          if (!b) {
            b = Vb(a);
            if (null === b) throw Error(p$5(188));
            return b !== a ? null : a;
          }
          for (var c = a, d = b;;) {
            var e = c.return;
            if (null === e) break;
            var f = e.alternate;
            if (null === f) {
              d = e.return;
              if (null !== d) {
                c = d;
                continue;
              }
              break;
            }
            if (e.child === f.child) {
              for (f = e.child; f;) {
                if (f === c) return Xb(e), a;
                if (f === d) return Xb(e), b;
                f = f.sibling;
              }
              throw Error(p$5(188));
            }
            if (c.return !== d.return) c = e, d = f;else {
              for (var g = !1, h = e.child; h;) {
                if (h === c) {
                  g = !0;
                  c = e;
                  d = f;
                  break;
                }
                if (h === d) {
                  g = !0;
                  d = e;
                  c = f;
                  break;
                }
                h = h.sibling;
              }
              if (!g) {
                for (h = f.child; h;) {
                  if (h === c) {
                    g = !0;
                    c = f;
                    d = e;
                    break;
                  }
                  if (h === d) {
                    g = !0;
                    d = f;
                    c = e;
                    break;
                  }
                  h = h.sibling;
                }
                if (!g) throw Error(p$5(189));
              }
            }
            if (c.alternate !== d) throw Error(p$5(190));
          }
          if (3 !== c.tag) throw Error(p$5(188));
          return c.stateNode.current === c ? a : b;
        }
        function Zb(a) {
          a = Yb(a);
          return null !== a ? $b(a) : null;
        }
        function $b(a) {
          if (5 === a.tag || 6 === a.tag) return a;
          for (a = a.child; null !== a;) {
            var b = $b(a);
            if (null !== b) return b;
            a = a.sibling;
          }
          return null;
        }
        var ac = ca.unstable_scheduleCallback,
          bc = ca.unstable_cancelCallback,
          cc = ca.unstable_shouldYield,
          dc = ca.unstable_requestPaint,
          B$1 = ca.unstable_now,
          ec = ca.unstable_getCurrentPriorityLevel,
          fc = ca.unstable_ImmediatePriority,
          gc = ca.unstable_UserBlockingPriority,
          hc = ca.unstable_NormalPriority,
          ic = ca.unstable_LowPriority,
          jc = ca.unstable_IdlePriority,
          kc = null,
          lc = null;
        function mc(a) {
          if (lc && "function" === typeof lc.onCommitFiberRoot) try {
            lc.onCommitFiberRoot(kc, a, void 0, 128 === (a.current.flags & 128));
          } catch (b) {}
        }
        var oc = Math.clz32 ? Math.clz32 : nc,
          pc = Math.log,
          qc = Math.LN2;
        function nc(a) {
          a >>>= 0;
          return 0 === a ? 32 : 31 - (pc(a) / qc | 0) | 0;
        }
        var rc = 64,
          sc = 4194304;
        function tc(a) {
          switch (a & -a) {
            case 1:
              return 1;
            case 2:
              return 2;
            case 4:
              return 4;
            case 8:
              return 8;
            case 16:
              return 16;
            case 32:
              return 32;
            case 64:
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
              return a & 4194240;
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
            case 67108864:
              return a & 130023424;
            case 134217728:
              return 134217728;
            case 268435456:
              return 268435456;
            case 536870912:
              return 536870912;
            case 1073741824:
              return 1073741824;
            default:
              return a;
          }
        }
        function uc(a, b) {
          var c = a.pendingLanes;
          if (0 === c) return 0;
          var d = 0,
            e = a.suspendedLanes,
            f = a.pingedLanes,
            g = c & 268435455;
          if (0 !== g) {
            var h = g & ~e;
            0 !== h ? d = tc(h) : (f &= g, 0 !== f && (d = tc(f)));
          } else g = c & ~e, 0 !== g ? d = tc(g) : 0 !== f && (d = tc(f));
          if (0 === d) return 0;
          if (0 !== b && b !== d && 0 === (b & e) && (e = d & -d, f = b & -b, e >= f || 16 === e && 0 !== (f & 4194240))) return b;
          0 !== (d & 4) && (d |= c & 16);
          b = a.entangledLanes;
          if (0 !== b) for (a = a.entanglements, b &= d; 0 < b;) c = 31 - oc(b), e = 1 << c, d |= a[c], b &= ~e;
          return d;
        }
        function vc(a, b) {
          switch (a) {
            case 1:
            case 2:
            case 4:
              return b + 250;
            case 8:
            case 16:
            case 32:
            case 64:
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
              return b + 5E3;
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
            case 67108864:
              return -1;
            case 134217728:
            case 268435456:
            case 536870912:
            case 1073741824:
              return -1;
            default:
              return -1;
          }
        }
        function wc(a, b) {
          for (var c = a.suspendedLanes, d = a.pingedLanes, e = a.expirationTimes, f = a.pendingLanes; 0 < f;) {
            var g = 31 - oc(f),
              h = 1 << g,
              k = e[g];
            if (-1 === k) {
              if (0 === (h & c) || 0 !== (h & d)) e[g] = vc(h, b);
            } else k <= b && (a.expiredLanes |= h);
            f &= ~h;
          }
        }
        function xc(a) {
          a = a.pendingLanes & -1073741825;
          return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
        }
        function yc() {
          var a = rc;
          rc <<= 1;
          0 === (rc & 4194240) && (rc = 64);
          return a;
        }
        function zc(a) {
          for (var b = [], c = 0; 31 > c; c++) b.push(a);
          return b;
        }
        function Ac(a, b, c) {
          a.pendingLanes |= b;
          536870912 !== b && (a.suspendedLanes = 0, a.pingedLanes = 0);
          a = a.eventTimes;
          b = 31 - oc(b);
          a[b] = c;
        }
        function Bc(a, b) {
          var c = a.pendingLanes & ~b;
          a.pendingLanes = b;
          a.suspendedLanes = 0;
          a.pingedLanes = 0;
          a.expiredLanes &= b;
          a.mutableReadLanes &= b;
          a.entangledLanes &= b;
          b = a.entanglements;
          var d = a.eventTimes;
          for (a = a.expirationTimes; 0 < c;) {
            var e = 31 - oc(c),
              f = 1 << e;
            b[e] = 0;
            d[e] = -1;
            a[e] = -1;
            c &= ~f;
          }
        }
        function Cc(a, b) {
          var c = a.entangledLanes |= b;
          for (a = a.entanglements; c;) {
            var d = 31 - oc(c),
              e = 1 << d;
            e & b | a[d] & b && (a[d] |= b);
            c &= ~e;
          }
        }
        var C = 0;
        function Dc(a) {
          a &= -a;
          return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;
        }
        var Ec,
          Fc,
          Gc,
          Hc,
          Ic,
          Jc = !1,
          Kc = [],
          Lc = null,
          Mc = null,
          Nc = null,
          Oc = new Map(),
          Pc = new Map(),
          Qc = [],
          Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
        function Sc(a, b) {
          switch (a) {
            case "focusin":
            case "focusout":
              Lc = null;
              break;
            case "dragenter":
            case "dragleave":
              Mc = null;
              break;
            case "mouseover":
            case "mouseout":
              Nc = null;
              break;
            case "pointerover":
            case "pointerout":
              Oc.delete(b.pointerId);
              break;
            case "gotpointercapture":
            case "lostpointercapture":
              Pc.delete(b.pointerId);
          }
        }
        function Tc(a, b, c, d, e, f) {
          if (null === a || a.nativeEvent !== f) return a = {
            blockedOn: b,
            domEventName: c,
            eventSystemFlags: d,
            nativeEvent: f,
            targetContainers: [e]
          }, null !== b && (b = Cb(b), null !== b && Fc(b)), a;
          a.eventSystemFlags |= d;
          b = a.targetContainers;
          null !== e && -1 === b.indexOf(e) && b.push(e);
          return a;
        }
        function Uc(a, b, c, d, e) {
          switch (b) {
            case "focusin":
              return Lc = Tc(Lc, a, b, c, d, e), !0;
            case "dragenter":
              return Mc = Tc(Mc, a, b, c, d, e), !0;
            case "mouseover":
              return Nc = Tc(Nc, a, b, c, d, e), !0;
            case "pointerover":
              var f = e.pointerId;
              Oc.set(f, Tc(Oc.get(f) || null, a, b, c, d, e));
              return !0;
            case "gotpointercapture":
              return f = e.pointerId, Pc.set(f, Tc(Pc.get(f) || null, a, b, c, d, e)), !0;
          }
          return !1;
        }
        function Vc(a) {
          var b = Wc(a.target);
          if (null !== b) {
            var c = Vb(b);
            if (null !== c) if (b = c.tag, 13 === b) {
              if (b = Wb(c), null !== b) {
                a.blockedOn = b;
                Ic(a.priority, function () {
                  Gc(c);
                });
                return;
              }
            } else if (3 === b && c.stateNode.current.memoizedState.isDehydrated) {
              a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
              return;
            }
          }
          a.blockedOn = null;
        }
        function Xc(a) {
          if (null !== a.blockedOn) return !1;
          for (var b = a.targetContainers; 0 < b.length;) {
            var c = Yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
            if (null === c) {
              c = a.nativeEvent;
              var d = new c.constructor(c.type, c);
              wb = d;
              c.target.dispatchEvent(d);
              wb = null;
            } else return b = Cb(c), null !== b && Fc(b), a.blockedOn = c, !1;
            b.shift();
          }
          return !0;
        }
        function Zc(a, b, c) {
          Xc(a) && c.delete(b);
        }
        function $c() {
          Jc = !1;
          null !== Lc && Xc(Lc) && (Lc = null);
          null !== Mc && Xc(Mc) && (Mc = null);
          null !== Nc && Xc(Nc) && (Nc = null);
          Oc.forEach(Zc);
          Pc.forEach(Zc);
        }
        function ad(a, b) {
          a.blockedOn === b && (a.blockedOn = null, Jc || (Jc = !0, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
        }
        function bd(a) {
          function b(b) {
            return ad(b, a);
          }
          if (0 < Kc.length) {
            ad(Kc[0], a);
            for (var c = 1; c < Kc.length; c++) {
              var d = Kc[c];
              d.blockedOn === a && (d.blockedOn = null);
            }
          }
          null !== Lc && ad(Lc, a);
          null !== Mc && ad(Mc, a);
          null !== Nc && ad(Nc, a);
          Oc.forEach(b);
          Pc.forEach(b);
          for (c = 0; c < Qc.length; c++) d = Qc[c], d.blockedOn === a && (d.blockedOn = null);
          for (; 0 < Qc.length && (c = Qc[0], null === c.blockedOn);) Vc(c), null === c.blockedOn && Qc.shift();
        }
        var cd = ua.ReactCurrentBatchConfig,
          dd = !0;
        function ed(a, b, c, d) {
          var e = C,
            f = cd.transition;
          cd.transition = null;
          try {
            C = 1, fd(a, b, c, d);
          } finally {
            C = e, cd.transition = f;
          }
        }
        function gd(a, b, c, d) {
          var e = C,
            f = cd.transition;
          cd.transition = null;
          try {
            C = 4, fd(a, b, c, d);
          } finally {
            C = e, cd.transition = f;
          }
        }
        function fd(a, b, c, d) {
          if (dd) {
            var e = Yc(a, b, c, d);
            if (null === e) hd(a, b, d, id, c), Sc(a, d);else if (Uc(e, a, b, c, d)) d.stopPropagation();else if (Sc(a, d), b & 4 && -1 < Rc.indexOf(a)) {
              for (; null !== e;) {
                var f = Cb(e);
                null !== f && Ec(f);
                f = Yc(a, b, c, d);
                null === f && hd(a, b, d, id, c);
                if (f === e) break;
                e = f;
              }
              null !== e && d.stopPropagation();
            } else hd(a, b, d, null, c);
          }
        }
        var id = null;
        function Yc(a, b, c, d) {
          id = null;
          a = xb(d);
          a = Wc(a);
          if (null !== a) if (b = Vb(a), null === b) a = null;else if (c = b.tag, 13 === c) {
            a = Wb(b);
            if (null !== a) return a;
            a = null;
          } else if (3 === c) {
            if (b.stateNode.current.memoizedState.isDehydrated) return 3 === b.tag ? b.stateNode.containerInfo : null;
            a = null;
          } else b !== a && (a = null);
          id = a;
          return null;
        }
        function jd(a) {
          switch (a) {
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            case "beforeblur":
            case "afterblur":
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
              return 1;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "toggle":
            case "touchmove":
            case "wheel":
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
              return 4;
            case "message":
              switch (ec()) {
                case fc:
                  return 1;
                case gc:
                  return 4;
                case hc:
                case ic:
                  return 16;
                case jc:
                  return 536870912;
                default:
                  return 16;
              }
            default:
              return 16;
          }
        }
        var kd = null,
          ld = null,
          md = null;
        function nd() {
          if (md) return md;
          var a,
            b = ld,
            c = b.length,
            d,
            e = "value" in kd ? kd.value : kd.textContent,
            f = e.length;
          for (a = 0; a < c && b[a] === e[a]; a++);
          var g = c - a;
          for (d = 1; d <= g && b[c - d] === e[f - d]; d++);
          return md = e.slice(a, 1 < d ? 1 - d : void 0);
        }
        function od(a) {
          var b = a.keyCode;
          "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
          10 === a && (a = 13);
          return 32 <= a || 13 === a ? a : 0;
        }
        function pd() {
          return !0;
        }
        function qd() {
          return !1;
        }
        function rd(a) {
          function b(b, d, e, f, g) {
            this._reactName = b;
            this._targetInst = e;
            this.type = d;
            this.nativeEvent = f;
            this.target = g;
            this.currentTarget = null;
            for (var c in a) a.hasOwnProperty(c) && (b = a[c], this[c] = b ? b(f) : f[c]);
            this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : !1 === f.returnValue) ? pd : qd;
            this.isPropagationStopped = qd;
            return this;
          }
          A$2(b.prototype, {
            preventDefault: function preventDefault() {
              this.defaultPrevented = !0;
              var a = this.nativeEvent;
              a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = pd);
            },
            stopPropagation: function stopPropagation() {
              var a = this.nativeEvent;
              a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = pd);
            },
            persist: function persist() {},
            isPersistent: pd
          });
          return b;
        }
        var sd = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function timeStamp(a) {
              return a.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          },
          td = rd(sd),
          ud = A$2({}, sd, {
            view: 0,
            detail: 0
          }),
          vd = rd(ud),
          wd,
          xd,
          yd,
          Ad = A$2({}, ud, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: zd,
            button: 0,
            buttons: 0,
            relatedTarget: function relatedTarget(a) {
              return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
            },
            movementX: function movementX(a) {
              if ("movementX" in a) return a.movementX;
              a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
              return wd;
            },
            movementY: function movementY(a) {
              return "movementY" in a ? a.movementY : xd;
            }
          }),
          Bd = rd(Ad),
          Cd = A$2({}, Ad, {
            dataTransfer: 0
          }),
          Dd = rd(Cd),
          Ed = A$2({}, ud, {
            relatedTarget: 0
          }),
          Fd = rd(Ed),
          Gd = A$2({}, sd, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          }),
          Hd = rd(Gd),
          Id = A$2({}, sd, {
            clipboardData: function clipboardData(a) {
              return "clipboardData" in a ? a.clipboardData : window.clipboardData;
            }
          }),
          Jd = rd(Id),
          Kd = A$2({}, sd, {
            data: 0
          }),
          Ld = rd(Kd),
          Md = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          },
          Nd = {
            8: "Backspace",
            9: "Tab",
            12: "Clear",
            13: "Enter",
            16: "Shift",
            17: "Control",
            18: "Alt",
            19: "Pause",
            20: "CapsLock",
            27: "Escape",
            32: " ",
            33: "PageUp",
            34: "PageDown",
            35: "End",
            36: "Home",
            37: "ArrowLeft",
            38: "ArrowUp",
            39: "ArrowRight",
            40: "ArrowDown",
            45: "Insert",
            46: "Delete",
            112: "F1",
            113: "F2",
            114: "F3",
            115: "F4",
            116: "F5",
            117: "F6",
            118: "F7",
            119: "F8",
            120: "F9",
            121: "F10",
            122: "F11",
            123: "F12",
            144: "NumLock",
            145: "ScrollLock",
            224: "Meta"
          },
          Od = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
        function Pd(a) {
          var b = this.nativeEvent;
          return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : !1;
        }
        function zd() {
          return Pd;
        }
        var Qd = A$2({}, ud, {
            key: function key(a) {
              if (a.key) {
                var b = Md[a.key] || a.key;
                if ("Unidentified" !== b) return b;
              }
              return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
            },
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: zd,
            charCode: function charCode(a) {
              return "keypress" === a.type ? od(a) : 0;
            },
            keyCode: function keyCode(a) {
              return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
            },
            which: function which(a) {
              return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
            }
          }),
          Rd = rd(Qd),
          Sd = A$2({}, Ad, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          }),
          Td = rd(Sd),
          Ud = A$2({}, ud, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: zd
          }),
          Vd = rd(Ud),
          Wd = A$2({}, sd, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          }),
          Xd = rd(Wd),
          Yd = A$2({}, Ad, {
            deltaX: function deltaX(a) {
              return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
            },
            deltaY: function deltaY(a) {
              return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          }),
          Zd = rd(Yd),
          $d = [9, 13, 27, 32],
          ae = ia && "CompositionEvent" in window,
          be = null;
        ia && "documentMode" in document && (be = document.documentMode);
        var ce = ia && "TextEvent" in window && !be,
          de = ia && (!ae || be && 8 < be && 11 >= be),
          ee = String.fromCharCode(32),
          fe = !1;
        function ge(a, b) {
          switch (a) {
            case "keyup":
              return -1 !== $d.indexOf(b.keyCode);
            case "keydown":
              return 229 !== b.keyCode;
            case "keypress":
            case "mousedown":
            case "focusout":
              return !0;
            default:
              return !1;
          }
        }
        function he(a) {
          a = a.detail;
          return "object" === typeof a && "data" in a ? a.data : null;
        }
        var ie = !1;
        function je(a, b) {
          switch (a) {
            case "compositionend":
              return he(b);
            case "keypress":
              if (32 !== b.which) return null;
              fe = !0;
              return ee;
            case "textInput":
              return a = b.data, a === ee && fe ? null : a;
            default:
              return null;
          }
        }
        function ke(a, b) {
          if (ie) return "compositionend" === a || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = !1, a) : null;
          switch (a) {
            case "paste":
              return null;
            case "keypress":
              if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
                if (b.char && 1 < b.char.length) return b.char;
                if (b.which) return String.fromCharCode(b.which);
              }
              return null;
            case "compositionend":
              return de && "ko" !== b.locale ? null : b.data;
            default:
              return null;
          }
        }
        var le = {
          color: !0,
          date: !0,
          datetime: !0,
          "datetime-local": !0,
          email: !0,
          month: !0,
          number: !0,
          password: !0,
          range: !0,
          search: !0,
          tel: !0,
          text: !0,
          time: !0,
          url: !0,
          week: !0
        };
        function me(a) {
          var b = a && a.nodeName && a.nodeName.toLowerCase();
          return "input" === b ? !!le[a.type] : "textarea" === b ? !0 : !1;
        }
        function ne(a, b, c, d) {
          Eb(d);
          b = oe(b, "onChange");
          0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({
            event: c,
            listeners: b
          }));
        }
        var pe = null,
          qe = null;
        function re(a) {
          se(a, 0);
        }
        function te(a) {
          var b = ue(a);
          if (Wa(b)) return a;
        }
        function ve(a, b) {
          if ("change" === a) return b;
        }
        var we = !1;
        if (ia) {
          var xe;
          if (ia) {
            var ye = ("oninput" in document);
            if (!ye) {
              var ze = document.createElement("div");
              ze.setAttribute("oninput", "return;");
              ye = "function" === typeof ze.oninput;
            }
            xe = ye;
          } else xe = !1;
          we = xe && (!document.documentMode || 9 < document.documentMode);
        }
        function Ae() {
          pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
        }
        function Be(a) {
          if ("value" === a.propertyName && te(qe)) {
            var b = [];
            ne(b, qe, a, xb(a));
            Jb(re, b);
          }
        }
        function Ce(a, b, c) {
          "focusin" === a ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
        }
        function De(a) {
          if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);
        }
        function Ee(a, b) {
          if ("click" === a) return te(b);
        }
        function Fe(a, b) {
          if ("input" === a || "change" === a) return te(b);
        }
        function Ge(a, b) {
          return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
        }
        var He = "function" === typeof Object.is ? Object.is : Ge;
        function Ie(a, b) {
          if (He(a, b)) return !0;
          if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) return !1;
          var c = Object.keys(a),
            d = Object.keys(b);
          if (c.length !== d.length) return !1;
          for (d = 0; d < c.length; d++) {
            var e = c[d];
            if (!ja.call(b, e) || !He(a[e], b[e])) return !1;
          }
          return !0;
        }
        function Je(a) {
          for (; a && a.firstChild;) a = a.firstChild;
          return a;
        }
        function Ke(a, b) {
          var c = Je(a);
          a = 0;
          for (var d; c;) {
            if (3 === c.nodeType) {
              d = a + c.textContent.length;
              if (a <= b && d >= b) return {
                node: c,
                offset: b - a
              };
              a = d;
            }
            a: {
              for (; c;) {
                if (c.nextSibling) {
                  c = c.nextSibling;
                  break a;
                }
                c = c.parentNode;
              }
              c = void 0;
            }
            c = Je(c);
          }
        }
        function Le(a, b) {
          return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? Le(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;
        }
        function Me() {
          for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement;) {
            try {
              var c = "string" === typeof b.contentWindow.location.href;
            } catch (d) {
              c = !1;
            }
            if (c) a = b.contentWindow;else break;
            b = Xa(a.document);
          }
          return b;
        }
        function Ne(a) {
          var b = a && a.nodeName && a.nodeName.toLowerCase();
          return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
        }
        function Oe(a) {
          var b = Me(),
            c = a.focusedElem,
            d = a.selectionRange;
          if (b !== c && c && c.ownerDocument && Le(c.ownerDocument.documentElement, c)) {
            if (null !== d && Ne(c)) if (b = d.start, a = d.end, void 0 === a && (a = b), "selectionStart" in c) c.selectionStart = b, c.selectionEnd = Math.min(a, c.value.length);else if (a = (b = c.ownerDocument || document) && b.defaultView || window, a.getSelection) {
              a = a.getSelection();
              var e = c.textContent.length,
                f = Math.min(d.start, e);
              d = void 0 === d.end ? f : Math.min(d.end, e);
              !a.extend && f > d && (e = d, d = f, f = e);
              e = Ke(c, f);
              var g = Ke(c, d);
              e && g && (1 !== a.rangeCount || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g.node || a.focusOffset !== g.offset) && (b = b.createRange(), b.setStart(e.node, e.offset), a.removeAllRanges(), f > d ? (a.addRange(b), a.extend(g.node, g.offset)) : (b.setEnd(g.node, g.offset), a.addRange(b)));
            }
            b = [];
            for (a = c; a = a.parentNode;) 1 === a.nodeType && b.push({
              element: a,
              left: a.scrollLeft,
              top: a.scrollTop
            });
            "function" === typeof c.focus && c.focus();
            for (c = 0; c < b.length; c++) a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
          }
        }
        var Pe = ia && "documentMode" in document && 11 >= document.documentMode,
          Qe = null,
          Re = null,
          Se = null,
          Te = !1;
        function Ue(a, b, c) {
          var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
          Te || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Ne(d) ? d = {
            start: d.selectionStart,
            end: d.selectionEnd
          } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = {
            anchorNode: d.anchorNode,
            anchorOffset: d.anchorOffset,
            focusNode: d.focusNode,
            focusOffset: d.focusOffset
          }), Se && Ie(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({
            event: b,
            listeners: d
          }), b.target = Qe)));
        }
        function Ve(a, b) {
          var c = {};
          c[a.toLowerCase()] = b.toLowerCase();
          c["Webkit" + a] = "webkit" + b;
          c["Moz" + a] = "moz" + b;
          return c;
        }
        var We = {
            animationend: Ve("Animation", "AnimationEnd"),
            animationiteration: Ve("Animation", "AnimationIteration"),
            animationstart: Ve("Animation", "AnimationStart"),
            transitionend: Ve("Transition", "TransitionEnd")
          },
          Xe = {},
          Ye = {};
        ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
        function Ze(a) {
          if (Xe[a]) return Xe[a];
          if (!We[a]) return a;
          var b = We[a],
            c;
          for (c in b) if (b.hasOwnProperty(c) && c in Ye) return Xe[a] = b[c];
          return a;
        }
        var $e = Ze("animationend"),
          af = Ze("animationiteration"),
          bf = Ze("animationstart"),
          cf = Ze("transitionend"),
          df = new Map(),
          ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
        function ff(a, b) {
          df.set(a, b);
          fa(b, [a]);
        }
        for (var gf = 0; gf < ef.length; gf++) {
          var hf = ef[gf],
            jf = hf.toLowerCase(),
            kf = hf[0].toUpperCase() + hf.slice(1);
          ff(jf, "on" + kf);
        }
        ff($e, "onAnimationEnd");
        ff(af, "onAnimationIteration");
        ff(bf, "onAnimationStart");
        ff("dblclick", "onDoubleClick");
        ff("focusin", "onFocus");
        ff("focusout", "onBlur");
        ff(cf, "onTransitionEnd");
        ha("onMouseEnter", ["mouseout", "mouseover"]);
        ha("onMouseLeave", ["mouseout", "mouseover"]);
        ha("onPointerEnter", ["pointerout", "pointerover"]);
        ha("onPointerLeave", ["pointerout", "pointerover"]);
        fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
        fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
        fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
        fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
        fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
        fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
        var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),
          mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
        function nf(a, b, c) {
          var d = a.type || "unknown-event";
          a.currentTarget = c;
          Ub(d, b, void 0, a);
          a.currentTarget = null;
        }
        function se(a, b) {
          b = 0 !== (b & 4);
          for (var c = 0; c < a.length; c++) {
            var d = a[c],
              e = d.event;
            d = d.listeners;
            a: {
              var f = void 0;
              if (b) for (var g = d.length - 1; 0 <= g; g--) {
                var h = d[g],
                  k = h.instance,
                  l = h.currentTarget;
                h = h.listener;
                if (k !== f && e.isPropagationStopped()) break a;
                nf(e, h, l);
                f = k;
              } else for (g = 0; g < d.length; g++) {
                h = d[g];
                k = h.instance;
                l = h.currentTarget;
                h = h.listener;
                if (k !== f && e.isPropagationStopped()) break a;
                nf(e, h, l);
                f = k;
              }
            }
          }
          if (Qb) throw a = Rb, Qb = !1, Rb = null, a;
        }
        function D$1(a, b) {
          var c = b[of];
          void 0 === c && (c = b[of] = new Set());
          var d = a + "__bubble";
          c.has(d) || (pf(b, a, 2, !1), c.add(d));
        }
        function qf(a, b, c) {
          var d = 0;
          b && (d |= 4);
          pf(c, a, d, b);
        }
        var rf = "_reactListening" + Math.random().toString(36).slice(2);
        function sf(a) {
          if (!a[rf]) {
            a[rf] = !0;
            da.forEach(function (b) {
              "selectionchange" !== b && (mf.has(b) || qf(b, !1, a), qf(b, !0, a));
            });
            var b = 9 === a.nodeType ? a : a.ownerDocument;
            null === b || b[rf] || (b[rf] = !0, qf("selectionchange", !1, b));
          }
        }
        function pf(a, b, c, d) {
          switch (jd(b)) {
            case 1:
              var e = ed;
              break;
            case 4:
              e = gd;
              break;
            default:
              e = fd;
          }
          c = e.bind(null, b, c, a);
          e = void 0;
          !Lb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = !0);
          d ? void 0 !== e ? a.addEventListener(b, c, {
            capture: !0,
            passive: e
          }) : a.addEventListener(b, c, !0) : void 0 !== e ? a.addEventListener(b, c, {
            passive: e
          }) : a.addEventListener(b, c, !1);
        }
        function hd(a, b, c, d, e) {
          var f = d;
          if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for (;;) {
            if (null === d) return;
            var g = d.tag;
            if (3 === g || 4 === g) {
              var h = d.stateNode.containerInfo;
              if (h === e || 8 === h.nodeType && h.parentNode === e) break;
              if (4 === g) for (g = d.return; null !== g;) {
                var k = g.tag;
                if (3 === k || 4 === k) if (k = g.stateNode.containerInfo, k === e || 8 === k.nodeType && k.parentNode === e) return;
                g = g.return;
              }
              for (; null !== h;) {
                g = Wc(h);
                if (null === g) return;
                k = g.tag;
                if (5 === k || 6 === k) {
                  d = f = g;
                  continue a;
                }
                h = h.parentNode;
              }
            }
            d = d.return;
          }
          Jb(function () {
            var d = f,
              e = xb(c),
              g = [];
            a: {
              var h = df.get(a);
              if (void 0 !== h) {
                var k = td,
                  n = a;
                switch (a) {
                  case "keypress":
                    if (0 === od(c)) break a;
                  case "keydown":
                  case "keyup":
                    k = Rd;
                    break;
                  case "focusin":
                    n = "focus";
                    k = Fd;
                    break;
                  case "focusout":
                    n = "blur";
                    k = Fd;
                    break;
                  case "beforeblur":
                  case "afterblur":
                    k = Fd;
                    break;
                  case "click":
                    if (2 === c.button) break a;
                  case "auxclick":
                  case "dblclick":
                  case "mousedown":
                  case "mousemove":
                  case "mouseup":
                  case "mouseout":
                  case "mouseover":
                  case "contextmenu":
                    k = Bd;
                    break;
                  case "drag":
                  case "dragend":
                  case "dragenter":
                  case "dragexit":
                  case "dragleave":
                  case "dragover":
                  case "dragstart":
                  case "drop":
                    k = Dd;
                    break;
                  case "touchcancel":
                  case "touchend":
                  case "touchmove":
                  case "touchstart":
                    k = Vd;
                    break;
                  case $e:
                  case af:
                  case bf:
                    k = Hd;
                    break;
                  case cf:
                    k = Xd;
                    break;
                  case "scroll":
                    k = vd;
                    break;
                  case "wheel":
                    k = Zd;
                    break;
                  case "copy":
                  case "cut":
                  case "paste":
                    k = Jd;
                    break;
                  case "gotpointercapture":
                  case "lostpointercapture":
                  case "pointercancel":
                  case "pointerdown":
                  case "pointermove":
                  case "pointerout":
                  case "pointerover":
                  case "pointerup":
                    k = Td;
                }
                var t = 0 !== (b & 4),
                  J = !t && "scroll" === a,
                  x = t ? null !== h ? h + "Capture" : null : h;
                t = [];
                for (var w = d, u; null !== w;) {
                  u = w;
                  var F = u.stateNode;
                  5 === u.tag && null !== F && (u = F, null !== x && (F = Kb(w, x), null != F && t.push(tf(w, F, u))));
                  if (J) break;
                  w = w.return;
                }
                0 < t.length && (h = new k(h, n, null, c, e), g.push({
                  event: h,
                  listeners: t
                }));
              }
            }
            if (0 === (b & 7)) {
              a: {
                h = "mouseover" === a || "pointerover" === a;
                k = "mouseout" === a || "pointerout" === a;
                if (h && c !== wb && (n = c.relatedTarget || c.fromElement) && (Wc(n) || n[uf])) break a;
                if (k || h) {
                  h = e.window === e ? e : (h = e.ownerDocument) ? h.defaultView || h.parentWindow : window;
                  if (k) {
                    if (n = c.relatedTarget || c.toElement, k = d, n = n ? Wc(n) : null, null !== n && (J = Vb(n), n !== J || 5 !== n.tag && 6 !== n.tag)) n = null;
                  } else k = null, n = d;
                  if (k !== n) {
                    t = Bd;
                    F = "onMouseLeave";
                    x = "onMouseEnter";
                    w = "mouse";
                    if ("pointerout" === a || "pointerover" === a) t = Td, F = "onPointerLeave", x = "onPointerEnter", w = "pointer";
                    J = null == k ? h : ue(k);
                    u = null == n ? h : ue(n);
                    h = new t(F, w + "leave", k, c, e);
                    h.target = J;
                    h.relatedTarget = u;
                    F = null;
                    Wc(e) === d && (t = new t(x, w + "enter", n, c, e), t.target = u, t.relatedTarget = J, F = t);
                    J = F;
                    if (k && n) b: {
                      t = k;
                      x = n;
                      w = 0;
                      for (u = t; u; u = vf(u)) w++;
                      u = 0;
                      for (F = x; F; F = vf(F)) u++;
                      for (; 0 < w - u;) t = vf(t), w--;
                      for (; 0 < u - w;) x = vf(x), u--;
                      for (; w--;) {
                        if (t === x || null !== x && t === x.alternate) break b;
                        t = vf(t);
                        x = vf(x);
                      }
                      t = null;
                    } else t = null;
                    null !== k && wf(g, h, k, t, !1);
                    null !== n && null !== J && wf(g, J, n, t, !0);
                  }
                }
              }
              a: {
                h = d ? ue(d) : window;
                k = h.nodeName && h.nodeName.toLowerCase();
                if ("select" === k || "input" === k && "file" === h.type) var na = ve;else if (me(h)) {
                  if (we) na = Fe;else {
                    na = De;
                    var xa = Ce;
                  }
                } else (k = h.nodeName) && "input" === k.toLowerCase() && ("checkbox" === h.type || "radio" === h.type) && (na = Ee);
                if (na && (na = na(a, d))) {
                  ne(g, na, c, e);
                  break a;
                }
                xa && xa(a, h, d);
                "focusout" === a && (xa = h._wrapperState) && xa.controlled && "number" === h.type && cb(h, "number", h.value);
              }
              xa = d ? ue(d) : window;
              switch (a) {
                case "focusin":
                  if (me(xa) || "true" === xa.contentEditable) Qe = xa, Re = d, Se = null;
                  break;
                case "focusout":
                  Se = Re = Qe = null;
                  break;
                case "mousedown":
                  Te = !0;
                  break;
                case "contextmenu":
                case "mouseup":
                case "dragend":
                  Te = !1;
                  Ue(g, c, e);
                  break;
                case "selectionchange":
                  if (Pe) break;
                case "keydown":
                case "keyup":
                  Ue(g, c, e);
              }
              var $a;
              if (ae) b: {
                switch (a) {
                  case "compositionstart":
                    var ba = "onCompositionStart";
                    break b;
                  case "compositionend":
                    ba = "onCompositionEnd";
                    break b;
                  case "compositionupdate":
                    ba = "onCompositionUpdate";
                    break b;
                }
                ba = void 0;
              } else ie ? ge(a, c) && (ba = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (ba = "onCompositionStart");
              ba && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e, ld = "value" in kd ? kd.value : kd.textContent, ie = !0)), xa = oe(d, ba), 0 < xa.length && (ba = new Ld(ba, a, null, c, e), g.push({
                event: ba,
                listeners: xa
              }), $a ? ba.data = $a : ($a = he(c), null !== $a && (ba.data = $a))));
              if ($a = ce ? je(a, c) : ke(a, c)) d = oe(d, "onBeforeInput"), 0 < d.length && (e = new Ld("onBeforeInput", "beforeinput", null, c, e), g.push({
                event: e,
                listeners: d
              }), e.data = $a);
            }
            se(g, b);
          });
        }
        function tf(a, b, c) {
          return {
            instance: a,
            listener: b,
            currentTarget: c
          };
        }
        function oe(a, b) {
          for (var c = b + "Capture", d = []; null !== a;) {
            var e = a,
              f = e.stateNode;
            5 === e.tag && null !== f && (e = f, f = Kb(a, c), null != f && d.unshift(tf(a, f, e)), f = Kb(a, b), null != f && d.push(tf(a, f, e)));
            a = a.return;
          }
          return d;
        }
        function vf(a) {
          if (null === a) return null;
          do a = a.return; while (a && 5 !== a.tag);
          return a ? a : null;
        }
        function wf(a, b, c, d, e) {
          for (var f = b._reactName, g = []; null !== c && c !== d;) {
            var h = c,
              k = h.alternate,
              l = h.stateNode;
            if (null !== k && k === d) break;
            5 === h.tag && null !== l && (h = l, e ? (k = Kb(c, f), null != k && g.unshift(tf(c, k, h))) : e || (k = Kb(c, f), null != k && g.push(tf(c, k, h))));
            c = c.return;
          }
          0 !== g.length && a.push({
            event: b,
            listeners: g
          });
        }
        var xf = /\r\n?/g,
          yf = /\u0000|\uFFFD/g;
        function zf(a) {
          return ("string" === typeof a ? a : "" + a).replace(xf, "\n").replace(yf, "");
        }
        function Af(a, b, c) {
          b = zf(b);
          if (zf(a) !== b && c) throw Error(p$5(425));
        }
        function Bf() {}
        var Cf = null,
          Df = null;
        function Ef(a, b) {
          return "textarea" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
        }
        var Ff = "function" === typeof setTimeout ? setTimeout : void 0,
          Gf = "function" === typeof clearTimeout ? clearTimeout : void 0,
          Hf = "function" === typeof Promise ? Promise : void 0,
          Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function (a) {
            return Hf.resolve(null).then(a).catch(If);
          } : Ff;
        function If(a) {
          setTimeout(function () {
            throw a;
          });
        }
        function Kf(a, b) {
          var c = b,
            d = 0;
          do {
            var e = c.nextSibling;
            a.removeChild(c);
            if (e && 8 === e.nodeType) if (c = e.data, "/$" === c) {
              if (0 === d) {
                a.removeChild(e);
                bd(b);
                return;
              }
              d--;
            } else "$" !== c && "$?" !== c && "$!" !== c || d++;
            c = e;
          } while (c);
          bd(b);
        }
        function Lf(a) {
          for (; null != a; a = a.nextSibling) {
            var b = a.nodeType;
            if (1 === b || 3 === b) break;
            if (8 === b) {
              b = a.data;
              if ("$" === b || "$!" === b || "$?" === b) break;
              if ("/$" === b) return null;
            }
          }
          return a;
        }
        function Mf(a) {
          a = a.previousSibling;
          for (var b = 0; a;) {
            if (8 === a.nodeType) {
              var c = a.data;
              if ("$" === c || "$!" === c || "$?" === c) {
                if (0 === b) return a;
                b--;
              } else "/$" === c && b++;
            }
            a = a.previousSibling;
          }
          return null;
        }
        var Nf = Math.random().toString(36).slice(2),
          Of = "__reactFiber$" + Nf,
          Pf = "__reactProps$" + Nf,
          uf = "__reactContainer$" + Nf,
          of = "__reactEvents$" + Nf,
          Qf = "__reactListeners$" + Nf,
          Rf = "__reactHandles$" + Nf;
        function Wc(a) {
          var b = a[Of];
          if (b) return b;
          for (var c = a.parentNode; c;) {
            if (b = c[uf] || c[Of]) {
              c = b.alternate;
              if (null !== b.child || null !== c && null !== c.child) for (a = Mf(a); null !== a;) {
                if (c = a[Of]) return c;
                a = Mf(a);
              }
              return b;
            }
            a = c;
            c = a.parentNode;
          }
          return null;
        }
        function Cb(a) {
          a = a[Of] || a[uf];
          return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
        }
        function ue(a) {
          if (5 === a.tag || 6 === a.tag) return a.stateNode;
          throw Error(p$5(33));
        }
        function Db(a) {
          return a[Pf] || null;
        }
        var Sf = [],
          Tf = -1;
        function Uf(a) {
          return {
            current: a
          };
        }
        function E$1(a) {
          0 > Tf || (a.current = Sf[Tf], Sf[Tf] = null, Tf--);
        }
        function G$1(a, b) {
          Tf++;
          Sf[Tf] = a.current;
          a.current = b;
        }
        var Vf = {},
          H$1 = Uf(Vf),
          Wf = Uf(!1),
          Xf = Vf;
        function Yf(a, b) {
          var c = a.type.contextTypes;
          if (!c) return Vf;
          var d = a.stateNode;
          if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
          var e = {},
            f;
          for (f in c) e[f] = b[f];
          d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
          return e;
        }
        function Zf(a) {
          a = a.childContextTypes;
          return null !== a && void 0 !== a;
        }
        function $f() {
          E$1(Wf);
          E$1(H$1);
        }
        function ag(a, b, c) {
          if (H$1.current !== Vf) throw Error(p$5(168));
          G$1(H$1, b);
          G$1(Wf, c);
        }
        function bg(a, b, c) {
          var d = a.stateNode;
          b = b.childContextTypes;
          if ("function" !== typeof d.getChildContext) return c;
          d = d.getChildContext();
          for (var e in d) if (!(e in b)) throw Error(p$5(108, Ra(a) || "Unknown", e));
          return A$2({}, c, d);
        }
        function cg(a) {
          a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Vf;
          Xf = H$1.current;
          G$1(H$1, a);
          G$1(Wf, Wf.current);
          return !0;
        }
        function dg(a, b, c) {
          var d = a.stateNode;
          if (!d) throw Error(p$5(169));
          c ? (a = bg(a, b, Xf), d.__reactInternalMemoizedMergedChildContext = a, E$1(Wf), E$1(H$1), G$1(H$1, a)) : E$1(Wf);
          G$1(Wf, c);
        }
        var eg = null,
          fg = !1,
          gg = !1;
        function hg(a) {
          null === eg ? eg = [a] : eg.push(a);
        }
        function ig(a) {
          fg = !0;
          hg(a);
        }
        function jg() {
          if (!gg && null !== eg) {
            gg = !0;
            var a = 0,
              b = C;
            try {
              var c = eg;
              for (C = 1; a < c.length; a++) {
                var d = c[a];
                do d = d(!0); while (null !== d);
              }
              eg = null;
              fg = !1;
            } catch (e) {
              throw null !== eg && (eg = eg.slice(a + 1)), ac(fc, jg), e;
            } finally {
              C = b, gg = !1;
            }
          }
          return null;
        }
        var kg = [],
          lg = 0,
          mg = null,
          ng = 0,
          og = [],
          pg = 0,
          qg = null,
          rg = 1,
          sg = "";
        function tg(a, b) {
          kg[lg++] = ng;
          kg[lg++] = mg;
          mg = a;
          ng = b;
        }
        function ug(a, b, c) {
          og[pg++] = rg;
          og[pg++] = sg;
          og[pg++] = qg;
          qg = a;
          var d = rg;
          a = sg;
          var e = 32 - oc(d) - 1;
          d &= ~(1 << e);
          c += 1;
          var f = 32 - oc(b) + e;
          if (30 < f) {
            var g = e - e % 5;
            f = (d & (1 << g) - 1).toString(32);
            d >>= g;
            e -= g;
            rg = 1 << 32 - oc(b) + e | c << e | d;
            sg = f + a;
          } else rg = 1 << f | c << e | d, sg = a;
        }
        function vg(a) {
          null !== a.return && (tg(a, 1), ug(a, 1, 0));
        }
        function wg(a) {
          for (; a === mg;) mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
          for (; a === qg;) qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
        }
        var xg = null,
          yg = null,
          I$1 = !1,
          zg = null;
        function Ag(a, b) {
          var c = Bg(5, null, null, 0);
          c.elementType = "DELETED";
          c.stateNode = b;
          c.return = a;
          b = a.deletions;
          null === b ? (a.deletions = [c], a.flags |= 16) : b.push(c);
        }
        function Cg(a, b) {
          switch (a.tag) {
            case 5:
              var c = a.type;
              b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
              return null !== b ? (a.stateNode = b, xg = a, yg = Lf(b.firstChild), !0) : !1;
            case 6:
              return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, xg = a, yg = null, !0) : !1;
            case 13:
              return b = 8 !== b.nodeType ? null : b, null !== b ? (c = null !== qg ? {
                id: rg,
                overflow: sg
              } : null, a.memoizedState = {
                dehydrated: b,
                treeContext: c,
                retryLane: 1073741824
              }, c = Bg(18, null, null, 0), c.stateNode = b, c.return = a, a.child = c, xg = a, yg = null, !0) : !1;
            default:
              return !1;
          }
        }
        function Dg(a) {
          return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
        }
        function Eg(a) {
          if (I$1) {
            var b = yg;
            if (b) {
              var c = b;
              if (!Cg(a, b)) {
                if (Dg(a)) throw Error(p$5(418));
                b = Lf(c.nextSibling);
                var d = xg;
                b && Cg(a, b) ? Ag(d, c) : (a.flags = a.flags & -4097 | 2, I$1 = !1, xg = a);
              }
            } else {
              if (Dg(a)) throw Error(p$5(418));
              a.flags = a.flags & -4097 | 2;
              I$1 = !1;
              xg = a;
            }
          }
        }
        function Fg(a) {
          for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;) a = a.return;
          xg = a;
        }
        function Gg(a) {
          if (a !== xg) return !1;
          if (!I$1) return Fg(a), I$1 = !0, !1;
          var b;
          (b = 3 !== a.tag) && !(b = 5 !== a.tag) && (b = a.type, b = "head" !== b && "body" !== b && !Ef(a.type, a.memoizedProps));
          if (b && (b = yg)) {
            if (Dg(a)) throw Hg(), Error(p$5(418));
            for (; b;) Ag(a, b), b = Lf(b.nextSibling);
          }
          Fg(a);
          if (13 === a.tag) {
            a = a.memoizedState;
            a = null !== a ? a.dehydrated : null;
            if (!a) throw Error(p$5(317));
            a: {
              a = a.nextSibling;
              for (b = 0; a;) {
                if (8 === a.nodeType) {
                  var c = a.data;
                  if ("/$" === c) {
                    if (0 === b) {
                      yg = Lf(a.nextSibling);
                      break a;
                    }
                    b--;
                  } else "$" !== c && "$!" !== c && "$?" !== c || b++;
                }
                a = a.nextSibling;
              }
              yg = null;
            }
          } else yg = xg ? Lf(a.stateNode.nextSibling) : null;
          return !0;
        }
        function Hg() {
          for (var a = yg; a;) a = Lf(a.nextSibling);
        }
        function Ig() {
          yg = xg = null;
          I$1 = !1;
        }
        function Jg(a) {
          null === zg ? zg = [a] : zg.push(a);
        }
        var Kg = ua.ReactCurrentBatchConfig;
        function Lg(a, b) {
          if (a && a.defaultProps) {
            b = A$2({}, b);
            a = a.defaultProps;
            for (var c in a) void 0 === b[c] && (b[c] = a[c]);
            return b;
          }
          return b;
        }
        var Mg = Uf(null),
          Ng = null,
          Og = null,
          Pg = null;
        function Qg() {
          Pg = Og = Ng = null;
        }
        function Rg(a) {
          var b = Mg.current;
          E$1(Mg);
          a._currentValue = b;
        }
        function Sg(a, b, c) {
          for (; null !== a;) {
            var d = a.alternate;
            (a.childLanes & b) !== b ? (a.childLanes |= b, null !== d && (d.childLanes |= b)) : null !== d && (d.childLanes & b) !== b && (d.childLanes |= b);
            if (a === c) break;
            a = a.return;
          }
        }
        function Tg(a, b) {
          Ng = a;
          Pg = Og = null;
          a = a.dependencies;
          null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (Ug = !0), a.firstContext = null);
        }
        function Vg(a) {
          var b = a._currentValue;
          if (Pg !== a) if (a = {
            context: a,
            memoizedValue: b,
            next: null
          }, null === Og) {
            if (null === Ng) throw Error(p$5(308));
            Og = a;
            Ng.dependencies = {
              lanes: 0,
              firstContext: a
            };
          } else Og = Og.next = a;
          return b;
        }
        var Wg = null;
        function Xg(a) {
          null === Wg ? Wg = [a] : Wg.push(a);
        }
        function Yg(a, b, c, d) {
          var e = b.interleaved;
          null === e ? (c.next = c, Xg(b)) : (c.next = e.next, e.next = c);
          b.interleaved = c;
          return Zg(a, d);
        }
        function Zg(a, b) {
          a.lanes |= b;
          var c = a.alternate;
          null !== c && (c.lanes |= b);
          c = a;
          for (a = a.return; null !== a;) a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a.return;
          return 3 === c.tag ? c.stateNode : null;
        }
        var $g = !1;
        function ah(a) {
          a.updateQueue = {
            baseState: a.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null,
              interleaved: null,
              lanes: 0
            },
            effects: null
          };
        }
        function bh(a, b) {
          a = a.updateQueue;
          b.updateQueue === a && (b.updateQueue = {
            baseState: a.baseState,
            firstBaseUpdate: a.firstBaseUpdate,
            lastBaseUpdate: a.lastBaseUpdate,
            shared: a.shared,
            effects: a.effects
          });
        }
        function ch(a, b) {
          return {
            eventTime: a,
            lane: b,
            tag: 0,
            payload: null,
            callback: null,
            next: null
          };
        }
        function dh(a, b, c) {
          var d = a.updateQueue;
          if (null === d) return null;
          d = d.shared;
          if (0 !== (K & 2)) {
            var e = d.pending;
            null === e ? b.next = b : (b.next = e.next, e.next = b);
            d.pending = b;
            return Zg(a, c);
          }
          e = d.interleaved;
          null === e ? (b.next = b, Xg(d)) : (b.next = e.next, e.next = b);
          d.interleaved = b;
          return Zg(a, c);
        }
        function eh(a, b, c) {
          b = b.updateQueue;
          if (null !== b && (b = b.shared, 0 !== (c & 4194240))) {
            var d = b.lanes;
            d &= a.pendingLanes;
            c |= d;
            b.lanes = c;
            Cc(a, c);
          }
        }
        function fh(a, b) {
          var c = a.updateQueue,
            d = a.alternate;
          if (null !== d && (d = d.updateQueue, c === d)) {
            var e = null,
              f = null;
            c = c.firstBaseUpdate;
            if (null !== c) {
              do {
                var g = {
                  eventTime: c.eventTime,
                  lane: c.lane,
                  tag: c.tag,
                  payload: c.payload,
                  callback: c.callback,
                  next: null
                };
                null === f ? e = f = g : f = f.next = g;
                c = c.next;
              } while (null !== c);
              null === f ? e = f = b : f = f.next = b;
            } else e = f = b;
            c = {
              baseState: d.baseState,
              firstBaseUpdate: e,
              lastBaseUpdate: f,
              shared: d.shared,
              effects: d.effects
            };
            a.updateQueue = c;
            return;
          }
          a = c.lastBaseUpdate;
          null === a ? c.firstBaseUpdate = b : a.next = b;
          c.lastBaseUpdate = b;
        }
        function gh(a, b, c, d) {
          var e = a.updateQueue;
          $g = !1;
          var f = e.firstBaseUpdate,
            g = e.lastBaseUpdate,
            h = e.shared.pending;
          if (null !== h) {
            e.shared.pending = null;
            var k = h,
              l = k.next;
            k.next = null;
            null === g ? f = l : g.next = l;
            g = k;
            var m = a.alternate;
            null !== m && (m = m.updateQueue, h = m.lastBaseUpdate, h !== g && (null === h ? m.firstBaseUpdate = l : h.next = l, m.lastBaseUpdate = k));
          }
          if (null !== f) {
            var q = e.baseState;
            g = 0;
            m = l = k = null;
            h = f;
            do {
              var r = h.lane,
                y = h.eventTime;
              if ((d & r) === r) {
                null !== m && (m = m.next = {
                  eventTime: y,
                  lane: 0,
                  tag: h.tag,
                  payload: h.payload,
                  callback: h.callback,
                  next: null
                });
                a: {
                  var n = a,
                    t = h;
                  r = b;
                  y = c;
                  switch (t.tag) {
                    case 1:
                      n = t.payload;
                      if ("function" === typeof n) {
                        q = n.call(y, q, r);
                        break a;
                      }
                      q = n;
                      break a;
                    case 3:
                      n.flags = n.flags & -65537 | 128;
                    case 0:
                      n = t.payload;
                      r = "function" === typeof n ? n.call(y, q, r) : n;
                      if (null === r || void 0 === r) break a;
                      q = A$2({}, q, r);
                      break a;
                    case 2:
                      $g = !0;
                  }
                }
                null !== h.callback && 0 !== h.lane && (a.flags |= 64, r = e.effects, null === r ? e.effects = [h] : r.push(h));
              } else y = {
                eventTime: y,
                lane: r,
                tag: h.tag,
                payload: h.payload,
                callback: h.callback,
                next: null
              }, null === m ? (l = m = y, k = q) : m = m.next = y, g |= r;
              h = h.next;
              if (null === h) if (h = e.shared.pending, null === h) break;else r = h, h = r.next, r.next = null, e.lastBaseUpdate = r, e.shared.pending = null;
            } while (1);
            null === m && (k = q);
            e.baseState = k;
            e.firstBaseUpdate = l;
            e.lastBaseUpdate = m;
            b = e.shared.interleaved;
            if (null !== b) {
              e = b;
              do g |= e.lane, e = e.next; while (e !== b);
            } else null === f && (e.shared.lanes = 0);
            hh |= g;
            a.lanes = g;
            a.memoizedState = q;
          }
        }
        function ih(a, b, c) {
          a = b.effects;
          b.effects = null;
          if (null !== a) for (b = 0; b < a.length; b++) {
            var d = a[b],
              e = d.callback;
            if (null !== e) {
              d.callback = null;
              d = c;
              if ("function" !== typeof e) throw Error(p$5(191, e));
              e.call(d);
            }
          }
        }
        var jh = new aa.Component().refs;
        function kh(a, b, c, d) {
          b = a.memoizedState;
          c = c(d, b);
          c = null === c || void 0 === c ? b : A$2({}, b, c);
          a.memoizedState = c;
          0 === a.lanes && (a.updateQueue.baseState = c);
        }
        var nh = {
          isMounted: function isMounted(a) {
            return (a = a._reactInternals) ? Vb(a) === a : !1;
          },
          enqueueSetState: function enqueueSetState(a, b, c) {
            a = a._reactInternals;
            var d = L$1(),
              e = lh(a),
              f = ch(d, e);
            f.payload = b;
            void 0 !== c && null !== c && (f.callback = c);
            b = dh(a, f, e);
            null !== b && (mh(b, a, e, d), eh(b, a, e));
          },
          enqueueReplaceState: function enqueueReplaceState(a, b, c) {
            a = a._reactInternals;
            var d = L$1(),
              e = lh(a),
              f = ch(d, e);
            f.tag = 1;
            f.payload = b;
            void 0 !== c && null !== c && (f.callback = c);
            b = dh(a, f, e);
            null !== b && (mh(b, a, e, d), eh(b, a, e));
          },
          enqueueForceUpdate: function enqueueForceUpdate(a, b) {
            a = a._reactInternals;
            var c = L$1(),
              d = lh(a),
              e = ch(c, d);
            e.tag = 2;
            void 0 !== b && null !== b && (e.callback = b);
            b = dh(a, e, d);
            null !== b && (mh(b, a, d, c), eh(b, a, d));
          }
        };
        function oh(a, b, c, d, e, f, g) {
          a = a.stateNode;
          return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Ie(c, d) || !Ie(e, f) : !0;
        }
        function ph(a, b, c) {
          var d = !1,
            e = Vf;
          var f = b.contextType;
          "object" === typeof f && null !== f ? f = Vg(f) : (e = Zf(b) ? Xf : H$1.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Yf(a, e) : Vf);
          b = new b(c, f);
          a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
          b.updater = nh;
          a.stateNode = b;
          b._reactInternals = a;
          d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
          return b;
        }
        function qh(a, b, c, d) {
          a = b.state;
          "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
          "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
          b.state !== a && nh.enqueueReplaceState(b, b.state, null);
        }
        function rh(a, b, c, d) {
          var e = a.stateNode;
          e.props = c;
          e.state = a.memoizedState;
          e.refs = jh;
          ah(a);
          var f = b.contextType;
          "object" === typeof f && null !== f ? e.context = Vg(f) : (f = Zf(b) ? Xf : H$1.current, e.context = Yf(a, f));
          e.state = a.memoizedState;
          f = b.getDerivedStateFromProps;
          "function" === typeof f && (kh(a, b, f, c), e.state = a.memoizedState);
          "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && nh.enqueueReplaceState(e, e.state, null), gh(a, c, e, d), e.state = a.memoizedState);
          "function" === typeof e.componentDidMount && (a.flags |= 4194308);
        }
        function sh(a, b, c) {
          a = c.ref;
          if (null !== a && "function" !== typeof a && "object" !== typeof a) {
            if (c._owner) {
              c = c._owner;
              if (c) {
                if (1 !== c.tag) throw Error(p$5(309));
                var d = c.stateNode;
              }
              if (!d) throw Error(p$5(147, a));
              var e = d,
                f = "" + a;
              if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === f) return b.ref;
              b = function b(a) {
                var b = e.refs;
                b === jh && (b = e.refs = {});
                null === a ? delete b[f] : b[f] = a;
              };
              b._stringRef = f;
              return b;
            }
            if ("string" !== typeof a) throw Error(p$5(284));
            if (!c._owner) throw Error(p$5(290, a));
          }
          return a;
        }
        function th(a, b) {
          a = Object.prototype.toString.call(b);
          throw Error(p$5(31, "[object Object]" === a ? "object with keys {" + Object.keys(b).join(", ") + "}" : a));
        }
        function uh(a) {
          var b = a._init;
          return b(a._payload);
        }
        function vh(a) {
          function b(b, c) {
            if (a) {
              var d = b.deletions;
              null === d ? (b.deletions = [c], b.flags |= 16) : d.push(c);
            }
          }
          function c(c, d) {
            if (!a) return null;
            for (; null !== d;) b(c, d), d = d.sibling;
            return null;
          }
          function d(a, b) {
            for (a = new Map(); null !== b;) null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;
            return a;
          }
          function e(a, b) {
            a = wh(a, b);
            a.index = 0;
            a.sibling = null;
            return a;
          }
          function f(b, c, d) {
            b.index = d;
            if (!a) return b.flags |= 1048576, c;
            d = b.alternate;
            if (null !== d) return d = d.index, d < c ? (b.flags |= 2, c) : d;
            b.flags |= 2;
            return c;
          }
          function g(b) {
            a && null === b.alternate && (b.flags |= 2);
            return b;
          }
          function h(a, b, c, d) {
            if (null === b || 6 !== b.tag) return b = xh(c, a.mode, d), b.return = a, b;
            b = e(b, c);
            b.return = a;
            return b;
          }
          function k(a, b, c, d) {
            var f = c.type;
            if (f === ya) return m(a, b, c.props.children, d, c.key);
            if (null !== b && (b.elementType === f || "object" === typeof f && null !== f && f.$$typeof === Ha && uh(f) === b.type)) return d = e(b, c.props), d.ref = sh(a, b, c), d.return = a, d;
            d = yh(c.type, c.key, c.props, null, a.mode, d);
            d.ref = sh(a, b, c);
            d.return = a;
            return d;
          }
          function l(a, b, c, d) {
            if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = zh(c, a.mode, d), b.return = a, b;
            b = e(b, c.children || []);
            b.return = a;
            return b;
          }
          function m(a, b, c, d, f) {
            if (null === b || 7 !== b.tag) return b = Ah(c, a.mode, d, f), b.return = a, b;
            b = e(b, c);
            b.return = a;
            return b;
          }
          function q(a, b, c) {
            if ("string" === typeof b && "" !== b || "number" === typeof b) return b = xh("" + b, a.mode, c), b.return = a, b;
            if ("object" === typeof b && null !== b) {
              switch (b.$$typeof) {
                case va:
                  return c = yh(b.type, b.key, b.props, null, a.mode, c), c.ref = sh(a, null, b), c.return = a, c;
                case wa:
                  return b = zh(b, a.mode, c), b.return = a, b;
                case Ha:
                  var d = b._init;
                  return q(a, d(b._payload), c);
              }
              if (eb(b) || Ka(b)) return b = Ah(b, a.mode, c, null), b.return = a, b;
              th(a, b);
            }
            return null;
          }
          function r(a, b, c, d) {
            var e = null !== b ? b.key : null;
            if ("string" === typeof c && "" !== c || "number" === typeof c) return null !== e ? null : h(a, b, "" + c, d);
            if ("object" === typeof c && null !== c) {
              switch (c.$$typeof) {
                case va:
                  return c.key === e ? k(a, b, c, d) : null;
                case wa:
                  return c.key === e ? l(a, b, c, d) : null;
                case Ha:
                  return e = c._init, r(a, b, e(c._payload), d);
              }
              if (eb(c) || Ka(c)) return null !== e ? null : m(a, b, c, d, null);
              th(a, c);
            }
            return null;
          }
          function y(a, b, c, d, e) {
            if ("string" === typeof d && "" !== d || "number" === typeof d) return a = a.get(c) || null, h(b, a, "" + d, e);
            if ("object" === typeof d && null !== d) {
              switch (d.$$typeof) {
                case va:
                  return a = a.get(null === d.key ? c : d.key) || null, k(b, a, d, e);
                case wa:
                  return a = a.get(null === d.key ? c : d.key) || null, l(b, a, d, e);
                case Ha:
                  var f = d._init;
                  return y(a, b, c, f(d._payload), e);
              }
              if (eb(d) || Ka(d)) return a = a.get(c) || null, m(b, a, d, e, null);
              th(b, d);
            }
            return null;
          }
          function n(e, g, h, k) {
            for (var l = null, m = null, u = g, w = g = 0, x = null; null !== u && w < h.length; w++) {
              u.index > w ? (x = u, u = null) : x = u.sibling;
              var n = r(e, u, h[w], k);
              if (null === n) {
                null === u && (u = x);
                break;
              }
              a && u && null === n.alternate && b(e, u);
              g = f(n, g, w);
              null === m ? l = n : m.sibling = n;
              m = n;
              u = x;
            }
            if (w === h.length) return c(e, u), I$1 && tg(e, w), l;
            if (null === u) {
              for (; w < h.length; w++) u = q(e, h[w], k), null !== u && (g = f(u, g, w), null === m ? l = u : m.sibling = u, m = u);
              I$1 && tg(e, w);
              return l;
            }
            for (u = d(e, u); w < h.length; w++) x = y(u, e, w, h[w], k), null !== x && (a && null !== x.alternate && u.delete(null === x.key ? w : x.key), g = f(x, g, w), null === m ? l = x : m.sibling = x, m = x);
            a && u.forEach(function (a) {
              return b(e, a);
            });
            I$1 && tg(e, w);
            return l;
          }
          function t(e, g, h, k) {
            var l = Ka(h);
            if ("function" !== typeof l) throw Error(p$5(150));
            h = l.call(h);
            if (null == h) throw Error(p$5(151));
            for (var u = l = null, m = g, w = g = 0, x = null, n = h.next(); null !== m && !n.done; w++, n = h.next()) {
              m.index > w ? (x = m, m = null) : x = m.sibling;
              var t = r(e, m, n.value, k);
              if (null === t) {
                null === m && (m = x);
                break;
              }
              a && m && null === t.alternate && b(e, m);
              g = f(t, g, w);
              null === u ? l = t : u.sibling = t;
              u = t;
              m = x;
            }
            if (n.done) return c(e, m), I$1 && tg(e, w), l;
            if (null === m) {
              for (; !n.done; w++, n = h.next()) n = q(e, n.value, k), null !== n && (g = f(n, g, w), null === u ? l = n : u.sibling = n, u = n);
              I$1 && tg(e, w);
              return l;
            }
            for (m = d(e, m); !n.done; w++, n = h.next()) n = y(m, e, w, n.value, k), null !== n && (a && null !== n.alternate && m.delete(null === n.key ? w : n.key), g = f(n, g, w), null === u ? l = n : u.sibling = n, u = n);
            a && m.forEach(function (a) {
              return b(e, a);
            });
            I$1 && tg(e, w);
            return l;
          }
          function J(a, d, f, h) {
            "object" === typeof f && null !== f && f.type === ya && null === f.key && (f = f.props.children);
            if ("object" === typeof f && null !== f) {
              switch (f.$$typeof) {
                case va:
                  a: {
                    for (var k = f.key, l = d; null !== l;) {
                      if (l.key === k) {
                        k = f.type;
                        if (k === ya) {
                          if (7 === l.tag) {
                            c(a, l.sibling);
                            d = e(l, f.props.children);
                            d.return = a;
                            a = d;
                            break a;
                          }
                        } else if (l.elementType === k || "object" === typeof k && null !== k && k.$$typeof === Ha && uh(k) === l.type) {
                          c(a, l.sibling);
                          d = e(l, f.props);
                          d.ref = sh(a, l, f);
                          d.return = a;
                          a = d;
                          break a;
                        }
                        c(a, l);
                        break;
                      } else b(a, l);
                      l = l.sibling;
                    }
                    f.type === ya ? (d = Ah(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = yh(f.type, f.key, f.props, null, a.mode, h), h.ref = sh(a, d, f), h.return = a, a = h);
                  }
                  return g(a);
                case wa:
                  a: {
                    for (l = f.key; null !== d;) {
                      if (d.key === l) {
                        if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {
                          c(a, d.sibling);
                          d = e(d, f.children || []);
                          d.return = a;
                          a = d;
                          break a;
                        } else {
                          c(a, d);
                          break;
                        }
                      } else b(a, d);
                      d = d.sibling;
                    }
                    d = zh(f, a.mode, h);
                    d.return = a;
                    a = d;
                  }
                  return g(a);
                case Ha:
                  return l = f._init, J(a, d, l(f._payload), h);
              }
              if (eb(f)) return n(a, d, f, h);
              if (Ka(f)) return t(a, d, f, h);
              th(a, f);
            }
            return "string" === typeof f && "" !== f || "number" === typeof f ? (f = "" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f), d.return = a, a = d) : (c(a, d), d = xh(f, a.mode, h), d.return = a, a = d), g(a)) : c(a, d);
          }
          return J;
        }
        var Bh = vh(!0),
          Ch = vh(!1),
          Dh = {},
          Eh = Uf(Dh),
          Fh = Uf(Dh),
          Gh = Uf(Dh);
        function Hh(a) {
          if (a === Dh) throw Error(p$5(174));
          return a;
        }
        function Ih(a, b) {
          G$1(Gh, b);
          G$1(Fh, a);
          G$1(Eh, Dh);
          a = b.nodeType;
          switch (a) {
            case 9:
            case 11:
              b = (b = b.documentElement) ? b.namespaceURI : lb(null, "");
              break;
            default:
              a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = lb(b, a);
          }
          E$1(Eh);
          G$1(Eh, b);
        }
        function Jh() {
          E$1(Eh);
          E$1(Fh);
          E$1(Gh);
        }
        function Kh(a) {
          Hh(Gh.current);
          var b = Hh(Eh.current);
          var c = lb(b, a.type);
          b !== c && (G$1(Fh, a), G$1(Eh, c));
        }
        function Lh(a) {
          Fh.current === a && (E$1(Eh), E$1(Fh));
        }
        var M$1 = Uf(0);
        function Mh(a) {
          for (var b = a; null !== b;) {
            if (13 === b.tag) {
              var c = b.memoizedState;
              if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;
            } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
              if (0 !== (b.flags & 128)) return b;
            } else if (null !== b.child) {
              b.child.return = b;
              b = b.child;
              continue;
            }
            if (b === a) break;
            for (; null === b.sibling;) {
              if (null === b.return || b.return === a) return null;
              b = b.return;
            }
            b.sibling.return = b.return;
            b = b.sibling;
          }
          return null;
        }
        var Nh = [];
        function Oh() {
          for (var a = 0; a < Nh.length; a++) Nh[a]._workInProgressVersionPrimary = null;
          Nh.length = 0;
        }
        var Ph = ua.ReactCurrentDispatcher,
          Qh = ua.ReactCurrentBatchConfig,
          Rh = 0,
          N$1 = null,
          O$1 = null,
          P$1 = null,
          Sh = !1,
          Th = !1,
          Uh = 0,
          Vh = 0;
        function Q$1() {
          throw Error(p$5(321));
        }
        function Wh(a, b) {
          if (null === b) return !1;
          for (var c = 0; c < b.length && c < a.length; c++) if (!He(a[c], b[c])) return !1;
          return !0;
        }
        function Xh(a, b, c, d, e, f) {
          Rh = f;
          N$1 = b;
          b.memoizedState = null;
          b.updateQueue = null;
          b.lanes = 0;
          Ph.current = null === a || null === a.memoizedState ? Yh : Zh;
          a = c(d, e);
          if (Th) {
            f = 0;
            do {
              Th = !1;
              Uh = 0;
              if (25 <= f) throw Error(p$5(301));
              f += 1;
              P$1 = O$1 = null;
              b.updateQueue = null;
              Ph.current = $h;
              a = c(d, e);
            } while (Th);
          }
          Ph.current = ai;
          b = null !== O$1 && null !== O$1.next;
          Rh = 0;
          P$1 = O$1 = N$1 = null;
          Sh = !1;
          if (b) throw Error(p$5(300));
          return a;
        }
        function bi() {
          var a = 0 !== Uh;
          Uh = 0;
          return a;
        }
        function ci() {
          var a = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          null === P$1 ? N$1.memoizedState = P$1 = a : P$1 = P$1.next = a;
          return P$1;
        }
        function di() {
          if (null === O$1) {
            var a = N$1.alternate;
            a = null !== a ? a.memoizedState : null;
          } else a = O$1.next;
          var b = null === P$1 ? N$1.memoizedState : P$1.next;
          if (null !== b) P$1 = b, O$1 = a;else {
            if (null === a) throw Error(p$5(310));
            O$1 = a;
            a = {
              memoizedState: O$1.memoizedState,
              baseState: O$1.baseState,
              baseQueue: O$1.baseQueue,
              queue: O$1.queue,
              next: null
            };
            null === P$1 ? N$1.memoizedState = P$1 = a : P$1 = P$1.next = a;
          }
          return P$1;
        }
        function ei(a, b) {
          return "function" === typeof b ? b(a) : b;
        }
        function fi(a) {
          var b = di(),
            c = b.queue;
          if (null === c) throw Error(p$5(311));
          c.lastRenderedReducer = a;
          var d = O$1,
            e = d.baseQueue,
            f = c.pending;
          if (null !== f) {
            if (null !== e) {
              var g = e.next;
              e.next = f.next;
              f.next = g;
            }
            d.baseQueue = e = f;
            c.pending = null;
          }
          if (null !== e) {
            f = e.next;
            d = d.baseState;
            var h = g = null,
              k = null,
              l = f;
            do {
              var m = l.lane;
              if ((Rh & m) === m) null !== k && (k = k.next = {
                lane: 0,
                action: l.action,
                hasEagerState: l.hasEagerState,
                eagerState: l.eagerState,
                next: null
              }), d = l.hasEagerState ? l.eagerState : a(d, l.action);else {
                var q = {
                  lane: m,
                  action: l.action,
                  hasEagerState: l.hasEagerState,
                  eagerState: l.eagerState,
                  next: null
                };
                null === k ? (h = k = q, g = d) : k = k.next = q;
                N$1.lanes |= m;
                hh |= m;
              }
              l = l.next;
            } while (null !== l && l !== f);
            null === k ? g = d : k.next = h;
            He(d, b.memoizedState) || (Ug = !0);
            b.memoizedState = d;
            b.baseState = g;
            b.baseQueue = k;
            c.lastRenderedState = d;
          }
          a = c.interleaved;
          if (null !== a) {
            e = a;
            do f = e.lane, N$1.lanes |= f, hh |= f, e = e.next; while (e !== a);
          } else null === e && (c.lanes = 0);
          return [b.memoizedState, c.dispatch];
        }
        function gi(a) {
          var b = di(),
            c = b.queue;
          if (null === c) throw Error(p$5(311));
          c.lastRenderedReducer = a;
          var d = c.dispatch,
            e = c.pending,
            f = b.memoizedState;
          if (null !== e) {
            c.pending = null;
            var g = e = e.next;
            do f = a(f, g.action), g = g.next; while (g !== e);
            He(f, b.memoizedState) || (Ug = !0);
            b.memoizedState = f;
            null === b.baseQueue && (b.baseState = f);
            c.lastRenderedState = f;
          }
          return [f, d];
        }
        function hi() {}
        function ii(a, b) {
          var c = N$1,
            d = di(),
            e = b(),
            f = !He(d.memoizedState, e);
          f && (d.memoizedState = e, Ug = !0);
          d = d.queue;
          ji(ki.bind(null, c, d, a), [a]);
          if (d.getSnapshot !== b || f || null !== P$1 && P$1.memoizedState.tag & 1) {
            c.flags |= 2048;
            li(9, mi.bind(null, c, d, e, b), void 0, null);
            if (null === R$1) throw Error(p$5(349));
            0 !== (Rh & 30) || ni(c, b, e);
          }
          return e;
        }
        function ni(a, b, c) {
          a.flags |= 16384;
          a = {
            getSnapshot: b,
            value: c
          };
          b = N$1.updateQueue;
          null === b ? (b = {
            lastEffect: null,
            stores: null
          }, N$1.updateQueue = b, b.stores = [a]) : (c = b.stores, null === c ? b.stores = [a] : c.push(a));
        }
        function mi(a, b, c, d) {
          b.value = c;
          b.getSnapshot = d;
          oi(b) && pi(a);
        }
        function ki(a, b, c) {
          return c(function () {
            oi(b) && pi(a);
          });
        }
        function oi(a) {
          var b = a.getSnapshot;
          a = a.value;
          try {
            var c = b();
            return !He(a, c);
          } catch (d) {
            return !0;
          }
        }
        function pi(a) {
          var b = Zg(a, 1);
          null !== b && mh(b, a, 1, -1);
        }
        function qi(a) {
          var b = ci();
          "function" === typeof a && (a = a());
          b.memoizedState = b.baseState = a;
          a = {
            pending: null,
            interleaved: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: ei,
            lastRenderedState: a
          };
          b.queue = a;
          a = a.dispatch = ri.bind(null, N$1, a);
          return [b.memoizedState, a];
        }
        function li(a, b, c, d) {
          a = {
            tag: a,
            create: b,
            destroy: c,
            deps: d,
            next: null
          };
          b = N$1.updateQueue;
          null === b ? (b = {
            lastEffect: null,
            stores: null
          }, N$1.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));
          return a;
        }
        function si() {
          return di().memoizedState;
        }
        function ti(a, b, c, d) {
          var e = ci();
          N$1.flags |= a;
          e.memoizedState = li(1 | b, c, void 0, void 0 === d ? null : d);
        }
        function ui(a, b, c, d) {
          var e = di();
          d = void 0 === d ? null : d;
          var f = void 0;
          if (null !== O$1) {
            var g = O$1.memoizedState;
            f = g.destroy;
            if (null !== d && Wh(d, g.deps)) {
              e.memoizedState = li(b, c, f, d);
              return;
            }
          }
          N$1.flags |= a;
          e.memoizedState = li(1 | b, c, f, d);
        }
        function vi(a, b) {
          return ti(8390656, 8, a, b);
        }
        function ji(a, b) {
          return ui(2048, 8, a, b);
        }
        function wi(a, b) {
          return ui(4, 2, a, b);
        }
        function xi(a, b) {
          return ui(4, 4, a, b);
        }
        function yi(a, b) {
          if ("function" === typeof b) return a = a(), b(a), function () {
            b(null);
          };
          if (null !== b && void 0 !== b) return a = a(), b.current = a, function () {
            b.current = null;
          };
        }
        function zi(a, b, c) {
          c = null !== c && void 0 !== c ? c.concat([a]) : null;
          return ui(4, 4, yi.bind(null, b, a), c);
        }
        function Ai() {}
        function Bi(a, b) {
          var c = di();
          b = void 0 === b ? null : b;
          var d = c.memoizedState;
          if (null !== d && null !== b && Wh(b, d[1])) return d[0];
          c.memoizedState = [a, b];
          return a;
        }
        function Ci(a, b) {
          var c = di();
          b = void 0 === b ? null : b;
          var d = c.memoizedState;
          if (null !== d && null !== b && Wh(b, d[1])) return d[0];
          a = a();
          c.memoizedState = [a, b];
          return a;
        }
        function Di(a, b, c) {
          if (0 === (Rh & 21)) return a.baseState && (a.baseState = !1, Ug = !0), a.memoizedState = c;
          He(c, b) || (c = yc(), N$1.lanes |= c, hh |= c, a.baseState = !0);
          return b;
        }
        function Ei(a, b) {
          var c = C;
          C = 0 !== c && 4 > c ? c : 4;
          a(!0);
          var d = Qh.transition;
          Qh.transition = {};
          try {
            a(!1), b();
          } finally {
            C = c, Qh.transition = d;
          }
        }
        function Fi() {
          return di().memoizedState;
        }
        function Gi(a, b, c) {
          var d = lh(a);
          c = {
            lane: d,
            action: c,
            hasEagerState: !1,
            eagerState: null,
            next: null
          };
          if (Hi(a)) Ii(b, c);else if (c = Yg(a, b, c, d), null !== c) {
            var e = L$1();
            mh(c, a, d, e);
            Ji(c, b, d);
          }
        }
        function ri(a, b, c) {
          var d = lh(a),
            e = {
              lane: d,
              action: c,
              hasEagerState: !1,
              eagerState: null,
              next: null
            };
          if (Hi(a)) Ii(b, e);else {
            var f = a.alternate;
            if (0 === a.lanes && (null === f || 0 === f.lanes) && (f = b.lastRenderedReducer, null !== f)) try {
              var g = b.lastRenderedState,
                h = f(g, c);
              e.hasEagerState = !0;
              e.eagerState = h;
              if (He(h, g)) {
                var k = b.interleaved;
                null === k ? (e.next = e, Xg(b)) : (e.next = k.next, k.next = e);
                b.interleaved = e;
                return;
              }
            } catch (l) {} finally {}
            c = Yg(a, b, e, d);
            null !== c && (e = L$1(), mh(c, a, d, e), Ji(c, b, d));
          }
        }
        function Hi(a) {
          var b = a.alternate;
          return a === N$1 || null !== b && b === N$1;
        }
        function Ii(a, b) {
          Th = Sh = !0;
          var c = a.pending;
          null === c ? b.next = b : (b.next = c.next, c.next = b);
          a.pending = b;
        }
        function Ji(a, b, c) {
          if (0 !== (c & 4194240)) {
            var d = b.lanes;
            d &= a.pendingLanes;
            c |= d;
            b.lanes = c;
            Cc(a, c);
          }
        }
        var ai = {
            readContext: Vg,
            useCallback: Q$1,
            useContext: Q$1,
            useEffect: Q$1,
            useImperativeHandle: Q$1,
            useInsertionEffect: Q$1,
            useLayoutEffect: Q$1,
            useMemo: Q$1,
            useReducer: Q$1,
            useRef: Q$1,
            useState: Q$1,
            useDebugValue: Q$1,
            useDeferredValue: Q$1,
            useTransition: Q$1,
            useMutableSource: Q$1,
            useSyncExternalStore: Q$1,
            useId: Q$1,
            unstable_isNewReconciler: !1
          },
          Yh = {
            readContext: Vg,
            useCallback: function useCallback(a, b) {
              ci().memoizedState = [a, void 0 === b ? null : b];
              return a;
            },
            useContext: Vg,
            useEffect: vi,
            useImperativeHandle: function useImperativeHandle(a, b, c) {
              c = null !== c && void 0 !== c ? c.concat([a]) : null;
              return ti(4194308, 4, yi.bind(null, b, a), c);
            },
            useLayoutEffect: function useLayoutEffect(a, b) {
              return ti(4194308, 4, a, b);
            },
            useInsertionEffect: function useInsertionEffect(a, b) {
              return ti(4, 2, a, b);
            },
            useMemo: function useMemo(a, b) {
              var c = ci();
              b = void 0 === b ? null : b;
              a = a();
              c.memoizedState = [a, b];
              return a;
            },
            useReducer: function useReducer(a, b, c) {
              var d = ci();
              b = void 0 !== c ? c(b) : b;
              d.memoizedState = d.baseState = b;
              a = {
                pending: null,
                interleaved: null,
                lanes: 0,
                dispatch: null,
                lastRenderedReducer: a,
                lastRenderedState: b
              };
              d.queue = a;
              a = a.dispatch = Gi.bind(null, N$1, a);
              return [d.memoizedState, a];
            },
            useRef: function useRef(a) {
              var b = ci();
              a = {
                current: a
              };
              return b.memoizedState = a;
            },
            useState: qi,
            useDebugValue: Ai,
            useDeferredValue: function useDeferredValue(a) {
              return ci().memoizedState = a;
            },
            useTransition: function useTransition() {
              var a = qi(!1),
                b = a[0];
              a = Ei.bind(null, a[1]);
              ci().memoizedState = a;
              return [b, a];
            },
            useMutableSource: function useMutableSource() {},
            useSyncExternalStore: function useSyncExternalStore(a, b, c) {
              var d = N$1,
                e = ci();
              if (I$1) {
                if (void 0 === c) throw Error(p$5(407));
                c = c();
              } else {
                c = b();
                if (null === R$1) throw Error(p$5(349));
                0 !== (Rh & 30) || ni(d, b, c);
              }
              e.memoizedState = c;
              var f = {
                value: c,
                getSnapshot: b
              };
              e.queue = f;
              vi(ki.bind(null, d, f, a), [a]);
              d.flags |= 2048;
              li(9, mi.bind(null, d, f, c, b), void 0, null);
              return c;
            },
            useId: function useId() {
              var a = ci(),
                b = R$1.identifierPrefix;
              if (I$1) {
                var c = sg;
                var d = rg;
                c = (d & ~(1 << 32 - oc(d) - 1)).toString(32) + c;
                b = ":" + b + "R" + c;
                c = Uh++;
                0 < c && (b += "H" + c.toString(32));
                b += ":";
              } else c = Vh++, b = ":" + b + "r" + c.toString(32) + ":";
              return a.memoizedState = b;
            },
            unstable_isNewReconciler: !1
          },
          Zh = {
            readContext: Vg,
            useCallback: Bi,
            useContext: Vg,
            useEffect: ji,
            useImperativeHandle: zi,
            useInsertionEffect: wi,
            useLayoutEffect: xi,
            useMemo: Ci,
            useReducer: fi,
            useRef: si,
            useState: function useState() {
              return fi(ei);
            },
            useDebugValue: Ai,
            useDeferredValue: function useDeferredValue(a) {
              var b = di();
              return Di(b, O$1.memoizedState, a);
            },
            useTransition: function useTransition() {
              var a = fi(ei)[0],
                b = di().memoizedState;
              return [a, b];
            },
            useMutableSource: hi,
            useSyncExternalStore: ii,
            useId: Fi,
            unstable_isNewReconciler: !1
          },
          $h = {
            readContext: Vg,
            useCallback: Bi,
            useContext: Vg,
            useEffect: ji,
            useImperativeHandle: zi,
            useInsertionEffect: wi,
            useLayoutEffect: xi,
            useMemo: Ci,
            useReducer: gi,
            useRef: si,
            useState: function useState() {
              return gi(ei);
            },
            useDebugValue: Ai,
            useDeferredValue: function useDeferredValue(a) {
              var b = di();
              return null === O$1 ? b.memoizedState = a : Di(b, O$1.memoizedState, a);
            },
            useTransition: function useTransition() {
              var a = gi(ei)[0],
                b = di().memoizedState;
              return [a, b];
            },
            useMutableSource: hi,
            useSyncExternalStore: ii,
            useId: Fi,
            unstable_isNewReconciler: !1
          };
        function Ki(a, b) {
          try {
            var c = "",
              d = b;
            do c += Pa(d), d = d.return; while (d);
            var e = c;
          } catch (f) {
            e = "\nError generating stack: " + f.message + "\n" + f.stack;
          }
          return {
            value: a,
            source: b,
            stack: e,
            digest: null
          };
        }
        function Li(a, b, c) {
          return {
            value: a,
            source: null,
            stack: null != c ? c : null,
            digest: null != b ? b : null
          };
        }
        function Mi(a, b) {
          try {
            console.error(b.value);
          } catch (c) {
            setTimeout(function () {
              throw c;
            });
          }
        }
        var Ni = "function" === typeof WeakMap ? WeakMap : Map;
        function Oi(a, b, c) {
          c = ch(-1, c);
          c.tag = 3;
          c.payload = {
            element: null
          };
          var d = b.value;
          c.callback = function () {
            Pi || (Pi = !0, Qi = d);
            Mi(a, b);
          };
          return c;
        }
        function Ri(a, b, c) {
          c = ch(-1, c);
          c.tag = 3;
          var d = a.type.getDerivedStateFromError;
          if ("function" === typeof d) {
            var e = b.value;
            c.payload = function () {
              return d(e);
            };
            c.callback = function () {
              Mi(a, b);
            };
          }
          var f = a.stateNode;
          null !== f && "function" === typeof f.componentDidCatch && (c.callback = function () {
            Mi(a, b);
            "function" !== typeof d && (null === Si ? Si = new Set([this]) : Si.add(this));
            var c = b.stack;
            this.componentDidCatch(b.value, {
              componentStack: null !== c ? c : ""
            });
          });
          return c;
        }
        function Ti(a, b, c) {
          var d = a.pingCache;
          if (null === d) {
            d = a.pingCache = new Ni();
            var e = new Set();
            d.set(b, e);
          } else e = d.get(b), void 0 === e && (e = new Set(), d.set(b, e));
          e.has(c) || (e.add(c), a = Ui.bind(null, a, b, c), b.then(a, a));
        }
        function Vi(a) {
          do {
            var b;
            if (b = 13 === a.tag) b = a.memoizedState, b = null !== b ? null !== b.dehydrated ? !0 : !1 : !0;
            if (b) return a;
            a = a.return;
          } while (null !== a);
          return null;
        }
        function Wi(a, b, c, d, e) {
          if (0 === (a.mode & 1)) return a === b ? a.flags |= 65536 : (a.flags |= 128, c.flags |= 131072, c.flags &= -52805, 1 === c.tag && (null === c.alternate ? c.tag = 17 : (b = ch(-1, 1), b.tag = 2, dh(c, b, 1))), c.lanes |= 1), a;
          a.flags |= 65536;
          a.lanes = e;
          return a;
        }
        var Xi = ua.ReactCurrentOwner,
          Ug = !1;
        function Yi(a, b, c, d) {
          b.child = null === a ? Ch(b, null, c, d) : Bh(b, a.child, c, d);
        }
        function Zi(a, b, c, d, e) {
          c = c.render;
          var f = b.ref;
          Tg(b, e);
          d = Xh(a, b, c, d, f, e);
          c = bi();
          if (null !== a && !Ug) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, $i(a, b, e);
          I$1 && c && vg(b);
          b.flags |= 1;
          Yi(a, b, d, e);
          return b.child;
        }
        function aj(a, b, c, d, e) {
          if (null === a) {
            var f = c.type;
            if ("function" === typeof f && !bj(f) && void 0 === f.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = f, cj(a, b, f, d, e);
            a = yh(c.type, null, d, b, b.mode, e);
            a.ref = b.ref;
            a.return = b;
            return b.child = a;
          }
          f = a.child;
          if (0 === (a.lanes & e)) {
            var g = f.memoizedProps;
            c = c.compare;
            c = null !== c ? c : Ie;
            if (c(g, d) && a.ref === b.ref) return $i(a, b, e);
          }
          b.flags |= 1;
          a = wh(f, d);
          a.ref = b.ref;
          a.return = b;
          return b.child = a;
        }
        function cj(a, b, c, d, e) {
          if (null !== a) {
            var f = a.memoizedProps;
            if (Ie(f, d) && a.ref === b.ref) if (Ug = !1, b.pendingProps = d = f, 0 !== (a.lanes & e)) 0 !== (a.flags & 131072) && (Ug = !0);else return b.lanes = a.lanes, $i(a, b, e);
          }
          return dj(a, b, c, d, e);
        }
        function ej(a, b, c) {
          var d = b.pendingProps,
            e = d.children,
            f = null !== a ? a.memoizedState : null;
          if ("hidden" === d.mode) {
            if (0 === (b.mode & 1)) b.memoizedState = {
              baseLanes: 0,
              cachePool: null,
              transitions: null
            }, G$1(fj, gj), gj |= c;else {
              if (0 === (c & 1073741824)) return a = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = {
                baseLanes: a,
                cachePool: null,
                transitions: null
              }, b.updateQueue = null, G$1(fj, gj), gj |= a, null;
              b.memoizedState = {
                baseLanes: 0,
                cachePool: null,
                transitions: null
              };
              d = null !== f ? f.baseLanes : c;
              G$1(fj, gj);
              gj |= d;
            }
          } else null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, G$1(fj, gj), gj |= d;
          Yi(a, b, e, c);
          return b.child;
        }
        function hj(a, b) {
          var c = b.ref;
          if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 512, b.flags |= 2097152;
        }
        function dj(a, b, c, d, e) {
          var f = Zf(c) ? Xf : H$1.current;
          f = Yf(b, f);
          Tg(b, e);
          c = Xh(a, b, c, d, f, e);
          d = bi();
          if (null !== a && !Ug) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, $i(a, b, e);
          I$1 && d && vg(b);
          b.flags |= 1;
          Yi(a, b, c, e);
          return b.child;
        }
        function ij(a, b, c, d, e) {
          if (Zf(c)) {
            var f = !0;
            cg(b);
          } else f = !1;
          Tg(b, e);
          if (null === b.stateNode) jj(a, b), ph(b, c, d), rh(b, c, d, e), d = !0;else if (null === a) {
            var g = b.stateNode,
              h = b.memoizedProps;
            g.props = h;
            var k = g.context,
              l = c.contextType;
            "object" === typeof l && null !== l ? l = Vg(l) : (l = Zf(c) ? Xf : H$1.current, l = Yf(b, l));
            var m = c.getDerivedStateFromProps,
              q = "function" === typeof m || "function" === typeof g.getSnapshotBeforeUpdate;
            q || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && qh(b, g, d, l);
            $g = !1;
            var r = b.memoizedState;
            g.state = r;
            gh(b, d, g, e);
            k = b.memoizedState;
            h !== d || r !== k || Wf.current || $g ? ("function" === typeof m && (kh(b, c, m, d), k = b.memoizedState), (h = $g || oh(b, c, h, d, r, k, l)) ? (q || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4194308)) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), d = !1);
          } else {
            g = b.stateNode;
            bh(a, b);
            h = b.memoizedProps;
            l = b.type === b.elementType ? h : Lg(b.type, h);
            g.props = l;
            q = b.pendingProps;
            r = g.context;
            k = c.contextType;
            "object" === typeof k && null !== k ? k = Vg(k) : (k = Zf(c) ? Xf : H$1.current, k = Yf(b, k));
            var y = c.getDerivedStateFromProps;
            (m = "function" === typeof y || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== q || r !== k) && qh(b, g, d, k);
            $g = !1;
            r = b.memoizedState;
            g.state = r;
            gh(b, d, g, e);
            var n = b.memoizedState;
            h !== q || r !== n || Wf.current || $g ? ("function" === typeof y && (kh(b, c, y, d), n = b.memoizedState), (l = $g || oh(b, c, l, d, r, n, k) || !1) ? (m || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, n, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, n, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 1024)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), b.memoizedProps = d, b.memoizedState = n), g.props = d, g.state = n, g.context = k, d = l) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), d = !1);
          }
          return kj(a, b, c, d, f, e);
        }
        function kj(a, b, c, d, e, f) {
          hj(a, b);
          var g = 0 !== (b.flags & 128);
          if (!d && !g) return e && dg(b, c, !1), $i(a, b, f);
          d = b.stateNode;
          Xi.current = b;
          var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
          b.flags |= 1;
          null !== a && g ? (b.child = Bh(b, a.child, null, f), b.child = Bh(b, null, h, f)) : Yi(a, b, h, f);
          b.memoizedState = d.state;
          e && dg(b, c, !0);
          return b.child;
        }
        function lj(a) {
          var b = a.stateNode;
          b.pendingContext ? ag(a, b.pendingContext, b.pendingContext !== b.context) : b.context && ag(a, b.context, !1);
          Ih(a, b.containerInfo);
        }
        function mj(a, b, c, d, e) {
          Ig();
          Jg(e);
          b.flags |= 256;
          Yi(a, b, c, d);
          return b.child;
        }
        var nj = {
          dehydrated: null,
          treeContext: null,
          retryLane: 0
        };
        function oj(a) {
          return {
            baseLanes: a,
            cachePool: null,
            transitions: null
          };
        }
        function pj(a, b, c) {
          var d = b.pendingProps,
            e = M$1.current,
            f = !1,
            g = 0 !== (b.flags & 128),
            h;
          (h = g) || (h = null !== a && null === a.memoizedState ? !1 : 0 !== (e & 2));
          if (h) f = !0, b.flags &= -129;else if (null === a || null !== a.memoizedState) e |= 1;
          G$1(M$1, e & 1);
          if (null === a) {
            Eg(b);
            a = b.memoizedState;
            if (null !== a && (a = a.dehydrated, null !== a)) return 0 === (b.mode & 1) ? b.lanes = 1 : "$!" === a.data ? b.lanes = 8 : b.lanes = 1073741824, null;
            g = d.children;
            a = d.fallback;
            return f ? (d = b.mode, f = b.child, g = {
              mode: "hidden",
              children: g
            }, 0 === (d & 1) && null !== f ? (f.childLanes = 0, f.pendingProps = g) : f = qj(g, d, 0, null), a = Ah(a, d, c, null), f.return = b, a.return = b, f.sibling = a, b.child = f, b.child.memoizedState = oj(c), b.memoizedState = nj, a) : rj(b, g);
          }
          e = a.memoizedState;
          if (null !== e && (h = e.dehydrated, null !== h)) return sj(a, b, g, d, h, e, c);
          if (f) {
            f = d.fallback;
            g = b.mode;
            e = a.child;
            h = e.sibling;
            var k = {
              mode: "hidden",
              children: d.children
            };
            0 === (g & 1) && b.child !== e ? (d = b.child, d.childLanes = 0, d.pendingProps = k, b.deletions = null) : (d = wh(e, k), d.subtreeFlags = e.subtreeFlags & 14680064);
            null !== h ? f = wh(h, f) : (f = Ah(f, g, c, null), f.flags |= 2);
            f.return = b;
            d.return = b;
            d.sibling = f;
            b.child = d;
            d = f;
            f = b.child;
            g = a.child.memoizedState;
            g = null === g ? oj(c) : {
              baseLanes: g.baseLanes | c,
              cachePool: null,
              transitions: g.transitions
            };
            f.memoizedState = g;
            f.childLanes = a.childLanes & ~c;
            b.memoizedState = nj;
            return d;
          }
          f = a.child;
          a = f.sibling;
          d = wh(f, {
            mode: "visible",
            children: d.children
          });
          0 === (b.mode & 1) && (d.lanes = c);
          d.return = b;
          d.sibling = null;
          null !== a && (c = b.deletions, null === c ? (b.deletions = [a], b.flags |= 16) : c.push(a));
          b.child = d;
          b.memoizedState = null;
          return d;
        }
        function rj(a, b) {
          b = qj({
            mode: "visible",
            children: b
          }, a.mode, 0, null);
          b.return = a;
          return a.child = b;
        }
        function tj(a, b, c, d) {
          null !== d && Jg(d);
          Bh(b, a.child, null, c);
          a = rj(b, b.pendingProps.children);
          a.flags |= 2;
          b.memoizedState = null;
          return a;
        }
        function sj(a, b, c, d, e, f, g) {
          if (c) {
            if (b.flags & 256) return b.flags &= -257, d = Li(Error(p$5(422))), tj(a, b, g, d);
            if (null !== b.memoizedState) return b.child = a.child, b.flags |= 128, null;
            f = d.fallback;
            e = b.mode;
            d = qj({
              mode: "visible",
              children: d.children
            }, e, 0, null);
            f = Ah(f, e, g, null);
            f.flags |= 2;
            d.return = b;
            f.return = b;
            d.sibling = f;
            b.child = d;
            0 !== (b.mode & 1) && Bh(b, a.child, null, g);
            b.child.memoizedState = oj(g);
            b.memoizedState = nj;
            return f;
          }
          if (0 === (b.mode & 1)) return tj(a, b, g, null);
          if ("$!" === e.data) {
            d = e.nextSibling && e.nextSibling.dataset;
            if (d) var h = d.dgst;
            d = h;
            f = Error(p$5(419));
            d = Li(f, d, void 0);
            return tj(a, b, g, d);
          }
          h = 0 !== (g & a.childLanes);
          if (Ug || h) {
            d = R$1;
            if (null !== d) {
              switch (g & -g) {
                case 4:
                  e = 2;
                  break;
                case 16:
                  e = 8;
                  break;
                case 64:
                case 128:
                case 256:
                case 512:
                case 1024:
                case 2048:
                case 4096:
                case 8192:
                case 16384:
                case 32768:
                case 65536:
                case 131072:
                case 262144:
                case 524288:
                case 1048576:
                case 2097152:
                case 4194304:
                case 8388608:
                case 16777216:
                case 33554432:
                case 67108864:
                  e = 32;
                  break;
                case 536870912:
                  e = 268435456;
                  break;
                default:
                  e = 0;
              }
              e = 0 !== (e & (d.suspendedLanes | g)) ? 0 : e;
              0 !== e && e !== f.retryLane && (f.retryLane = e, Zg(a, e), mh(d, a, e, -1));
            }
            uj();
            d = Li(Error(p$5(421)));
            return tj(a, b, g, d);
          }
          if ("$?" === e.data) return b.flags |= 128, b.child = a.child, b = vj.bind(null, a), e._reactRetry = b, null;
          a = f.treeContext;
          yg = Lf(e.nextSibling);
          xg = b;
          I$1 = !0;
          zg = null;
          null !== a && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a.id, sg = a.overflow, qg = b);
          b = rj(b, d.children);
          b.flags |= 4096;
          return b;
        }
        function wj(a, b, c) {
          a.lanes |= b;
          var d = a.alternate;
          null !== d && (d.lanes |= b);
          Sg(a.return, b, c);
        }
        function xj(a, b, c, d, e) {
          var f = a.memoizedState;
          null === f ? a.memoizedState = {
            isBackwards: b,
            rendering: null,
            renderingStartTime: 0,
            last: d,
            tail: c,
            tailMode: e
          } : (f.isBackwards = b, f.rendering = null, f.renderingStartTime = 0, f.last = d, f.tail = c, f.tailMode = e);
        }
        function yj(a, b, c) {
          var d = b.pendingProps,
            e = d.revealOrder,
            f = d.tail;
          Yi(a, b, d.children, c);
          d = M$1.current;
          if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 128;else {
            if (null !== a && 0 !== (a.flags & 128)) a: for (a = b.child; null !== a;) {
              if (13 === a.tag) null !== a.memoizedState && wj(a, c, b);else if (19 === a.tag) wj(a, c, b);else if (null !== a.child) {
                a.child.return = a;
                a = a.child;
                continue;
              }
              if (a === b) break a;
              for (; null === a.sibling;) {
                if (null === a.return || a.return === b) break a;
                a = a.return;
              }
              a.sibling.return = a.return;
              a = a.sibling;
            }
            d &= 1;
          }
          G$1(M$1, d);
          if (0 === (b.mode & 1)) b.memoizedState = null;else switch (e) {
            case "forwards":
              c = b.child;
              for (e = null; null !== c;) a = c.alternate, null !== a && null === Mh(a) && (e = c), c = c.sibling;
              c = e;
              null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
              xj(b, !1, e, c, f);
              break;
            case "backwards":
              c = null;
              e = b.child;
              for (b.child = null; null !== e;) {
                a = e.alternate;
                if (null !== a && null === Mh(a)) {
                  b.child = e;
                  break;
                }
                a = e.sibling;
                e.sibling = c;
                c = e;
                e = a;
              }
              xj(b, !0, c, null, f);
              break;
            case "together":
              xj(b, !1, null, null, void 0);
              break;
            default:
              b.memoizedState = null;
          }
          return b.child;
        }
        function jj(a, b) {
          0 === (b.mode & 1) && null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
        }
        function $i(a, b, c) {
          null !== a && (b.dependencies = a.dependencies);
          hh |= b.lanes;
          if (0 === (c & b.childLanes)) return null;
          if (null !== a && b.child !== a.child) throw Error(p$5(153));
          if (null !== b.child) {
            a = b.child;
            c = wh(a, a.pendingProps);
            b.child = c;
            for (c.return = b; null !== a.sibling;) a = a.sibling, c = c.sibling = wh(a, a.pendingProps), c.return = b;
            c.sibling = null;
          }
          return b.child;
        }
        function zj(a, b, c) {
          switch (b.tag) {
            case 3:
              lj(b);
              Ig();
              break;
            case 5:
              Kh(b);
              break;
            case 1:
              Zf(b.type) && cg(b);
              break;
            case 4:
              Ih(b, b.stateNode.containerInfo);
              break;
            case 10:
              var d = b.type._context,
                e = b.memoizedProps.value;
              G$1(Mg, d._currentValue);
              d._currentValue = e;
              break;
            case 13:
              d = b.memoizedState;
              if (null !== d) {
                if (null !== d.dehydrated) return G$1(M$1, M$1.current & 1), b.flags |= 128, null;
                if (0 !== (c & b.child.childLanes)) return pj(a, b, c);
                G$1(M$1, M$1.current & 1);
                a = $i(a, b, c);
                return null !== a ? a.sibling : null;
              }
              G$1(M$1, M$1.current & 1);
              break;
            case 19:
              d = 0 !== (c & b.childLanes);
              if (0 !== (a.flags & 128)) {
                if (d) return yj(a, b, c);
                b.flags |= 128;
              }
              e = b.memoizedState;
              null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
              G$1(M$1, M$1.current);
              if (d) break;else return null;
            case 22:
            case 23:
              return b.lanes = 0, ej(a, b, c);
          }
          return $i(a, b, c);
        }
        var Aj, Bj, Cj, Dj;
        Aj = function Aj(a, b) {
          for (var c = b.child; null !== c;) {
            if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);else if (4 !== c.tag && null !== c.child) {
              c.child.return = c;
              c = c.child;
              continue;
            }
            if (c === b) break;
            for (; null === c.sibling;) {
              if (null === c.return || c.return === b) return;
              c = c.return;
            }
            c.sibling.return = c.return;
            c = c.sibling;
          }
        };
        Bj = function Bj() {};
        Cj = function Cj(a, b, c, d) {
          var e = a.memoizedProps;
          if (e !== d) {
            a = b.stateNode;
            Hh(Eh.current);
            var f = null;
            switch (c) {
              case "input":
                e = Ya(a, e);
                d = Ya(a, d);
                f = [];
                break;
              case "select":
                e = A$2({}, e, {
                  value: void 0
                });
                d = A$2({}, d, {
                  value: void 0
                });
                f = [];
                break;
              case "textarea":
                e = gb(a, e);
                d = gb(a, d);
                f = [];
                break;
              default:
                "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = Bf);
            }
            ub(c, d);
            var g;
            c = null;
            for (l in e) if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l]) if ("style" === l) {
              var h = e[l];
              for (g in h) h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
            } else "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && (ea.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));
            for (l in d) {
              var k = d[l];
              h = null != e ? e[l] : void 0;
              if (d.hasOwnProperty(l) && k !== h && (null != k || null != h)) if ("style" === l) {
                if (h) {
                  for (g in h) !h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");
                  for (g in k) k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);
                } else c || (f || (f = []), f.push(l, c)), c = k;
              } else "dangerouslySetInnerHTML" === l ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, null != k && h !== k && (f = f || []).push(l, k)) : "children" === l ? "string" !== typeof k && "number" !== typeof k || (f = f || []).push(l, "" + k) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && (ea.hasOwnProperty(l) ? (null != k && "onScroll" === l && D$1("scroll", a), f || h === k || (f = [])) : (f = f || []).push(l, k));
            }
            c && (f = f || []).push("style", c);
            var l = f;
            if (b.updateQueue = l) b.flags |= 4;
          }
        };
        Dj = function Dj(a, b, c, d) {
          c !== d && (b.flags |= 4);
        };
        function Ej(a, b) {
          if (!I$1) switch (a.tailMode) {
            case "hidden":
              b = a.tail;
              for (var c = null; null !== b;) null !== b.alternate && (c = b), b = b.sibling;
              null === c ? a.tail = null : c.sibling = null;
              break;
            case "collapsed":
              c = a.tail;
              for (var d = null; null !== c;) null !== c.alternate && (d = c), c = c.sibling;
              null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
          }
        }
        function S$1(a) {
          var b = null !== a.alternate && a.alternate.child === a.child,
            c = 0,
            d = 0;
          if (b) for (var e = a.child; null !== e;) c |= e.lanes | e.childLanes, d |= e.subtreeFlags & 14680064, d |= e.flags & 14680064, e.return = a, e = e.sibling;else for (e = a.child; null !== e;) c |= e.lanes | e.childLanes, d |= e.subtreeFlags, d |= e.flags, e.return = a, e = e.sibling;
          a.subtreeFlags |= d;
          a.childLanes = c;
          return b;
        }
        function Fj(a, b, c) {
          var d = b.pendingProps;
          wg(b);
          switch (b.tag) {
            case 2:
            case 16:
            case 15:
            case 0:
            case 11:
            case 7:
            case 8:
            case 12:
            case 9:
            case 14:
              return S$1(b), null;
            case 1:
              return Zf(b.type) && $f(), S$1(b), null;
            case 3:
              d = b.stateNode;
              Jh();
              E$1(Wf);
              E$1(H$1);
              Oh();
              d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);
              if (null === a || null === a.child) Gg(b) ? b.flags |= 4 : null === a || a.memoizedState.isDehydrated && 0 === (b.flags & 256) || (b.flags |= 1024, null !== zg && (Gj(zg), zg = null));
              Bj(a, b);
              S$1(b);
              return null;
            case 5:
              Lh(b);
              var e = Hh(Gh.current);
              c = b.type;
              if (null !== a && null != b.stateNode) Cj(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 512, b.flags |= 2097152);else {
                if (!d) {
                  if (null === b.stateNode) throw Error(p$5(166));
                  S$1(b);
                  return null;
                }
                a = Hh(Eh.current);
                if (Gg(b)) {
                  d = b.stateNode;
                  c = b.type;
                  var f = b.memoizedProps;
                  d[Of] = b;
                  d[Pf] = f;
                  a = 0 !== (b.mode & 1);
                  switch (c) {
                    case "dialog":
                      D$1("cancel", d);
                      D$1("close", d);
                      break;
                    case "iframe":
                    case "object":
                    case "embed":
                      D$1("load", d);
                      break;
                    case "video":
                    case "audio":
                      for (e = 0; e < lf.length; e++) D$1(lf[e], d);
                      break;
                    case "source":
                      D$1("error", d);
                      break;
                    case "img":
                    case "image":
                    case "link":
                      D$1("error", d);
                      D$1("load", d);
                      break;
                    case "details":
                      D$1("toggle", d);
                      break;
                    case "input":
                      Za(d, f);
                      D$1("invalid", d);
                      break;
                    case "select":
                      d._wrapperState = {
                        wasMultiple: !!f.multiple
                      };
                      D$1("invalid", d);
                      break;
                    case "textarea":
                      hb(d, f), D$1("invalid", d);
                  }
                  ub(c, f);
                  e = null;
                  for (var g in f) if (f.hasOwnProperty(g)) {
                    var h = f[g];
                    "children" === g ? "string" === typeof h ? d.textContent !== h && (!0 !== f.suppressHydrationWarning && Af(d.textContent, h, a), e = ["children", h]) : "number" === typeof h && d.textContent !== "" + h && (!0 !== f.suppressHydrationWarning && Af(d.textContent, h, a), e = ["children", "" + h]) : ea.hasOwnProperty(g) && null != h && "onScroll" === g && D$1("scroll", d);
                  }
                  switch (c) {
                    case "input":
                      Va(d);
                      db(d, f, !0);
                      break;
                    case "textarea":
                      Va(d);
                      jb(d);
                      break;
                    case "select":
                    case "option":
                      break;
                    default:
                      "function" === typeof f.onClick && (d.onclick = Bf);
                  }
                  d = e;
                  b.updateQueue = d;
                  null !== d && (b.flags |= 4);
                } else {
                  g = 9 === e.nodeType ? e : e.ownerDocument;
                  "http://www.w3.org/1999/xhtml" === a && (a = kb(c));
                  "http://www.w3.org/1999/xhtml" === a ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script>\x3c/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, {
                    is: d.is
                  }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = !0 : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);
                  a[Of] = b;
                  a[Pf] = d;
                  Aj(a, b, !1, !1);
                  b.stateNode = a;
                  a: {
                    g = vb(c, d);
                    switch (c) {
                      case "dialog":
                        D$1("cancel", a);
                        D$1("close", a);
                        e = d;
                        break;
                      case "iframe":
                      case "object":
                      case "embed":
                        D$1("load", a);
                        e = d;
                        break;
                      case "video":
                      case "audio":
                        for (e = 0; e < lf.length; e++) D$1(lf[e], a);
                        e = d;
                        break;
                      case "source":
                        D$1("error", a);
                        e = d;
                        break;
                      case "img":
                      case "image":
                      case "link":
                        D$1("error", a);
                        D$1("load", a);
                        e = d;
                        break;
                      case "details":
                        D$1("toggle", a);
                        e = d;
                        break;
                      case "input":
                        Za(a, d);
                        e = Ya(a, d);
                        D$1("invalid", a);
                        break;
                      case "option":
                        e = d;
                        break;
                      case "select":
                        a._wrapperState = {
                          wasMultiple: !!d.multiple
                        };
                        e = A$2({}, d, {
                          value: void 0
                        });
                        D$1("invalid", a);
                        break;
                      case "textarea":
                        hb(a, d);
                        e = gb(a, d);
                        D$1("invalid", a);
                        break;
                      default:
                        e = d;
                    }
                    ub(c, e);
                    h = e;
                    for (f in h) if (h.hasOwnProperty(f)) {
                      var k = h[f];
                      "style" === f ? sb(a, k) : "dangerouslySetInnerHTML" === f ? (k = k ? k.__html : void 0, null != k && nb(a, k)) : "children" === f ? "string" === typeof k ? ("textarea" !== c || "" !== k) && ob(a, k) : "number" === typeof k && ob(a, "" + k) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (ea.hasOwnProperty(f) ? null != k && "onScroll" === f && D$1("scroll", a) : null != k && ta(a, f, k, g));
                    }
                    switch (c) {
                      case "input":
                        Va(a);
                        db(a, d, !1);
                        break;
                      case "textarea":
                        Va(a);
                        jb(a);
                        break;
                      case "option":
                        null != d.value && a.setAttribute("value", "" + Sa(d.value));
                        break;
                      case "select":
                        a.multiple = !!d.multiple;
                        f = d.value;
                        null != f ? fb(a, !!d.multiple, f, !1) : null != d.defaultValue && fb(a, !!d.multiple, d.defaultValue, !0);
                        break;
                      default:
                        "function" === typeof e.onClick && (a.onclick = Bf);
                    }
                    switch (c) {
                      case "button":
                      case "input":
                      case "select":
                      case "textarea":
                        d = !!d.autoFocus;
                        break a;
                      case "img":
                        d = !0;
                        break a;
                      default:
                        d = !1;
                    }
                  }
                  d && (b.flags |= 4);
                }
                null !== b.ref && (b.flags |= 512, b.flags |= 2097152);
              }
              S$1(b);
              return null;
            case 6:
              if (a && null != b.stateNode) Dj(a, b, a.memoizedProps, d);else {
                if ("string" !== typeof d && null === b.stateNode) throw Error(p$5(166));
                c = Hh(Gh.current);
                Hh(Eh.current);
                if (Gg(b)) {
                  d = b.stateNode;
                  c = b.memoizedProps;
                  d[Of] = b;
                  if (f = d.nodeValue !== c) if (a = xg, null !== a) switch (a.tag) {
                    case 3:
                      Af(d.nodeValue, c, 0 !== (a.mode & 1));
                      break;
                    case 5:
                      !0 !== a.memoizedProps.suppressHydrationWarning && Af(d.nodeValue, c, 0 !== (a.mode & 1));
                  }
                  f && (b.flags |= 4);
                } else d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[Of] = b, b.stateNode = d;
              }
              S$1(b);
              return null;
            case 13:
              E$1(M$1);
              d = b.memoizedState;
              if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {
                if (I$1 && null !== yg && 0 !== (b.mode & 1) && 0 === (b.flags & 128)) Hg(), Ig(), b.flags |= 98560, f = !1;else if (f = Gg(b), null !== d && null !== d.dehydrated) {
                  if (null === a) {
                    if (!f) throw Error(p$5(318));
                    f = b.memoizedState;
                    f = null !== f ? f.dehydrated : null;
                    if (!f) throw Error(p$5(317));
                    f[Of] = b;
                  } else Ig(), 0 === (b.flags & 128) && (b.memoizedState = null), b.flags |= 4;
                  S$1(b);
                  f = !1;
                } else null !== zg && (Gj(zg), zg = null), f = !0;
                if (!f) return b.flags & 65536 ? b : null;
              }
              if (0 !== (b.flags & 128)) return b.lanes = c, b;
              d = null !== d;
              d !== (null !== a && null !== a.memoizedState) && d && (b.child.flags |= 8192, 0 !== (b.mode & 1) && (null === a || 0 !== (M$1.current & 1) ? 0 === T && (T = 3) : uj()));
              null !== b.updateQueue && (b.flags |= 4);
              S$1(b);
              return null;
            case 4:
              return Jh(), Bj(a, b), null === a && sf(b.stateNode.containerInfo), S$1(b), null;
            case 10:
              return Rg(b.type._context), S$1(b), null;
            case 17:
              return Zf(b.type) && $f(), S$1(b), null;
            case 19:
              E$1(M$1);
              f = b.memoizedState;
              if (null === f) return S$1(b), null;
              d = 0 !== (b.flags & 128);
              g = f.rendering;
              if (null === g) {
                if (d) Ej(f, !1);else {
                  if (0 !== T || null !== a && 0 !== (a.flags & 128)) for (a = b.child; null !== a;) {
                    g = Mh(a);
                    if (null !== g) {
                      b.flags |= 128;
                      Ej(f, !1);
                      d = g.updateQueue;
                      null !== d && (b.updateQueue = d, b.flags |= 4);
                      b.subtreeFlags = 0;
                      d = c;
                      for (c = b.child; null !== c;) f = c, a = d, f.flags &= 14680066, g = f.alternate, null === g ? (f.childLanes = 0, f.lanes = a, f.child = null, f.subtreeFlags = 0, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.subtreeFlags = 0, f.deletions = null, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = null === a ? null : {
                        lanes: a.lanes,
                        firstContext: a.firstContext
                      }), c = c.sibling;
                      G$1(M$1, M$1.current & 1 | 2);
                      return b.child;
                    }
                    a = a.sibling;
                  }
                  null !== f.tail && B$1() > Hj && (b.flags |= 128, d = !0, Ej(f, !1), b.lanes = 4194304);
                }
              } else {
                if (!d) if (a = Mh(g), null !== a) {
                  if (b.flags |= 128, d = !0, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Ej(f, !0), null === f.tail && "hidden" === f.tailMode && !g.alternate && !I$1) return S$1(b), null;
                } else 2 * B$1() - f.renderingStartTime > Hj && 1073741824 !== c && (b.flags |= 128, d = !0, Ej(f, !1), b.lanes = 4194304);
                f.isBackwards ? (g.sibling = b.child, b.child = g) : (c = f.last, null !== c ? c.sibling = g : b.child = g, f.last = g);
              }
              if (null !== f.tail) return b = f.tail, f.rendering = b, f.tail = b.sibling, f.renderingStartTime = B$1(), b.sibling = null, c = M$1.current, G$1(M$1, d ? c & 1 | 2 : c & 1), b;
              S$1(b);
              return null;
            case 22:
            case 23:
              return Ij(), d = null !== b.memoizedState, null !== a && null !== a.memoizedState !== d && (b.flags |= 8192), d && 0 !== (b.mode & 1) ? 0 !== (gj & 1073741824) && (S$1(b), b.subtreeFlags & 6 && (b.flags |= 8192)) : S$1(b), null;
            case 24:
              return null;
            case 25:
              return null;
          }
          throw Error(p$5(156, b.tag));
        }
        function Jj(a, b) {
          wg(b);
          switch (b.tag) {
            case 1:
              return Zf(b.type) && $f(), a = b.flags, a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
            case 3:
              return Jh(), E$1(Wf), E$1(H$1), Oh(), a = b.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b.flags = a & -65537 | 128, b) : null;
            case 5:
              return Lh(b), null;
            case 13:
              E$1(M$1);
              a = b.memoizedState;
              if (null !== a && null !== a.dehydrated) {
                if (null === b.alternate) throw Error(p$5(340));
                Ig();
              }
              a = b.flags;
              return a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
            case 19:
              return E$1(M$1), null;
            case 4:
              return Jh(), null;
            case 10:
              return Rg(b.type._context), null;
            case 22:
            case 23:
              return Ij(), null;
            case 24:
              return null;
            default:
              return null;
          }
        }
        var Kj = !1,
          U$1 = !1,
          Lj = "function" === typeof WeakSet ? WeakSet : Set,
          V = null;
        function Mj(a, b) {
          var c = a.ref;
          if (null !== c) if ("function" === typeof c) try {
            c(null);
          } catch (d) {
            W$1(a, b, d);
          } else c.current = null;
        }
        function Nj(a, b, c) {
          try {
            c();
          } catch (d) {
            W$1(a, b, d);
          }
        }
        var Oj = !1;
        function Pj(a, b) {
          Cf = dd;
          a = Me();
          if (Ne(a)) {
            if ("selectionStart" in a) var c = {
              start: a.selectionStart,
              end: a.selectionEnd
            };else a: {
              c = (c = a.ownerDocument) && c.defaultView || window;
              var d = c.getSelection && c.getSelection();
              if (d && 0 !== d.rangeCount) {
                c = d.anchorNode;
                var e = d.anchorOffset,
                  f = d.focusNode;
                d = d.focusOffset;
                try {
                  c.nodeType, f.nodeType;
                } catch (F) {
                  c = null;
                  break a;
                }
                var g = 0,
                  h = -1,
                  k = -1,
                  l = 0,
                  m = 0,
                  q = a,
                  r = null;
                b: for (;;) {
                  for (var y;;) {
                    q !== c || 0 !== e && 3 !== q.nodeType || (h = g + e);
                    q !== f || 0 !== d && 3 !== q.nodeType || (k = g + d);
                    3 === q.nodeType && (g += q.nodeValue.length);
                    if (null === (y = q.firstChild)) break;
                    r = q;
                    q = y;
                  }
                  for (;;) {
                    if (q === a) break b;
                    r === c && ++l === e && (h = g);
                    r === f && ++m === d && (k = g);
                    if (null !== (y = q.nextSibling)) break;
                    q = r;
                    r = q.parentNode;
                  }
                  q = y;
                }
                c = -1 === h || -1 === k ? null : {
                  start: h,
                  end: k
                };
              } else c = null;
            }
            c = c || {
              start: 0,
              end: 0
            };
          } else c = null;
          Df = {
            focusedElem: a,
            selectionRange: c
          };
          dd = !1;
          for (V = b; null !== V;) if (b = V, a = b.child, 0 !== (b.subtreeFlags & 1028) && null !== a) a.return = b, V = a;else for (; null !== V;) {
            b = V;
            try {
              var n = b.alternate;
              if (0 !== (b.flags & 1024)) switch (b.tag) {
                case 0:
                case 11:
                case 15:
                  break;
                case 1:
                  if (null !== n) {
                    var t = n.memoizedProps,
                      J = n.memoizedState,
                      x = b.stateNode,
                      w = x.getSnapshotBeforeUpdate(b.elementType === b.type ? t : Lg(b.type, t), J);
                    x.__reactInternalSnapshotBeforeUpdate = w;
                  }
                  break;
                case 3:
                  var u = b.stateNode.containerInfo;
                  1 === u.nodeType ? u.textContent = "" : 9 === u.nodeType && u.documentElement && u.removeChild(u.documentElement);
                  break;
                case 5:
                case 6:
                case 4:
                case 17:
                  break;
                default:
                  throw Error(p$5(163));
              }
            } catch (F) {
              W$1(b, b.return, F);
            }
            a = b.sibling;
            if (null !== a) {
              a.return = b.return;
              V = a;
              break;
            }
            V = b.return;
          }
          n = Oj;
          Oj = !1;
          return n;
        }
        function Qj(a, b, c) {
          var d = b.updateQueue;
          d = null !== d ? d.lastEffect : null;
          if (null !== d) {
            var e = d = d.next;
            do {
              if ((e.tag & a) === a) {
                var f = e.destroy;
                e.destroy = void 0;
                void 0 !== f && Nj(b, c, f);
              }
              e = e.next;
            } while (e !== d);
          }
        }
        function Rj(a, b) {
          b = b.updateQueue;
          b = null !== b ? b.lastEffect : null;
          if (null !== b) {
            var c = b = b.next;
            do {
              if ((c.tag & a) === a) {
                var d = c.create;
                c.destroy = d();
              }
              c = c.next;
            } while (c !== b);
          }
        }
        function Sj(a) {
          var b = a.ref;
          if (null !== b) {
            var c = a.stateNode;
            switch (a.tag) {
              case 5:
                a = c;
                break;
              default:
                a = c;
            }
            "function" === typeof b ? b(a) : b.current = a;
          }
        }
        function Tj(a) {
          var b = a.alternate;
          null !== b && (a.alternate = null, Tj(b));
          a.child = null;
          a.deletions = null;
          a.sibling = null;
          5 === a.tag && (b = a.stateNode, null !== b && (delete b[Of], delete b[Pf], delete b[of], delete b[Qf], delete b[Rf]));
          a.stateNode = null;
          a.return = null;
          a.dependencies = null;
          a.memoizedProps = null;
          a.memoizedState = null;
          a.pendingProps = null;
          a.stateNode = null;
          a.updateQueue = null;
        }
        function Uj(a) {
          return 5 === a.tag || 3 === a.tag || 4 === a.tag;
        }
        function Vj(a) {
          a: for (;;) {
            for (; null === a.sibling;) {
              if (null === a.return || Uj(a.return)) return null;
              a = a.return;
            }
            a.sibling.return = a.return;
            for (a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag;) {
              if (a.flags & 2) continue a;
              if (null === a.child || 4 === a.tag) continue a;else a.child.return = a, a = a.child;
            }
            if (!(a.flags & 2)) return a.stateNode;
          }
        }
        function Wj(a, b, c) {
          var d = a.tag;
          if (5 === d || 6 === d) a = a.stateNode, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = Bf));else if (4 !== d && (a = a.child, null !== a)) for (Wj(a, b, c), a = a.sibling; null !== a;) Wj(a, b, c), a = a.sibling;
        }
        function Xj(a, b, c) {
          var d = a.tag;
          if (5 === d || 6 === d) a = a.stateNode, b ? c.insertBefore(a, b) : c.appendChild(a);else if (4 !== d && (a = a.child, null !== a)) for (Xj(a, b, c), a = a.sibling; null !== a;) Xj(a, b, c), a = a.sibling;
        }
        var X$1 = null,
          Yj = !1;
        function Zj(a, b, c) {
          for (c = c.child; null !== c;) ak(a, b, c), c = c.sibling;
        }
        function ak(a, b, c) {
          if (lc && "function" === typeof lc.onCommitFiberUnmount) try {
            lc.onCommitFiberUnmount(kc, c);
          } catch (h) {}
          switch (c.tag) {
            case 5:
              U$1 || Mj(c, b);
            case 6:
              var d = X$1,
                e = Yj;
              X$1 = null;
              Zj(a, b, c);
              X$1 = d;
              Yj = e;
              null !== X$1 && (Yj ? (a = X$1, c = c.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c) : a.removeChild(c)) : X$1.removeChild(c.stateNode));
              break;
            case 18:
              null !== X$1 && (Yj ? (a = X$1, c = c.stateNode, 8 === a.nodeType ? Kf(a.parentNode, c) : 1 === a.nodeType && Kf(a, c), bd(a)) : Kf(X$1, c.stateNode));
              break;
            case 4:
              d = X$1;
              e = Yj;
              X$1 = c.stateNode.containerInfo;
              Yj = !0;
              Zj(a, b, c);
              X$1 = d;
              Yj = e;
              break;
            case 0:
            case 11:
            case 14:
            case 15:
              if (!U$1 && (d = c.updateQueue, null !== d && (d = d.lastEffect, null !== d))) {
                e = d = d.next;
                do {
                  var f = e,
                    g = f.destroy;
                  f = f.tag;
                  void 0 !== g && (0 !== (f & 2) ? Nj(c, b, g) : 0 !== (f & 4) && Nj(c, b, g));
                  e = e.next;
                } while (e !== d);
              }
              Zj(a, b, c);
              break;
            case 1:
              if (!U$1 && (Mj(c, b), d = c.stateNode, "function" === typeof d.componentWillUnmount)) try {
                d.props = c.memoizedProps, d.state = c.memoizedState, d.componentWillUnmount();
              } catch (h) {
                W$1(c, b, h);
              }
              Zj(a, b, c);
              break;
            case 21:
              Zj(a, b, c);
              break;
            case 22:
              c.mode & 1 ? (U$1 = (d = U$1) || null !== c.memoizedState, Zj(a, b, c), U$1 = d) : Zj(a, b, c);
              break;
            default:
              Zj(a, b, c);
          }
        }
        function bk(a) {
          var b = a.updateQueue;
          if (null !== b) {
            a.updateQueue = null;
            var c = a.stateNode;
            null === c && (c = a.stateNode = new Lj());
            b.forEach(function (b) {
              var d = ck.bind(null, a, b);
              c.has(b) || (c.add(b), b.then(d, d));
            });
          }
        }
        function dk(a, b) {
          var c = b.deletions;
          if (null !== c) for (var d = 0; d < c.length; d++) {
            var e = c[d];
            try {
              var f = a,
                g = b,
                h = g;
              a: for (; null !== h;) {
                switch (h.tag) {
                  case 5:
                    X$1 = h.stateNode;
                    Yj = !1;
                    break a;
                  case 3:
                    X$1 = h.stateNode.containerInfo;
                    Yj = !0;
                    break a;
                  case 4:
                    X$1 = h.stateNode.containerInfo;
                    Yj = !0;
                    break a;
                }
                h = h.return;
              }
              if (null === X$1) throw Error(p$5(160));
              ak(f, g, e);
              X$1 = null;
              Yj = !1;
              var k = e.alternate;
              null !== k && (k.return = null);
              e.return = null;
            } catch (l) {
              W$1(e, b, l);
            }
          }
          if (b.subtreeFlags & 12854) for (b = b.child; null !== b;) ek(b, a), b = b.sibling;
        }
        function ek(a, b) {
          var c = a.alternate,
            d = a.flags;
          switch (a.tag) {
            case 0:
            case 11:
            case 14:
            case 15:
              dk(b, a);
              fk(a);
              if (d & 4) {
                try {
                  Qj(3, a, a.return), Rj(3, a);
                } catch (t) {
                  W$1(a, a.return, t);
                }
                try {
                  Qj(5, a, a.return);
                } catch (t) {
                  W$1(a, a.return, t);
                }
              }
              break;
            case 1:
              dk(b, a);
              fk(a);
              d & 512 && null !== c && Mj(c, c.return);
              break;
            case 5:
              dk(b, a);
              fk(a);
              d & 512 && null !== c && Mj(c, c.return);
              if (a.flags & 32) {
                var e = a.stateNode;
                try {
                  ob(e, "");
                } catch (t) {
                  W$1(a, a.return, t);
                }
              }
              if (d & 4 && (e = a.stateNode, null != e)) {
                var f = a.memoizedProps,
                  g = null !== c ? c.memoizedProps : f,
                  h = a.type,
                  k = a.updateQueue;
                a.updateQueue = null;
                if (null !== k) try {
                  "input" === h && "radio" === f.type && null != f.name && ab(e, f);
                  vb(h, g);
                  var l = vb(h, f);
                  for (g = 0; g < k.length; g += 2) {
                    var m = k[g],
                      q = k[g + 1];
                    "style" === m ? sb(e, q) : "dangerouslySetInnerHTML" === m ? nb(e, q) : "children" === m ? ob(e, q) : ta(e, m, q, l);
                  }
                  switch (h) {
                    case "input":
                      bb(e, f);
                      break;
                    case "textarea":
                      ib(e, f);
                      break;
                    case "select":
                      var r = e._wrapperState.wasMultiple;
                      e._wrapperState.wasMultiple = !!f.multiple;
                      var y = f.value;
                      null != y ? fb(e, !!f.multiple, y, !1) : r !== !!f.multiple && (null != f.defaultValue ? fb(e, !!f.multiple, f.defaultValue, !0) : fb(e, !!f.multiple, f.multiple ? [] : "", !1));
                  }
                  e[Pf] = f;
                } catch (t) {
                  W$1(a, a.return, t);
                }
              }
              break;
            case 6:
              dk(b, a);
              fk(a);
              if (d & 4) {
                if (null === a.stateNode) throw Error(p$5(162));
                e = a.stateNode;
                f = a.memoizedProps;
                try {
                  e.nodeValue = f;
                } catch (t) {
                  W$1(a, a.return, t);
                }
              }
              break;
            case 3:
              dk(b, a);
              fk(a);
              if (d & 4 && null !== c && c.memoizedState.isDehydrated) try {
                bd(b.containerInfo);
              } catch (t) {
                W$1(a, a.return, t);
              }
              break;
            case 4:
              dk(b, a);
              fk(a);
              break;
            case 13:
              dk(b, a);
              fk(a);
              e = a.child;
              e.flags & 8192 && (f = null !== e.memoizedState, e.stateNode.isHidden = f, !f || null !== e.alternate && null !== e.alternate.memoizedState || (gk = B$1()));
              d & 4 && bk(a);
              break;
            case 22:
              m = null !== c && null !== c.memoizedState;
              a.mode & 1 ? (U$1 = (l = U$1) || m, dk(b, a), U$1 = l) : dk(b, a);
              fk(a);
              if (d & 8192) {
                l = null !== a.memoizedState;
                if ((a.stateNode.isHidden = l) && !m && 0 !== (a.mode & 1)) for (V = a, m = a.child; null !== m;) {
                  for (q = V = m; null !== V;) {
                    r = V;
                    y = r.child;
                    switch (r.tag) {
                      case 0:
                      case 11:
                      case 14:
                      case 15:
                        Qj(4, r, r.return);
                        break;
                      case 1:
                        Mj(r, r.return);
                        var n = r.stateNode;
                        if ("function" === typeof n.componentWillUnmount) {
                          d = r;
                          c = r.return;
                          try {
                            b = d, n.props = b.memoizedProps, n.state = b.memoizedState, n.componentWillUnmount();
                          } catch (t) {
                            W$1(d, c, t);
                          }
                        }
                        break;
                      case 5:
                        Mj(r, r.return);
                        break;
                      case 22:
                        if (null !== r.memoizedState) {
                          hk(q);
                          continue;
                        }
                    }
                    null !== y ? (y.return = r, V = y) : hk(q);
                  }
                  m = m.sibling;
                }
                a: for (m = null, q = a;;) {
                  if (5 === q.tag) {
                    if (null === m) {
                      m = q;
                      try {
                        e = q.stateNode, l ? (f = e.style, "function" === typeof f.setProperty ? f.setProperty("display", "none", "important") : f.display = "none") : (h = q.stateNode, k = q.memoizedProps.style, g = void 0 !== k && null !== k && k.hasOwnProperty("display") ? k.display : null, h.style.display = rb("display", g));
                      } catch (t) {
                        W$1(a, a.return, t);
                      }
                    }
                  } else if (6 === q.tag) {
                    if (null === m) try {
                      q.stateNode.nodeValue = l ? "" : q.memoizedProps;
                    } catch (t) {
                      W$1(a, a.return, t);
                    }
                  } else if ((22 !== q.tag && 23 !== q.tag || null === q.memoizedState || q === a) && null !== q.child) {
                    q.child.return = q;
                    q = q.child;
                    continue;
                  }
                  if (q === a) break a;
                  for (; null === q.sibling;) {
                    if (null === q.return || q.return === a) break a;
                    m === q && (m = null);
                    q = q.return;
                  }
                  m === q && (m = null);
                  q.sibling.return = q.return;
                  q = q.sibling;
                }
              }
              break;
            case 19:
              dk(b, a);
              fk(a);
              d & 4 && bk(a);
              break;
            case 21:
              break;
            default:
              dk(b, a), fk(a);
          }
        }
        function fk(a) {
          var b = a.flags;
          if (b & 2) {
            try {
              a: {
                for (var c = a.return; null !== c;) {
                  if (Uj(c)) {
                    var d = c;
                    break a;
                  }
                  c = c.return;
                }
                throw Error(p$5(160));
              }
              switch (d.tag) {
                case 5:
                  var e = d.stateNode;
                  d.flags & 32 && (ob(e, ""), d.flags &= -33);
                  var f = Vj(a);
                  Xj(a, f, e);
                  break;
                case 3:
                case 4:
                  var g = d.stateNode.containerInfo,
                    h = Vj(a);
                  Wj(a, h, g);
                  break;
                default:
                  throw Error(p$5(161));
              }
            } catch (k) {
              W$1(a, a.return, k);
            }
            a.flags &= -3;
          }
          b & 4096 && (a.flags &= -4097);
        }
        function ik(a, b, c) {
          V = a;
          jk(a);
        }
        function jk(a, b, c) {
          for (var d = 0 !== (a.mode & 1); null !== V;) {
            var e = V,
              f = e.child;
            if (22 === e.tag && d) {
              var g = null !== e.memoizedState || Kj;
              if (!g) {
                var h = e.alternate,
                  k = null !== h && null !== h.memoizedState || U$1;
                h = Kj;
                var l = U$1;
                Kj = g;
                if ((U$1 = k) && !l) for (V = e; null !== V;) g = V, k = g.child, 22 === g.tag && null !== g.memoizedState ? kk(e) : null !== k ? (k.return = g, V = k) : kk(e);
                for (; null !== f;) V = f, jk(f), f = f.sibling;
                V = e;
                Kj = h;
                U$1 = l;
              }
              lk(a);
            } else 0 !== (e.subtreeFlags & 8772) && null !== f ? (f.return = e, V = f) : lk(a);
          }
        }
        function lk(a) {
          for (; null !== V;) {
            var b = V;
            if (0 !== (b.flags & 8772)) {
              var c = b.alternate;
              try {
                if (0 !== (b.flags & 8772)) switch (b.tag) {
                  case 0:
                  case 11:
                  case 15:
                    U$1 || Rj(5, b);
                    break;
                  case 1:
                    var d = b.stateNode;
                    if (b.flags & 4 && !U$1) if (null === c) d.componentDidMount();else {
                      var e = b.elementType === b.type ? c.memoizedProps : Lg(b.type, c.memoizedProps);
                      d.componentDidUpdate(e, c.memoizedState, d.__reactInternalSnapshotBeforeUpdate);
                    }
                    var f = b.updateQueue;
                    null !== f && ih(b, f, d);
                    break;
                  case 3:
                    var g = b.updateQueue;
                    if (null !== g) {
                      c = null;
                      if (null !== b.child) switch (b.child.tag) {
                        case 5:
                          c = b.child.stateNode;
                          break;
                        case 1:
                          c = b.child.stateNode;
                      }
                      ih(b, g, c);
                    }
                    break;
                  case 5:
                    var h = b.stateNode;
                    if (null === c && b.flags & 4) {
                      c = h;
                      var k = b.memoizedProps;
                      switch (b.type) {
                        case "button":
                        case "input":
                        case "select":
                        case "textarea":
                          k.autoFocus && c.focus();
                          break;
                        case "img":
                          k.src && (c.src = k.src);
                      }
                    }
                    break;
                  case 6:
                    break;
                  case 4:
                    break;
                  case 12:
                    break;
                  case 13:
                    if (null === b.memoizedState) {
                      var l = b.alternate;
                      if (null !== l) {
                        var m = l.memoizedState;
                        if (null !== m) {
                          var q = m.dehydrated;
                          null !== q && bd(q);
                        }
                      }
                    }
                    break;
                  case 19:
                  case 17:
                  case 21:
                  case 22:
                  case 23:
                  case 25:
                    break;
                  default:
                    throw Error(p$5(163));
                }
                U$1 || b.flags & 512 && Sj(b);
              } catch (r) {
                W$1(b, b.return, r);
              }
            }
            if (b === a) {
              V = null;
              break;
            }
            c = b.sibling;
            if (null !== c) {
              c.return = b.return;
              V = c;
              break;
            }
            V = b.return;
          }
        }
        function hk(a) {
          for (; null !== V;) {
            var b = V;
            if (b === a) {
              V = null;
              break;
            }
            var c = b.sibling;
            if (null !== c) {
              c.return = b.return;
              V = c;
              break;
            }
            V = b.return;
          }
        }
        function kk(a) {
          for (; null !== V;) {
            var b = V;
            try {
              switch (b.tag) {
                case 0:
                case 11:
                case 15:
                  var c = b.return;
                  try {
                    Rj(4, b);
                  } catch (k) {
                    W$1(b, c, k);
                  }
                  break;
                case 1:
                  var d = b.stateNode;
                  if ("function" === typeof d.componentDidMount) {
                    var e = b.return;
                    try {
                      d.componentDidMount();
                    } catch (k) {
                      W$1(b, e, k);
                    }
                  }
                  var f = b.return;
                  try {
                    Sj(b);
                  } catch (k) {
                    W$1(b, f, k);
                  }
                  break;
                case 5:
                  var g = b.return;
                  try {
                    Sj(b);
                  } catch (k) {
                    W$1(b, g, k);
                  }
              }
            } catch (k) {
              W$1(b, b.return, k);
            }
            if (b === a) {
              V = null;
              break;
            }
            var h = b.sibling;
            if (null !== h) {
              h.return = b.return;
              V = h;
              break;
            }
            V = b.return;
          }
        }
        var mk = Math.ceil,
          nk = ua.ReactCurrentDispatcher,
          ok$3 = ua.ReactCurrentOwner,
          pk = ua.ReactCurrentBatchConfig,
          K = 0,
          R$1 = null,
          Y = null,
          Z$1 = 0,
          gj = 0,
          fj = Uf(0),
          T = 0,
          qk = null,
          hh = 0,
          rk = 0,
          sk = 0,
          tk = null,
          uk = null,
          gk = 0,
          Hj = Infinity,
          vk = null,
          Pi = !1,
          Qi = null,
          Si = null,
          wk = !1,
          xk = null,
          yk = 0,
          zk = 0,
          Ak = null,
          Bk = -1,
          Ck = 0;
        function L$1() {
          return 0 !== (K & 6) ? B$1() : -1 !== Bk ? Bk : Bk = B$1();
        }
        function lh(a) {
          if (0 === (a.mode & 1)) return 1;
          if (0 !== (K & 2) && 0 !== Z$1) return Z$1 & -Z$1;
          if (null !== Kg.transition) return 0 === Ck && (Ck = yc()), Ck;
          a = C;
          if (0 !== a) return a;
          a = window.event;
          a = void 0 === a ? 16 : jd(a.type);
          return a;
        }
        function mh(a, b, c, d) {
          if (50 < zk) throw zk = 0, Ak = null, Error(p$5(185));
          Ac(a, c, d);
          if (0 === (K & 2) || a !== R$1) a === R$1 && (0 === (K & 2) && (rk |= c), 4 === T && Dk(a, Z$1)), Ek(a, d), 1 === c && 0 === K && 0 === (b.mode & 1) && (Hj = B$1() + 500, fg && jg());
        }
        function Ek(a, b) {
          var c = a.callbackNode;
          wc(a, b);
          var d = uc(a, a === R$1 ? Z$1 : 0);
          if (0 === d) null !== c && bc(c), a.callbackNode = null, a.callbackPriority = 0;else if (b = d & -d, a.callbackPriority !== b) {
            null != c && bc(c);
            if (1 === b) 0 === a.tag ? ig(Fk.bind(null, a)) : hg(Fk.bind(null, a)), Jf(function () {
              0 === (K & 6) && jg();
            }), c = null;else {
              switch (Dc(d)) {
                case 1:
                  c = fc;
                  break;
                case 4:
                  c = gc;
                  break;
                case 16:
                  c = hc;
                  break;
                case 536870912:
                  c = jc;
                  break;
                default:
                  c = hc;
              }
              c = Gk(c, Hk.bind(null, a));
            }
            a.callbackPriority = b;
            a.callbackNode = c;
          }
        }
        function Hk(a, b) {
          Bk = -1;
          Ck = 0;
          if (0 !== (K & 6)) throw Error(p$5(327));
          var c = a.callbackNode;
          if (Ik() && a.callbackNode !== c) return null;
          var d = uc(a, a === R$1 ? Z$1 : 0);
          if (0 === d) return null;
          if (0 !== (d & 30) || 0 !== (d & a.expiredLanes) || b) b = Jk(a, d);else {
            b = d;
            var e = K;
            K |= 2;
            var f = Kk();
            if (R$1 !== a || Z$1 !== b) vk = null, Hj = B$1() + 500, Lk(a, b);
            do try {
              Mk();
              break;
            } catch (h) {
              Nk(a, h);
            } while (1);
            Qg();
            nk.current = f;
            K = e;
            null !== Y ? b = 0 : (R$1 = null, Z$1 = 0, b = T);
          }
          if (0 !== b) {
            2 === b && (e = xc(a), 0 !== e && (d = e, b = Ok(a, e)));
            if (1 === b) throw c = qk, Lk(a, 0), Dk(a, d), Ek(a, B$1()), c;
            if (6 === b) Dk(a, d);else {
              e = a.current.alternate;
              if (0 === (d & 30) && !Pk(e) && (b = Jk(a, d), 2 === b && (f = xc(a), 0 !== f && (d = f, b = Ok(a, f))), 1 === b)) throw c = qk, Lk(a, 0), Dk(a, d), Ek(a, B$1()), c;
              a.finishedWork = e;
              a.finishedLanes = d;
              switch (b) {
                case 0:
                case 1:
                  throw Error(p$5(345));
                case 2:
                  Qk(a, uk, vk);
                  break;
                case 3:
                  Dk(a, d);
                  if ((d & 130023424) === d && (b = gk + 500 - B$1(), 10 < b)) {
                    if (0 !== uc(a, 0)) break;
                    e = a.suspendedLanes;
                    if ((e & d) !== d) {
                      L$1();
                      a.pingedLanes |= a.suspendedLanes & e;
                      break;
                    }
                    a.timeoutHandle = Ff(Qk.bind(null, a, uk, vk), b);
                    break;
                  }
                  Qk(a, uk, vk);
                  break;
                case 4:
                  Dk(a, d);
                  if ((d & 4194240) === d) break;
                  b = a.eventTimes;
                  for (e = -1; 0 < d;) {
                    var g = 31 - oc(d);
                    f = 1 << g;
                    g = b[g];
                    g > e && (e = g);
                    d &= ~f;
                  }
                  d = e;
                  d = B$1() - d;
                  d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3E3 > d ? 3E3 : 4320 > d ? 4320 : 1960 * mk(d / 1960)) - d;
                  if (10 < d) {
                    a.timeoutHandle = Ff(Qk.bind(null, a, uk, vk), d);
                    break;
                  }
                  Qk(a, uk, vk);
                  break;
                case 5:
                  Qk(a, uk, vk);
                  break;
                default:
                  throw Error(p$5(329));
              }
            }
          }
          Ek(a, B$1());
          return a.callbackNode === c ? Hk.bind(null, a) : null;
        }
        function Ok(a, b) {
          var c = tk;
          a.current.memoizedState.isDehydrated && (Lk(a, b).flags |= 256);
          a = Jk(a, b);
          2 !== a && (b = uk, uk = c, null !== b && Gj(b));
          return a;
        }
        function Gj(a) {
          null === uk ? uk = a : uk.push.apply(uk, a);
        }
        function Pk(a) {
          for (var b = a;;) {
            if (b.flags & 16384) {
              var c = b.updateQueue;
              if (null !== c && (c = c.stores, null !== c)) for (var d = 0; d < c.length; d++) {
                var e = c[d],
                  f = e.getSnapshot;
                e = e.value;
                try {
                  if (!He(f(), e)) return !1;
                } catch (g) {
                  return !1;
                }
              }
            }
            c = b.child;
            if (b.subtreeFlags & 16384 && null !== c) c.return = b, b = c;else {
              if (b === a) break;
              for (; null === b.sibling;) {
                if (null === b.return || b.return === a) return !0;
                b = b.return;
              }
              b.sibling.return = b.return;
              b = b.sibling;
            }
          }
          return !0;
        }
        function Dk(a, b) {
          b &= ~sk;
          b &= ~rk;
          a.suspendedLanes |= b;
          a.pingedLanes &= ~b;
          for (a = a.expirationTimes; 0 < b;) {
            var c = 31 - oc(b),
              d = 1 << c;
            a[c] = -1;
            b &= ~d;
          }
        }
        function Fk(a) {
          if (0 !== (K & 6)) throw Error(p$5(327));
          Ik();
          var b = uc(a, 0);
          if (0 === (b & 1)) return Ek(a, B$1()), null;
          var c = Jk(a, b);
          if (0 !== a.tag && 2 === c) {
            var d = xc(a);
            0 !== d && (b = d, c = Ok(a, d));
          }
          if (1 === c) throw c = qk, Lk(a, 0), Dk(a, b), Ek(a, B$1()), c;
          if (6 === c) throw Error(p$5(345));
          a.finishedWork = a.current.alternate;
          a.finishedLanes = b;
          Qk(a, uk, vk);
          Ek(a, B$1());
          return null;
        }
        function Rk(a, b) {
          var c = K;
          K |= 1;
          try {
            return a(b);
          } finally {
            K = c, 0 === K && (Hj = B$1() + 500, fg && jg());
          }
        }
        function Sk(a) {
          null !== xk && 0 === xk.tag && 0 === (K & 6) && Ik();
          var b = K;
          K |= 1;
          var c = pk.transition,
            d = C;
          try {
            if (pk.transition = null, C = 1, a) return a();
          } finally {
            C = d, pk.transition = c, K = b, 0 === (K & 6) && jg();
          }
        }
        function Ij() {
          gj = fj.current;
          E$1(fj);
        }
        function Lk(a, b) {
          a.finishedWork = null;
          a.finishedLanes = 0;
          var c = a.timeoutHandle;
          -1 !== c && (a.timeoutHandle = -1, Gf(c));
          if (null !== Y) for (c = Y.return; null !== c;) {
            var d = c;
            wg(d);
            switch (d.tag) {
              case 1:
                d = d.type.childContextTypes;
                null !== d && void 0 !== d && $f();
                break;
              case 3:
                Jh();
                E$1(Wf);
                E$1(H$1);
                Oh();
                break;
              case 5:
                Lh(d);
                break;
              case 4:
                Jh();
                break;
              case 13:
                E$1(M$1);
                break;
              case 19:
                E$1(M$1);
                break;
              case 10:
                Rg(d.type._context);
                break;
              case 22:
              case 23:
                Ij();
            }
            c = c.return;
          }
          R$1 = a;
          Y = a = wh(a.current, null);
          Z$1 = gj = b;
          T = 0;
          qk = null;
          sk = rk = hh = 0;
          uk = tk = null;
          if (null !== Wg) {
            for (b = 0; b < Wg.length; b++) if (c = Wg[b], d = c.interleaved, null !== d) {
              c.interleaved = null;
              var e = d.next,
                f = c.pending;
              if (null !== f) {
                var g = f.next;
                f.next = e;
                d.next = g;
              }
              c.pending = d;
            }
            Wg = null;
          }
          return a;
        }
        function Nk(a, b) {
          do {
            var c = Y;
            try {
              Qg();
              Ph.current = ai;
              if (Sh) {
                for (var d = N$1.memoizedState; null !== d;) {
                  var e = d.queue;
                  null !== e && (e.pending = null);
                  d = d.next;
                }
                Sh = !1;
              }
              Rh = 0;
              P$1 = O$1 = N$1 = null;
              Th = !1;
              Uh = 0;
              ok$3.current = null;
              if (null === c || null === c.return) {
                T = 1;
                qk = b;
                Y = null;
                break;
              }
              a: {
                var f = a,
                  g = c.return,
                  h = c,
                  k = b;
                b = Z$1;
                h.flags |= 32768;
                if (null !== k && "object" === typeof k && "function" === typeof k.then) {
                  var l = k,
                    m = h,
                    q = m.tag;
                  if (0 === (m.mode & 1) && (0 === q || 11 === q || 15 === q)) {
                    var r = m.alternate;
                    r ? (m.updateQueue = r.updateQueue, m.memoizedState = r.memoizedState, m.lanes = r.lanes) : (m.updateQueue = null, m.memoizedState = null);
                  }
                  var y = Vi(g);
                  if (null !== y) {
                    y.flags &= -257;
                    Wi(y, g, h, f, b);
                    y.mode & 1 && Ti(f, l, b);
                    b = y;
                    k = l;
                    var n = b.updateQueue;
                    if (null === n) {
                      var t = new Set();
                      t.add(k);
                      b.updateQueue = t;
                    } else n.add(k);
                    break a;
                  } else {
                    if (0 === (b & 1)) {
                      Ti(f, l, b);
                      uj();
                      break a;
                    }
                    k = Error(p$5(426));
                  }
                } else if (I$1 && h.mode & 1) {
                  var J = Vi(g);
                  if (null !== J) {
                    0 === (J.flags & 65536) && (J.flags |= 256);
                    Wi(J, g, h, f, b);
                    Jg(Ki(k, h));
                    break a;
                  }
                }
                f = k = Ki(k, h);
                4 !== T && (T = 2);
                null === tk ? tk = [f] : tk.push(f);
                f = g;
                do {
                  switch (f.tag) {
                    case 3:
                      f.flags |= 65536;
                      b &= -b;
                      f.lanes |= b;
                      var x = Oi(f, k, b);
                      fh(f, x);
                      break a;
                    case 1:
                      h = k;
                      var w = f.type,
                        u = f.stateNode;
                      if (0 === (f.flags & 128) && ("function" === typeof w.getDerivedStateFromError || null !== u && "function" === typeof u.componentDidCatch && (null === Si || !Si.has(u)))) {
                        f.flags |= 65536;
                        b &= -b;
                        f.lanes |= b;
                        var F = Ri(f, h, b);
                        fh(f, F);
                        break a;
                      }
                  }
                  f = f.return;
                } while (null !== f);
              }
              Tk(c);
            } catch (na) {
              b = na;
              Y === c && null !== c && (Y = c = c.return);
              continue;
            }
            break;
          } while (1);
        }
        function Kk() {
          var a = nk.current;
          nk.current = ai;
          return null === a ? ai : a;
        }
        function uj() {
          if (0 === T || 3 === T || 2 === T) T = 4;
          null === R$1 || 0 === (hh & 268435455) && 0 === (rk & 268435455) || Dk(R$1, Z$1);
        }
        function Jk(a, b) {
          var c = K;
          K |= 2;
          var d = Kk();
          if (R$1 !== a || Z$1 !== b) vk = null, Lk(a, b);
          do try {
            Uk();
            break;
          } catch (e) {
            Nk(a, e);
          } while (1);
          Qg();
          K = c;
          nk.current = d;
          if (null !== Y) throw Error(p$5(261));
          R$1 = null;
          Z$1 = 0;
          return T;
        }
        function Uk() {
          for (; null !== Y;) Vk(Y);
        }
        function Mk() {
          for (; null !== Y && !cc();) Vk(Y);
        }
        function Vk(a) {
          var b = Wk(a.alternate, a, gj);
          a.memoizedProps = a.pendingProps;
          null === b ? Tk(a) : Y = b;
          ok$3.current = null;
        }
        function Tk(a) {
          var b = a;
          do {
            var c = b.alternate;
            a = b.return;
            if (0 === (b.flags & 32768)) {
              if (c = Fj(c, b, gj), null !== c) {
                Y = c;
                return;
              }
            } else {
              c = Jj(c, b);
              if (null !== c) {
                c.flags &= 32767;
                Y = c;
                return;
              }
              if (null !== a) a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;else {
                T = 6;
                Y = null;
                return;
              }
            }
            b = b.sibling;
            if (null !== b) {
              Y = b;
              return;
            }
            Y = b = a;
          } while (null !== b);
          0 === T && (T = 5);
        }
        function Qk(a, b, c) {
          var d = C,
            e = pk.transition;
          try {
            pk.transition = null, C = 1, Xk(a, b, c, d);
          } finally {
            pk.transition = e, C = d;
          }
          return null;
        }
        function Xk(a, b, c, d) {
          do Ik(); while (null !== xk);
          if (0 !== (K & 6)) throw Error(p$5(327));
          c = a.finishedWork;
          var e = a.finishedLanes;
          if (null === c) return null;
          a.finishedWork = null;
          a.finishedLanes = 0;
          if (c === a.current) throw Error(p$5(177));
          a.callbackNode = null;
          a.callbackPriority = 0;
          var f = c.lanes | c.childLanes;
          Bc(a, f);
          a === R$1 && (Y = R$1 = null, Z$1 = 0);
          0 === (c.subtreeFlags & 2064) && 0 === (c.flags & 2064) || wk || (wk = !0, Gk(hc, function () {
            Ik();
            return null;
          }));
          f = 0 !== (c.flags & 15990);
          if (0 !== (c.subtreeFlags & 15990) || f) {
            f = pk.transition;
            pk.transition = null;
            var g = C;
            C = 1;
            var h = K;
            K |= 4;
            ok$3.current = null;
            Pj(a, c);
            ek(c, a);
            Oe(Df);
            dd = !!Cf;
            Df = Cf = null;
            a.current = c;
            ik(c);
            dc();
            K = h;
            C = g;
            pk.transition = f;
          } else a.current = c;
          wk && (wk = !1, xk = a, yk = e);
          f = a.pendingLanes;
          0 === f && (Si = null);
          mc(c.stateNode);
          Ek(a, B$1());
          if (null !== b) for (d = a.onRecoverableError, c = 0; c < b.length; c++) e = b[c], d(e.value, {
            componentStack: e.stack,
            digest: e.digest
          });
          if (Pi) throw Pi = !1, a = Qi, Qi = null, a;
          0 !== (yk & 1) && 0 !== a.tag && Ik();
          f = a.pendingLanes;
          0 !== (f & 1) ? a === Ak ? zk++ : (zk = 0, Ak = a) : zk = 0;
          jg();
          return null;
        }
        function Ik() {
          if (null !== xk) {
            var a = Dc(yk),
              b = pk.transition,
              c = C;
            try {
              pk.transition = null;
              C = 16 > a ? 16 : a;
              if (null === xk) var d = !1;else {
                a = xk;
                xk = null;
                yk = 0;
                if (0 !== (K & 6)) throw Error(p$5(331));
                var e = K;
                K |= 4;
                for (V = a.current; null !== V;) {
                  var f = V,
                    g = f.child;
                  if (0 !== (V.flags & 16)) {
                    var h = f.deletions;
                    if (null !== h) {
                      for (var k = 0; k < h.length; k++) {
                        var l = h[k];
                        for (V = l; null !== V;) {
                          var m = V;
                          switch (m.tag) {
                            case 0:
                            case 11:
                            case 15:
                              Qj(8, m, f);
                          }
                          var q = m.child;
                          if (null !== q) q.return = m, V = q;else for (; null !== V;) {
                            m = V;
                            var r = m.sibling,
                              y = m.return;
                            Tj(m);
                            if (m === l) {
                              V = null;
                              break;
                            }
                            if (null !== r) {
                              r.return = y;
                              V = r;
                              break;
                            }
                            V = y;
                          }
                        }
                      }
                      var n = f.alternate;
                      if (null !== n) {
                        var t = n.child;
                        if (null !== t) {
                          n.child = null;
                          do {
                            var J = t.sibling;
                            t.sibling = null;
                            t = J;
                          } while (null !== t);
                        }
                      }
                      V = f;
                    }
                  }
                  if (0 !== (f.subtreeFlags & 2064) && null !== g) g.return = f, V = g;else b: for (; null !== V;) {
                    f = V;
                    if (0 !== (f.flags & 2048)) switch (f.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Qj(9, f, f.return);
                    }
                    var x = f.sibling;
                    if (null !== x) {
                      x.return = f.return;
                      V = x;
                      break b;
                    }
                    V = f.return;
                  }
                }
                var w = a.current;
                for (V = w; null !== V;) {
                  g = V;
                  var u = g.child;
                  if (0 !== (g.subtreeFlags & 2064) && null !== u) u.return = g, V = u;else b: for (g = w; null !== V;) {
                    h = V;
                    if (0 !== (h.flags & 2048)) try {
                      switch (h.tag) {
                        case 0:
                        case 11:
                        case 15:
                          Rj(9, h);
                      }
                    } catch (na) {
                      W$1(h, h.return, na);
                    }
                    if (h === g) {
                      V = null;
                      break b;
                    }
                    var F = h.sibling;
                    if (null !== F) {
                      F.return = h.return;
                      V = F;
                      break b;
                    }
                    V = h.return;
                  }
                }
                K = e;
                jg();
                if (lc && "function" === typeof lc.onPostCommitFiberRoot) try {
                  lc.onPostCommitFiberRoot(kc, a);
                } catch (na) {}
                d = !0;
              }
              return d;
            } finally {
              C = c, pk.transition = b;
            }
          }
          return !1;
        }
        function Yk(a, b, c) {
          b = Ki(c, b);
          b = Oi(a, b, 1);
          a = dh(a, b, 1);
          b = L$1();
          null !== a && (Ac(a, 1, b), Ek(a, b));
        }
        function W$1(a, b, c) {
          if (3 === a.tag) Yk(a, a, c);else for (; null !== b;) {
            if (3 === b.tag) {
              Yk(b, a, c);
              break;
            } else if (1 === b.tag) {
              var d = b.stateNode;
              if ("function" === typeof b.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Si || !Si.has(d))) {
                a = Ki(c, a);
                a = Ri(b, a, 1);
                b = dh(b, a, 1);
                a = L$1();
                null !== b && (Ac(b, 1, a), Ek(b, a));
                break;
              }
            }
            b = b.return;
          }
        }
        function Ui(a, b, c) {
          var d = a.pingCache;
          null !== d && d.delete(b);
          b = L$1();
          a.pingedLanes |= a.suspendedLanes & c;
          R$1 === a && (Z$1 & c) === c && (4 === T || 3 === T && (Z$1 & 130023424) === Z$1 && 500 > B$1() - gk ? Lk(a, 0) : sk |= c);
          Ek(a, b);
        }
        function Zk(a, b) {
          0 === b && (0 === (a.mode & 1) ? b = 1 : (b = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
          var c = L$1();
          a = Zg(a, b);
          null !== a && (Ac(a, b, c), Ek(a, c));
        }
        function vj(a) {
          var b = a.memoizedState,
            c = 0;
          null !== b && (c = b.retryLane);
          Zk(a, c);
        }
        function ck(a, b) {
          var c = 0;
          switch (a.tag) {
            case 13:
              var d = a.stateNode;
              var e = a.memoizedState;
              null !== e && (c = e.retryLane);
              break;
            case 19:
              d = a.stateNode;
              break;
            default:
              throw Error(p$5(314));
          }
          null !== d && d.delete(b);
          Zk(a, c);
        }
        var Wk;
        Wk = function Wk(a, b, c) {
          if (null !== a) {
            if (a.memoizedProps !== b.pendingProps || Wf.current) Ug = !0;else {
              if (0 === (a.lanes & c) && 0 === (b.flags & 128)) return Ug = !1, zj(a, b, c);
              Ug = 0 !== (a.flags & 131072) ? !0 : !1;
            }
          } else Ug = !1, I$1 && 0 !== (b.flags & 1048576) && ug(b, ng, b.index);
          b.lanes = 0;
          switch (b.tag) {
            case 2:
              var d = b.type;
              jj(a, b);
              a = b.pendingProps;
              var e = Yf(b, H$1.current);
              Tg(b, c);
              e = Xh(null, b, d, a, e, c);
              var f = bi();
              b.flags |= 1;
              "object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof ? (b.tag = 1, b.memoizedState = null, b.updateQueue = null, Zf(d) ? (f = !0, cg(b)) : f = !1, b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, ah(b), e.updater = nh, b.stateNode = e, e._reactInternals = b, rh(b, d, a, c), b = kj(null, b, d, !0, f, c)) : (b.tag = 0, I$1 && f && vg(b), Yi(null, b, e, c), b = b.child);
              return b;
            case 16:
              d = b.elementType;
              a: {
                jj(a, b);
                a = b.pendingProps;
                e = d._init;
                d = e(d._payload);
                b.type = d;
                e = b.tag = $k(d);
                a = Lg(d, a);
                switch (e) {
                  case 0:
                    b = dj(null, b, d, a, c);
                    break a;
                  case 1:
                    b = ij(null, b, d, a, c);
                    break a;
                  case 11:
                    b = Zi(null, b, d, a, c);
                    break a;
                  case 14:
                    b = aj(null, b, d, Lg(d.type, a), c);
                    break a;
                }
                throw Error(p$5(306, d, ""));
              }
              return b;
            case 0:
              return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), dj(a, b, d, e, c);
            case 1:
              return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), ij(a, b, d, e, c);
            case 3:
              a: {
                lj(b);
                if (null === a) throw Error(p$5(387));
                d = b.pendingProps;
                f = b.memoizedState;
                e = f.element;
                bh(a, b);
                gh(b, d, null, c);
                var g = b.memoizedState;
                d = g.element;
                if (f.isDehydrated) {
                  if (f = {
                    element: d,
                    isDehydrated: !1,
                    cache: g.cache,
                    pendingSuspenseBoundaries: g.pendingSuspenseBoundaries,
                    transitions: g.transitions
                  }, b.updateQueue.baseState = f, b.memoizedState = f, b.flags & 256) {
                    e = Ki(Error(p$5(423)), b);
                    b = mj(a, b, d, c, e);
                    break a;
                  } else if (d !== e) {
                    e = Ki(Error(p$5(424)), b);
                    b = mj(a, b, d, c, e);
                    break a;
                  } else for (yg = Lf(b.stateNode.containerInfo.firstChild), xg = b, I$1 = !0, zg = null, c = Ch(b, null, d, c), b.child = c; c;) c.flags = c.flags & -3 | 4096, c = c.sibling;
                } else {
                  Ig();
                  if (d === e) {
                    b = $i(a, b, c);
                    break a;
                  }
                  Yi(a, b, d, c);
                }
                b = b.child;
              }
              return b;
            case 5:
              return Kh(b), null === a && Eg(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, Ef(d, e) ? g = null : null !== f && Ef(d, f) && (b.flags |= 32), hj(a, b), Yi(a, b, g, c), b.child;
            case 6:
              return null === a && Eg(b), null;
            case 13:
              return pj(a, b, c);
            case 4:
              return Ih(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Bh(b, null, d, c) : Yi(a, b, d, c), b.child;
            case 11:
              return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), Zi(a, b, d, e, c);
            case 7:
              return Yi(a, b, b.pendingProps, c), b.child;
            case 8:
              return Yi(a, b, b.pendingProps.children, c), b.child;
            case 12:
              return Yi(a, b, b.pendingProps.children, c), b.child;
            case 10:
              a: {
                d = b.type._context;
                e = b.pendingProps;
                f = b.memoizedProps;
                g = e.value;
                G$1(Mg, d._currentValue);
                d._currentValue = g;
                if (null !== f) if (He(f.value, g)) {
                  if (f.children === e.children && !Wf.current) {
                    b = $i(a, b, c);
                    break a;
                  }
                } else for (f = b.child, null !== f && (f.return = b); null !== f;) {
                  var h = f.dependencies;
                  if (null !== h) {
                    g = f.child;
                    for (var k = h.firstContext; null !== k;) {
                      if (k.context === d) {
                        if (1 === f.tag) {
                          k = ch(-1, c & -c);
                          k.tag = 2;
                          var l = f.updateQueue;
                          if (null !== l) {
                            l = l.shared;
                            var m = l.pending;
                            null === m ? k.next = k : (k.next = m.next, m.next = k);
                            l.pending = k;
                          }
                        }
                        f.lanes |= c;
                        k = f.alternate;
                        null !== k && (k.lanes |= c);
                        Sg(f.return, c, b);
                        h.lanes |= c;
                        break;
                      }
                      k = k.next;
                    }
                  } else if (10 === f.tag) g = f.type === b.type ? null : f.child;else if (18 === f.tag) {
                    g = f.return;
                    if (null === g) throw Error(p$5(341));
                    g.lanes |= c;
                    h = g.alternate;
                    null !== h && (h.lanes |= c);
                    Sg(g, c, b);
                    g = f.sibling;
                  } else g = f.child;
                  if (null !== g) g.return = f;else for (g = f; null !== g;) {
                    if (g === b) {
                      g = null;
                      break;
                    }
                    f = g.sibling;
                    if (null !== f) {
                      f.return = g.return;
                      g = f;
                      break;
                    }
                    g = g.return;
                  }
                  f = g;
                }
                Yi(a, b, e.children, c);
                b = b.child;
              }
              return b;
            case 9:
              return e = b.type, d = b.pendingProps.children, Tg(b, c), e = Vg(e), d = d(e), b.flags |= 1, Yi(a, b, d, c), b.child;
            case 14:
              return d = b.type, e = Lg(d, b.pendingProps), e = Lg(d.type, e), aj(a, b, d, e, c);
            case 15:
              return cj(a, b, b.type, b.pendingProps, c);
            case 17:
              return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), jj(a, b), b.tag = 1, Zf(d) ? (a = !0, cg(b)) : a = !1, Tg(b, c), ph(b, d, e), rh(b, d, e, c), kj(null, b, d, !0, a, c);
            case 19:
              return yj(a, b, c);
            case 22:
              return ej(a, b, c);
          }
          throw Error(p$5(156, b.tag));
        };
        function Gk(a, b) {
          return ac(a, b);
        }
        function al(a, b, c, d) {
          this.tag = a;
          this.key = c;
          this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = b;
          this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
          this.mode = d;
          this.subtreeFlags = this.flags = 0;
          this.deletions = null;
          this.childLanes = this.lanes = 0;
          this.alternate = null;
        }
        function Bg(a, b, c, d) {
          return new al(a, b, c, d);
        }
        function bj(a) {
          a = a.prototype;
          return !(!a || !a.isReactComponent);
        }
        function $k(a) {
          if ("function" === typeof a) return bj(a) ? 1 : 0;
          if (void 0 !== a && null !== a) {
            a = a.$$typeof;
            if (a === Da) return 11;
            if (a === Ga) return 14;
          }
          return 2;
        }
        function wh(a, b) {
          var c = a.alternate;
          null === c ? (c = Bg(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null);
          c.flags = a.flags & 14680064;
          c.childLanes = a.childLanes;
          c.lanes = a.lanes;
          c.child = a.child;
          c.memoizedProps = a.memoizedProps;
          c.memoizedState = a.memoizedState;
          c.updateQueue = a.updateQueue;
          b = a.dependencies;
          c.dependencies = null === b ? null : {
            lanes: b.lanes,
            firstContext: b.firstContext
          };
          c.sibling = a.sibling;
          c.index = a.index;
          c.ref = a.ref;
          return c;
        }
        function yh(a, b, c, d, e, f) {
          var g = 2;
          d = a;
          if ("function" === typeof a) bj(a) && (g = 1);else if ("string" === typeof a) g = 5;else a: switch (a) {
            case ya:
              return Ah(c.children, e, f, b);
            case za:
              g = 8;
              e |= 8;
              break;
            case Aa:
              return a = Bg(12, c, b, e | 2), a.elementType = Aa, a.lanes = f, a;
            case Ea:
              return a = Bg(13, c, b, e), a.elementType = Ea, a.lanes = f, a;
            case Fa:
              return a = Bg(19, c, b, e), a.elementType = Fa, a.lanes = f, a;
            case Ia:
              return qj(c, e, f, b);
            default:
              if ("object" === typeof a && null !== a) switch (a.$$typeof) {
                case Ba:
                  g = 10;
                  break a;
                case Ca:
                  g = 9;
                  break a;
                case Da:
                  g = 11;
                  break a;
                case Ga:
                  g = 14;
                  break a;
                case Ha:
                  g = 16;
                  d = null;
                  break a;
              }
              throw Error(p$5(130, null == a ? a : typeof a, ""));
          }
          b = Bg(g, c, b, e);
          b.elementType = a;
          b.type = d;
          b.lanes = f;
          return b;
        }
        function Ah(a, b, c, d) {
          a = Bg(7, a, d, b);
          a.lanes = c;
          return a;
        }
        function qj(a, b, c, d) {
          a = Bg(22, a, d, b);
          a.elementType = Ia;
          a.lanes = c;
          a.stateNode = {
            isHidden: !1
          };
          return a;
        }
        function xh(a, b, c) {
          a = Bg(6, a, null, b);
          a.lanes = c;
          return a;
        }
        function zh(a, b, c) {
          b = Bg(4, null !== a.children ? a.children : [], a.key, b);
          b.lanes = c;
          b.stateNode = {
            containerInfo: a.containerInfo,
            pendingChildren: null,
            implementation: a.implementation
          };
          return b;
        }
        function bl(a, b, c, d, e) {
          this.tag = b;
          this.containerInfo = a;
          this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
          this.timeoutHandle = -1;
          this.callbackNode = this.pendingContext = this.context = null;
          this.callbackPriority = 0;
          this.eventTimes = zc(0);
          this.expirationTimes = zc(-1);
          this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
          this.entanglements = zc(0);
          this.identifierPrefix = d;
          this.onRecoverableError = e;
          this.mutableSourceEagerHydrationData = null;
        }
        function cl(a, b, c, d, e, f, g, h, k) {
          a = new bl(a, b, c, h, k);
          1 === b ? (b = 1, !0 === f && (b |= 8)) : b = 0;
          f = Bg(3, null, null, b);
          a.current = f;
          f.stateNode = a;
          f.memoizedState = {
            element: d,
            isDehydrated: c,
            cache: null,
            transitions: null,
            pendingSuspenseBoundaries: null
          };
          ah(f);
          return a;
        }
        function dl(a, b, c) {
          var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
          return {
            $$typeof: wa,
            key: null == d ? null : "" + d,
            children: a,
            containerInfo: b,
            implementation: c
          };
        }
        function el(a) {
          if (!a) return Vf;
          a = a._reactInternals;
          a: {
            if (Vb(a) !== a || 1 !== a.tag) throw Error(p$5(170));
            var b = a;
            do {
              switch (b.tag) {
                case 3:
                  b = b.stateNode.context;
                  break a;
                case 1:
                  if (Zf(b.type)) {
                    b = b.stateNode.__reactInternalMemoizedMergedChildContext;
                    break a;
                  }
              }
              b = b.return;
            } while (null !== b);
            throw Error(p$5(171));
          }
          if (1 === a.tag) {
            var c = a.type;
            if (Zf(c)) return bg(a, c, b);
          }
          return b;
        }
        function fl(a, b, c, d, e, f, g, h, k) {
          a = cl(c, d, !0, a, e, f, g, h, k);
          a.context = el(null);
          c = a.current;
          d = L$1();
          e = lh(c);
          f = ch(d, e);
          f.callback = void 0 !== b && null !== b ? b : null;
          dh(c, f, e);
          a.current.lanes = e;
          Ac(a, e, d);
          Ek(a, d);
          return a;
        }
        function gl(a, b, c, d) {
          var e = b.current,
            f = L$1(),
            g = lh(e);
          c = el(c);
          null === b.context ? b.context = c : b.pendingContext = c;
          b = ch(f, g);
          b.payload = {
            element: a
          };
          d = void 0 === d ? null : d;
          null !== d && (b.callback = d);
          a = dh(e, b, g);
          null !== a && (mh(a, e, g, f), eh(a, e, g));
          return g;
        }
        function hl(a) {
          a = a.current;
          if (!a.child) return null;
          switch (a.child.tag) {
            case 5:
              return a.child.stateNode;
            default:
              return a.child.stateNode;
          }
        }
        function il(a, b) {
          a = a.memoizedState;
          if (null !== a && null !== a.dehydrated) {
            var c = a.retryLane;
            a.retryLane = 0 !== c && c < b ? c : b;
          }
        }
        function jl(a, b) {
          il(a, b);
          (a = a.alternate) && il(a, b);
        }
        function kl() {
          return null;
        }
        var ll = "function" === typeof reportError ? reportError : function (a) {
          console.error(a);
        };
        function ml(a) {
          this._internalRoot = a;
        }
        nl.prototype.render = ml.prototype.render = function (a) {
          var b = this._internalRoot;
          if (null === b) throw Error(p$5(409));
          gl(a, b, null, null);
        };
        nl.prototype.unmount = ml.prototype.unmount = function () {
          var a = this._internalRoot;
          if (null !== a) {
            this._internalRoot = null;
            var b = a.containerInfo;
            Sk(function () {
              gl(null, a, null, null);
            });
            b[uf] = null;
          }
        };
        function nl(a) {
          this._internalRoot = a;
        }
        nl.prototype.unstable_scheduleHydration = function (a) {
          if (a) {
            var b = Hc();
            a = {
              blockedOn: null,
              target: a,
              priority: b
            };
            for (var c = 0; c < Qc.length && 0 !== b && b < Qc[c].priority; c++);
            Qc.splice(c, 0, a);
            0 === c && Vc(a);
          }
        };
        function ol(a) {
          return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);
        }
        function pl(a) {
          return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
        }
        function ql() {}
        function rl(a, b, c, d, e) {
          if (e) {
            if ("function" === typeof d) {
              var f = d;
              d = function d() {
                var a = hl(g);
                f.call(a);
              };
            }
            var g = fl(b, d, a, 0, null, !1, !1, "", ql);
            a._reactRootContainer = g;
            a[uf] = g.current;
            sf(8 === a.nodeType ? a.parentNode : a);
            Sk();
            return g;
          }
          for (; e = a.lastChild;) a.removeChild(e);
          if ("function" === typeof d) {
            var h = d;
            d = function d() {
              var a = hl(k);
              h.call(a);
            };
          }
          var k = cl(a, 0, !1, null, null, !1, !1, "", ql);
          a._reactRootContainer = k;
          a[uf] = k.current;
          sf(8 === a.nodeType ? a.parentNode : a);
          Sk(function () {
            gl(b, k, c, d);
          });
          return k;
        }
        function sl(a, b, c, d, e) {
          var f = c._reactRootContainer;
          if (f) {
            var g = f;
            if ("function" === typeof e) {
              var h = e;
              e = function e() {
                var a = hl(g);
                h.call(a);
              };
            }
            gl(b, g, a, e);
          } else g = rl(c, b, a, e, d);
          return hl(g);
        }
        Ec = function Ec(a) {
          switch (a.tag) {
            case 3:
              var b = a.stateNode;
              if (b.current.memoizedState.isDehydrated) {
                var c = tc(b.pendingLanes);
                0 !== c && (Cc(b, c | 1), Ek(b, B$1()), 0 === (K & 6) && (Hj = B$1() + 500, jg()));
              }
              break;
            case 13:
              Sk(function () {
                var b = Zg(a, 1);
                if (null !== b) {
                  var c = L$1();
                  mh(b, a, 1, c);
                }
              }), jl(a, 1);
          }
        };
        Fc = function Fc(a) {
          if (13 === a.tag) {
            var b = Zg(a, 134217728);
            if (null !== b) {
              var c = L$1();
              mh(b, a, 134217728, c);
            }
            jl(a, 134217728);
          }
        };
        Gc = function Gc(a) {
          if (13 === a.tag) {
            var b = lh(a),
              c = Zg(a, b);
            if (null !== c) {
              var d = L$1();
              mh(c, a, b, d);
            }
            jl(a, b);
          }
        };
        Hc = function Hc() {
          return C;
        };
        Ic = function Ic(a, b) {
          var c = C;
          try {
            return C = a, b();
          } finally {
            C = c;
          }
        };
        yb = function yb(a, b, c) {
          switch (b) {
            case "input":
              bb(a, c);
              b = c.name;
              if ("radio" === c.type && null != b) {
                for (c = a; c.parentNode;) c = c.parentNode;
                c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');
                for (b = 0; b < c.length; b++) {
                  var d = c[b];
                  if (d !== a && d.form === a.form) {
                    var e = Db(d);
                    if (!e) throw Error(p$5(90));
                    Wa(d);
                    bb(d, e);
                  }
                }
              }
              break;
            case "textarea":
              ib(a, c);
              break;
            case "select":
              b = c.value, null != b && fb(a, !!c.multiple, b, !1);
          }
        };
        Gb = Rk;
        Hb = Sk;
        var tl = {
            usingClientEntryPoint: !1,
            Events: [Cb, ue, Db, Eb, Fb, Rk]
          },
          ul = {
            findFiberByHostInstance: Wc,
            bundleType: 0,
            version: "18.2.0",
            rendererPackageName: "react-dom"
          };
        var vl = {
          bundleType: ul.bundleType,
          version: ul.version,
          rendererPackageName: ul.rendererPackageName,
          rendererConfig: ul.rendererConfig,
          overrideHookState: null,
          overrideHookStateDeletePath: null,
          overrideHookStateRenamePath: null,
          overrideProps: null,
          overridePropsDeletePath: null,
          overridePropsRenamePath: null,
          setErrorHandler: null,
          setSuspenseHandler: null,
          scheduleUpdate: null,
          currentDispatcherRef: ua.ReactCurrentDispatcher,
          findHostInstanceByFiber: function findHostInstanceByFiber(a) {
            a = Zb(a);
            return null === a ? null : a.stateNode;
          },
          findFiberByHostInstance: ul.findFiberByHostInstance || kl,
          findHostInstancesForRefresh: null,
          scheduleRefresh: null,
          scheduleRoot: null,
          setRefreshHandler: null,
          getCurrentFiber: null,
          reconcilerVersion: "18.2.0-next-9e3b772b8-20220608"
        };
        if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
          var wl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (!wl.isDisabled && wl.supportsFiber) try {
            kc = wl.inject(vl), lc = wl;
          } catch (a) {}
        }
        reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = tl;
        reactDom_production_min.createPortal = function (a, b) {
          var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
          if (!ol(b)) throw Error(p$5(200));
          return dl(a, b, null, c);
        };
        reactDom_production_min.createRoot = function (a, b) {
          if (!ol(a)) throw Error(p$5(299));
          var c = !1,
            d = "",
            e = ll;
          null !== b && void 0 !== b && (!0 === b.unstable_strictMode && (c = !0), void 0 !== b.identifierPrefix && (d = b.identifierPrefix), void 0 !== b.onRecoverableError && (e = b.onRecoverableError));
          b = cl(a, 1, !1, null, null, c, !1, d, e);
          a[uf] = b.current;
          sf(8 === a.nodeType ? a.parentNode : a);
          return new ml(b);
        };
        reactDom_production_min.findDOMNode = function (a) {
          if (null == a) return null;
          if (1 === a.nodeType) return a;
          var b = a._reactInternals;
          if (void 0 === b) {
            if ("function" === typeof a.render) throw Error(p$5(188));
            a = Object.keys(a).join(",");
            throw Error(p$5(268, a));
          }
          a = Zb(b);
          a = null === a ? null : a.stateNode;
          return a;
        };
        reactDom_production_min.flushSync = function (a) {
          return Sk(a);
        };
        reactDom_production_min.hydrate = function (a, b, c) {
          if (!pl(b)) throw Error(p$5(200));
          return sl(null, a, b, !0, c);
        };
        reactDom_production_min.hydrateRoot = function (a, b, c) {
          if (!ol(a)) throw Error(p$5(405));
          var d = null != c && c.hydratedSources || null,
            e = !1,
            f = "",
            g = ll;
          null !== c && void 0 !== c && (!0 === c.unstable_strictMode && (e = !0), void 0 !== c.identifierPrefix && (f = c.identifierPrefix), void 0 !== c.onRecoverableError && (g = c.onRecoverableError));
          b = fl(b, null, a, 1, null != c ? c : null, e, !1, f, g);
          a[uf] = b.current;
          sf(a);
          if (d) for (a = 0; a < d.length; a++) c = d[a], e = c._getVersion, e = e(c._source), null == b.mutableSourceEagerHydrationData ? b.mutableSourceEagerHydrationData = [c, e] : b.mutableSourceEagerHydrationData.push(c, e);
          return new nl(b);
        };
        reactDom_production_min.render = function (a, b, c) {
          if (!pl(b)) throw Error(p$5(200));
          return sl(null, a, b, !1, c);
        };
        reactDom_production_min.unmountComponentAtNode = function (a) {
          if (!pl(a)) throw Error(p$5(40));
          return a._reactRootContainer ? (Sk(function () {
            sl(null, null, a, !1, function () {
              a._reactRootContainer = null;
              a[uf] = null;
            });
          }), !0) : !1;
        };
        reactDom_production_min.unstable_batchedUpdates = Rk;
        reactDom_production_min.unstable_renderSubtreeIntoContainer = function (a, b, c, d) {
          if (!pl(c)) throw Error(p$5(200));
          if (null == a || void 0 === a._reactInternals) throw Error(p$5(38));
          return sl(a, b, c, !1, d);
        };
        reactDom_production_min.version = "18.2.0-next-9e3b772b8-20220608";
        function checkDCE() {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
            return;
          }
          try {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
          } catch (err) {
            console.error(err);
          }
        }
        {
          checkDCE();
          reactDom.exports = reactDom_production_min;
        }
        var reactDomExports = exports("cd", reactDom.exports);
        const ReactDOM = exports('cw', /*@__PURE__*/getDefaultExportFromCjs(reactDomExports));
        var createRoot;
        var m$4 = reactDomExports;
        {
          createRoot = m$4.createRoot;
          m$4.hydrateRoot;
        }

        /**
         * @remix-run/router v1.8.0
         *
         * Copyright (c) Remix Software Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE.md file in the root directory of this source tree.
         *
         * @license MIT
         */
        function _extends$3() {
          _extends$3 = Object.assign ? Object.assign.bind() : function (target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return _extends$3.apply(this, arguments);
        }

        ////////////////////////////////////////////////////////////////////////////////
        //#region Types and Constants
        ////////////////////////////////////////////////////////////////////////////////
        /**
         * Actions represent the type of change to a location value.
         */
        var Action;
        (function (Action) {
          /**
           * A POP indicates a change to an arbitrary index in the history stack, such
           * as a back or forward navigation. It does not describe the direction of the
           * navigation, only that the current index changed.
           *
           * Note: This is the default action for newly created history objects.
           */
          Action["Pop"] = "POP";
          /**
           * A PUSH indicates a new entry being added to the history stack, such as when
           * a link is clicked and a new page loads. When this happens, all subsequent
           * entries in the stack are lost.
           */
          Action["Push"] = "PUSH";
          /**
           * A REPLACE indicates the entry at the current index in the history stack
           * being replaced by a new one.
           */
          Action["Replace"] = "REPLACE";
        })(Action || (Action = {}));
        const PopStateEventType = "popstate";
        /**
         * Browser history stores the location in regular URLs. This is the standard for
         * most web apps, but it requires some configuration on the server to ensure you
         * serve the same app at multiple URLs.
         *
         * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory
         */
        function createBrowserHistory(options) {
          if (options === void 0) {
            options = {};
          }
          function createBrowserLocation(window, globalHistory) {
            let _window$location = window.location,
              pathname = _window$location.pathname,
              search = _window$location.search,
              hash = _window$location.hash;
            return createLocation("", {
              pathname,
              search,
              hash
            },
            // state defaults to `null` because `window.history.state` does
            globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || "default");
          }
          function createBrowserHref(window, to) {
            return typeof to === "string" ? to : createPath(to);
          }
          return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
        }
        function invariant$1(value, message) {
          if (value === false || value === null || typeof value === "undefined") {
            throw new Error(message);
          }
        }
        function warning(cond, message) {
          if (!cond) {
            // eslint-disable-next-line no-console
            if (typeof console !== "undefined") console.warn(message);
            try {
              // Welcome to debugging history!
              //
              // This error is thrown as a convenience so you can more easily
              // find the source for a warning that appears in the console by
              // enabling "pause on exceptions" in your JavaScript debugger.
              throw new Error(message);
              // eslint-disable-next-line no-empty
            } catch (e) {}
          }
        }
        function createKey() {
          return Math.random().toString(36).substr(2, 8);
        }
        /**
         * For browser-based histories, we combine the state and key into an object
         */
        function getHistoryState(location, index) {
          return {
            usr: location.state,
            key: location.key,
            idx: index
          };
        }
        /**
         * Creates a Location object with a unique key from the given Path
         */
        function createLocation(current, to, state, key) {
          if (state === void 0) {
            state = null;
          }
          let location = _extends$3({
            pathname: typeof current === "string" ? current : current.pathname,
            search: "",
            hash: ""
          }, typeof to === "string" ? parsePath(to) : to, {
            state,
            // TODO: This could be cleaned up.  push/replace should probably just take
            // full Locations now and avoid the need to run through this flow at all
            // But that's a pretty big refactor to the current test suite so going to
            // keep as is for the time being and just let any incoming keys take precedence
            key: to && to.key || key || createKey()
          });
          return location;
        }
        /**
         * Creates a string URL path from the given pathname, search, and hash components.
         */
        function createPath(_ref) {
          let _ref$pathname = _ref.pathname,
            pathname = _ref$pathname === void 0 ? "/" : _ref$pathname,
            _ref$search = _ref.search,
            search = _ref$search === void 0 ? "" : _ref$search,
            _ref$hash = _ref.hash,
            hash = _ref$hash === void 0 ? "" : _ref$hash;
          if (search && search !== "?") pathname += search.charAt(0) === "?" ? search : "?" + search;
          if (hash && hash !== "#") pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
          return pathname;
        }
        /**
         * Parses a string URL path into its separate pathname, search, and hash components.
         */
        function parsePath(path) {
          let parsedPath = {};
          if (path) {
            let hashIndex = path.indexOf("#");
            if (hashIndex >= 0) {
              parsedPath.hash = path.substr(hashIndex);
              path = path.substr(0, hashIndex);
            }
            let searchIndex = path.indexOf("?");
            if (searchIndex >= 0) {
              parsedPath.search = path.substr(searchIndex);
              path = path.substr(0, searchIndex);
            }
            if (path) {
              parsedPath.pathname = path;
            }
          }
          return parsedPath;
        }
        function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
          if (options === void 0) {
            options = {};
          }
          let _options = options,
            _options$window = _options.window,
            window = _options$window === void 0 ? document.defaultView : _options$window,
            _options$v5Compat = _options.v5Compat,
            v5Compat = _options$v5Compat === void 0 ? false : _options$v5Compat;
          let globalHistory = window.history;
          let action = Action.Pop;
          let listener = null;
          let index = getIndex();
          // Index should only be null when we initialize. If not, it's because the
          // user called history.pushState or history.replaceState directly, in which
          // case we should log a warning as it will result in bugs.
          if (index == null) {
            index = 0;
            globalHistory.replaceState(_extends$3({}, globalHistory.state, {
              idx: index
            }), "");
          }
          function getIndex() {
            let state = globalHistory.state || {
              idx: null
            };
            return state.idx;
          }
          function handlePop() {
            action = Action.Pop;
            let nextIndex = getIndex();
            let delta = nextIndex == null ? null : nextIndex - index;
            index = nextIndex;
            if (listener) {
              listener({
                action,
                location: history.location,
                delta
              });
            }
          }
          function push(to, state) {
            action = Action.Push;
            let location = createLocation(history.location, to, state);
            if (validateLocation) validateLocation(location, to);
            index = getIndex() + 1;
            let historyState = getHistoryState(location, index);
            let url = history.createHref(location);
            // try...catch because iOS limits us to 100 pushState calls :/
            try {
              globalHistory.pushState(historyState, "", url);
            } catch (error) {
              // If the exception is because `state` can't be serialized, let that throw
              // outwards just like a replace call would so the dev knows the cause
              // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps
              // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal
              if (error instanceof DOMException && error.name === "DataCloneError") {
                throw error;
              }
              // They are going to lose state here, but there is no real
              // way to warn them about it since the page will refresh...
              window.location.assign(url);
            }
            if (v5Compat && listener) {
              listener({
                action,
                location: history.location,
                delta: 1
              });
            }
          }
          function replace(to, state) {
            action = Action.Replace;
            let location = createLocation(history.location, to, state);
            if (validateLocation) validateLocation(location, to);
            index = getIndex();
            let historyState = getHistoryState(location, index);
            let url = history.createHref(location);
            globalHistory.replaceState(historyState, "", url);
            if (v5Compat && listener) {
              listener({
                action,
                location: history.location,
                delta: 0
              });
            }
          }
          function createURL(to) {
            // window.location.origin is "null" (the literal string value) in Firefox
            // under certain conditions, notably when serving from a local HTML file
            // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297
            let base = window.location.origin !== "null" ? window.location.origin : window.location.href;
            let href = typeof to === "string" ? to : createPath(to);
            invariant$1(base, "No window.location.(origin|href) available to create URL for href: " + href);
            return new URL(href, base);
          }
          let history = {
            get action() {
              return action;
            },
            get location() {
              return getLocation(window, globalHistory);
            },
            listen(fn) {
              if (listener) {
                throw new Error("A history only accepts one active listener");
              }
              window.addEventListener(PopStateEventType, handlePop);
              listener = fn;
              return () => {
                window.removeEventListener(PopStateEventType, handlePop);
                listener = null;
              };
            },
            createHref(to) {
              return createHref(window, to);
            },
            createURL,
            encodeLocation(to) {
              // Encode a Location the same way window.location would
              let url = createURL(to);
              return {
                pathname: url.pathname,
                search: url.search,
                hash: url.hash
              };
            },
            push,
            replace,
            go(n) {
              return globalHistory.go(n);
            }
          };
          return history;
        }
        //#endregion

        var ResultType;
        (function (ResultType) {
          ResultType["data"] = "data";
          ResultType["deferred"] = "deferred";
          ResultType["redirect"] = "redirect";
          ResultType["error"] = "error";
        })(ResultType || (ResultType = {}));
        /**
         * Matches the given routes to a location and returns the match data.
         *
         * @see https://reactrouter.com/utils/match-routes
         */
        function matchRoutes(routes, locationArg, basename) {
          if (basename === void 0) {
            basename = "/";
          }
          let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
          let pathname = stripBasename(location.pathname || "/", basename);
          if (pathname == null) {
            return null;
          }
          let branches = flattenRoutes(routes);
          rankRouteBranches(branches);
          let matches = null;
          for (let i = 0; matches == null && i < branches.length; ++i) {
            matches = matchRouteBranch(branches[i],
            // Incoming pathnames are generally encoded from either window.location
            // or from router.navigate, but we want to match against the unencoded
            // paths in the route definitions.  Memory router locations won't be
            // encoded here but there also shouldn't be anything to decode so this
            // should be a safe operation.  This avoids needing matchRoutes to be
            // history-aware.
            safelyDecodeURI(pathname));
          }
          return matches;
        }
        function flattenRoutes(routes, branches, parentsMeta, parentPath) {
          if (branches === void 0) {
            branches = [];
          }
          if (parentsMeta === void 0) {
            parentsMeta = [];
          }
          if (parentPath === void 0) {
            parentPath = "";
          }
          let flattenRoute = (route, index, relativePath) => {
            let meta = {
              relativePath: relativePath === undefined ? route.path || "" : relativePath,
              caseSensitive: route.caseSensitive === true,
              childrenIndex: index,
              route
            };
            if (meta.relativePath.startsWith("/")) {
              invariant$1(meta.relativePath.startsWith(parentPath), "Absolute route path \"" + meta.relativePath + "\" nested under path " + ("\"" + parentPath + "\" is not valid. An absolute child route path ") + "must start with the combined path of all its parent routes.");
              meta.relativePath = meta.relativePath.slice(parentPath.length);
            }
            let path = joinPaths([parentPath, meta.relativePath]);
            let routesMeta = parentsMeta.concat(meta);
            // Add the children before adding this route to the array so we traverse the
            // route tree depth-first and child routes appear before their parents in
            // the "flattened" version.
            if (route.children && route.children.length > 0) {
              invariant$1(
              // Our types know better, but runtime JS may not!
              // @ts-expect-error
              route.index !== true, "Index routes must not have child routes. Please remove " + ("all child routes from route path \"" + path + "\"."));
              flattenRoutes(route.children, branches, routesMeta, path);
            }
            // Routes without a path shouldn't ever match by themselves unless they are
            // index routes, so don't add them to the list of possible branches.
            if (route.path == null && !route.index) {
              return;
            }
            branches.push({
              path,
              score: computeScore(path, route.index),
              routesMeta
            });
          };
          routes.forEach((route, index) => {
            var _route$path;
            // coarse-grain check for optional params
            if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
              flattenRoute(route, index);
            } else {
              var _iterator4 = _createForOfIteratorHelper(explodeOptionalSegments(route.path)),
                _step4;
              try {
                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                  let exploded = _step4.value;
                  flattenRoute(route, index, exploded);
                }
              } catch (err) {
                _iterator4.e(err);
              } finally {
                _iterator4.f();
              }
            }
          });
          return branches;
        }
        /**
         * Computes all combinations of optional path segments for a given path,
         * excluding combinations that are ambiguous and of lower priority.
         *
         * For example, `/one/:two?/three/:four?/:five?` explodes to:
         * - `/one/three`
         * - `/one/:two/three`
         * - `/one/three/:four`
         * - `/one/three/:five`
         * - `/one/:two/three/:four`
         * - `/one/:two/three/:five`
         * - `/one/three/:four/:five`
         * - `/one/:two/three/:four/:five`
         */
        function explodeOptionalSegments(path) {
          let segments = path.split("/");
          if (segments.length === 0) return [];
          let _segments = _toArray2(segments),
            first = _segments[0],
            rest = _segments.slice(1);
          // Optional path segments are denoted by a trailing `?`
          let isOptional = first.endsWith("?");
          // Compute the corresponding required segment: `foo?` -> `foo`
          let required = first.replace(/\?$/, "");
          if (rest.length === 0) {
            // Intepret empty string as omitting an optional segment
            // `["one", "", "three"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`
            return isOptional ? [required, ""] : [required];
          }
          let restExploded = explodeOptionalSegments(rest.join("/"));
          let result = [];
          // All child paths with the prefix.  Do this for all children before the
          // optional version for all children so we get consistent ordering where the
          // parent optional aspect is preferred as required.  Otherwise, we can get
          // child sections interspersed where deeper optional segments are higher than
          // parent optional segments, where for example, /:two would explodes _earlier_
          // then /:one.  By always including the parent as required _for all children_
          // first, we avoid this issue
          result.push(...restExploded.map(subpath => subpath === "" ? required : [required, subpath].join("/")));
          // Then if this is an optional value, add all child versions without
          if (isOptional) {
            result.push(...restExploded);
          }
          // for absolute paths, ensure `/` instead of empty segment
          return result.map(exploded => path.startsWith("/") && exploded === "" ? "/" : exploded);
        }
        function rankRouteBranches(branches) {
          branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first
          : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));
        }
        const paramRe = /^:\w+$/;
        const dynamicSegmentValue = 3;
        const indexRouteValue = 2;
        const emptySegmentValue = 1;
        const staticSegmentValue = 10;
        const splatPenalty = -2;
        const isSplat = s => s === "*";
        function computeScore(path, index) {
          let segments = path.split("/");
          let initialScore = segments.length;
          if (segments.some(isSplat)) {
            initialScore += splatPenalty;
          }
          if (index) {
            initialScore += indexRouteValue;
          }
          return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
        }
        function compareIndexes(a, b) {
          let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);
          return siblings ?
          // If two routes are siblings, we should try to match the earlier sibling
          // first. This allows people to have fine-grained control over the matching
          // behavior by simply putting routes with identical paths in the order they
          // want them tried.
          a[a.length - 1] - b[b.length - 1] :
          // Otherwise, it doesn't really make sense to rank non-siblings by index,
          // so they sort equally.
          0;
        }
        function matchRouteBranch(branch, pathname) {
          let routesMeta = branch.routesMeta;
          let matchedParams = {};
          let matchedPathname = "/";
          let matches = [];
          for (let i = 0; i < routesMeta.length; ++i) {
            let meta = routesMeta[i];
            let end = i === routesMeta.length - 1;
            let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
            let match = matchPath({
              path: meta.relativePath,
              caseSensitive: meta.caseSensitive,
              end
            }, remainingPathname);
            if (!match) return null;
            Object.assign(matchedParams, match.params);
            let route = meta.route;
            matches.push({
              // TODO: Can this as be avoided?
              params: matchedParams,
              pathname: joinPaths([matchedPathname, match.pathname]),
              pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),
              route
            });
            if (match.pathnameBase !== "/") {
              matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);
            }
          }
          return matches;
        }
        /**
         * Performs pattern matching on a URL pathname and returns information about
         * the match.
         *
         * @see https://reactrouter.com/utils/match-path
         */
        function matchPath(pattern, pathname) {
          if (typeof pattern === "string") {
            pattern = {
              path: pattern,
              caseSensitive: false,
              end: true
            };
          }
          let _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),
            _compilePath2 = _slicedToArray2(_compilePath, 2),
            matcher = _compilePath2[0],
            paramNames = _compilePath2[1];
          let match = pathname.match(matcher);
          if (!match) return null;
          let matchedPathname = match[0];
          let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
          let captureGroups = match.slice(1);
          let params = paramNames.reduce((memo, paramName, index) => {
            // We need to compute the pathnameBase here using the raw splat value
            // instead of using params["*"] later because it will be decoded then
            if (paramName === "*") {
              let splatValue = captureGroups[index] || "";
              pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
            }
            memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || "", paramName);
            return memo;
          }, {});
          return {
            params,
            pathname: matchedPathname,
            pathnameBase,
            pattern
          };
        }
        function compilePath(path, caseSensitive, end) {
          if (caseSensitive === void 0) {
            caseSensitive = false;
          }
          if (end === void 0) {
            end = true;
          }
          warning(path === "*" || !path.endsWith("*") || path.endsWith("/*"), "Route path \"" + path + "\" will be treated as if it were " + ("\"" + path.replace(/\*$/, "/*") + "\" because the `*` character must ") + "always follow a `/` in the pattern. To get rid of this warning, " + ("please change the route path to \"" + path.replace(/\*$/, "/*") + "\"."));
          let paramNames = [];
          let regexpSource = "^" + path.replace(/\/*\*?$/, "") // Ignore trailing / and /*, we'll handle it below
          .replace(/^\/*/, "/") // Make sure it has a leading /
          .replace(/[\\.*+^$?{}|()[\]]/g, "\\$&") // Escape special regex chars
          .replace(/\/:(\w+)/g, (_, paramName) => {
            paramNames.push(paramName);
            return "/([^\\/]+)";
          });
          if (path.endsWith("*")) {
            paramNames.push("*");
            regexpSource += path === "*" || path === "/*" ? "(.*)$" // Already matched the initial /, just match the rest
            : "(?:\\/(.+)|\\/*)$"; // Don't include the / in params["*"]
          } else if (end) {
            // When matching to the end, ignore trailing slashes
            regexpSource += "\\/*$";
          } else if (path !== "" && path !== "/") {
            // If our path is non-empty and contains anything beyond an initial slash,
            // then we have _some_ form of path in our regex so we should expect to
            // match only if we find the end of this path segment.  Look for an optional
            // non-captured trailing slash (to match a portion of the URL) or the end
            // of the path (if we've matched to the end).  We used to do this with a
            // word boundary but that gives false positives on routes like
            // /user-preferences since `-` counts as a word boundary.
            regexpSource += "(?:(?=\\/|$))";
          } else ;
          let matcher = new RegExp(regexpSource, caseSensitive ? undefined : "i");
          return [matcher, paramNames];
        }
        function safelyDecodeURI(value) {
          try {
            return decodeURI(value);
          } catch (error) {
            warning(false, "The URL path \"" + value + "\" could not be decoded because it is is a " + "malformed URL segment. This is probably due to a bad percent " + ("encoding (" + error + ")."));
            return value;
          }
        }
        function safelyDecodeURIComponent(value, paramName) {
          try {
            return decodeURIComponent(value);
          } catch (error) {
            warning(false, "The value for the URL param \"" + paramName + "\" will not be decoded because" + (" the string \"" + value + "\" is a malformed URL segment. This is probably") + (" due to a bad percent encoding (" + error + ")."));
            return value;
          }
        }
        /**
         * @private
         */
        function stripBasename(pathname, basename) {
          if (basename === "/") return pathname;
          if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
            return null;
          }
          // We want to leave trailing slash behavior in the user's control, so if they
          // specify a basename with a trailing slash, we should support it
          let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
          let nextChar = pathname.charAt(startIndex);
          if (nextChar && nextChar !== "/") {
            // pathname does not start with basename/
            return null;
          }
          return pathname.slice(startIndex) || "/";
        }
        /**
         * Returns a resolved path object relative to the given pathname.
         *
         * @see https://reactrouter.com/utils/resolve-path
         */
        function resolvePath(to, fromPathname) {
          if (fromPathname === void 0) {
            fromPathname = "/";
          }
          let _ref7 = typeof to === "string" ? parsePath(to) : to,
            toPathname = _ref7.pathname,
            _ref7$search = _ref7.search,
            search = _ref7$search === void 0 ? "" : _ref7$search,
            _ref7$hash = _ref7.hash,
            hash = _ref7$hash === void 0 ? "" : _ref7$hash;
          let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
          return {
            pathname,
            search: normalizeSearch(search),
            hash: normalizeHash(hash)
          };
        }
        function resolvePathname(relativePath, fromPathname) {
          let segments = fromPathname.replace(/\/+$/, "").split("/");
          let relativeSegments = relativePath.split("/");
          relativeSegments.forEach(segment => {
            if (segment === "..") {
              // Keep the root "" segment so the pathname starts at /
              if (segments.length > 1) segments.pop();
            } else if (segment !== ".") {
              segments.push(segment);
            }
          });
          return segments.length > 1 ? segments.join("/") : "/";
        }
        function getInvalidPathError(char, field, dest, path) {
          return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + "a string in <Link to=\"...\"> and the router will parse it for you.";
        }
        /**
         * @private
         *
         * When processing relative navigation we want to ignore ancestor routes that
         * do not contribute to the path, such that index/pathless layout routes don't
         * interfere.
         *
         * For example, when moving a route element into an index route and/or a
         * pathless layout route, relative link behavior contained within should stay
         * the same.  Both of the following examples should link back to the root:
         *
         *   <Route path="/">
         *     <Route path="accounts" element={<Link to=".."}>
         *   </Route>
         *
         *   <Route path="/">
         *     <Route path="accounts">
         *       <Route element={<AccountsLayout />}>       // <-- Does not contribute
         *         <Route index element={<Link to=".."} />  // <-- Does not contribute
         *       </Route
         *     </Route>
         *   </Route>
         */
        function getPathContributingMatches(matches) {
          return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);
        }
        /**
         * @private
         */
        function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
          if (isPathRelative === void 0) {
            isPathRelative = false;
          }
          let to;
          if (typeof toArg === "string") {
            to = parsePath(toArg);
          } else {
            to = _extends$3({}, toArg);
            invariant$1(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to));
            invariant$1(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to));
            invariant$1(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to));
          }
          let isEmptyPath = toArg === "" || to.pathname === "";
          let toPathname = isEmptyPath ? "/" : to.pathname;
          let from;
          // Routing is relative to the current pathname if explicitly requested.
          //
          // If a pathname is explicitly provided in `to`, it should be relative to the
          // route context. This is explained in `Note on `<Link to>` values` in our
          // migration guide from v5 as a means of disambiguation between `to` values
          // that begin with `/` and those that do not. However, this is problematic for
          // `to` values that do not provide a pathname. `to` can simply be a search or
          // hash string, in which case we should assume that the navigation is relative
          // to the current location's pathname and *not* the route pathname.
          if (isPathRelative || toPathname == null) {
            from = locationPathname;
          } else {
            let routePathnameIndex = routePathnames.length - 1;
            if (toPathname.startsWith("..")) {
              let toSegments = toPathname.split("/");
              // Each leading .. segment means "go up one route" instead of "go up one
              // URL segment".  This is a key difference from how <a href> works and a
              // major reason we call this a "to" value instead of a "href".
              while (toSegments[0] === "..") {
                toSegments.shift();
                routePathnameIndex -= 1;
              }
              to.pathname = toSegments.join("/");
            }
            // If there are more ".." segments than parent routes, resolve relative to
            // the root / URL.
            from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
          }
          let path = resolvePath(to, from);
          // Ensure the pathname has a trailing slash if the original "to" had one
          let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
          // Or if this was a link to the current path which has a trailing slash
          let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
          if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
            path.pathname += "/";
          }
          return path;
        }
        /**
         * @private
         */
        const joinPaths = paths => paths.join("/").replace(/\/\/+/g, "/");
        /**
         * @private
         */
        const normalizePathname = pathname => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
        /**
         * @private
         */
        const normalizeSearch = search => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
        /**
         * @private
         */
        const normalizeHash = hash => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
        /**
         * Check if the given error is an ErrorResponse generated from a 4xx/5xx
         * Response thrown from an action/loader
         */
        function isRouteErrorResponse(error) {
          return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
        }
        const validMutationMethodsArr = ["post", "put", "patch", "delete"];
        new Set(validMutationMethodsArr);
        const validRequestMethodsArr = ["get", ...validMutationMethodsArr];
        new Set(validRequestMethodsArr);

        /**
         * React Router v6.15.0
         *
         * Copyright (c) Remix Software Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE.md file in the root directory of this source tree.
         *
         * @license MIT
         */
        function _extends$2() {
          _extends$2 = Object.assign ? Object.assign.bind() : function (target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return _extends$2.apply(this, arguments);
        }
        const DataRouterContext = /* @__PURE__ */reactExports.createContext(null);
        const DataRouterStateContext = /* @__PURE__ */reactExports.createContext(null);
        const NavigationContext = /* @__PURE__ */reactExports.createContext(null);
        const LocationContext = /* @__PURE__ */reactExports.createContext(null);
        const RouteContext = /* @__PURE__ */reactExports.createContext({
          outlet: null,
          matches: [],
          isDataRoute: false
        });
        const RouteErrorContext = /* @__PURE__ */reactExports.createContext(null);
        function useHref(to, _temp) {
          let _ref8 = _temp === void 0 ? {} : _temp,
            relative = _ref8.relative;
          !useInRouterContext() ? invariant$1(false) : void 0;
          let _reactExports$useCont = reactExports.useContext(NavigationContext),
            basename = _reactExports$useCont.basename,
            navigator = _reactExports$useCont.navigator;
          let _useResolvedPath = useResolvedPath(to, {
              relative
            }),
            hash = _useResolvedPath.hash,
            pathname = _useResolvedPath.pathname,
            search = _useResolvedPath.search;
          let joinedPathname = pathname;
          if (basename !== "/") {
            joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
          }
          return navigator.createHref({
            pathname: joinedPathname,
            search,
            hash
          });
        }
        function useInRouterContext() {
          return reactExports.useContext(LocationContext) != null;
        }
        function useLocation() {
          !useInRouterContext() ? invariant$1(false) : void 0;
          return reactExports.useContext(LocationContext).location;
        }
        function useIsomorphicLayoutEffect$2(cb) {
          let isStatic = reactExports.useContext(NavigationContext).static;
          if (!isStatic) {
            reactExports.useLayoutEffect(cb);
          }
        }
        function useNavigate() {
          let _reactExports$useCont2 = reactExports.useContext(RouteContext),
            isDataRoute = _reactExports$useCont2.isDataRoute;
          return isDataRoute ? useNavigateStable() : useNavigateUnstable();
        }
        function useNavigateUnstable() {
          !useInRouterContext() ? invariant$1(false) : void 0;
          let dataRouterContext = reactExports.useContext(DataRouterContext);
          let _reactExports$useCont3 = reactExports.useContext(NavigationContext),
            basename = _reactExports$useCont3.basename,
            navigator = _reactExports$useCont3.navigator;
          let _reactExports$useCont4 = reactExports.useContext(RouteContext),
            matches = _reactExports$useCont4.matches;
          let _useLocation = useLocation(),
            locationPathname = _useLocation.pathname;
          let routePathnamesJson = JSON.stringify(getPathContributingMatches(matches).map(match => match.pathnameBase));
          let activeRef = reactExports.useRef(false);
          useIsomorphicLayoutEffect$2(() => {
            activeRef.current = true;
          });
          let navigate = reactExports.useCallback(function (to, options) {
            if (options === void 0) {
              options = {};
            }
            if (!activeRef.current) return;
            if (typeof to === "number") {
              navigator.go(to);
              return;
            }
            let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
            if (dataRouterContext == null && basename !== "/") {
              path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
            }
            (!!options.replace ? navigator.replace : navigator.push)(path, options.state, options);
          }, [basename, navigator, routePathnamesJson, locationPathname, dataRouterContext]);
          return navigate;
        }
        function useParams() {
          let _reactExports$useCont5 = reactExports.useContext(RouteContext),
            matches = _reactExports$useCont5.matches;
          let routeMatch = matches[matches.length - 1];
          return routeMatch ? routeMatch.params : {};
        }
        function useResolvedPath(to, _temp2) {
          let _ref9 = _temp2 === void 0 ? {} : _temp2,
            relative = _ref9.relative;
          let _reactExports$useCont6 = reactExports.useContext(RouteContext),
            matches = _reactExports$useCont6.matches;
          let _useLocation2 = useLocation(),
            locationPathname = _useLocation2.pathname;
          let routePathnamesJson = JSON.stringify(getPathContributingMatches(matches).map(match => match.pathnameBase));
          return reactExports.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to, routePathnamesJson, locationPathname, relative]);
        }
        function useRoutes(routes, locationArg) {
          return useRoutesImpl(routes, locationArg);
        }
        function useRoutesImpl(routes, locationArg, dataRouterState) {
          !useInRouterContext() ? invariant$1(false) : void 0;
          let _reactExports$useCont7 = reactExports.useContext(NavigationContext),
            navigator = _reactExports$useCont7.navigator;
          let _reactExports$useCont8 = reactExports.useContext(RouteContext),
            parentMatches = _reactExports$useCont8.matches;
          let routeMatch = parentMatches[parentMatches.length - 1];
          let parentParams = routeMatch ? routeMatch.params : {};
          routeMatch ? routeMatch.pathname : "/";
          let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
          routeMatch && routeMatch.route;
          let locationFromContext = useLocation();
          let location;
          if (locationArg) {
            var _parsedLocationArg$pa;
            let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
            !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? invariant$1(false) : void 0;
            location = parsedLocationArg;
          } else {
            location = locationFromContext;
          }
          let pathname = location.pathname || "/";
          let remainingPathname = parentPathnameBase === "/" ? pathname : pathname.slice(parentPathnameBase.length) || "/";
          let matches = matchRoutes(routes, {
            pathname: remainingPathname
          });
          let renderedMatches = _renderMatches(matches && matches.map(match => Object.assign({}, match, {
            params: Object.assign({}, parentParams, match.params),
            pathname: joinPaths([parentPathnameBase,
            // Re-encode pathnames that were decoded inside matchRoutes
            navigator.encodeLocation ? navigator.encodeLocation(match.pathname).pathname : match.pathname]),
            pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : joinPaths([parentPathnameBase,
            // Re-encode pathnames that were decoded inside matchRoutes
            navigator.encodeLocation ? navigator.encodeLocation(match.pathnameBase).pathname : match.pathnameBase])
          })), parentMatches, dataRouterState);
          if (locationArg && renderedMatches) {
            return /* @__PURE__ */reactExports.createElement(LocationContext.Provider, {
              value: {
                location: _extends$2({
                  pathname: "/",
                  search: "",
                  hash: "",
                  state: null,
                  key: "default"
                }, location),
                navigationType: Action.Pop
              }
            }, renderedMatches);
          }
          return renderedMatches;
        }
        function DefaultErrorComponent() {
          let error = useRouteError();
          let message = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
          let stack = error instanceof Error ? error.stack : null;
          let lightgrey = "rgba(200,200,200, 0.5)";
          let preStyles = {
            padding: "0.5rem",
            backgroundColor: lightgrey
          };
          let devInfo = null;
          return /* @__PURE__ */reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */reactExports.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */reactExports.createElement("h3", {
            style: {
              fontStyle: "italic"
            }
          }, message), stack ? /* @__PURE__ */reactExports.createElement("pre", {
            style: preStyles
          }, stack) : null, devInfo);
        }
        const defaultErrorElement = /* @__PURE__ */reactExports.createElement(DefaultErrorComponent, null);
        class RenderErrorBoundary extends reactExports.Component {
          constructor(props) {
            super(props);
            this.state = {
              location: props.location,
              revalidation: props.revalidation,
              error: props.error
            };
          }
          static getDerivedStateFromError(error) {
            return {
              error
            };
          }
          static getDerivedStateFromProps(props, state) {
            if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
              return {
                error: props.error,
                location: props.location,
                revalidation: props.revalidation
              };
            }
            return {
              error: props.error || state.error,
              location: state.location,
              revalidation: props.revalidation || state.revalidation
            };
          }
          componentDidCatch(error, errorInfo) {
            console.error("React Router caught the following error during render", error, errorInfo);
          }
          render() {
            return this.state.error ? /* @__PURE__ */reactExports.createElement(RouteContext.Provider, {
              value: this.props.routeContext
            }, /* @__PURE__ */reactExports.createElement(RouteErrorContext.Provider, {
              value: this.state.error,
              children: this.props.component
            })) : this.props.children;
          }
        }
        function RenderedRoute(_ref) {
          let routeContext = _ref.routeContext,
            match = _ref.match,
            children = _ref.children;
          let dataRouterContext = reactExports.useContext(DataRouterContext);
          if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {
            dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
          }
          return /* @__PURE__ */reactExports.createElement(RouteContext.Provider, {
            value: routeContext
          }, children);
        }
        function _renderMatches(matches, parentMatches, dataRouterState) {
          var _dataRouterState2;
          if (parentMatches === void 0) {
            parentMatches = [];
          }
          if (dataRouterState === void 0) {
            dataRouterState = null;
          }
          if (matches == null) {
            var _dataRouterState;
            if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) {
              matches = dataRouterState.matches;
            } else {
              return null;
            }
          }
          let renderedMatches = matches;
          let errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;
          if (errors != null) {
            let errorIndex = renderedMatches.findIndex(m => m.route.id && (errors == null ? void 0 : errors[m.route.id]));
            !(errorIndex >= 0) ? invariant$1(false) : void 0;
            renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
          }
          return renderedMatches.reduceRight((outlet, match, index) => {
            let error = match.route.id ? errors == null ? void 0 : errors[match.route.id] : null;
            let errorElement = null;
            if (dataRouterState) {
              errorElement = match.route.errorElement || defaultErrorElement;
            }
            let matches2 = parentMatches.concat(renderedMatches.slice(0, index + 1));
            let getChildren = () => {
              let children;
              if (error) {
                children = errorElement;
              } else if (match.route.Component) {
                children = /* @__PURE__ */reactExports.createElement(match.route.Component, null);
              } else if (match.route.element) {
                children = match.route.element;
              } else {
                children = outlet;
              }
              return /* @__PURE__ */reactExports.createElement(RenderedRoute, {
                match,
                routeContext: {
                  outlet,
                  matches: matches2,
                  isDataRoute: dataRouterState != null
                },
                children
              });
            };
            return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /* @__PURE__ */reactExports.createElement(RenderErrorBoundary, {
              location: dataRouterState.location,
              revalidation: dataRouterState.revalidation,
              component: errorElement,
              error,
              children: getChildren(),
              routeContext: {
                outlet: null,
                matches: matches2,
                isDataRoute: true
              }
            }) : getChildren();
          }, null);
        }
        var DataRouterHook$1 = /* @__PURE__ */function (DataRouterHook2) {
          DataRouterHook2["UseBlocker"] = "useBlocker";
          DataRouterHook2["UseRevalidator"] = "useRevalidator";
          DataRouterHook2["UseNavigateStable"] = "useNavigate";
          return DataRouterHook2;
        }(DataRouterHook$1 || {});
        var DataRouterStateHook$1 = /* @__PURE__ */function (DataRouterStateHook2) {
          DataRouterStateHook2["UseBlocker"] = "useBlocker";
          DataRouterStateHook2["UseLoaderData"] = "useLoaderData";
          DataRouterStateHook2["UseActionData"] = "useActionData";
          DataRouterStateHook2["UseRouteError"] = "useRouteError";
          DataRouterStateHook2["UseNavigation"] = "useNavigation";
          DataRouterStateHook2["UseRouteLoaderData"] = "useRouteLoaderData";
          DataRouterStateHook2["UseMatches"] = "useMatches";
          DataRouterStateHook2["UseRevalidator"] = "useRevalidator";
          DataRouterStateHook2["UseNavigateStable"] = "useNavigate";
          DataRouterStateHook2["UseRouteId"] = "useRouteId";
          return DataRouterStateHook2;
        }(DataRouterStateHook$1 || {});
        function useDataRouterContext(hookName) {
          let ctx = reactExports.useContext(DataRouterContext);
          !ctx ? invariant$1(false) : void 0;
          return ctx;
        }
        function useDataRouterState(hookName) {
          let state = reactExports.useContext(DataRouterStateContext);
          !state ? invariant$1(false) : void 0;
          return state;
        }
        function useRouteContext(hookName) {
          let route = reactExports.useContext(RouteContext);
          !route ? invariant$1(false) : void 0;
          return route;
        }
        function useCurrentRouteId(hookName) {
          let route = useRouteContext();
          let thisRoute = route.matches[route.matches.length - 1];
          !thisRoute.route.id ? invariant$1(false) : void 0;
          return thisRoute.route.id;
        }
        function useRouteError() {
          var _state$errors;
          let error = reactExports.useContext(RouteErrorContext);
          let state = useDataRouterState(DataRouterStateHook$1.UseRouteError);
          let routeId = useCurrentRouteId(DataRouterStateHook$1.UseRouteError);
          if (error) {
            return error;
          }
          return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
        }
        function useNavigateStable() {
          let _useDataRouterContext = useDataRouterContext(DataRouterHook$1.UseNavigateStable),
            router = _useDataRouterContext.router;
          let id = useCurrentRouteId(DataRouterStateHook$1.UseNavigateStable);
          let activeRef = reactExports.useRef(false);
          useIsomorphicLayoutEffect$2(() => {
            activeRef.current = true;
          });
          let navigate = reactExports.useCallback(function (to, options) {
            if (options === void 0) {
              options = {};
            }
            if (!activeRef.current) return;
            if (typeof to === "number") {
              router.navigate(to);
            } else {
              router.navigate(to, _extends$2({
                fromRouteId: id
              }, options));
            }
          }, [router, id]);
          return navigate;
        }
        function Navigate(_ref4) {
          let to = _ref4.to,
            replace = _ref4.replace,
            state = _ref4.state,
            relative = _ref4.relative;
          !useInRouterContext() ? invariant$1(false) : void 0;
          let _reactExports$useCont9 = reactExports.useContext(RouteContext),
            matches = _reactExports$useCont9.matches;
          let _useLocation3 = useLocation(),
            locationPathname = _useLocation3.pathname;
          let navigate = useNavigate();
          let path = resolveTo(to, getPathContributingMatches(matches).map(match => match.pathnameBase), locationPathname, relative === "path");
          let jsonPath = JSON.stringify(path);
          reactExports.useEffect(() => navigate(JSON.parse(jsonPath), {
            replace,
            state,
            relative
          }), [navigate, jsonPath, relative, replace, state]);
          return null;
        }
        function Route(_props) {
          invariant$1(false);
        }
        function Router(_ref5) {
          let _ref5$basename = _ref5.basename,
            basenameProp = _ref5$basename === void 0 ? "/" : _ref5$basename,
            _ref5$children = _ref5.children,
            children = _ref5$children === void 0 ? null : _ref5$children,
            locationProp = _ref5.location,
            _ref5$navigationType = _ref5.navigationType,
            navigationType = _ref5$navigationType === void 0 ? Action.Pop : _ref5$navigationType,
            navigator = _ref5.navigator,
            _ref5$static = _ref5.static,
            staticProp = _ref5$static === void 0 ? false : _ref5$static;
          !!useInRouterContext() ? invariant$1(false) : void 0;
          let basename = basenameProp.replace(/^\/*/, "/");
          let navigationContext = reactExports.useMemo(() => ({
            basename,
            navigator,
            static: staticProp
          }), [basename, navigator, staticProp]);
          if (typeof locationProp === "string") {
            locationProp = parsePath(locationProp);
          }
          let _locationProp = locationProp,
            _locationProp$pathnam = _locationProp.pathname,
            pathname = _locationProp$pathnam === void 0 ? "/" : _locationProp$pathnam,
            _locationProp$search = _locationProp.search,
            search = _locationProp$search === void 0 ? "" : _locationProp$search,
            _locationProp$hash = _locationProp.hash,
            hash = _locationProp$hash === void 0 ? "" : _locationProp$hash,
            _locationProp$state = _locationProp.state,
            state = _locationProp$state === void 0 ? null : _locationProp$state,
            _locationProp$key = _locationProp.key,
            key = _locationProp$key === void 0 ? "default" : _locationProp$key;
          let locationContext = reactExports.useMemo(() => {
            let trailingPathname = stripBasename(pathname, basename);
            if (trailingPathname == null) {
              return null;
            }
            return {
              location: {
                pathname: trailingPathname,
                search,
                hash,
                state,
                key
              },
              navigationType
            };
          }, [basename, pathname, search, hash, state, key, navigationType]);
          if (locationContext == null) {
            return null;
          }
          return /* @__PURE__ */reactExports.createElement(NavigationContext.Provider, {
            value: navigationContext
          }, /* @__PURE__ */reactExports.createElement(LocationContext.Provider, {
            children,
            value: locationContext
          }));
        }
        function Routes(_ref6) {
          let children = _ref6.children,
            location = _ref6.location;
          return useRoutes(createRoutesFromChildren(children), location);
        }
        new Promise(() => {});
        function createRoutesFromChildren(children, parentPath) {
          if (parentPath === void 0) {
            parentPath = [];
          }
          let routes = [];
          reactExports.Children.forEach(children, (element, index) => {
            if (! /* @__PURE__ */reactExports.isValidElement(element)) {
              return;
            }
            let treePath = [...parentPath, index];
            if (element.type === reactExports.Fragment) {
              routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));
              return;
            }
            !(element.type === Route) ? invariant$1(false) : void 0;
            !(!element.props.index || !element.props.children) ? invariant$1(false) : void 0;
            let route = {
              id: element.props.id || treePath.join("-"),
              caseSensitive: element.props.caseSensitive,
              element: element.props.element,
              Component: element.props.Component,
              index: element.props.index,
              path: element.props.path,
              loader: element.props.loader,
              action: element.props.action,
              errorElement: element.props.errorElement,
              ErrorBoundary: element.props.ErrorBoundary,
              hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,
              shouldRevalidate: element.props.shouldRevalidate,
              handle: element.props.handle,
              lazy: element.props.lazy
            };
            if (element.props.children) {
              route.children = createRoutesFromChildren(element.props.children, treePath);
            }
            routes.push(route);
          });
          return routes;
        }

        /**
         * React Router DOM v6.15.0
         *
         * Copyright (c) Remix Software Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE.md file in the root directory of this source tree.
         *
         * @license MIT
         */
        function _extends$1() {
          _extends$1 = Object.assign ? Object.assign.bind() : function (target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return _extends$1.apply(this, arguments);
        }
        function _objectWithoutPropertiesLoose$1(source, excluded) {
          if (source == null) return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;
          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            target[key] = source[key];
          }
          return target;
        }
        function isModifiedEvent(event) {
          return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
        }
        function shouldProcessLinkClick(event, target) {
          return event.button === 0 && (
          // Ignore everything but left clicks
          !target || target === "_self") &&
          // Let browser handle "target=_blank" etc.
          !isModifiedEvent(event);
        }
        function createSearchParams(init) {
          if (init === void 0) {
            init = "";
          }
          return new URLSearchParams(typeof init === "string" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {
            let value = init[key];
            return memo.concat(Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]);
          }, []));
        }
        function getSearchParamsForLocation(locationSearch, defaultSearchParams) {
          let searchParams = createSearchParams(locationSearch);
          if (defaultSearchParams) {
            defaultSearchParams.forEach((_, key) => {
              if (!searchParams.has(key)) {
                defaultSearchParams.getAll(key).forEach(value => {
                  searchParams.append(key, value);
                });
              }
            });
          }
          return searchParams;
        }
        const _excluded$Q = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset"];
        const START_TRANSITION = "startTransition";
        const startTransitionImpl = React$1[START_TRANSITION];
        function BrowserRouter(_ref) {
          let basename = _ref.basename,
            children = _ref.children,
            future = _ref.future,
            window2 = _ref.window;
          let historyRef = reactExports.useRef();
          if (historyRef.current == null) {
            historyRef.current = createBrowserHistory({
              window: window2,
              v5Compat: true
            });
          }
          let history = historyRef.current;
          let _reactExports$useStat = reactExports.useState({
              action: history.action,
              location: history.location
            }),
            _reactExports$useStat2 = _slicedToArray2(_reactExports$useStat, 2),
            state = _reactExports$useStat2[0],
            setStateImpl = _reactExports$useStat2[1];
          let _ref10 = future || {},
            v7_startTransition = _ref10.v7_startTransition;
          let setState = reactExports.useCallback(newState => {
            v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
          }, [setStateImpl, v7_startTransition]);
          reactExports.useLayoutEffect(() => history.listen(setState), [history, setState]);
          return /* @__PURE__ */reactExports.createElement(Router, {
            basename,
            children,
            location: state.location,
            navigationType: state.action,
            navigator: history
          });
        }
        const isBrowser$1 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
        const ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
        const Link = exports("bK", /* @__PURE__ */reactExports.forwardRef(function LinkWithRef(_ref4, ref) {
          let onClick = _ref4.onClick,
            relative = _ref4.relative,
            reloadDocument = _ref4.reloadDocument,
            replace = _ref4.replace,
            state = _ref4.state,
            target = _ref4.target,
            to = _ref4.to,
            preventScrollReset = _ref4.preventScrollReset,
            rest = _objectWithoutPropertiesLoose$1(_ref4, _excluded$Q);
          let _reactExports$useCont10 = reactExports.useContext(NavigationContext),
            basename = _reactExports$useCont10.basename;
          let absoluteHref;
          let isExternal = false;
          if (typeof to === "string" && ABSOLUTE_URL_REGEX.test(to)) {
            absoluteHref = to;
            if (isBrowser$1) {
              try {
                let currentUrl = new URL(window.location.href);
                let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
                let path = stripBasename(targetUrl.pathname, basename);
                if (targetUrl.origin === currentUrl.origin && path != null) {
                  to = path + targetUrl.search + targetUrl.hash;
                } else {
                  isExternal = true;
                }
              } catch (e) {}
            }
          }
          let href = useHref(to, {
            relative
          });
          let internalOnClick = useLinkClickHandler(to, {
            replace,
            state,
            target,
            preventScrollReset,
            relative
          });
          function handleClick(event) {
            if (onClick) onClick(event);
            if (!event.defaultPrevented) {
              internalOnClick(event);
            }
          }
          return (
            // eslint-disable-next-line jsx-a11y/anchor-has-content
            /* @__PURE__ */
            reactExports.createElement("a", _extends$1({}, rest, {
              href: absoluteHref || href,
              onClick: isExternal || reloadDocument ? onClick : handleClick,
              ref,
              target
            }))
          );
        }));
        var DataRouterHook;
        (function (DataRouterHook2) {
          DataRouterHook2["UseScrollRestoration"] = "useScrollRestoration";
          DataRouterHook2["UseSubmit"] = "useSubmit";
          DataRouterHook2["UseSubmitFetcher"] = "useSubmitFetcher";
          DataRouterHook2["UseFetcher"] = "useFetcher";
        })(DataRouterHook || (DataRouterHook = {}));
        var DataRouterStateHook;
        (function (DataRouterStateHook2) {
          DataRouterStateHook2["UseFetchers"] = "useFetchers";
          DataRouterStateHook2["UseScrollRestoration"] = "useScrollRestoration";
        })(DataRouterStateHook || (DataRouterStateHook = {}));
        function useLinkClickHandler(to, _temp) {
          let _ref11 = _temp === void 0 ? {} : _temp,
            target = _ref11.target,
            replaceProp = _ref11.replace,
            state = _ref11.state,
            preventScrollReset = _ref11.preventScrollReset,
            relative = _ref11.relative;
          let navigate = useNavigate();
          let location = useLocation();
          let path = useResolvedPath(to, {
            relative
          });
          return reactExports.useCallback(event => {
            if (shouldProcessLinkClick(event, target)) {
              event.preventDefault();
              let replace = replaceProp !== void 0 ? replaceProp : createPath(location) === createPath(path);
              navigate(to, {
                replace,
                state,
                preventScrollReset,
                relative
              });
            }
          }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative]);
        }
        function useSearchParams(defaultInit) {
          let defaultSearchParamsRef = reactExports.useRef(createSearchParams(defaultInit));
          let hasSetSearchParamsRef = reactExports.useRef(false);
          let location = useLocation();
          let searchParams = reactExports.useMemo(() =>
          // Only merge in the defaults if we haven't yet called setSearchParams.
          // Once we call that we want those to take precedence, otherwise you can't
          // remove a param with setSearchParams({}) if it has an initial value
          getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [location.search]);
          let navigate = useNavigate();
          let setSearchParams = reactExports.useCallback((nextInit, navigateOptions) => {
            const newSearchParams = createSearchParams(typeof nextInit === "function" ? nextInit(searchParams) : nextInit);
            hasSetSearchParamsRef.current = true;
            navigate("?" + newSearchParams, navigateOptions);
          }, [navigate, searchParams]);
          return [searchParams, setSearchParams];
        }
        Boolean(window.location.hostname === "localhost" ||
        // [::1] is the IPv6 localhost address.
        window.location.hostname === "[::1]" ||
        // 127.0.0.0/8 are considered localhost for IPv4.
        window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));
        function unregister() {
          if ("serviceWorker" in navigator) {
            navigator.serviceWorker.ready.then(registration => {
              registration.unregister();
            }).catch(error => {
              console.error(error.message);
            });
          }
        }
        const add_column$2 = "Spalte hinzufügen";
        const add_new_random_rule$2 = "Neue Zufallsregel hinzufügen";
        const add_option$2 = "Option hinzufügen";
        const add_other$2 = "\"Andere\" hinzufügen";
        const add_priority_rule$2 = "Prioritätsregel hinzufügen";
        const add_random_rule$2 = "Zufallsregel hinzufügen";
        const add_row$2 = "Zeile hinzufügen";
        const all_in_one$2 = "Alles in einem";
        const allow_incomplete$2 = "Unvollständig/Fortsetzen zulassen";
        const allow_jump$2 = "Jump/Show Survey Index zulassen";
        const allow_previous$2 = "Zurück zulassen";
        const are_you_sure$2 = "Bist du sicher?";
        const as_is$2 = "Wie es ist";
        const audio_only$2 = "Nur Audio";
        const background_color$2 = "Hintergrundfarbe";
        const cancel$5 = "stornieren";
        const choose_image$2 = "Bild auswählen";
        const columns$2 = "Spalten";
        const columns_number$2 = "Spaltennummer";
        const columns_order$2 = "Reihenfolge der Spalten";
        const columns_priority$2 = "Spaltenpriorität";
        const component_barcode_title$2 = "Barcode/QrCode Scanner";
        const component_date_time_title$2 = "Datum und Uhrzeit";
        const component_date_title$2 = "Datum";
        const component_email_title$2 = "E-Mail";
        const component_end_title$2 = "Endgruppe";
        const component_file_upload_title$2 = "Datei-Upload";
        const component_group_title$2 = "Gruppe";
        const component_icon_mcq_title$2 = "Mehrere Symbolauswahl";
        const component_icon_scq_title$2 = "Einzelne Symbolauswahl";
        const component_image_display_title$2 = "Bildanzeige";
        const component_image_mcq_title$2 = "Mehrere Bildauswahl";
        const component_image_ranking_title$2 = "Bildranking";
        const component_image_scq_title$2 = "Einzelbildauswahl";
        const component_mcq_title$2 = "Mehrfachauswahl";
        const component_nps_title$2 = "NPS";
        const component_number_title$2 = "Nummer";
        const component_paragraph_title$2 = "Langer Text";
        const component_photo_capture_title$2 = "Foto aufnehmen";
        const component_ranking_title$2 = "Ranking";
        const component_scq_array_title$2 = "Einzelauswahl-Array";
        const component_scq_icon_array_title$2 = "Single-Choice-Symbol-Array";
        const component_scq_title$2 = "Einzelauswahl";
        const component_signature_title$2 = "Signatur";
        const component_text_display_title$2 = "Textanzeige";
        const component_text_title$2 = "Kurztext";
        const component_time_title$2 = "Zeit";
        const component_video_capture_title$2 = "Video aufnehmen";
        const component_video_display_title$2 = "Videoanzeige";
        const component_welcome_title$2 = "Willkommensgruppe";
        const condition_to_hide$2 = "Zu verbergende Bedingung";
        const condition_to_show$2 = "Zu zeigende Bedingung";
        const content_editor_placeholder_description$2 = "Beschreibung";
        const content_editor_placeholder_option$2 = "Option";
        const content_editor_placeholder_title$2 = "Titel";
        const custom_error$2 = "Benutzerdefinierter Fehler";
        const custom_random$2 = "Benutzerdefiniert";
        const date_format$2 = "Datumsformat";
        const decimal_separator$2 = "Dezimaltrennzeichen";
        const no_decimals_allowed$2 = "Keine Dezimalstellen erlaubt";
        const display$1 = "Anzeigen";
        const edit_priority_rule$2 = "Prioritätsregel bearbeiten";
        const edit_random_rule$2 = "Zufallsregel bearbeiten";
        const empty_group_hint$2 = "Stellen Sie hier eine Frage";
        const empty_survey_hint$2 = "Gruppe hier ablegen";
        const err_duplicate_code$2 = "Diese {{component_name}} hat einen doppelten Code";
        const err_duplicate_priority_group_items$2 = "Diese Elemente sind in mehr als einer Prioritätsgruppe vorhanden: <strong>{{iterms}}</strong>";
        const err_duplicate_random_group_items$2 = "Diese Artikel sind in mehr als einer Zufallsgruppe vorhanden: <strong>{{items}}</strong>";
        const err_empty_parent$2 = "Dieses {{component_name}} darf nicht leer sein, bitte fügen Sie mindestens ein {{child_name}} hinzu";
        const err_misplaced_end_group$2 = "Endgruppe muss immer die letzte Gruppe sein";
        const err_misplaced_welcome_group$2 = "Willkommensgruppe muss immer die erste Gruppe sein";
        const err_no_end_group$2 = "Es muss eine gültige Endgruppe geben";
        const err_priority$2 = "Prioritätsgruppenbefehlsfehler";
        const err_priority_group_item_not_child$2 = "Diese Elemente sind entweder gelöscht oder haben Fehler und können daher nicht in der Prioritätsgruppe sein: <strong>{{items}}</strong>";
        const err_priority_limit_mismatch$2 = "In einer der Prioritätsgruppen ist das Limit größer oder gleich der Anzahl der Artikel";
        const err_random$2 = "Zufälliger Gruppenbefehlsfehler";
        const err_random_group_item_not_child$2 = "Diese Elemente wurden entweder gelöscht oder sind fehlerhaft und können daher nicht in der Zufallsgruppe enthalten sein: <strong>{{items}}</strong>";
        const err_reference$2 = "Fehler: Weiterleitung eines fehlenden Werts oder einer nachgestellten Frage: <strong>{{codes}}</strong>, in Sprache: <strong>{{lang}}</strong>";
        const err_relevance$2 = "Problem mit Logik zum Ein-/Ausblenden";
        const err_skip$2 = "Problem mit einer der Skip-Anweisungen";
        const err_value_in_end_group$2 = "Kann keine Fragen haben, die Benutzereingaben in der Endgruppe erfassen";
        const file_type$2 = "Dateityp";
        const file_types$2 = {
          audio: "Audio",
          document: "Dokument",
          image: "Bild",
          pdf: "PDF",
          presentation: "Präsentation",
          spreadsheet: "Spreadsheet",
          video: "Video"
        };
        const flip_order$2 = "Flip-Order";
        const foreground_color$2 = "Vordergrundfarbe";
        const fullday_format$2 = "Ganztägiges Format";
        const group$1 = "Gruppe";
        const group_by_group$2 = "Gruppieren nach Gruppe";
        const group_title$2 = "Gruppentitel";
        const groups_order$2 = "Gruppenreihenfolge";
        const groups_priority$2 = "Gruppenpriorität";
        const hide_always$2 = "Immer ausblenden";
        const hide_if$2 = "Ausblenden, wenn";
        const hide_text$2 = "Text verbergen";
        const highlight_color$2 = "Farbe hervorheben";
        const if_answer_is$2 = "Wenn die Antwort <strong>{{code}}</strong> ist";
        const image_aspect_ratio$2 = "Bildseitenverhältnis";
        const image_icon_size$2 = "Symbolgröße in px";
        const image_height$2 = "Bildhöhe";
        const invalid_skip_destination_err$2 = "<strong>{{code}}</strong> ist kein gültiges Skip-Ziel...";
        const loop_video$2 = "Videoschleife";
        const lower_bound_hint$2 = "Hinweis zur Untergrenze";
        const max_date$2 = "Maximaldatum";
        const min_date$2 = "Min. Datum";
        const navigation_mode$2 = "Navigationsmodus";
        const navigation_options$2 = "Navigation Options";
        const no_condition$2 = "KEINE BEDINGUNG";
        const no_logic_err$2 = "❌ Ohne Logik wird dies auf <strong>Immer anzeigen</strong> zurückgesetzt";
        const no_priority$2 = "Keine";
        const offline_only$2 = "Offline";
        const ok$2 = "OK";
        const option$1 = "Option";
        const options_order$2 = "Optionsreihenfolge";
        const options_priority$2 = "Priorität der Optionen";
        const or$2 = "oder";
        const order_priority$2 = "Reihenfolge und Priorität";
        const prioritise$1 = "Priorisieren";
        const prioritise_columns$2 = "Spalten priorisieren";
        const prioritise_groups$2 = "Gruppen priorisieren";
        const prioritise_options$2 = "Optionen priorisieren";
        const prioritise_questions$2 = "Fragen priorisieren";
        const prioritise_rows$2 = "Zeilen priorisieren";
        const priority_show$2 = "Anzeigen";
        const priority_show_limit_from_count$2 = "Zeige {{limit}} von {{count}}";
        const proceed_as_usual$2 = "Wie gewohnt fortfahren";
        const question$2 = "Frage";
        const question_by_question$2 = "Frage für Frage";
        const question_title$2 = "Titel der Frage";
        const questions_order$2 = "Reihenfolge der Fragen";
        const questions_priority$2 = "Priorität der Fragen";
        const random_order$2 = "Zufällige Reihenfolge";
        const replace_image$2 = "Bild ersetzen";
        const replace_video$2 = "Video ersetzen";
        const rows$1 = "Zeilen";
        const rows_order$2 = "Reihenfolge";
        const rows_priority$2 = "Zeilenpriorität";
        const section_choice_based$2 = "Auswahl basiert";
        const section_date_time$2 = "Datum / Uhrzeit";
        const section_file_based$2 = "Dateibasiert";
        const section_info$2 = "Info";
        const section_other$2 = "Andere";
        const section_sections$2 = "Abschnitte";
        const section_text_based$2 = "Textbasiert";
        const setup$2 = "Setup";
        const show_always$2 = "Immer anzeigen";
        const show_description$2 = "Beschreibung anzeigen";
        const show_hide$2 = "Anzeigen/Ausblenden";
        const show_if$2 = "Zeige wenn";
        const show_question_hint$2 = "Fragehinweis anzeigen";
        const show_word_count$2 = "Wortanzahl anzeigen";
        const skip_invalid$2 = "Validierung nur beim Absenden erzwingen";
        const skip_logic$2 = "Überspringen Logik";
        const skip_to$2 = "Überspringen zu";
        const sort_by_label$2 = "Nach Etikett sortieren";
        const spacing$1 = "Abstand";
        const standard_error$2 = "Standardfehler";
        const submit$2 = "Absenden";
        const survey$1 = "Umfrage";
        const text_field_size$2 = "Textfeldgröße";
        const text_style$2 = "Textstil";
        const textarea_lines$2 = "TextArea-Zeilen";
        const theme$1 = "Thema";
        const theme_header$2 = "Kopfzeile";
        const theme_text$2 = "Text";
        const to_group_end$2 = "Zum Gruppenende";
        const upload_image$2 = "Bild hochladen";
        const upload_video$2 = "Video hochladen";
        const uploading_image$2 = "Bild wird hochgeladen";
        const uploading_video$2 = "Video hochladen";
        const upper_bound_hint$2 = "Hinweis zur oberen Grenze";
        const validation$2 = "Validierung";
        const validation_between_subtitle$2 = "Zwischen:";
        const validation_between_title$2 = "Wert zwischen";
        const validation_contains_subtitle$2 = "Enthält:";
        const validation_contains_title$2 = "Enthält";
        const validation_equals_subtitle$2 = "Gleich:";
        const validation_equals_title$2 = "Wert gleich";
        const validation_file_types_title$2 = "Dateitypen";
        const validation_gt_subtitle$2 = "Größer als:";
        const validation_gt_title$2 = "Wert größer als";
        const validation_gte_subtitle$2 = "Größer als oder gleich:";
        const validation_gte_title$2 = "Wert größer oder gleich";
        const validation_lt_subtitle$2 = "Kleiner als:";
        const validation_lt_title$2 = "Wert kleiner als";
        const validation_lte_subtitle$2 = "Kleiner als oder gleich:";
        const validation_lte_title$2 = "Wert kleiner oder gleich";
        const validation_max_char_length_subtitle$2 = "Maximale Länge:";
        const validation_max_char_length_title$2 = "Maximale Zeichenlänge";
        const validation_max_file_size_subtitle$2 = "Maximale Dateigröße (KB)";
        const validation_max_file_size_title$2 = "Maximale Dateigröße";
        const validation_max_option_count_subtitle$2 = "Maximale Anzahl:";
        const validation_max_option_count_title$2 = "Maximale Optionsanzahl";
        const validation_max_ranking_count_subtitle$2 = "Maximale Anzahl";
        const validation_max_ranking_count_title$2 = "Maximale Anzahl in der Rangliste";
        const validation_max_word_count_subtitle$2 = "Maximale Anzahl:";
        const validation_max_word_count_title$2 = "Maximale Wortzahl";
        const validation_min_char_length_subtitle$2 = "Mindestlänge:";
        const validation_min_char_length_title$2 = "Mindestzeichenlänge";
        const validation_min_option_count_subtitle$2 = "Mindestanzahl:";
        const validation_min_option_count_title$2 = "Mindestzahl der Optionen";
        const validation_min_ranking_count_subtitle$2 = "Mindestanzahl";
        const validation_min_ranking_count_title$2 = "Mindestplatzierte Anzahl";
        const validation_min_word_count_subtitle$2 = "Mindestanzahl:";
        const validation_min_word_count_title$2 = "Mindestwortzahl";
        const validation_not_between_subtitle$2 = "Nicht zwischen:";
        const validation_not_between_title$2 = "Wert nicht zwischen";
        const validation_not_contains_subtitle$2 = "Enthält nicht:";
        const validation_not_contains_title$2 = "Enthält nicht";
        const validation_not_equal_subtitle$2 = "Ungleich:";
        const validation_not_equal_title$2 = "Wert ungleich";
        const validation_one_response_per_col_title$2 = "Eine Antwort pro Spalte";
        const validation_option_count_subtitle$2 = "Anzahl:";
        const validation_option_count_title$2 = "Genaue Optionsanzahl";
        const validation_pattern_email_title$2 = "Muster-E-Mail";
        const validation_pattern_subtitle$2 = "Muster:";
        const validation_pattern_title$2 = "Entspricht Regex-Muster";
        const validation_ranking_count_subtitle$2 = "Anzahl:";
        const validation_ranking_count_title$2 = "Genaue Rangliste";
        const validation_required_title$2 = "Erforderlich";
        const video_options$2 = "Videooptionen";
        const wrong_logic_err$2 = "❌ Es gab einen Fehler in Logic, daher wurde dies auf <strong>Immer anzeigen</strong> zurückgesetzt";
        const design_de = {
          add_column: add_column$2,
          add_new_random_rule: add_new_random_rule$2,
          add_option: add_option$2,
          add_other: add_other$2,
          add_priority_rule: add_priority_rule$2,
          add_random_rule: add_random_rule$2,
          add_row: add_row$2,
          all_in_one: all_in_one$2,
          allow_incomplete: allow_incomplete$2,
          allow_jump: allow_jump$2,
          allow_previous: allow_previous$2,
          are_you_sure: are_you_sure$2,
          as_is: as_is$2,
          audio_only: audio_only$2,
          background_color: background_color$2,
          cancel: cancel$5,
          choose_image: choose_image$2,
          columns: columns$2,
          columns_number: columns_number$2,
          columns_order: columns_order$2,
          columns_priority: columns_priority$2,
          component_barcode_title: component_barcode_title$2,
          component_date_time_title: component_date_time_title$2,
          component_date_title: component_date_title$2,
          component_email_title: component_email_title$2,
          component_end_title: component_end_title$2,
          component_file_upload_title: component_file_upload_title$2,
          component_group_title: component_group_title$2,
          component_icon_mcq_title: component_icon_mcq_title$2,
          component_icon_scq_title: component_icon_scq_title$2,
          component_image_display_title: component_image_display_title$2,
          component_image_mcq_title: component_image_mcq_title$2,
          component_image_ranking_title: component_image_ranking_title$2,
          component_image_scq_title: component_image_scq_title$2,
          component_mcq_title: component_mcq_title$2,
          component_nps_title: component_nps_title$2,
          component_number_title: component_number_title$2,
          component_paragraph_title: component_paragraph_title$2,
          component_photo_capture_title: component_photo_capture_title$2,
          component_ranking_title: component_ranking_title$2,
          component_scq_array_title: component_scq_array_title$2,
          component_scq_icon_array_title: component_scq_icon_array_title$2,
          component_scq_title: component_scq_title$2,
          component_signature_title: component_signature_title$2,
          component_text_display_title: component_text_display_title$2,
          component_text_title: component_text_title$2,
          component_time_title: component_time_title$2,
          component_video_capture_title: component_video_capture_title$2,
          component_video_display_title: component_video_display_title$2,
          component_welcome_title: component_welcome_title$2,
          condition_to_hide: condition_to_hide$2,
          condition_to_show: condition_to_show$2,
          content_editor_placeholder_description: content_editor_placeholder_description$2,
          content_editor_placeholder_option: content_editor_placeholder_option$2,
          content_editor_placeholder_title: content_editor_placeholder_title$2,
          custom_error: custom_error$2,
          custom_random: custom_random$2,
          date_format: date_format$2,
          decimal_separator: decimal_separator$2,
          no_decimals_allowed: no_decimals_allowed$2,
          display: display$1,
          edit_priority_rule: edit_priority_rule$2,
          edit_random_rule: edit_random_rule$2,
          empty_group_hint: empty_group_hint$2,
          empty_survey_hint: empty_survey_hint$2,
          err_duplicate_code: err_duplicate_code$2,
          err_duplicate_priority_group_items: err_duplicate_priority_group_items$2,
          err_duplicate_random_group_items: err_duplicate_random_group_items$2,
          err_empty_parent: err_empty_parent$2,
          err_misplaced_end_group: err_misplaced_end_group$2,
          err_misplaced_welcome_group: err_misplaced_welcome_group$2,
          err_no_end_group: err_no_end_group$2,
          err_priority: err_priority$2,
          err_priority_group_item_not_child: err_priority_group_item_not_child$2,
          err_priority_limit_mismatch: err_priority_limit_mismatch$2,
          err_random: err_random$2,
          err_random_group_item_not_child: err_random_group_item_not_child$2,
          err_reference: err_reference$2,
          err_relevance: err_relevance$2,
          err_skip: err_skip$2,
          err_value_in_end_group: err_value_in_end_group$2,
          file_type: file_type$2,
          file_types: file_types$2,
          flip_order: flip_order$2,
          foreground_color: foreground_color$2,
          fullday_format: fullday_format$2,
          group: group$1,
          group_by_group: group_by_group$2,
          group_title: group_title$2,
          groups_order: groups_order$2,
          groups_priority: groups_priority$2,
          hide_always: hide_always$2,
          hide_if: hide_if$2,
          hide_text: hide_text$2,
          highlight_color: highlight_color$2,
          if_answer_is: if_answer_is$2,
          image_aspect_ratio: image_aspect_ratio$2,
          image_icon_size: image_icon_size$2,
          image_height: image_height$2,
          invalid_skip_destination_err: invalid_skip_destination_err$2,
          loop_video: loop_video$2,
          lower_bound_hint: lower_bound_hint$2,
          max_date: max_date$2,
          min_date: min_date$2,
          navigation_mode: navigation_mode$2,
          navigation_options: navigation_options$2,
          no_condition: no_condition$2,
          no_logic_err: no_logic_err$2,
          no_priority: no_priority$2,
          offline_only: offline_only$2,
          ok: ok$2,
          option: option$1,
          options_order: options_order$2,
          options_priority: options_priority$2,
          or: or$2,
          order_priority: order_priority$2,
          prioritise: prioritise$1,
          prioritise_columns: prioritise_columns$2,
          prioritise_groups: prioritise_groups$2,
          prioritise_options: prioritise_options$2,
          prioritise_questions: prioritise_questions$2,
          prioritise_rows: prioritise_rows$2,
          priority_show: priority_show$2,
          priority_show_limit_from_count: priority_show_limit_from_count$2,
          proceed_as_usual: proceed_as_usual$2,
          question: question$2,
          question_by_question: question_by_question$2,
          question_title: question_title$2,
          questions_order: questions_order$2,
          questions_priority: questions_priority$2,
          random_order: random_order$2,
          replace_image: replace_image$2,
          replace_video: replace_video$2,
          rows: rows$1,
          rows_order: rows_order$2,
          rows_priority: rows_priority$2,
          section_choice_based: section_choice_based$2,
          section_date_time: section_date_time$2,
          section_file_based: section_file_based$2,
          section_info: section_info$2,
          section_other: section_other$2,
          section_sections: section_sections$2,
          section_text_based: section_text_based$2,
          setup: setup$2,
          show_always: show_always$2,
          show_description: show_description$2,
          show_hide: show_hide$2,
          show_if: show_if$2,
          show_question_hint: show_question_hint$2,
          show_word_count: show_word_count$2,
          skip_invalid: skip_invalid$2,
          skip_logic: skip_logic$2,
          skip_to: skip_to$2,
          sort_by_label: sort_by_label$2,
          spacing: spacing$1,
          standard_error: standard_error$2,
          submit: submit$2,
          survey: survey$1,
          text_field_size: text_field_size$2,
          text_style: text_style$2,
          textarea_lines: textarea_lines$2,
          theme: theme$1,
          theme_header: theme_header$2,
          theme_text: theme_text$2,
          to_group_end: to_group_end$2,
          upload_image: upload_image$2,
          upload_video: upload_video$2,
          uploading_image: uploading_image$2,
          uploading_video: uploading_video$2,
          upper_bound_hint: upper_bound_hint$2,
          validation: validation$2,
          validation_between_subtitle: validation_between_subtitle$2,
          validation_between_title: validation_between_title$2,
          validation_contains_subtitle: validation_contains_subtitle$2,
          validation_contains_title: validation_contains_title$2,
          validation_equals_subtitle: validation_equals_subtitle$2,
          validation_equals_title: validation_equals_title$2,
          validation_file_types_title: validation_file_types_title$2,
          validation_gt_subtitle: validation_gt_subtitle$2,
          validation_gt_title: validation_gt_title$2,
          validation_gte_subtitle: validation_gte_subtitle$2,
          validation_gte_title: validation_gte_title$2,
          validation_lt_subtitle: validation_lt_subtitle$2,
          validation_lt_title: validation_lt_title$2,
          validation_lte_subtitle: validation_lte_subtitle$2,
          validation_lte_title: validation_lte_title$2,
          validation_max_char_length_subtitle: validation_max_char_length_subtitle$2,
          validation_max_char_length_title: validation_max_char_length_title$2,
          validation_max_file_size_subtitle: validation_max_file_size_subtitle$2,
          validation_max_file_size_title: validation_max_file_size_title$2,
          validation_max_option_count_subtitle: validation_max_option_count_subtitle$2,
          validation_max_option_count_title: validation_max_option_count_title$2,
          validation_max_ranking_count_subtitle: validation_max_ranking_count_subtitle$2,
          validation_max_ranking_count_title: validation_max_ranking_count_title$2,
          validation_max_word_count_subtitle: validation_max_word_count_subtitle$2,
          validation_max_word_count_title: validation_max_word_count_title$2,
          validation_min_char_length_subtitle: validation_min_char_length_subtitle$2,
          validation_min_char_length_title: validation_min_char_length_title$2,
          validation_min_option_count_subtitle: validation_min_option_count_subtitle$2,
          validation_min_option_count_title: validation_min_option_count_title$2,
          validation_min_ranking_count_subtitle: validation_min_ranking_count_subtitle$2,
          validation_min_ranking_count_title: validation_min_ranking_count_title$2,
          validation_min_word_count_subtitle: validation_min_word_count_subtitle$2,
          validation_min_word_count_title: validation_min_word_count_title$2,
          validation_not_between_subtitle: validation_not_between_subtitle$2,
          validation_not_between_title: validation_not_between_title$2,
          validation_not_contains_subtitle: validation_not_contains_subtitle$2,
          validation_not_contains_title: validation_not_contains_title$2,
          validation_not_equal_subtitle: validation_not_equal_subtitle$2,
          validation_not_equal_title: validation_not_equal_title$2,
          validation_one_response_per_col_title: validation_one_response_per_col_title$2,
          validation_option_count_subtitle: validation_option_count_subtitle$2,
          validation_option_count_title: validation_option_count_title$2,
          validation_pattern_email_title: validation_pattern_email_title$2,
          validation_pattern_subtitle: validation_pattern_subtitle$2,
          validation_pattern_title: validation_pattern_title$2,
          validation_ranking_count_subtitle: validation_ranking_count_subtitle$2,
          validation_ranking_count_title: validation_ranking_count_title$2,
          validation_required_title: validation_required_title$2,
          video_options: video_options$2,
          wrong_logic_err: wrong_logic_err$2
        };
        const add_column$1 = "Add Column";
        const add_new_random_rule$1 = "Add New Random Rule";
        const add_option$1 = "Add Option";
        const add_other$1 = "Add \"Other\"";
        const add_priority_rule$1 = "Add Priority Rule";
        const add_random_rule$1 = "Add Random Rule";
        const add_row$1 = "Add Row";
        const all_in_one$1 = "All In One";
        const allow_incomplete$1 = "Allow Incomplete/Resume";
        const allow_jump$1 = "Allow Jump/Show survey Index";
        const allow_previous$1 = "Allow Previous";
        const are_you_sure$1 = "Are you sure?";
        const as_is$1 = "As is";
        const audio_only$1 = "Audio Only";
        const background_color$1 = "Background Color";
        const cancel$4 = "Cancel";
        const choose_image$1 = "Choose Image";
        const columns$1 = "Columns";
        const columns_number$1 = "Columns Number";
        const columns_order$1 = "Columns Order";
        const columns_priority$1 = "Columns Priority";
        const component_barcode_title$1 = "Barcode/QrCode Scanner";
        const component_date_time_title$1 = "Date and Time";
        const component_date_title$1 = "Date";
        const component_email_title$1 = "Email";
        const component_end_title$1 = "End Group";
        const component_file_upload_title$1 = "File Upload";
        const component_group_title$1 = "Group";
        const component_icon_mcq_title$1 = "Multiple Icon Choice";
        const component_icon_scq_title$1 = "Single Icon Choice";
        const component_image_display_title$1 = "Image Display";
        const component_image_mcq_title$1 = "Multiple Image Choice";
        const component_image_ranking_title$1 = "Image Ranking";
        const component_image_scq_title$1 = "Single Image Choice";
        const component_mcq_title$1 = "Multiple Choice";
        const component_nps_title$1 = "NPS";
        const component_number_title$1 = "Number";
        const component_paragraph_title$1 = "Long Text";
        const component_photo_capture_title$1 = "Capture Photo";
        const component_ranking_title$1 = "Ranking";
        const component_scq_array_title$1 = "Single Choice Array";
        const component_scq_icon_array_title$1 = "Single Choice Icon Array";
        const component_scq_title$1 = "Single Choice";
        const component_signature_title$1 = "Signature";
        const component_text_display_title$1 = "Text Display";
        const component_text_title$1 = "Short Text";
        const component_time_title$1 = "Time";
        const component_video_capture_title$1 = "Capture Video";
        const component_video_display_title$1 = "Video Display";
        const component_welcome_title$1 = "Welcome Group";
        const condition_to_hide$1 = "Condition to Hide";
        const condition_to_show$1 = "Condition to Show";
        const content_editor_placeholder_description$1 = "Description";
        const content_editor_placeholder_option$1 = "Option";
        const content_editor_placeholder_title$1 = "Title";
        const custom_error$1 = "Custom Error";
        const custom_random$1 = "Custom";
        const date_format$1 = "Date Format";
        const decimal_separator$1 = "Decimal Separator";
        const no_decimals_allowed$1 = "No Decimals Allowed";
        const display = "Display";
        const edit_priority_rule$1 = "Edit Priority Rule";
        const edit_random_rule$1 = "Edit Random Rule";
        const empty_group_hint$1 = "Drop a question here";
        const empty_survey_hint$1 = "Drop a group here";
        const err_duplicate_code$1 = "This {{component_name}} has a duplicate code";
        const err_duplicate_priority_group_items$1 = "Those items are present in more than one priority Group: <strong>{{iterms}}</strong>";
        const err_duplicate_random_group_items$1 = "Those items are present in more than one random group: <strong>{{items}}</strong>";
        const err_empty_parent$1 = "This {{component_name}} cannot be empty, Please add at least one {{child_name}}";
        const err_misplaced_end_group$1 = "End Group must always be the last group";
        const err_misplaced_welcome_group$1 = "Welcome Group must always be the first group";
        const err_no_end_group$1 = "There must be an valid end Group";
        const err_priority$1 = "Priority Group instruction Error";
        const err_priority_group_item_not_child$1 = "Those items are either deleted or have errors and therefore cannot be in Priority Group: <strong>{{items}}</strong>";
        const err_priority_limit_mismatch$1 = "In one of the priority groups, the limit is more than or equal to number of items";
        const err_random$1 = "Random Group instruction Error";
        const err_random_group_item_not_child$1 = "Those items are either deleted or have errors and therefore cannot be in Random Group: <strong>{{items}}</strong>";
        const err_reference$1 = "Error: piping a value of missing or a trailing question: <strong>{{codes}}</strong>, in Language: <strong>{{lang}}</strong>";
        const err_relevance$1 = "Problem with Show/Hide Logic";
        const err_skip$1 = "Problem with one of the skip instructions";
        const err_value_in_end_group$1 = "Cannot have questions that capture user input in End Group";
        const file_type$1 = "File Type";
        const file_types$1 = {
          audio: "Audio",
          document: "Document",
          image: "Image",
          pdf: "Pdf",
          presentation: "Presentation",
          spreadsheet: "Spreadsheet",
          video: "Video"
        };
        const flip_order$1 = "Flip Order";
        const foreground_color$1 = "Foreground Color";
        const fullday_format$1 = "FullDay Format";
        const group = "Group";
        const group_by_group$1 = "Group By Group";
        const group_title$1 = "Group Title";
        const groups_order$1 = "Groups Order";
        const groups_priority$1 = "Groups Priority";
        const hide_always$1 = "Hide Always";
        const hide_if$1 = "Hide If";
        const hide_text$1 = "Hide Text";
        const highlight_color$1 = "Highlight Color";
        const if_answer_is$1 = "If answer is <strong>{{code}}</strong>";
        const image_aspect_ratio$1 = "Image Aspect Ratio";
        const image_icon_size$1 = "Icon Size in px";
        const image_height$1 = "Image Height";
        const invalid_skip_destination_err$1 = "<strong>{{code}}</strong> is not a valid Skip Destination...";
        const loop_video$1 = "Loop Video";
        const lower_bound_hint$1 = "Lower Bound hint";
        const max_date$1 = "Max Date";
        const min_date$1 = "Min Date";
        const navigation_mode$1 = "Navigation Mode";
        const navigation_options$1 = "Navigation Options";
        const no_condition$1 = "NO CONDITION";
        const no_logic_err$1 = "❌ Without Logic, this will be reset to <strong>Always Show</strong>";
        const no_priority$1 = "None";
        const offline_only$1 = "Offline";
        const ok$1 = "OK";
        const option = "Option";
        const options_order$1 = "Options Order";
        const options_priority$1 = "Options Priority";
        const or$1 = "Or";
        const order_priority$1 = "Order and Priority";
        const prioritise = "Prioritise";
        const prioritise_columns$1 = "Prioritise Columns";
        const prioritise_groups$1 = "Prioritise Groups";
        const prioritise_options$1 = "Prioritise Options";
        const prioritise_questions$1 = "Prioritise Questions";
        const prioritise_rows$1 = "Prioritise Rows";
        const priority_show$1 = "Show";
        const priority_show_limit_from_count$1 = "Show {{limit}} from {{count}}";
        const proceed_as_usual$1 = "Proceed as usual";
        const question$1 = "Question";
        const question_by_question$1 = "Question By Question";
        const question_title$1 = "Question Title";
        const questions_order$1 = "Questions Order";
        const questions_priority$1 = "Questions Priority";
        const random_order$1 = "Random Order";
        const replace_image$1 = "Replace Image";
        const replace_video$1 = "Replace Video";
        const rows = "Rows";
        const rows_order$1 = "Rows Order";
        const rows_priority$1 = "Rows Priority";
        const section_choice_based$1 = "Choice based";
        const section_date_time$1 = "Date / Time";
        const section_file_based$1 = "File based";
        const section_info$1 = "Info";
        const section_other$1 = "Other";
        const section_sections$1 = "Sections";
        const section_text_based$1 = "Text based";
        const setup$1 = "Setup";
        const show_always$1 = "Show Always";
        const show_description$1 = "Show Description";
        const show_hide$1 = "Show/Hide";
        const show_if$1 = "Show If";
        const show_question_hint$1 = "Show Question Hint";
        const show_word_count$1 = "Show Word Count";
        const skip_invalid$1 = "Enforce validation only on submit";
        const skip_logic$1 = "Skip Logic";
        const skip_to$1 = "Skip To";
        const sort_by_label$1 = "Sort By Label";
        const spacing = "Spacing";
        const standard_error$1 = "Standard Error";
        const submit$1 = "Submit";
        const survey = "Survey";
        const text_field_size$1 = "Text Field Size";
        const text_style$1 = "Text Style";
        const textarea_lines$1 = "TextArea Lines";
        const theme = "Theme";
        const theme_header$1 = "Header";
        const theme_text$1 = "Text";
        const to_group_end$1 = "To Group End";
        const upload_image$1 = "Upload Image";
        const upload_video$1 = "Upload Video";
        const uploading_image$1 = "Uploading Image";
        const uploading_video$1 = "Uploading Video";
        const upper_bound_hint$1 = "Upper Bound hint";
        const validation$1 = "Validation";
        const validation_between_subtitle$1 = "Between:";
        const validation_between_title$1 = "Value Between";
        const validation_contains_subtitle$1 = "Contains:";
        const validation_contains_title$1 = "Contains";
        const validation_equals_subtitle$1 = "Equals:";
        const validation_equals_title$1 = "Value equals";
        const validation_file_types_title$1 = "File Types";
        const validation_gt_subtitle$1 = "Greater than:";
        const validation_gt_title$1 = "Value greater than";
        const validation_gte_subtitle$1 = "Greater than or equals:";
        const validation_gte_title$1 = "Value greater than or equals";
        const validation_lt_subtitle$1 = "Less than:";
        const validation_lt_title$1 = "Value less than";
        const validation_lte_subtitle$1 = "Less than or equals:";
        const validation_lte_title$1 = "Value less than or equals";
        const validation_max_char_length_subtitle$1 = "Max Length:";
        const validation_max_char_length_title$1 = "Max Character Length";
        const validation_max_file_size_subtitle$1 = "Max File Size (KB)";
        const validation_max_file_size_title$1 = "Max File Size";
        const validation_max_option_count_subtitle$1 = "Max Count:";
        const validation_max_option_count_title$1 = "Maximum Option Count";
        const validation_max_ranking_count_subtitle$1 = "Max Count";
        const validation_max_ranking_count_title$1 = "Maximum Ranked Count";
        const validation_max_word_count_subtitle$1 = "Max Count:";
        const validation_max_word_count_title$1 = "Max Word Count";
        const validation_min_char_length_subtitle$1 = "Min Length:";
        const validation_min_char_length_title$1 = "Min Character Length";
        const validation_min_option_count_subtitle$1 = "Min Count:";
        const validation_min_option_count_title$1 = "Minimum Option Count";
        const validation_min_ranking_count_subtitle$1 = "Min Count";
        const validation_min_ranking_count_title$1 = "Minimum Ranked Count";
        const validation_min_word_count_subtitle$1 = "Min Count:";
        const validation_min_word_count_title$1 = "Min Word Count";
        const validation_not_between_subtitle$1 = "Not between:";
        const validation_not_between_title$1 = "Value not between";
        const validation_not_contains_subtitle$1 = "Does not contain:";
        const validation_not_contains_title$1 = "Does not contain";
        const validation_not_equal_subtitle$1 = "Not equals:";
        const validation_not_equal_title$1 = "Value not equals";
        const validation_one_response_per_col_title$1 = "One Response Per Column";
        const validation_option_count_subtitle$1 = "Count:";
        const validation_option_count_title$1 = "Exact Option Count";
        const validation_pattern_email_title$1 = "Pattern Email";
        const validation_pattern_subtitle$1 = "Pattern:";
        const validation_pattern_title$1 = "Matches Regex Pattern";
        const validation_ranking_count_subtitle$1 = "Count:";
        const validation_ranking_count_title$1 = "Exact Ranked Count";
        const validation_required_title$1 = "Required";
        const video_options$1 = "Video Options";
        const wrong_logic_err$1 = "❌ There was an error in Logic therefore this was reset to <strong>Always Show</strong>";
        const design_en = {
          add_column: add_column$1,
          add_new_random_rule: add_new_random_rule$1,
          add_option: add_option$1,
          add_other: add_other$1,
          add_priority_rule: add_priority_rule$1,
          add_random_rule: add_random_rule$1,
          add_row: add_row$1,
          all_in_one: all_in_one$1,
          allow_incomplete: allow_incomplete$1,
          allow_jump: allow_jump$1,
          allow_previous: allow_previous$1,
          are_you_sure: are_you_sure$1,
          as_is: as_is$1,
          audio_only: audio_only$1,
          background_color: background_color$1,
          cancel: cancel$4,
          choose_image: choose_image$1,
          columns: columns$1,
          columns_number: columns_number$1,
          columns_order: columns_order$1,
          columns_priority: columns_priority$1,
          component_barcode_title: component_barcode_title$1,
          component_date_time_title: component_date_time_title$1,
          component_date_title: component_date_title$1,
          component_email_title: component_email_title$1,
          component_end_title: component_end_title$1,
          component_file_upload_title: component_file_upload_title$1,
          component_group_title: component_group_title$1,
          component_icon_mcq_title: component_icon_mcq_title$1,
          component_icon_scq_title: component_icon_scq_title$1,
          component_image_display_title: component_image_display_title$1,
          component_image_mcq_title: component_image_mcq_title$1,
          component_image_ranking_title: component_image_ranking_title$1,
          component_image_scq_title: component_image_scq_title$1,
          component_mcq_title: component_mcq_title$1,
          component_nps_title: component_nps_title$1,
          component_number_title: component_number_title$1,
          component_paragraph_title: component_paragraph_title$1,
          component_photo_capture_title: component_photo_capture_title$1,
          component_ranking_title: component_ranking_title$1,
          component_scq_array_title: component_scq_array_title$1,
          component_scq_icon_array_title: component_scq_icon_array_title$1,
          component_scq_title: component_scq_title$1,
          component_signature_title: component_signature_title$1,
          component_text_display_title: component_text_display_title$1,
          component_text_title: component_text_title$1,
          component_time_title: component_time_title$1,
          component_video_capture_title: component_video_capture_title$1,
          component_video_display_title: component_video_display_title$1,
          component_welcome_title: component_welcome_title$1,
          condition_to_hide: condition_to_hide$1,
          condition_to_show: condition_to_show$1,
          content_editor_placeholder_description: content_editor_placeholder_description$1,
          content_editor_placeholder_option: content_editor_placeholder_option$1,
          content_editor_placeholder_title: content_editor_placeholder_title$1,
          custom_error: custom_error$1,
          custom_random: custom_random$1,
          date_format: date_format$1,
          decimal_separator: decimal_separator$1,
          no_decimals_allowed: no_decimals_allowed$1,
          display: display,
          edit_priority_rule: edit_priority_rule$1,
          edit_random_rule: edit_random_rule$1,
          empty_group_hint: empty_group_hint$1,
          empty_survey_hint: empty_survey_hint$1,
          err_duplicate_code: err_duplicate_code$1,
          err_duplicate_priority_group_items: err_duplicate_priority_group_items$1,
          err_duplicate_random_group_items: err_duplicate_random_group_items$1,
          err_empty_parent: err_empty_parent$1,
          err_misplaced_end_group: err_misplaced_end_group$1,
          err_misplaced_welcome_group: err_misplaced_welcome_group$1,
          err_no_end_group: err_no_end_group$1,
          err_priority: err_priority$1,
          err_priority_group_item_not_child: err_priority_group_item_not_child$1,
          err_priority_limit_mismatch: err_priority_limit_mismatch$1,
          err_random: err_random$1,
          err_random_group_item_not_child: err_random_group_item_not_child$1,
          err_reference: err_reference$1,
          err_relevance: err_relevance$1,
          err_skip: err_skip$1,
          err_value_in_end_group: err_value_in_end_group$1,
          file_type: file_type$1,
          file_types: file_types$1,
          flip_order: flip_order$1,
          foreground_color: foreground_color$1,
          fullday_format: fullday_format$1,
          group: group,
          group_by_group: group_by_group$1,
          group_title: group_title$1,
          groups_order: groups_order$1,
          groups_priority: groups_priority$1,
          hide_always: hide_always$1,
          hide_if: hide_if$1,
          hide_text: hide_text$1,
          highlight_color: highlight_color$1,
          if_answer_is: if_answer_is$1,
          image_aspect_ratio: image_aspect_ratio$1,
          image_icon_size: image_icon_size$1,
          image_height: image_height$1,
          invalid_skip_destination_err: invalid_skip_destination_err$1,
          loop_video: loop_video$1,
          lower_bound_hint: lower_bound_hint$1,
          max_date: max_date$1,
          min_date: min_date$1,
          navigation_mode: navigation_mode$1,
          navigation_options: navigation_options$1,
          no_condition: no_condition$1,
          no_logic_err: no_logic_err$1,
          no_priority: no_priority$1,
          offline_only: offline_only$1,
          ok: ok$1,
          option: option,
          options_order: options_order$1,
          options_priority: options_priority$1,
          or: or$1,
          order_priority: order_priority$1,
          prioritise: prioritise,
          prioritise_columns: prioritise_columns$1,
          prioritise_groups: prioritise_groups$1,
          prioritise_options: prioritise_options$1,
          prioritise_questions: prioritise_questions$1,
          prioritise_rows: prioritise_rows$1,
          priority_show: priority_show$1,
          priority_show_limit_from_count: priority_show_limit_from_count$1,
          proceed_as_usual: proceed_as_usual$1,
          question: question$1,
          question_by_question: question_by_question$1,
          question_title: question_title$1,
          questions_order: questions_order$1,
          questions_priority: questions_priority$1,
          random_order: random_order$1,
          replace_image: replace_image$1,
          replace_video: replace_video$1,
          rows: rows,
          rows_order: rows_order$1,
          rows_priority: rows_priority$1,
          section_choice_based: section_choice_based$1,
          section_date_time: section_date_time$1,
          section_file_based: section_file_based$1,
          section_info: section_info$1,
          section_other: section_other$1,
          section_sections: section_sections$1,
          section_text_based: section_text_based$1,
          setup: setup$1,
          show_always: show_always$1,
          show_description: show_description$1,
          show_hide: show_hide$1,
          show_if: show_if$1,
          show_question_hint: show_question_hint$1,
          show_word_count: show_word_count$1,
          skip_invalid: skip_invalid$1,
          skip_logic: skip_logic$1,
          skip_to: skip_to$1,
          sort_by_label: sort_by_label$1,
          spacing: spacing,
          standard_error: standard_error$1,
          submit: submit$1,
          survey: survey,
          text_field_size: text_field_size$1,
          text_style: text_style$1,
          textarea_lines: textarea_lines$1,
          theme: theme,
          theme_header: theme_header$1,
          theme_text: theme_text$1,
          to_group_end: to_group_end$1,
          upload_image: upload_image$1,
          upload_video: upload_video$1,
          uploading_image: uploading_image$1,
          uploading_video: uploading_video$1,
          upper_bound_hint: upper_bound_hint$1,
          validation: validation$1,
          validation_between_subtitle: validation_between_subtitle$1,
          validation_between_title: validation_between_title$1,
          validation_contains_subtitle: validation_contains_subtitle$1,
          validation_contains_title: validation_contains_title$1,
          validation_equals_subtitle: validation_equals_subtitle$1,
          validation_equals_title: validation_equals_title$1,
          validation_file_types_title: validation_file_types_title$1,
          validation_gt_subtitle: validation_gt_subtitle$1,
          validation_gt_title: validation_gt_title$1,
          validation_gte_subtitle: validation_gte_subtitle$1,
          validation_gte_title: validation_gte_title$1,
          validation_lt_subtitle: validation_lt_subtitle$1,
          validation_lt_title: validation_lt_title$1,
          validation_lte_subtitle: validation_lte_subtitle$1,
          validation_lte_title: validation_lte_title$1,
          validation_max_char_length_subtitle: validation_max_char_length_subtitle$1,
          validation_max_char_length_title: validation_max_char_length_title$1,
          validation_max_file_size_subtitle: validation_max_file_size_subtitle$1,
          validation_max_file_size_title: validation_max_file_size_title$1,
          validation_max_option_count_subtitle: validation_max_option_count_subtitle$1,
          validation_max_option_count_title: validation_max_option_count_title$1,
          validation_max_ranking_count_subtitle: validation_max_ranking_count_subtitle$1,
          validation_max_ranking_count_title: validation_max_ranking_count_title$1,
          validation_max_word_count_subtitle: validation_max_word_count_subtitle$1,
          validation_max_word_count_title: validation_max_word_count_title$1,
          validation_min_char_length_subtitle: validation_min_char_length_subtitle$1,
          validation_min_char_length_title: validation_min_char_length_title$1,
          validation_min_option_count_subtitle: validation_min_option_count_subtitle$1,
          validation_min_option_count_title: validation_min_option_count_title$1,
          validation_min_ranking_count_subtitle: validation_min_ranking_count_subtitle$1,
          validation_min_ranking_count_title: validation_min_ranking_count_title$1,
          validation_min_word_count_subtitle: validation_min_word_count_subtitle$1,
          validation_min_word_count_title: validation_min_word_count_title$1,
          validation_not_between_subtitle: validation_not_between_subtitle$1,
          validation_not_between_title: validation_not_between_title$1,
          validation_not_contains_subtitle: validation_not_contains_subtitle$1,
          validation_not_contains_title: validation_not_contains_title$1,
          validation_not_equal_subtitle: validation_not_equal_subtitle$1,
          validation_not_equal_title: validation_not_equal_title$1,
          validation_one_response_per_col_title: validation_one_response_per_col_title$1,
          validation_option_count_subtitle: validation_option_count_subtitle$1,
          validation_option_count_title: validation_option_count_title$1,
          validation_pattern_email_title: validation_pattern_email_title$1,
          validation_pattern_subtitle: validation_pattern_subtitle$1,
          validation_pattern_title: validation_pattern_title$1,
          validation_ranking_count_subtitle: validation_ranking_count_subtitle$1,
          validation_ranking_count_title: validation_ranking_count_title$1,
          validation_required_title: validation_required_title$1,
          video_options: video_options$1,
          wrong_logic_err: wrong_logic_err$1
        };
        const add_column = "إضافة عمود";
        const add_new_random_rule = "أضف قاعدة عشوائية جديدة";
        const add_option = "إضافة خيار";
        const add_other = "أضف \"أخرى\"";
        const add_priority_rule = "أضف قاعدة الأولوية";
        const add_random_rule = "أضف قاعدة عشوائية";
        const add_row = "إضافة صف";
        const all_in_one = "الكل في واحد";
        const allow_incomplete = "السماح بعدم الاكتمال/الاستئناف";
        const allow_jump = "السماح بالانتقال السريع/إظهار فهرس الاستطلاع";
        const allow_previous = "السماح بالسابق";
        const are_you_sure = "هل أنت متأكد؟";
        const as_is = "كما هو";
        const audio_only = "الصوت فقط";
        const background_color = "لون الخلفية";
        const cancel$3 = "إلغاء";
        const choose_image = "اختر صورة";
        const columns = "الأعمدة";
        const columns_number = "رقم الأعمدة";
        const columns_order = "ترتيب الأعمدة";
        const columns_priority = "أولوية الأعمدة";
        const component_barcode_title = "ماسح الباركود/QrCode";
        const component_date_time_title = "التاريخ والوقت";
        const component_date_title = "التاريخ";
        const component_email_title = "البريد الإلكتروني";
        const component_end_title = "المجموعة النهائية";
        const component_file_upload_title = "رفع الملف";
        const component_group_title = "المجموعة";
        const component_icon_mcq_title = "اختيار أيقونات متعددة";
        const component_icon_scq_title = "اختيار رمز واحد";
        const component_image_display_title = "عرض الصورة";
        const component_image_mcq_title = "اختيار صور متعددة";
        const component_image_ranking_title = "تصنيف الصور";
        const component_image_scq_title = "اختيار صورة واحدة";
        const component_mcq_title = "الاختيار من متعدد";
        const component_nps_title = "NPS";
        const component_number_title = "الرقم";
        const component_paragraph_title = "نص طويل";
        const component_photo_capture_title = "التقاط صورة";
        const component_ranking_title = "التصنيف";
        const component_scq_array_title = "مصفوفة الاختيار الفردي";
        const component_scq_icon_array_title = "مصفوفة أيقونات الاختيار الفردي";
        const component_scq_title = "اختيار واحد";
        const component_signature_title = "التوقيع";
        const component_text_display_title = "عرض النص";
        const component_text_title = "نص قصير";
        const component_time_title = "الوقت";
        const component_video_capture_title = "التقاط فيديو";
        const component_video_display_title = "عرض الفيديو";
        const component_welcome_title = "مجموعة الترحيب";
        const condition_to_hide = "شرط للإخفاء";
        const condition_to_show = "شرط العرض";
        const content_editor_placeholder_description = "الوصف";
        const content_editor_placeholder_option = "خيار";
        const content_editor_placeholder_title = "العنوان";
        const custom_error = "خطأ مخصص";
        const custom_random = "مخصص";
        const date_format = "تنسيق التاريخ";
        const decimal_separator = "الفاصل العشري";
        const no_decimals_allowed = "غير مسموح بالكسور العشرية";
        const edit_priority_rule = "تحرير قاعدة الأولوية";
        const edit_random_rule = "تحرير القاعدة العشوائية";
        const empty_group_hint = "ضع سؤالاً هنا";
        const empty_survey_hint = "ضع مجموعة هنا";
        const err_duplicate_code = "يحتوي {{component_name}} هذا على رمز مكرر";
        const err_duplicate_priority_group_items = "هذه العناصر موجودة في أكثر من مجموعة ذات أولوية: <strong>{{iterms}}</strong>";
        const err_duplicate_random_group_items = "هذه العناصر موجودة في أكثر من مجموعة عشوائية: <strong>{{items}}</strong>";
        const err_empty_parent = "لا يمكن أن يكون هذا {{component_name}} فارغًا, يرجى إضافة {{child_name}} واحد على الأقل";
        const err_misplaced_end_group = "يجب أن تكون مجموعة النهاية هي المجموعة الأخيرة دائمًا";
        const err_misplaced_welcome_group = "يجب أن تكون مجموعة الترحيب هي المجموعة الأولى دائمًا";
        const err_no_end_group = "يجب أن تكون هناك مجموعة نهاية صالحة";
        const err_priority = "خطأ في تعليمات المجموعة ذات الأولوية";
        const err_priority_group_item_not_child = "هذه العناصر إما محذوفة أو تحتوي على أخطاء وبالتالي لا يمكن أن تكون في المجموعة ذات الأولوية: <strong>{{items}}</strong>";
        const err_priority_limit_mismatch = "في إحدى المجموعات ذات الأولوية, يكون الحد أكبر من أو يساوي عدد العناصر";
        const err_random = "خطأ في تعليمات المجموعة العشوائية";
        const err_random_group_item_not_child = "هذه العناصر إما محذوفة أو تحتوي على أخطاء وبالتالي لا يمكن أن تكون في المجموعة العشوائية: <strong>{{items}}</strong>";
        const err_reference = "خطأ: إدخال قيمة مفقودة أو سؤال لاحق: <strong>{{codes}}</strong>, باللغة: <strong>{{lang}}</strong>";
        const err_relevance = "مشكلة في إظهار/إخفاء المنطق";
        const err_skip = "مشكلة في أحد تعليمات التخطي";
        const err_value_in_end_group = "لا يمكن أن يكون لديك أسئلة تلتقط مدخلات المستخدم في المجموعة النهائية";
        const file_type = "نوع الملف";
        const file_types = {
          "صوت": "صوت",
          "مستند": "مستند",
          "صورة": "صورة",
          pdf: "بي دي إف",
          "عرض": "عرض تقديمي",
          "جدول البيانات": "جدول البيانات",
          "فيديو": "فيديو"
        };
        const flip_order = "ترتيب الوجه";
        const foreground_color = "لون المقدمة";
        const fullday_format = "تنسيق Fullday";
        const group_by_group = "التجميع حسب المجموعة";
        const group_title = "عنوان المجموعة";
        const groups_order = "ترتيب المجموعات";
        const groups_priority = "أولوية المجموعات";
        const hide_always = "الإخفاء دائمًا";
        const hide_if = "إخفاء إذا";
        const hide_text = "إخفاء النص";
        const highlight_color = "لون التمييز";
        const if_answer_is = "إذا كانت الإجابة <strong>{{code}}</strong>";
        const image_aspect_ratio = "نسبة أبعاد الصورة";
        const image_icon_size = "حجم الأيقونة بالبكسل";
        const image_height = "ارتفاع الصورة";
        const invalid_skip_destination_err = "<strong>{{code}}</strong> ليس وجهة تخطي صالحة...";
        const loop_video = "فيديو متكرر";
        const lower_bound_hint = "تلميح الحد الأدنى";
        const max_date = "التاريخ الأقصى";
        const min_date = "التاريخ الأدنى";
        const navigation_mode = "وضع التنقل";
        const navigation_options = "خيارات التنقل";
        const no_condition = "لا يوجد شرط";
        const no_logic_err = "❌ بدون المنطق, ستتم إعادة ضبط هذا على <strong>العرض دائمًا</strong>";
        const no_priority = "لا شيء";
        const offline_only = "غير متصل";
        const ok = "حسنا";
        const options_order = "ترتيب الخيارات";
        const options_priority = "أولوية الخيارات";
        const or = "او";
        const order_priority = "الترتيب والأولوية";
        const prioritise_columns = "ترتيب الأعمدة حسب الأولوية";
        const prioritise_groups = "ترتيب المجموعات ذات الأولوية";
        const prioritise_options = "خيارات الأولوية";
        const prioritise_questions = "الأسئلة ذات الأولوية";
        const prioritise_rows = "ترتيب الصفوف ذات الأولوية";
        const priority_show = "عرض";
        const priority_show_limit_from_count = "عرض {{limit}} من {{count}}";
        const proceed_as_usual = "تابع كالمعتاد";
        const question_by_question = "سؤال بسؤال";
        const question_title = "عنوان السؤال";
        const questions_order = "ترتيب الأسئلة";
        const questions_priority = "أولوية الأسئلة";
        const random_order = "ترتيب عشوائي";
        const replace_image = "استبدال الصورة";
        const replace_video = "استبدال الفيديو";
        const rows_order = "ترتيب الصفوف";
        const rows_priority = "أولوية الصفوف";
        const section_choice_based = "معتمد على الاختيار";
        const section_date_time = "التاريخ/الوقت";
        const section_file_based = "يعتمد على الملف";
        const section_info = "معلومات";
        const section_other = "أخرى";
        const section_sections = "الأقسام";
        const section_text_based = "معتمد على النص";
        const show_always = "العرض دائمًا";
        const show_description = "أظهر الوصف";
        const show_hide = "إظهار/إخفاء";
        const show_if = "أظهر إذا";
        const show_question_hint = "أظهر تلميح السؤال";
        const show_word_count = "إظهار عدد الكلمات";
        const skip_invalid = "فرض التحقق عند الإرسال فقط";
        const skip_logic = "تخطي المنطق";
        const skip_to = "انتقل إلى";
        const sort_by_label = "الفرز حسب التسمية";
        const standard_error = "خطأ قياسي";
        const submit = "إرسال";
        const text_field_size = "حجم حقل النص";
        const text_style = "نمط النص";
        const textarea_lines = "خطوط منطقة النص";
        const theme_header = "الرأس";
        const theme_text = "نص";
        const to_group_end = "إلى نهاية المجموعة";
        const upload_image = "رفع الصورة";
        const upload_video = "تحميل فيديو";
        const uploading_image = "جاري تحميل الصورة";
        const uploading_video = "جاري تحميل الفيديو";
        const upper_bound_hint = "تلميح الحد العلوي";
        const validation = "التحقق من الصحة";
        const validation_between_subtitle = "بين:";
        const validation_between_title = "القيمة بين";
        const validation_contains_subtitle = "يحتوي على:";
        const validation_contains_title = "يحتوي على";
        const validation_equals_subtitle = "يساوي:";
        const validation_equals_title = "القيمة تساوي";
        const validation_file_types_title = "أنواع الملفات";
        const validation_gt_subtitle = "أكبر من:";
        const validation_gt_title = "القيمة أكبر من";
        const validation_gte_subtitle = "أكبر من أو يساوي:";
        const validation_gte_title = "القيمة أكبر من أو تساوي";
        const validation_lt_subtitle = "أقل من:";
        const validation_lt_title = "القيمة أقل من";
        const validation_lte_subtitle = "أقل من أو يساوي:";
        const validation_lte_title = "القيمة أقل من أو تساوي";
        const validation_max_char_length_subtitle = "الطول الأقصى:";
        const validation_max_char_length_title = "الحد الأقصى لطول الحرف";
        const validation_max_file_size_subtitle = "الحد الأقصى لحجم الملف (كيلو بايت)";
        const validation_max_file_size_title = "الحد الأقصى لحجم الملف";
        const validation_max_option_count_subtitle = "العدد الأقصى:";
        const validation_max_option_count_title = "الحد الأقصى لعدد الخيارات";
        const validation_max_ranking_count_subtitle = "العدد الأقصى";
        const validation_max_ranking_count_title = "الحد الأقصى لعدد التصنيفات";
        const validation_max_word_count_subtitle = "العدد الأقصى:";
        const validation_max_word_count_title = "الحد الأقصى لعدد الكلمات";
        const validation_min_char_length_subtitle = "الحد الأدنى للطول:";
        const validation_min_char_length_title = "الحد الأدنى لطول الحرف";
        const validation_min_option_count_subtitle = "العدد الأدنى:";
        const validation_min_option_count_title = "الحد الأدنى لعدد الخيارات";
        const validation_min_ranking_count_subtitle = "العدد الأدنى";
        const validation_min_ranking_count_title = "الحد الأدنى لعدد التصنيفات";
        const validation_min_word_count_subtitle = "العدد الأدنى:";
        const validation_min_word_count_title = "الحد الأدنى لعدد الكلمات";
        const validation_not_between_subtitle = "ليس بين:";
        const validation_not_between_title = "القيمة ليست بين";
        const validation_not_contains_subtitle = "لا يحتوي على:";
        const validation_not_contains_title = "لا يحتوي على";
        const validation_not_equal_subtitle = "لا يساوي:";
        const validation_not_equal_title = "القيمة لا تساوي";
        const validation_one_response_per_col_title = "استجابة واحدة لكل عمود";
        const validation_option_count_subtitle = "العدد:";
        const validation_option_count_title = "العدد الدقيق للخيارات";
        const validation_pattern_email_title = "نموذج البريد الإلكتروني";
        const validation_pattern_subtitle = "النمط:";
        const validation_pattern_title = "يطابق نمط التعبير العادي";
        const validation_ranking_count_subtitle = "العدد:";
        const validation_ranking_count_title = "العدد المصنف بالضبط";
        const validation_required_title = "مطلوب";
        const video_options = "خيارات الفيديو";
        const wrong_logic_err = "❌ حدث خطأ في المنطق ولذلك تمت إعادة ضبطه على <strong>العرض دائمًا</strong>";
        const design_ar = {
          add_column: add_column,
          add_new_random_rule: add_new_random_rule,
          add_option: add_option,
          add_other: add_other,
          add_priority_rule: add_priority_rule,
          add_random_rule: add_random_rule,
          add_row: add_row,
          all_in_one: all_in_one,
          allow_incomplete: allow_incomplete,
          allow_jump: allow_jump,
          allow_previous: allow_previous,
          are_you_sure: are_you_sure,
          as_is: as_is,
          audio_only: audio_only,
          background_color: background_color,
          cancel: cancel$3,
          choose_image: choose_image,
          columns: columns,
          columns_number: columns_number,
          columns_order: columns_order,
          columns_priority: columns_priority,
          component_barcode_title: component_barcode_title,
          component_date_time_title: component_date_time_title,
          component_date_title: component_date_title,
          component_email_title: component_email_title,
          component_end_title: component_end_title,
          component_file_upload_title: component_file_upload_title,
          component_group_title: component_group_title,
          component_icon_mcq_title: component_icon_mcq_title,
          component_icon_scq_title: component_icon_scq_title,
          component_image_display_title: component_image_display_title,
          component_image_mcq_title: component_image_mcq_title,
          component_image_ranking_title: component_image_ranking_title,
          component_image_scq_title: component_image_scq_title,
          component_mcq_title: component_mcq_title,
          component_nps_title: component_nps_title,
          component_number_title: component_number_title,
          component_paragraph_title: component_paragraph_title,
          component_photo_capture_title: component_photo_capture_title,
          component_ranking_title: component_ranking_title,
          component_scq_array_title: component_scq_array_title,
          component_scq_icon_array_title: component_scq_icon_array_title,
          component_scq_title: component_scq_title,
          component_signature_title: component_signature_title,
          component_text_display_title: component_text_display_title,
          component_text_title: component_text_title,
          component_time_title: component_time_title,
          component_video_capture_title: component_video_capture_title,
          component_video_display_title: component_video_display_title,
          component_welcome_title: component_welcome_title,
          condition_to_hide: condition_to_hide,
          condition_to_show: condition_to_show,
          content_editor_placeholder_description: content_editor_placeholder_description,
          content_editor_placeholder_option: content_editor_placeholder_option,
          content_editor_placeholder_title: content_editor_placeholder_title,
          custom_error: custom_error,
          custom_random: custom_random,
          date_format: date_format,
          decimal_separator: decimal_separator,
          no_decimals_allowed: no_decimals_allowed,
          "عرض": "عرض",
          edit_priority_rule: edit_priority_rule,
          edit_random_rule: edit_random_rule,
          empty_group_hint: empty_group_hint,
          empty_survey_hint: empty_survey_hint,
          err_duplicate_code: err_duplicate_code,
          err_duplicate_priority_group_items: err_duplicate_priority_group_items,
          err_duplicate_random_group_items: err_duplicate_random_group_items,
          err_empty_parent: err_empty_parent,
          err_misplaced_end_group: err_misplaced_end_group,
          err_misplaced_welcome_group: err_misplaced_welcome_group,
          err_no_end_group: err_no_end_group,
          err_priority: err_priority,
          err_priority_group_item_not_child: err_priority_group_item_not_child,
          err_priority_limit_mismatch: err_priority_limit_mismatch,
          err_random: err_random,
          err_random_group_item_not_child: err_random_group_item_not_child,
          err_reference: err_reference,
          err_relevance: err_relevance,
          err_skip: err_skip,
          err_value_in_end_group: err_value_in_end_group,
          file_type: file_type,
          file_types: file_types,
          flip_order: flip_order,
          foreground_color: foreground_color,
          fullday_format: fullday_format,
          "المجموعة": "المجموعة",
          group_by_group: group_by_group,
          group_title: group_title,
          groups_order: groups_order,
          groups_priority: groups_priority,
          hide_always: hide_always,
          hide_if: hide_if,
          hide_text: hide_text,
          highlight_color: highlight_color,
          if_answer_is: if_answer_is,
          image_aspect_ratio: image_aspect_ratio,
          image_icon_size: image_icon_size,
          image_height: image_height,
          invalid_skip_destination_err: invalid_skip_destination_err,
          loop_video: loop_video,
          lower_bound_hint: lower_bound_hint,
          max_date: max_date,
          min_date: min_date,
          navigation_mode: navigation_mode,
          navigation_options: navigation_options,
          no_condition: no_condition,
          no_logic_err: no_logic_err,
          no_priority: no_priority,
          offline_only: offline_only,
          ok: ok,
          "الخيار": "الخيار",
          options_order: options_order,
          options_priority: options_priority,
          or: or,
          order_priority: order_priority,
          "تحديد الأولويات": "تحديد الأولويات",
          prioritise_columns: prioritise_columns,
          prioritise_groups: prioritise_groups,
          prioritise_options: prioritise_options,
          prioritise_questions: prioritise_questions,
          prioritise_rows: prioritise_rows,
          priority_show: priority_show,
          priority_show_limit_from_count: priority_show_limit_from_count,
          proceed_as_usual: proceed_as_usual,
          "سؤال": "سؤال",
          question_by_question: question_by_question,
          question_title: question_title,
          questions_order: questions_order,
          questions_priority: questions_priority,
          random_order: random_order,
          replace_image: replace_image,
          replace_video: replace_video,
          "صفوف": "صفوف",
          rows_order: rows_order,
          rows_priority: rows_priority,
          section_choice_based: section_choice_based,
          section_date_time: section_date_time,
          section_file_based: section_file_based,
          section_info: section_info,
          section_other: section_other,
          section_sections: section_sections,
          section_text_based: section_text_based,
          "الإعداد": "الإعداد",
          show_always: show_always,
          show_description: show_description,
          show_hide: show_hide,
          show_if: show_if,
          show_question_hint: show_question_hint,
          show_word_count: show_word_count,
          skip_invalid: skip_invalid,
          skip_logic: skip_logic,
          skip_to: skip_to,
          sort_by_label: sort_by_label,
          "تباعد": "تباعد",
          standard_error: standard_error,
          submit: submit,
          "استطلاع": "استطلاع",
          text_field_size: text_field_size,
          text_style: text_style,
          textarea_lines: textarea_lines,
          "الموضوع": "الموضوع",
          theme_header: theme_header,
          theme_text: theme_text,
          to_group_end: to_group_end,
          upload_image: upload_image,
          upload_video: upload_video,
          uploading_image: uploading_image,
          uploading_video: uploading_video,
          upper_bound_hint: upper_bound_hint,
          validation: validation,
          validation_between_subtitle: validation_between_subtitle,
          validation_between_title: validation_between_title,
          validation_contains_subtitle: validation_contains_subtitle,
          validation_contains_title: validation_contains_title,
          validation_equals_subtitle: validation_equals_subtitle,
          validation_equals_title: validation_equals_title,
          validation_file_types_title: validation_file_types_title,
          validation_gt_subtitle: validation_gt_subtitle,
          validation_gt_title: validation_gt_title,
          validation_gte_subtitle: validation_gte_subtitle,
          validation_gte_title: validation_gte_title,
          validation_lt_subtitle: validation_lt_subtitle,
          validation_lt_title: validation_lt_title,
          validation_lte_subtitle: validation_lte_subtitle,
          validation_lte_title: validation_lte_title,
          validation_max_char_length_subtitle: validation_max_char_length_subtitle,
          validation_max_char_length_title: validation_max_char_length_title,
          validation_max_file_size_subtitle: validation_max_file_size_subtitle,
          validation_max_file_size_title: validation_max_file_size_title,
          validation_max_option_count_subtitle: validation_max_option_count_subtitle,
          validation_max_option_count_title: validation_max_option_count_title,
          validation_max_ranking_count_subtitle: validation_max_ranking_count_subtitle,
          validation_max_ranking_count_title: validation_max_ranking_count_title,
          validation_max_word_count_subtitle: validation_max_word_count_subtitle,
          validation_max_word_count_title: validation_max_word_count_title,
          validation_min_char_length_subtitle: validation_min_char_length_subtitle,
          validation_min_char_length_title: validation_min_char_length_title,
          validation_min_option_count_subtitle: validation_min_option_count_subtitle,
          validation_min_option_count_title: validation_min_option_count_title,
          validation_min_ranking_count_subtitle: validation_min_ranking_count_subtitle,
          validation_min_ranking_count_title: validation_min_ranking_count_title,
          validation_min_word_count_subtitle: validation_min_word_count_subtitle,
          validation_min_word_count_title: validation_min_word_count_title,
          validation_not_between_subtitle: validation_not_between_subtitle,
          validation_not_between_title: validation_not_between_title,
          validation_not_contains_subtitle: validation_not_contains_subtitle,
          validation_not_contains_title: validation_not_contains_title,
          validation_not_equal_subtitle: validation_not_equal_subtitle,
          validation_not_equal_title: validation_not_equal_title,
          validation_one_response_per_col_title: validation_one_response_per_col_title,
          validation_option_count_subtitle: validation_option_count_subtitle,
          validation_option_count_title: validation_option_count_title,
          validation_pattern_email_title: validation_pattern_email_title,
          validation_pattern_subtitle: validation_pattern_subtitle,
          validation_pattern_title: validation_pattern_title,
          validation_ranking_count_subtitle: validation_ranking_count_subtitle,
          validation_ranking_count_title: validation_ranking_count_title,
          validation_required_title: validation_required_title,
          video_options: video_options,
          wrong_logic_err: wrong_logic_err
        };
        const cancel$2 = "Abbrechen";
        const choose_file$2 = "Datei auswählen";
        const finish$2 = "Fertig";
        const lang$2 = "Sprache";
        const next$5 = "Weiter";
        const previous$2 = "Zuruck";
        const processed_errors$5 = {
          survey_closed: "Diese Umfrage ist nicht aktiv",
          survey_design_error: "Fehler im Umfragedesign... Überprüfen Sie das Umfragedesign",
          survey_expired: "Diese Umfrage ist abgelaufen",
          survey_not_active: "Diese Umfrage ist nicht aktiv",
          survey_scheduled: "Diese Umfrage soll in der Zukunft beginnen"
        };
        const upload$2 = "Upload";
        const uploading$2 = "Wird hochgeladen";
        const validation_between$2 = "Muss zwischen {{lower_limit}} und {{upper_limit}} liegen";
        const validation_contains$2 = "Muss \"{{contains}}\" enthalten";
        const validation_equals$2 = "Muss {{number}} sein";
        const validation_file_types$2 = "Unbekannter Dateityp";
        const validation_gt$2 = "Muss größer als {{number}} sein";
        const validation_gte$2 = "Muss größer oder gleich {{number}} sein";
        const validation_lt$2 = "Muss kleiner als {{number}} sein";
        const validation_lte$2 = "Muss kleiner oder gleich {{number}} sein";
        const validation_max_char_length$2 = "Muss kleiner als {{max_length}} Zeichen sein";
        const validation_max_file_size$2 = "Die Dateigröße muss kleiner als {{max_size}} KB sein";
        const validation_max_option_count$2 = "Bitte höchstens {{max_count}} Optionen auswählen";
        const validation_max_ranking_count$2 = "Bitte höchstens {{max_count}} Optionen auswählen";
        const validation_max_word_count$2 = "Muss kleiner als {{max_count}} Wörter sein";
        const validation_min_char_length$2 = "Muss größer als {{min_length}} Zeichen sein";
        const validation_min_option_count$2 = "Bitte mindestens {{min_count}} Optionen auswählen";
        const validation_min_ranking_count$2 = "Bitte mindestens {{min_count}} Optionen auswählen";
        const validation_min_word_count$2 = "Muss größer als {{min_count}} Wörter sein";
        const validation_not_between$2 = "muss kleiner als {{lower_limit}} oder größer als {{upper_limit}} sein";
        const validation_not_contains$2 = "Darf nicht \"{{not_contains}}\" enthalten";
        const validation_not_equal$2 = "Darf nicht {{number}} sein";
        const validation_one_response_per_col$2 = "Bitte wählen Sie nicht mehr als eine Antwort pro Spalte aus";
        const validation_option_count$2 = "Bitte wählen Sie höchstens {{count}} Optionen aus";
        const validation_pattern$2 = "Muster muss übereinstimmen";
        const validation_pattern_email$2 = "Sollte wie eine E-Mail aussehen";
        const validation_ranking_count$2 = "Bitte wählen Sie höchstens {{count}} Optionen aus";
        const validation_required$2 = "Dies ist erforderlich";
        const word_count$2 = "Wortzahl: {{count}}";
        const run_de = {
          cancel: cancel$2,
          choose_file: choose_file$2,
          finish: finish$2,
          lang: lang$2,
          next: next$5,
          previous: previous$2,
          processed_errors: processed_errors$5,
          upload: upload$2,
          uploading: uploading$2,
          validation_between: validation_between$2,
          validation_contains: validation_contains$2,
          validation_equals: validation_equals$2,
          validation_file_types: validation_file_types$2,
          validation_gt: validation_gt$2,
          validation_gte: validation_gte$2,
          validation_lt: validation_lt$2,
          validation_lte: validation_lte$2,
          validation_max_char_length: validation_max_char_length$2,
          validation_max_file_size: validation_max_file_size$2,
          validation_max_option_count: validation_max_option_count$2,
          validation_max_ranking_count: validation_max_ranking_count$2,
          validation_max_word_count: validation_max_word_count$2,
          validation_min_char_length: validation_min_char_length$2,
          validation_min_option_count: validation_min_option_count$2,
          validation_min_ranking_count: validation_min_ranking_count$2,
          validation_min_word_count: validation_min_word_count$2,
          validation_not_between: validation_not_between$2,
          validation_not_contains: validation_not_contains$2,
          validation_not_equal: validation_not_equal$2,
          validation_one_response_per_col: validation_one_response_per_col$2,
          validation_option_count: validation_option_count$2,
          validation_pattern: validation_pattern$2,
          validation_pattern_email: validation_pattern_email$2,
          validation_ranking_count: validation_ranking_count$2,
          validation_required: validation_required$2,
          word_count: word_count$2
        };
        const cancel$1 = "Cancel";
        const choose_file$1 = "Choose File";
        const finish$1 = "Submit";
        const lang$1 = "Language";
        const next$4 = "Next";
        const previous$1 = "Previous";
        const processed_errors$4 = {
          survey_closed: "This survey is not active",
          survey_design_error: "Survey Design Error... Check Survey Design",
          survey_expired: "This survey is expired",
          survey_not_active: "This survey is not active",
          survey_scheduled: "This survey is scheduled to start in the future"
        };
        const upload$1 = "Upload";
        const uploading$1 = "Uploading";
        const validation_between$1 = "Must be between {{lower_limit}} and {{upper_limit}}";
        const validation_contains$1 = "Must contain \"{{contains}}\"";
        const validation_equals$1 = "Must be {{number}}";
        const validation_file_types$1 = "Unrecognized file type";
        const validation_gt$1 = "Must be greater than {{number}}";
        const validation_gte$1 = "Must be greater than or equals {{number}}";
        const validation_lt$1 = "Must be less than {{number}}";
        const validation_lte$1 = "Must be less than or equals {{number}}";
        const validation_max_char_length$1 = "Must be smaller than {{max_length}} chars";
        const validation_max_file_size$1 = "File size must be smaller than {{max_size}} KB";
        const validation_max_option_count$1 = "Please choose at most {{max_count}} options";
        const validation_max_ranking_count$1 = "Please rank at most {{max_count}} options";
        const validation_max_word_count$1 = "Must be less than {{max_count}} words";
        const validation_min_char_length$1 = "Must be larger than {{min_length}} chars";
        const validation_min_option_count$1 = "Please choose at least {{min_count}} options";
        const validation_min_ranking_count$1 = "Please rank at least {{min_count}} options";
        const validation_min_word_count$1 = "Must be more than {{min_count}} words";
        const validation_not_between$1 = "Must be less than {{lower_limit}} or higher than {{upper_limit}}";
        const validation_not_contains$1 = "Must not contain \"{{not_contains}}\"";
        const validation_not_equal$1 = "Must not be {{number}}";
        const validation_one_response_per_col$1 = "Please don't select more than one response per column";
        const validation_option_count$1 = "Please choose at most {{count}} options";
        const validation_pattern$1 = "Must match pattern";
        const validation_pattern_email$1 = "Should look like an email";
        const validation_ranking_count$1 = "Please rank at most {{count}} options";
        const validation_required$1 = "This is required";
        const word_count$1 = "Word count: {{count}}";
        const run_en = {
          cancel: cancel$1,
          choose_file: choose_file$1,
          finish: finish$1,
          lang: lang$1,
          next: next$4,
          previous: previous$1,
          processed_errors: processed_errors$4,
          upload: upload$1,
          uploading: uploading$1,
          validation_between: validation_between$1,
          validation_contains: validation_contains$1,
          validation_equals: validation_equals$1,
          validation_file_types: validation_file_types$1,
          validation_gt: validation_gt$1,
          validation_gte: validation_gte$1,
          validation_lt: validation_lt$1,
          validation_lte: validation_lte$1,
          validation_max_char_length: validation_max_char_length$1,
          validation_max_file_size: validation_max_file_size$1,
          validation_max_option_count: validation_max_option_count$1,
          validation_max_ranking_count: validation_max_ranking_count$1,
          validation_max_word_count: validation_max_word_count$1,
          validation_min_char_length: validation_min_char_length$1,
          validation_min_option_count: validation_min_option_count$1,
          validation_min_ranking_count: validation_min_ranking_count$1,
          validation_min_word_count: validation_min_word_count$1,
          validation_not_between: validation_not_between$1,
          validation_not_contains: validation_not_contains$1,
          validation_not_equal: validation_not_equal$1,
          validation_one_response_per_col: validation_one_response_per_col$1,
          validation_option_count: validation_option_count$1,
          validation_pattern: validation_pattern$1,
          validation_pattern_email: validation_pattern_email$1,
          validation_ranking_count: validation_ranking_count$1,
          validation_required: validation_required$1,
          word_count: word_count$1
        };
        const cancel = "إلغاء";
        const choose_file = "اختر ملفًا";
        const finish = "إرسال";
        const lang = "اللغة";
        const next$3 = "التالي";
        const previous = "السابق";
        const processed_errors$3 = {
          survey_closed: "هذا الاستطلاع غير نشط",
          survey_design_error: "خطأ في تصميم الاستبيان ... تحقق من تصميم الاستبيان",
          survey_expired: "هذا الاستطلاع منتهي الصلاحية",
          survey_not_active: "هذا الاستطلاع غير نشط",
          survey_scheduled: "من المقرر أن يبدأ هذا الاستطلاع في المستقبل"
        };
        const upload = "تحميل";
        const uploading = "جاري التحميل";
        const validation_between = "يجب أن يكون بين {{lower_limit}} و {{upper_limit}}";
        const validation_contains = "يجب أن يحتوي على  \"{{contains}}\"";
        const validation_equals = "يجب أن يكون {{number}}";
        const validation_file_types = "نوع ملف غير معروف";
        const validation_gt = "يجب أن يكون أكبر من {{number}}";
        const validation_gte = "يجب أن يكون أكبر من أو يساوي {{number}}";
        const validation_lt = "يجب أن يكون أقل من {{number}}";
        const validation_lte = "يجب أن يكون أقل من أو يساوي {{number}}";
        const validation_max_char_length = "يجب أن يكون أصغر من {{max_length}} حرفًا";
        const validation_max_file_size = "يجب أن يكون حجم الملف أصغر من {{max_size}} كيلوبايت";
        const validation_max_option_count = "يُرجى اختيار {{max_count}} من الخيارات على الأكثر";
        const validation_max_ranking_count = "يُرجى اختيار {{max_count}} من الخيارات على الأكثر";
        const validation_max_word_count = "يجب أن يكون أقل من {{max_count}} كلمة";
        const validation_min_char_length = "يجب أن يكون أكبر من {{min_length}} حرفًا";
        const validation_min_option_count = "يُرجى اختيار {{min_count}} خيارات على الأقل";
        const validation_min_ranking_count = "يُرجى اختيار {{min_count}} خيارات على الأقل";
        const validation_min_word_count = "يجب أن يكون أكثر من {{min_count}} كلمة";
        const validation_not_between = "يجب أن يكون أقل من {{lower_limit}} أو أعلى من {{upper_limit}}";
        const validation_not_contains = "يجب ألا يحتوي على  \"{{not_contains}}\"";
        const validation_not_equal = "يجب ألا يكون {{number}}";
        const validation_one_response_per_col = "يُرجى عدم تحديد أكثر من إجابة واحدة لكل عمود";
        const validation_option_count = "الرجاء تحديد {{count}} على الأكثر من الخيارات";
        const validation_pattern = "يجب أن يتطابق مع النمط";
        const validation_pattern_email = "يجب أن تبدو كرسالة بريد إلكتروني";
        const validation_ranking_count = "الرجاء تحديد {{count}} على الأكثر من الخيارات";
        const validation_required = "هذا مطلوب";
        const word_count = "عدد الكلمات: {{count}}";
        const run_ar = {
          cancel: cancel,
          choose_file: choose_file,
          finish: finish,
          lang: lang,
          next: next$3,
          previous: previous,
          processed_errors: processed_errors$3,
          upload: upload,
          uploading: uploading,
          validation_between: validation_between,
          validation_contains: validation_contains,
          validation_equals: validation_equals,
          validation_file_types: validation_file_types,
          validation_gt: validation_gt,
          validation_gte: validation_gte,
          validation_lt: validation_lt,
          validation_lte: validation_lte,
          validation_max_char_length: validation_max_char_length,
          validation_max_file_size: validation_max_file_size,
          validation_max_option_count: validation_max_option_count,
          validation_max_ranking_count: validation_max_ranking_count,
          validation_max_word_count: validation_max_word_count,
          validation_min_char_length: validation_min_char_length,
          validation_min_option_count: validation_min_option_count,
          validation_min_ranking_count: validation_min_ranking_count,
          validation_min_word_count: validation_min_word_count,
          validation_not_between: validation_not_between,
          validation_not_contains: validation_not_contains,
          validation_not_equal: validation_not_equal,
          validation_one_response_per_col: validation_one_response_per_col,
          validation_option_count: validation_option_count,
          validation_pattern: validation_pattern,
          validation_pattern_email: validation_pattern_email,
          validation_ranking_count: validation_ranking_count,
          validation_required: validation_required,
          word_count: word_count
        };
        const action_btn$2 = {
          add: "Hinzufügen",
          add_permission: "Berechtigung hinzufügen",
          add_user: "Benutzer hinzufügen",
          cancel: "Stornieren",
          clone: "Klon",
          close: "Schließen",
          "delete": "Löschen",
          save: "Speichern"
        };
        const add_user$2 = {
          cancel: "Stornieren",
          roles: "Rollen",
          save: "Speichern",
          title: "Neuen Benutzer hinzufügen"
        };
        const added$2 = "Hinzugefügt:";
        const admins$2 = "admins";
        const analysts$2 = "analysten";
        const base_language_required$2 = "Basissprache ist erforderlich";
        const confirm_password_required$2 = "Sie müssen das Passwort wiederholen";
        const confirm_signup$2 = {
          error: "Ein Fehler ist aufgetreten",
          success: "Ihre Anmeldung wurde erfolgreich bestätigt",
          info: "Sie werden in 10 Sekunden zur Startseite weitergeleitet."
        };
        const create_survey$2 = {
          title: "Umfrage erstellen"
        };
        const edit_survey$2 = {
          background_audio: "Audioaufnahme im Hintergrund",
          can_lock_survey: "Erlauben Sie Vermessern, die Vermessung zu sperren",
          clone_survey: "Klon-Umfrage",
          count: "Zählen",
          default_survey_url: "Standard-Umfrage-URL",
          delete_survey: "Möchten Sie {{survey_name}} wirklich löschen?",
          general: "Allgemein",
          limit: "Grenze",
          limit_responses: "Begrenzen Sie die Antworten von Vermessern",
          navigation: "Navigation",
          offline: "Offline",
          privacy: "Privatsphäre",
          quotas: "Quoten",
          record_gps: "Verfolgen Sie den GPS-Standort",
          responses: "antworten",
          save_ip: "IP-Adressen aufzeichnen",
          save_timings: "Zeiten aufzeichnen",
          sharing: "Teilen",
          social_sharing: "Soziales Teilen",
          status: "Status",
          survey_users: "Benutzer befragen",
          surveyor: "Landvermesserin",
          title: "Umfrage bearbeiten",
          to: "zu"
        };
        const edit_user$2 = {
          title: "Benutzer bearbeiten"
        };
        const email_required$2 = "E-Mail ist erforderlich";
        const error$2 = {
          invalid_email: "Ungültige E-Mail",
          password_should_match: "Password should match",
          required: "Is required"
        };
        const event_response$2 = {
          details: "Einzelheiten",
          direction: "Richtung",
          name: "Name",
          time: "Zeit",
          title: "Antwortereignisse"
        };
        const firstname_required$2 = "Vorname ist erforderlich";
        const forgot_password$2 = {
          helper_text: "Wir senden einen Link zum Zurücksetzen des Passworts an diese E-Mail (falls vorhanden).",
          send: "Schicken",
          success: "Ein Link zum Zurücksetzen des Passworts wurde an Ihre E-Mail-Adresse gesendet. Er ist nur eine Stunde lang gültig",
          title: "Forgot Password"
        };
        const label$2 = {
          additional_languages: "Weitere Sprachen",
          analyst: "Analytikerin",
          apply_quota: "Keine Quote",
          base_language: "Basissprache",
          code: "Code",
          confirm_new_password: "Bestätige neues Passwort",
          current_password: "Aktuelles Passwort",
          email: "Email",
          first_name: "Vorname",
          from: "Aus",
          last_name: "Familienname, Nachname",
          new_password: "Neues Kennwort",
          new_survey_name: "Neuer Umfragename",
          password: "Passwort",
          public_within_org: "Die Umfrage steht allen Mitgliedern innerhalb der Organisation zur Verfügung",
          responses_limit: "Antwortlimit:",
          server_name: "Server Name",
          super_admin: "Höchster Vorgesetzter",
          survey_active: "Umfrage aktiv",
          survey_admin: "Umfrage Admin",
          survey_mode: "Umfragemodus",
          survey_name: "Umfragename",
          surveyor: "Landvermesser",
          surveyor_admin: "Surveyor-Administrator",
          to: "Zu",
          total_responses_limit: "Beantwortungslimit insgesamt: "
        };
        const language$2 = {
          ar: "Arabisch",
          de: "Deutsch",
          en: "Englisch"
        };
        const last_modified$2 = "Zuletzt bearbeitet:";
        const lastname_required$2 = "Nachname ist erforderlich";
        const login$2 = {
          forgot_password: "Passwort vergessen",
          sign_up: "Anmeldung",
          submit: "Anmeldung",
          title: "Login"
        };
        const manage_users$2 = "Manage-Benutzer";
        const mode$2 = {
          mixed: "Web und Offline",
          offline: "Offline",
          web: "Web"
        };
        const my_surveys$2 = "Meine Umfragen";
        const new_survey$2 = "Neue Umfrage";
        const password_required$2 = "Passwort ist erforderlich";
        const processed_errors$2 = {
          backend_down: "Backend ist nicht erreichbar... Bitte versuchen Sie es später erneut",
          duplicate_email: "Doppelte E-Mail",
          duplicate_survey_name: "Doppelter Umfragename",
          expired_confirmation_token: "Abgelaufenes Bestätigungstoken, bitte erneut registrieren",
          expired_reset_token: "Abgelaufenes Bestätigungstoken, bitte klicken Sie noch einmal auf Passwort vergessen",
          google_auth_error: "Das Google-Konto konnte nicht bestätigt werden. Bitte versuchen Sie es später erneut. Wenn der Fehler weiterhin besteht, wenden Sie sich bitte an den Support.",
          invalid_survey_dates: "Startdatum muss vor Enddatum liegen",
          network_err: "Dieser Browser ist offline",
          survey_closed: "Diese Umfrage ist geschlossen und kann nicht bearbeitet werden",
          unidentified_error: "Unerwarteter Fehler aufgetreten, bitte melden Sie sich an support@frankiesurveys.com",
          used_confirmation_token: "Diese Bestätigung war bereits ein Benutzer. Versuchen Sie, sich mit dem Benutzer anzumelden, den Sie gerade registriert haben",
          wrong_credentials: "Falsche E-Mail oder Passwort",
          wrong_password: "Falsches Passwort",
          wrong_reset_token: "Dieses Reset-Token ist falsch. Klicken Sie erneut auf „Passwort vergessen“."
        };
        const processed_successes$2 = {
          copied: "Kopiert"
        };
        const profile$2 = {
          cancel: "Stornieren",
          change_email: "E-Mail ändern",
          change_password: "Passwort ändern",
          hint: "Wenn Sie Ihre E-Mail-Adresse oder Ihr Passwort ändern, werden Sie abgemeldet",
          password_required: "Aktuelles Passwort ist erforderlich, um Ihre E-Mail oder Ihr Passwort bearbeiten zu können",
          save: "Speichern",
          title: "Profil"
        };
        const registered$2 = "eingetragen";
        const reset_password$2 = {
          reset: "Zurücksetzen",
          title: "Passwort Zurücksetzen"
        };
        const responses$2 = {
          "export": "Antworten exportieren",
          filter_completed: "Erledigte Antworten filtern",
          filter_completed_show_all: "Alle Antworten",
          filter_completed_show_completed: "Nur vollständige Antworten",
          filter_completed_show_incomplete: "Nur unvollständige Antworten",
          filter_preview: "Erledigte Antworten filtern",
          filter_preview_show_actual: "Nur tatsächliche Antworten",
          filter_preview_show_all: "Alle Antworten",
          filter_preview_show_preview: "Nur Vorschau der Antworten",
          ip_addr: "IP-Adresse",
          label_displayed_rows: "{{from}}-{{to}} von {{count}}",
          label_rows_per_page: "Zeilen pro Seite:",
          lang: "Sprache",
          preview: "Vorschau",
          raw_values: "Rohwerte anzeigen",
          reset_surveyor_filter: "Vermessungsfilter zurücksetzen",
          start_date: "Startdatum",
          submit_date: "Sendedatum",
          title: "Antworten",
          title_delete_response: "Sind Sie sicher, dass Sie löschen möchten?",
          version: "Version"
        };
        const responses_count$2 = "Antwortanzahl:";
        const roles_required$2 = "Roles ist erforderlich";
        const sign_up$2 = {
          helper_text: "Wählen Sie einen Namen, um Ihren Server zu identifizieren und darauf zuzugreifen. Die meisten Benutzer entscheiden sich dafür, den Namen ihres Projekts, ihrer Umfrage oder Organisation zu verwenden.",
          sign_up: "Anmeldung",
          success: "Anmeldung erfolgreich bestätigt... Bitte überprüfen Sie Ihren Posteingang auf eine Bestätigungs-E-Mail",
          title: "Sign Up"
        };
        const status$2 = {
          active: "Aktiv",
          closed: "Geschlossen",
          draft: "Entwurf"
        };
        const super_admins$2 = "super admins";
        const survey_mode$2 = "Der Umfragemodus ist erforderlich";
        const survey_required$2 = "Name der Umfrage ist erforderlich";
        const surveyor_auditor$2 = "vermessungsprüfer";
        const surveyors$2 = "vermesser";
        const users_manage$2 = {
          add_user: "Benutzer hinzufügen",
          delete_title: "Möchten Sie {{name}} wirklich löschen?",
          email: "Email",
          name: "Name",
          roles: "Rollen",
          title_delete: "Löschen",
          title_edit: "Bearbeiten"
        };
        const manage_de = {
          action_btn: action_btn$2,
          add_user: add_user$2,
          added: added$2,
          admins: admins$2,
          analysts: analysts$2,
          base_language_required: base_language_required$2,
          confirm_password_required: confirm_password_required$2,
          confirm_signup: confirm_signup$2,
          create_survey: create_survey$2,
          edit_survey: edit_survey$2,
          edit_user: edit_user$2,
          email_required: email_required$2,
          error: error$2,
          event_response: event_response$2,
          firstname_required: firstname_required$2,
          forgot_password: forgot_password$2,
          label: label$2,
          language: language$2,
          last_modified: last_modified$2,
          lastname_required: lastname_required$2,
          login: login$2,
          manage_users: manage_users$2,
          mode: mode$2,
          my_surveys: my_surveys$2,
          new_survey: new_survey$2,
          password_required: password_required$2,
          processed_errors: processed_errors$2,
          processed_successes: processed_successes$2,
          profile: profile$2,
          registered: registered$2,
          reset_password: reset_password$2,
          responses: responses$2,
          responses_count: responses_count$2,
          roles_required: roles_required$2,
          sign_up: sign_up$2,
          status: status$2,
          super_admins: super_admins$2,
          survey_mode: survey_mode$2,
          survey_required: survey_required$2,
          surveyor_auditor: surveyor_auditor$2,
          surveyors: surveyors$2,
          users_manage: users_manage$2
        };
        const action_btn$1 = {
          add: "Add",
          add_permission: "Add Permission",
          add_user: "Add User",
          cancel: "Cancel",
          clone: "Clone",
          close: "Close",
          "delete": "Delete",
          save: "Save"
        };
        const add_user$1 = {
          cancel: "Cancel",
          roles: "Roles",
          save: "Save",
          title: "Add New User"
        };
        const added$1 = "Added:";
        const admins$1 = "admins";
        const analysts$1 = "analysts";
        const base_language_required$1 = "Base Language is Required";
        const confirm_password_required$1 = "You must repeat password";
        const confirm_signup$1 = {
          error: "An error occurred",
          success: "Your signup was confirmed successfully",
          info: "You will be redirected to the home page in 10 seconds"
        };
        const create_survey$1 = {
          title: "Create Survey"
        };
        const edit_survey$1 = {
          background_audio: "Background Audio Recording",
          can_lock_survey: "Allow surveyors to lock survey",
          clone_survey: "Clone Survey",
          count: "Count",
          default_survey_url: "Default survey URL",
          delete_survey: "Are you sure you want to delete {{survey_name}}?",
          general: "General",
          limit: "Limit",
          limit_responses: "Limit Responses by Surveyors",
          navigation: "Navigation",
          offline: "Offline",
          privacy: "Privacy",
          quotas: "Quotas",
          record_gps: "Track GPS Location",
          responses: "responses",
          save_ip: "Record IP addresses",
          save_timings: "Record Timings",
          sharing: "Sharing",
          social_sharing: "Social Sharing",
          status: "Status",
          survey_users: "Survey Users",
          surveyor: "Surveyor",
          title: "Edit Survey",
          to: "to"
        };
        const edit_user$1 = {
          title: "Edit User"
        };
        const email_required$1 = "Email is Required";
        const error$1 = {
          invalid_email: "Invalid Email",
          password_should_match: "Password should match",
          required: "Is required"
        };
        const event_response$1 = {
          details: "Details",
          direction: "Direction",
          name: "Name",
          time: "Time",
          title: "Response Events"
        };
        const firstname_required$1 = "First Name is Required";
        const forgot_password$1 = {
          helper_text: " We will send a reset password link to this email (if exist)",
          send: "Send",
          success: "A reset password link was sent to your email.. It is valid for only one hour",
          title: "Forgot Password"
        };
        const label$1 = {
          additional_languages: "Additional Languages",
          analyst: "Analyst",
          apply_quota: "Apply Quota",
          base_language: "Base Language",
          code: "Code",
          confirm_new_password: "Confirm New Password",
          current_password: "Current Password",
          email: "Email",
          first_name: "First Name",
          from: "From",
          last_name: "Last Name",
          new_password: "New Password",
          new_survey_name: "New Survey Name",
          password: "Password",
          public_within_org: "Survey is available to all members within the org",
          responses_limit: "Responses Limit: ",
          server_name: "Server Name",
          super_admin: "Super Admin",
          survey_active: "Survey Active",
          survey_admin: "Survey Admin",
          survey_mode: "Survey Mode",
          survey_name: "Survey Name",
          surveyor: "Surveyor",
          surveyor_admin: "Surveyor admin",
          to: "To",
          total_responses_limit: "Total Responses Limit: "
        };
        const language$1 = {
          ar: "Arabic",
          de: "German",
          en: "English"
        };
        const last_modified$1 = "Last Modified:";
        const lastname_required$1 = "Last Name is Required";
        const login$1 = {
          forgot_password: "Forgot password?",
          sign_up: "Sign Up",
          submit: "Submit",
          login: "Login",
          title: "Sign In"
        };
        const manage_users$1 = "Manage Users";
        const mode$1 = {
          mixed: "Web and Offline",
          offline: "Offline",
          web: "Web"
        };
        const my_surveys$1 = "My Surveys";
        const new_survey$1 = "New Survey";
        const password_required$1 = "Password is Required";
        const processed_errors$1 = {
          backend_down: "Backend is Unreachable... Please Try again later",
          duplicate_email: "Duplicate Email",
          duplicate_survey_name: "Duplicate Survey Name",
          expired_confirmation_token: "Expired Confirmation Token, Please Register Once more",
          expired_reset_token: "Expired Confirmation Token, Please Click on Forgot password once more",
          google_auth_error: "Could not verify Google Account, please try again later... If error persist, please contact support",
          invalid_survey_dates: "Start Date must be before end date",
          network_err: "This broweser is offline",
          survey_closed: "This Survey is closed and cannot be edited",
          unidentified_error: "Unexpected Error occurred, please report to support@frankiesurveys.com",
          used_confirmation_token: "This confirmation was already user. Try to login with the user you just registered",
          wrong_credentials: "Wrong email or password",
          wrong_password: "Wrong password",
          wrong_reset_token: "This Reset Token is incorrect, Click on Forgot password once more"
        };
        const processed_successes$1 = {
          copied: "Copied"
        };
        const profile$1 = {
          cancel: "Cancel",
          change_email: "Change Email",
          change_password: "Change Password",
          hint: "When you change your email or password, you will be logged out",
          password_required: "Current Password is Required to be able to edit your email or password",
          save: "Save",
          title: "Profile"
        };
        const registered$1 = "registered";
        const reset_password$1 = {
          reset: "Reset",
          title: "Reset Password"
        };
        const responses$1 = {
          "export": "Export Responses",
          filter_completed: "Filter Completed Responses",
          filter_completed_show_all: "All Responses",
          filter_completed_show_completed: "Complete Responses only",
          filter_completed_show_incomplete: "Incomplete Responses only",
          filter_preview: "Filter Preview Responses",
          filter_preview_show_actual: "Actual Responses only",
          filter_preview_show_all: "All Responses",
          filter_preview_show_preview: "Preview Responses only",
          ip_addr: "IP Address",
          label_displayed_rows: "{{from}}-{{to}} of {{count}}",
          label_rows_per_page: "Rows per page:",
          lang: "Language",
          preview: "Preview",
          raw_values: "Show Raw Values",
          reset_surveyor_filter: "Reset Surveyor Filter",
          start_date: "Start Date",
          submit_date: "Submit Date",
          title: "Responses",
          title_delete_response: "Are you sure you want to delete?",
          version: "Version"
        };
        const responses_count$1 = "Responses Count:";
        const roles_required$1 = "Roles is Required";
        const sign_up$1 = {
          helper_text: "Choose a name to identify and access your server. Most users choose to use the name of their project, survey,or organization.",
          sign_up: "Sign Up",
          success: "Signup confirmed successfully... Please check your inbox for a confirmation email",
          title: "Sign Up"
        };
        const status$1 = {
          active: "Active",
          closed: "Closed",
          draft: "Draft"
        };
        const super_admins$1 = "super admins";
        const survey_mode$1 = "Survey Mode is Required";
        const survey_required$1 = "Survey Name is Required";
        const surveyor_auditor$1 = "surveyor auditor";
        const surveyors$1 = "surveyors";
        const users_manage$1 = {
          add_user: "Add User",
          delete_title: "Are you sure you want to delete {{name}}?",
          email: "Email",
          name: "Name",
          roles: "Roles",
          title_delete: "Delete",
          title_edit: "Edit"
        };
        const manage_en = {
          action_btn: action_btn$1,
          add_user: add_user$1,
          added: added$1,
          admins: admins$1,
          analysts: analysts$1,
          base_language_required: base_language_required$1,
          confirm_password_required: confirm_password_required$1,
          confirm_signup: confirm_signup$1,
          create_survey: create_survey$1,
          edit_survey: edit_survey$1,
          edit_user: edit_user$1,
          email_required: email_required$1,
          error: error$1,
          event_response: event_response$1,
          firstname_required: firstname_required$1,
          forgot_password: forgot_password$1,
          label: label$1,
          language: language$1,
          last_modified: last_modified$1,
          lastname_required: lastname_required$1,
          login: login$1,
          manage_users: manage_users$1,
          mode: mode$1,
          my_surveys: my_surveys$1,
          new_survey: new_survey$1,
          password_required: password_required$1,
          processed_errors: processed_errors$1,
          processed_successes: processed_successes$1,
          profile: profile$1,
          registered: registered$1,
          reset_password: reset_password$1,
          responses: responses$1,
          responses_count: responses_count$1,
          roles_required: roles_required$1,
          sign_up: sign_up$1,
          status: status$1,
          super_admins: super_admins$1,
          survey_mode: survey_mode$1,
          survey_required: survey_required$1,
          surveyor_auditor: surveyor_auditor$1,
          surveyors: surveyors$1,
          users_manage: users_manage$1
        };
        const action_btn = {
          add: "يضيف",
          add_permission: "إضافة الإذن",
          add_user: "إضافة مستخدم",
          cancel: "يلغي",
          clone: "استنساخ",
          close: "يغلق",
          "delete": "يمسح",
          save: "يحفظ"
        };
        const add_user = {
          cancel: "يلغي",
          roles: "الأدوار",
          save: "يحفظ",
          title: "إضافة مستخدم جديد"
        };
        const added = "تمت الإضافة:";
        const admins = "المسؤولون";
        const analysts = "محللون";
        const base_language_required = "اللغة الأساسية مطلوبة";
        const confirm_password_required = "يجب عليك تكرار كلمة المرور";
        const confirm_signup = {
          error: "حدث خطأ",
          success: "تم تأكيد اشتراكك بنجاح",
          info: "ستتم إعادة توجيهك إلى الصفحة الرئيسية في غضون 10 ثوانٍ"
        };
        const create_survey = {
          title: "إنشاء الاستبيان"
        };
        const edit_survey = {
          background_audio: "تسجيل صوتي في الخلفية",
          can_lock_survey: "السماح للمساحين لقفل المسح",
          clone_survey: "مسح استنساخ",
          count: "عدد",
          default_survey_url: "عنوان URL الافتراضي للاستطلاع",
          delete_survey: "هل أنت متأكد أنك تريد حذف {{survey_name}}؟",
          general: "عام",
          limit: "حد",
          limit_responses: "الحد من الردود من قبل المساحين",
          navigation: "ملاحة",
          offline: "غير متصل على الانترنت",
          privacy: "خصوصية",
          quotas: "الحصص",
          record_gps: "تتبع موقع GPS",
          responses: "استجابات",
          save_ip: "سجل عناوين IP",
          save_timings: "توقيتات قياسية",
          sharing: "مشاركة",
          social_sharing: "مشاركه إجتماعيه",
          status: "حالة",
          survey_users: "مسح المستخدمين",
          surveyor: "مساح",
          title: "تحرير الاستطلاع",
          to: "ل"
        };
        const edit_user = {
          title: "تحرير العضو"
        };
        const email_required = "البريد الإلكتروني مطلوب";
        const error = {
          invalid_email: "بريد إلكتروني غير صالح",
          password_should_match: "يجب أن تتطابق كلمة المرور",
          required: "مطلوب"
        };
        const event_response = {
          details: "تفاصيل",
          direction: "اتجاه",
          name: "اسم",
          time: "وقت",
          title: "أحداث الاستجابة"
        };
        const firstname_required = "الاسم الأول مطلوب";
        const forgot_password = {
          helper_text: "سنرسل رابط إعادة تعيين كلمة المرور إلى هذا البريد الإلكتروني (إن وجد)",
          send: "إرسال",
          success: "تم إرسال رابط إعادة تعيين كلمة المرور إلى بريدك الإلكتروني .. وهو صالح لمدة ساعة واحدة فقط",
          title: "نسيت كلمة المرور"
        };
        const label = {
          additional_languages: "لغات إضافية",
          analyst: "المحلل",
          apply_quota: "تطبيق الحصة النسبية",
          base_language: "لغة الأساس",
          code: "كود",
          confirm_new_password: "تأكيد كلمة المرور الجديدة",
          current_password: "كلمة السر الحالية",
          email: "البريد الإلكتروني",
          first_name: "الاسم الأول",
          from: "من",
          last_name: "اسم العائلة",
          new_password: "كلمة المرور الجديدة",
          new_survey_name: "اسم الاستطلاع الجديد",
          password: "كلمة المرور",
          public_within_org: "المسح متاح لجميع الأعضاء داخل المؤسسة",
          responses_limit: "حد الاستجابات:",
          server_name: "اسم الخادم",
          super_admin: "مشرف فائق",
          survey_active: "المسح نشط",
          survey_admin: "مسؤول المسح",
          survey_mode: "وضع المسح",
          survey_name: "اسم الاستطلاع",
          surveyor: "مساح",
          surveyor_admin: "مشرف المساح",
          to: "ل",
          total_responses_limit: "حد الردود الإجمالي:"
        };
        const language = {
          ar: "عربي",
          de: "ألمانية",
          en: "إنجليزي"
        };
        const last_modified = "آخر تعديل:";
        const lastname_required = "إسم العائلة مطلوب";
        const login = {
          forgot_password: "نسيت كلمة المرور",
          sign_up: "تسجيل",
          submit: "إرسال تقديم",
          title: "تسجيل الدخول"
        };
        const manage_users = "Manage Users";
        const mode = {
          mixed: "عبر الإنترنت والجوال",
          offline: "متحرك",
          web: "متصل"
        };
        const my_surveys = "My Surveys";
        const new_survey = "استبيان جديد";
        const password_required = "كلمة المرور مطلوبة";
        const processed_errors = {
          backend_down: "الخلفية لا يمكن الوصول إليها ... يرجى المحاولة مرة أخرى لاحقًا",
          duplicate_email: "بريد إلكتروني مكرر",
          duplicate_survey_name: "تكرار اسم الاستطلاع",
          expired_confirmation_token: "رمز التأكيد منتهي الصلاحية , الرجاء التسجيل مرة أخرى",
          expired_reset_token: "رمز التأكيد منتهي الصلاحية , الرجاء النقر فوق نسيت كلمة المرور مرة أخرى",
          google_auth_error: "تعذر التحقق من حساب Google ، يرجى المحاولة مرة أخرى لاحقًا ... إذا استمر الخطأ ، فيرجى الاتصال بالدعم",
          invalid_survey_dates: "يجب أن يكون تاريخ البدء قبل تاريخ الانتهاء",
          network_err: "هذا المتصفح غير متصل",
          survey_closed: "هذا الاستطلاع مغلق ولا يمكن تعديله",
          unidentified_error: "حدث خطأ غير متوقع ، يرجى إبلاغ support@frankiesurveys.com",
          used_confirmation_token: "هذا التأكيد كان مستخدمًا بالفعل. حاول تسجيل الدخول مع المستخدم الذي قمت بتسجيله للتو",
          wrong_credentials: "البريد الإلكتروني أو كلمة المرور خاطئة",
          wrong_password: " كلمة مرور خاطئة",
          wrong_reset_token: "رمز إعادة التعيين هذا غير صحيح , انقر فوق نسيت كلمة المرور مرة أخرى"
        };
        const processed_successes = {
          copied: "نسخ"
        };
        const profile = {
          cancel: "يلغي",
          change_email: "تغيير البريد الإلكتروني",
          change_password: "تغيير كلمة المرور",
          hint: "عندما تقوم بتغيير بريدك الإلكتروني أو كلمة المرور الخاصة بك , سيتم تسجيل خروجك",
          password_required: "كلمة المرور الحالية مطلوبة لتتمكن من تعديل بريدك الإلكتروني أو كلمة المرور",
          save: "يحفظ",
          title: "حساب تعريفي"
        };
        const registered = "مسجلة";
        const reset_password = {
          reset: "إعادة تعيين",
          title: "إعادة تعيين كلمة المرور"
        };
        const responses = {
          "export": "تصدير الردود",
          filter_completed: "استجابات الفلتر المكتملة",
          filter_completed_show_all: "كل الردود",
          filter_completed_show_completed: "الردود الكاملة فقط",
          filter_completed_show_incomplete: "الردود غير المكتملة فقط",
          filter_preview: "تصفية الردود المكتملة",
          filter_preview_show_actual: "الردود الفعلية فقط",
          filter_preview_show_all: "كل الردود",
          filter_preview_show_preview: "معاينة الردود فقط",
          ip_addr: "عنوان IP",
          label_displayed_rows: "{{from}} - {{to}} من {{count}}",
          label_rows_per_page: "عدد الصفوف في كل صفحة:",
          lang: "اللغة",
          preview: "معاينة",
          raw_values: "إظهار القيم الأولية",
          reset_surveyor_filter: "إعادة تعيين عامل تصفية المساح",
          start_date: "تاريخ البدء",
          submit_date: "تاريخ الإرسال",
          title: "الردود",
          title_delete_response: "هل أنت متأكد أنك تريد حذف؟",
          version: "الإصدار"
        };
        const responses_count = "عدد الردود:";
        const roles_required = "الأدوار مطلوبة";
        const sign_up = {
          helper_text: "اختر اسمًا لتعريف الخادم الخاص بك والوصول إليه. يختار معظم المستخدمين استخدام اسم مشروعهم أو استبيانهم أو مؤسستهم.",
          sign_up: "تسجيل",
          success: "تم تأكيد الاشتراك بنجاح ... يرجى التحقق من بريدك الوارد بحثًا عن رسالة تأكيد بالبريد الإلكتروني",
          title: "تسجيل"
        };
        const status = {
          active: "نشط",
          closed: "مغلق",
          draft: "مسودة"
        };
        const super_admins = "المشرفون المتميزون";
        const survey_mode = "وضع الاستطلاع مطلوب";
        const survey_required = "اسم الاستطلاع مطلوب";
        const surveyor_auditor = "مدقق مساح";
        const surveyors = "مساحون";
        const users_manage = {
          add_user: "إضافة مستخدم",
          delete_title: "هل أنت متأكد أنك تريد حذف {{name}}؟",
          email: "بريد إلكتروني",
          name: "اسم",
          roles: "رولين",
          title_delete: "يمسح",
          title_edit: "يحرر"
        };
        const manage_ar = {
          action_btn: action_btn,
          add_user: add_user,
          added: added,
          admins: admins,
          analysts: analysts,
          base_language_required: base_language_required,
          confirm_password_required: confirm_password_required,
          confirm_signup: confirm_signup,
          create_survey: create_survey,
          edit_survey: edit_survey,
          edit_user: edit_user,
          email_required: email_required,
          error: error,
          event_response: event_response,
          firstname_required: firstname_required,
          forgot_password: forgot_password,
          label: label,
          language: language,
          last_modified: last_modified,
          lastname_required: lastname_required,
          login: login,
          manage_users: manage_users,
          mode: mode,
          my_surveys: my_surveys,
          new_survey: new_survey,
          password_required: password_required,
          processed_errors: processed_errors,
          processed_successes: processed_successes,
          profile: profile,
          registered: registered,
          reset_password: reset_password,
          responses: responses,
          responses_count: responses_count,
          roles_required: roles_required,
          sign_up: sign_up,
          status: status,
          super_admins: super_admins,
          survey_mode: survey_mode,
          survey_required: survey_required,
          surveyor_auditor: surveyor_auditor,
          surveyors: surveyors,
          users_manage: users_manage
        };
        const scriptRel = 'modulepreload';
        const assetsURL = function assetsURL(dep) {
          return "/" + dep;
        };
        const seen = {};
        const __vitePreload = exports("ao", function preload(baseModule, deps, importerUrl) {
          let promise = Promise.resolve();
          // @ts-expect-error false will be replaced with boolean later
          if (false && deps && deps.length > 0) {
            const links = document.getElementsByTagName('link');
            promise = Promise.all(deps.map(dep => {
              // @ts-expect-error assetsURL is declared before preload.toString()
              dep = assetsURL(dep);
              if (dep in seen) return;
              seen[dep] = true;
              const isCss = dep.endsWith('.css');
              const cssSelector = isCss ? '[rel="stylesheet"]' : '';
              const isBaseRelative = !!importerUrl;
              // check if the file is already preloaded by SSR markup
              if (isBaseRelative) {
                // When isBaseRelative is true then we have `importerUrl` and `dep` is
                // already converted to an absolute URL by the `assetsURL` function
                for (let i = links.length - 1; i >= 0; i--) {
                  const link = links[i];
                  // The `links[i].href` is an absolute URL thanks to browser doing the work
                  // for us. See https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflecting-content-attributes-in-idl-attributes:idl-domstring-5
                  if (link.href === dep && (!isCss || link.rel === 'stylesheet')) {
                    return;
                  }
                }
              } else if (document.querySelector(`link[href="${dep}"]${cssSelector}`)) {
                return;
              }
              const link = document.createElement('link');
              link.rel = isCss ? 'stylesheet' : scriptRel;
              if (!isCss) {
                link.as = 'script';
                link.crossOrigin = '';
              }
              link.href = dep;
              document.head.appendChild(link);
              if (isCss) {
                return new Promise((res, rej) => {
                  link.addEventListener('load', res);
                  link.addEventListener('error', () => rej(new Error(`Unable to preload CSS for ${dep}`)));
                });
              }
            }));
          }
          return promise.then(() => baseModule()).catch(err => {
            const e = new Event('vite:preloadError', {
              cancelable: true
            });
            // @ts-expect-error custom payload
            e.payload = err;
            window.dispatchEvent(e);
            if (!e.defaultPrevented) {
              throw err;
            }
          });
        });
        const common = {
          black: '#000',
          white: '#fff'
        };
        const common$1 = common;
        const red = {
          50: '#ffebee',
          100: '#ffcdd2',
          200: '#ef9a9a',
          300: '#e57373',
          400: '#ef5350',
          500: '#f44336',
          600: '#e53935',
          700: '#d32f2f',
          800: '#c62828',
          900: '#b71c1c',
          A100: '#ff8a80',
          A200: '#ff5252',
          A400: '#ff1744',
          A700: '#d50000'
        };
        const red$1 = red;
        const purple = {
          50: '#f3e5f5',
          100: '#e1bee7',
          200: '#ce93d8',
          300: '#ba68c8',
          400: '#ab47bc',
          500: '#9c27b0',
          600: '#8e24aa',
          700: '#7b1fa2',
          800: '#6a1b9a',
          900: '#4a148c',
          A100: '#ea80fc',
          A200: '#e040fb',
          A400: '#d500f9',
          A700: '#aa00ff'
        };
        const purple$1 = purple;
        const blue = {
          50: '#e3f2fd',
          100: '#bbdefb',
          200: '#90caf9',
          300: '#64b5f6',
          400: '#42a5f5',
          500: '#2196f3',
          600: '#1e88e5',
          700: '#1976d2',
          800: '#1565c0',
          900: '#0d47a1',
          A100: '#82b1ff',
          A200: '#448aff',
          A400: '#2979ff',
          A700: '#2962ff'
        };
        const blue$1 = blue;
        const lightBlue = {
          50: '#e1f5fe',
          100: '#b3e5fc',
          200: '#81d4fa',
          300: '#4fc3f7',
          400: '#29b6f6',
          500: '#03a9f4',
          600: '#039be5',
          700: '#0288d1',
          800: '#0277bd',
          900: '#01579b',
          A100: '#80d8ff',
          A200: '#40c4ff',
          A400: '#00b0ff',
          A700: '#0091ea'
        };
        const lightBlue$1 = lightBlue;
        const green = {
          50: '#e8f5e9',
          100: '#c8e6c9',
          200: '#a5d6a7',
          300: '#81c784',
          400: '#66bb6a',
          500: '#4caf50',
          600: '#43a047',
          700: '#388e3c',
          800: '#2e7d32',
          900: '#1b5e20',
          A100: '#b9f6ca',
          A200: '#69f0ae',
          A400: '#00e676',
          A700: '#00c853'
        };
        const green$1 = green;
        const orange = {
          50: '#fff3e0',
          100: '#ffe0b2',
          200: '#ffcc80',
          300: '#ffb74d',
          400: '#ffa726',
          500: '#ff9800',
          600: '#fb8c00',
          700: '#f57c00',
          800: '#ef6c00',
          900: '#e65100',
          A100: '#ffd180',
          A200: '#ffab40',
          A400: '#ff9100',
          A700: '#ff6d00'
        };
        const orange$1 = orange;
        const grey = {
          50: '#fafafa',
          100: '#f5f5f5',
          200: '#eeeeee',
          300: '#e0e0e0',
          400: '#bdbdbd',
          500: '#9e9e9e',
          600: '#757575',
          700: '#616161',
          800: '#424242',
          900: '#212121',
          A100: '#f5f5f5',
          A200: '#eeeeee',
          A400: '#bdbdbd',
          A700: '#616161'
        };
        const grey$1 = exports('cl', grey);
        function _extends() {
          exports("_", _extends = Object.assign ? Object.assign.bind() : function (target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          });
          return _extends.apply(this, arguments);
        }
        function isPlainObject$3(item) {
          return item !== null && typeof item === 'object' && item.constructor === Object;
        }
        function deepClone(source) {
          if (!isPlainObject$3(source)) {
            return source;
          }
          const output = {};
          Object.keys(source).forEach(key => {
            output[key] = deepClone(source[key]);
          });
          return output;
        }
        function deepmerge(target, source, options = {
          clone: true
        }) {
          const output = options.clone ? _extends({}, target) : target;
          if (isPlainObject$3(target) && isPlainObject$3(source)) {
            Object.keys(source).forEach(key => {
              // Avoid prototype pollution
              if (key === '__proto__') {
                return;
              }
              if (isPlainObject$3(source[key]) && key in target && isPlainObject$3(target[key])) {
                // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.
                output[key] = deepmerge(target[key], source[key], options);
              } else if (options.clone) {
                output[key] = isPlainObject$3(source[key]) ? deepClone(source[key]) : source[key];
              } else {
                output[key] = source[key];
              }
            });
          }
          return output;
        }

        /**
         * WARNING: Don't import this directly.
         * Use `MuiError` from `@mui/utils/macros/MuiError.macro` instead.
         * @param {number} code
         */
        function formatMuiErrorMessage(code) {
          // Apply babel-plugin-transform-template-literals in loose mode
          // loose mode is safe iff we're concatenating primitives
          // see https://babeljs.io/docs/en/babel-plugin-transform-template-literals#loose
          /* eslint-disable prefer-template */
          let url = 'https://mui.com/production-error/?code=' + code;
          for (let i = 1; i < arguments.length; i += 1) {
            // rest params over-transpile for this case
            // eslint-disable-next-line prefer-rest-params
            url += '&args[]=' + encodeURIComponent(arguments[i]);
          }
          return 'Minified MUI error #' + code + '; visit ' + url + ' for the full message.';
          /* eslint-enable prefer-template */
        }
        var reactIs_production_min$1 = {};

        /**
         * @license React
         * react-is.production.min.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        var b$2 = Symbol.for("react.element"),
          c$2 = Symbol.for("react.portal"),
          d$2 = Symbol.for("react.fragment"),
          e$2 = Symbol.for("react.strict_mode"),
          f$2 = Symbol.for("react.profiler"),
          g$2 = Symbol.for("react.provider"),
          h$4 = Symbol.for("react.context"),
          k$3 = Symbol.for("react.server_context"),
          l$3 = Symbol.for("react.forward_ref"),
          m$3 = Symbol.for("react.suspense"),
          n$4 = Symbol.for("react.suspense_list"),
          p$4 = Symbol.for("react.memo"),
          q$4 = Symbol.for("react.lazy"),
          t$4 = Symbol.for("react.offscreen"),
          u$3;
        u$3 = Symbol.for("react.module.reference");
        function v$3(a) {
          if ("object" === typeof a && null !== a) {
            var r = a.$$typeof;
            switch (r) {
              case b$2:
                switch (a = a.type, a) {
                  case d$2:
                  case f$2:
                  case e$2:
                  case m$3:
                  case n$4:
                    return a;
                  default:
                    switch (a = a && a.$$typeof, a) {
                      case k$3:
                      case h$4:
                      case l$3:
                      case q$4:
                      case p$4:
                      case g$2:
                        return a;
                      default:
                        return r;
                    }
                }
              case c$2:
                return r;
            }
          }
        }
        reactIs_production_min$1.ContextConsumer = h$4;
        reactIs_production_min$1.ContextProvider = g$2;
        reactIs_production_min$1.Element = b$2;
        reactIs_production_min$1.ForwardRef = l$3;
        reactIs_production_min$1.Fragment = d$2;
        reactIs_production_min$1.Lazy = q$4;
        reactIs_production_min$1.Memo = p$4;
        reactIs_production_min$1.Portal = c$2;
        reactIs_production_min$1.Profiler = f$2;
        reactIs_production_min$1.StrictMode = e$2;
        reactIs_production_min$1.Suspense = m$3;
        reactIs_production_min$1.SuspenseList = n$4;
        reactIs_production_min$1.isAsyncMode = function () {
          return !1;
        };
        reactIs_production_min$1.isConcurrentMode = function () {
          return !1;
        };
        reactIs_production_min$1.isContextConsumer = function (a) {
          return v$3(a) === h$4;
        };
        reactIs_production_min$1.isContextProvider = function (a) {
          return v$3(a) === g$2;
        };
        reactIs_production_min$1.isElement = function (a) {
          return "object" === typeof a && null !== a && a.$$typeof === b$2;
        };
        reactIs_production_min$1.isForwardRef = function (a) {
          return v$3(a) === l$3;
        };
        reactIs_production_min$1.isFragment = function (a) {
          return v$3(a) === d$2;
        };
        reactIs_production_min$1.isLazy = function (a) {
          return v$3(a) === q$4;
        };
        reactIs_production_min$1.isMemo = function (a) {
          return v$3(a) === p$4;
        };
        reactIs_production_min$1.isPortal = function (a) {
          return v$3(a) === c$2;
        };
        reactIs_production_min$1.isProfiler = function (a) {
          return v$3(a) === f$2;
        };
        reactIs_production_min$1.isStrictMode = function (a) {
          return v$3(a) === e$2;
        };
        reactIs_production_min$1.isSuspense = function (a) {
          return v$3(a) === m$3;
        };
        reactIs_production_min$1.isSuspenseList = function (a) {
          return v$3(a) === n$4;
        };
        reactIs_production_min$1.isValidElementType = function (a) {
          return "string" === typeof a || "function" === typeof a || a === d$2 || a === f$2 || a === e$2 || a === m$3 || a === n$4 || a === t$4 || "object" === typeof a && null !== a && (a.$$typeof === q$4 || a.$$typeof === p$4 || a.$$typeof === g$2 || a.$$typeof === h$4 || a.$$typeof === l$3 || a.$$typeof === u$3 || void 0 !== a.getModuleId) ? !0 : !1;
        };
        reactIs_production_min$1.typeOf = v$3;
        function capitalize(string) {
          if (typeof string !== "string") {
            throw new Error(formatMuiErrorMessage(7));
          }
          return string.charAt(0).toUpperCase() + string.slice(1);
        }

        /**
         * Safe chained function.
         *
         * Will only create a new function if needed,
         * otherwise will pass back existing functions or null.
         */
        function createChainedFunction(...funcs) {
          return funcs.reduce((acc, func) => {
            if (func == null) {
              return acc;
            }
            return function chainedFunction(...args) {
              acc.apply(this, args);
              func.apply(this, args);
            };
          }, () => {});
        }

        // Corresponds to 10 frames at 60 Hz.
        // A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.
        function debounce(func, wait = 166) {
          let timeout;
          function debounced(...args) {
            const later = () => {
              // @ts-ignore
              func.apply(this, args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
          }
          debounced.clear = () => {
            clearTimeout(timeout);
          };
          return debounced;
        }
        function deprecatedPropType(validator, reason) {
          {
            return () => null;
          }
        }
        function isMuiElement(element, muiNames) {
          return /*#__PURE__*/reactExports.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
        }
        function ownerDocument(node) {
          return node && node.ownerDocument || document;
        }
        function ownerWindow(node) {
          const doc = ownerDocument(node);
          return doc.defaultView || window;
        }
        function requirePropFactory(componentNameInError, Component) {
          {
            return () => null;
          }
        }

        /**
         * TODO v5: consider making it private
         *
         * passes {value} to {ref}
         *
         * WARNING: Be sure to only call this inside a callback that is passed as a ref.
         * Otherwise, make sure to cleanup the previous {ref} if it changes. See
         * https://github.com/mui/material-ui/issues/13539
         *
         * Useful if you want to expose the ref of an inner component to the public API
         * while still using it inside the component.
         * @param ref A ref callback or ref object. If anything falsy, this is a no-op.
         */
        function setRef$1(ref, value) {
          if (typeof ref === 'function') {
            ref(value);
          } else if (ref) {
            ref.current = value;
          }
        }
        const useEnhancedEffect = typeof window !== 'undefined' ? reactExports.useLayoutEffect : reactExports.useEffect;
        const useEnhancedEffect$1 = exports('aO', useEnhancedEffect);
        let globalId = 0;
        function useGlobalId(idOverride) {
          const _reactExports$useStat3 = reactExports.useState(idOverride),
            _reactExports$useStat4 = _slicedToArray2(_reactExports$useStat3, 2),
            defaultId = _reactExports$useStat4[0],
            setDefaultId = _reactExports$useStat4[1];
          const id = idOverride || defaultId;
          reactExports.useEffect(() => {
            if (defaultId == null) {
              // Fallback to this default id when possible.
              // Use the incrementing value for client-side rendering only.
              // We can't use it server-side.
              // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem
              globalId += 1;
              setDefaultId(`mui-${globalId}`);
            }
          }, [defaultId]);
          return id;
        }

        // downstream bundlers may remove unnecessary concatenation, but won't remove toString call -- Workaround for https://github.com/webpack/webpack/issues/14814
        const maybeReactUseId = React$1['useId'.toString()];
        /**
         *
         * @example <div id={useId()} />
         * @param idOverride
         * @returns {string}
         */
        function useId(idOverride) {
          if (maybeReactUseId !== undefined) {
            const reactId = maybeReactUseId();
            return idOverride != null ? idOverride : reactId;
          }
          // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.
          return useGlobalId(idOverride);
        }
        function unsupportedProp(props, propName, componentName, location, propFullName) {
          {
            return null;
          }
        }
        function useControlled({
          controlled,
          default: defaultProp,
          name,
          state = "value"
        }) {
          const _reactExports$useRef = reactExports.useRef(controlled !== void 0),
            isControlled = _reactExports$useRef.current;
          const _reactExports$useStat5 = reactExports.useState(defaultProp),
            _reactExports$useStat6 = _slicedToArray2(_reactExports$useStat5, 2),
            valueState = _reactExports$useStat6[0],
            setValue = _reactExports$useStat6[1];
          const value = isControlled ? controlled : valueState;
          const setValueIfUncontrolled = reactExports.useCallback(newValue => {
            if (!isControlled) {
              setValue(newValue);
            }
          }, []);
          return [value, setValueIfUncontrolled];
        }

        /**
         * https://github.com/facebook/react/issues/14099#issuecomment-440013892
         */

        function useEventCallback(fn) {
          const ref = reactExports.useRef(fn);
          useEnhancedEffect$1(() => {
            ref.current = fn;
          });
          return reactExports.useCallback((...args) =>
          // @ts-expect-error hide `this`
          // tslint:disable-next-line:ban-comma-operator
          (0, ref.current)(...args), []);
        }
        function useForkRef(...refs) {
          /**
           * This will create a new function if the refs passed to this hook change and are all defined.
           * This means react will call the old forkRef with `null` and the new forkRef
           * with the ref. Cleanup naturally emerges from this behavior.
           */
          return reactExports.useMemo(() => {
            if (refs.every(ref => ref == null)) {
              return null;
            }
            return instance => {
              refs.forEach(ref => {
                setRef$1(ref, instance);
              });
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
          }, refs);
        }
        let hadKeyboardEvent = true;
        let hadFocusVisibleRecently = false;
        let hadFocusVisibleRecentlyTimeout;
        const inputTypesWhitelist = {
          text: true,
          search: true,
          url: true,
          tel: true,
          email: true,
          password: true,
          number: true,
          date: true,
          month: true,
          week: true,
          time: true,
          datetime: true,
          'datetime-local': true
        };

        /**
         * Computes whether the given element should automatically trigger the
         * `focus-visible` class being added, i.e. whether it should always match
         * `:focus-visible` when focused.
         * @param {Element} node
         * @returns {boolean}
         */
        function focusTriggersKeyboardModality(node) {
          const type = node.type,
            tagName = node.tagName;
          if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {
            return true;
          }
          if (tagName === 'TEXTAREA' && !node.readOnly) {
            return true;
          }
          if (node.isContentEditable) {
            return true;
          }
          return false;
        }

        /**
         * Keep track of our keyboard modality state with `hadKeyboardEvent`.
         * If the most recent user interaction was via the keyboard;
         * and the key press did not include a meta, alt/option, or control key;
         * then the modality is keyboard. Otherwise, the modality is not keyboard.
         * @param {KeyboardEvent} event
         */
        function handleKeyDown(event) {
          if (event.metaKey || event.altKey || event.ctrlKey) {
            return;
          }
          hadKeyboardEvent = true;
        }

        /**
         * If at any point a user clicks with a pointing device, ensure that we change
         * the modality away from keyboard.
         * This avoids the situation where a user presses a key on an already focused
         * element, and then clicks on a different element, focusing it with a
         * pointing device, while we still think we're in keyboard modality.
         */
        function handlePointerDown() {
          hadKeyboardEvent = false;
        }
        function handleVisibilityChange() {
          if (this.visibilityState === 'hidden') {
            // If the tab becomes active again, the browser will handle calling focus
            // on the element (Safari actually calls it twice).
            // If this tab change caused a blur on an element with focus-visible,
            // re-apply the class when the user switches back to the tab.
            if (hadFocusVisibleRecently) {
              hadKeyboardEvent = true;
            }
          }
        }
        function prepare(doc) {
          doc.addEventListener('keydown', handleKeyDown, true);
          doc.addEventListener('mousedown', handlePointerDown, true);
          doc.addEventListener('pointerdown', handlePointerDown, true);
          doc.addEventListener('touchstart', handlePointerDown, true);
          doc.addEventListener('visibilitychange', handleVisibilityChange, true);
        }
        function isFocusVisible(event) {
          const target = event.target;
          try {
            return target.matches(':focus-visible');
          } catch (error) {
            // Browsers not implementing :focus-visible will throw a SyntaxError.
            // We use our own heuristic for those browsers.
            // Rethrow might be better if it's not the expected error but do we really
            // want to crash if focus-visible malfunctioned?
          }

          // No need for validFocusTarget check. The user does that by attaching it to
          // focusable events only.
          return hadKeyboardEvent || focusTriggersKeyboardModality(target);
        }
        function useIsFocusVisible() {
          const ref = reactExports.useCallback(node => {
            if (node != null) {
              prepare(node.ownerDocument);
            }
          }, []);
          const isFocusVisibleRef = reactExports.useRef(false);

          /**
           * Should be called if a blur event is fired
           */
          function handleBlurVisible() {
            // checking against potential state variable does not suffice if we focus and blur synchronously.
            // React wouldn't have time to trigger a re-render so `focusVisible` would be stale.
            // Ideally we would adjust `isFocusVisible(event)` to look at `relatedTarget` for blur events.
            // This doesn't work in IE11 due to https://github.com/facebook/react/issues/3751
            // TODO: check again if React releases their internal changes to focus event handling (https://github.com/facebook/react/pull/19186).
            if (isFocusVisibleRef.current) {
              // To detect a tab/window switch, we look for a blur event followed
              // rapidly by a visibility change.
              // If we don't see a visibility change within 100ms, it's probably a
              // regular focus change.
              hadFocusVisibleRecently = true;
              window.clearTimeout(hadFocusVisibleRecentlyTimeout);
              hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {
                hadFocusVisibleRecently = false;
              }, 100);
              isFocusVisibleRef.current = false;
              return true;
            }
            return false;
          }

          /**
           * Should be called if a blur event is fired
           */
          function handleFocusVisible(event) {
            if (isFocusVisible(event)) {
              isFocusVisibleRef.current = true;
              return true;
            }
            return false;
          }
          return {
            isFocusVisibleRef,
            onFocus: handleFocusVisible,
            onBlur: handleBlurVisible,
            ref
          };
        }

        // A change of the browser zoom change the scrollbar size.
        // Credit https://github.com/twbs/bootstrap/blob/488fd8afc535ca3a6ad4dc581f5e89217b6a36ac/js/src/util/scrollbar.js#L14-L18
        function getScrollbarSize(doc) {
          // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
          const documentWidth = doc.documentElement.clientWidth;
          return Math.abs(window.innerWidth - documentWidth);
        }

        /**
         * Add keys, values of `defaultProps` that does not exist in `props`
         * @param {object} defaultProps
         * @param {object} props
         * @returns {object} resolved props
         */
        function resolveProps(defaultProps, props) {
          const output = _extends({}, props);
          Object.keys(defaultProps).forEach(propName => {
            if (propName.toString().match(/^(components|slots)$/)) {
              output[propName] = _extends({}, defaultProps[propName], output[propName]);
            } else if (propName.toString().match(/^(componentsProps|slotProps)$/)) {
              const defaultSlotProps = defaultProps[propName] || {};
              const slotProps = props[propName];
              output[propName] = {};
              if (!slotProps || !Object.keys(slotProps)) {
                // Reduce the iteration if the slot props is empty
                output[propName] = defaultSlotProps;
              } else if (!defaultSlotProps || !Object.keys(defaultSlotProps)) {
                // Reduce the iteration if the default slot props is empty
                output[propName] = slotProps;
              } else {
                output[propName] = _extends({}, slotProps);
                Object.keys(defaultSlotProps).forEach(slotPropName => {
                  output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
                });
              }
            } else if (output[propName] === undefined) {
              output[propName] = defaultProps[propName];
            }
          });
          return output;
        }
        function composeClasses(slots, getUtilityClass, classes = undefined) {
          const output = {};
          Object.keys(slots).forEach(
          // `Object.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
          // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
          slot => {
            output[slot] = slots[slot].reduce((acc, key) => {
              if (key) {
                const utilityClass = getUtilityClass(key);
                if (utilityClass !== '') {
                  acc.push(utilityClass);
                }
                if (classes && classes[key]) {
                  acc.push(classes[key]);
                }
              }
              return acc;
            }, []).join(' ');
          });
          return output;
        }
        const defaultGenerator = componentName => componentName;
        const createClassNameGenerator = () => {
          let generate = defaultGenerator;
          return {
            configure(generator) {
              generate = generator;
            },
            generate(componentName) {
              return generate(componentName);
            },
            reset() {
              generate = defaultGenerator;
            }
          };
        };
        const ClassNameGenerator = createClassNameGenerator();
        const ClassNameGenerator$1 = ClassNameGenerator;

        // If GlobalStateSlot is changed, GLOBAL_STATE_CLASSES in
        // \packages\api-docs-builder\utils\parseSlotsAndClasses.ts must be updated accordingly.
        const globalStateClassesMapping = {
          active: 'active',
          checked: 'checked',
          completed: 'completed',
          disabled: 'disabled',
          readOnly: 'readOnly',
          error: 'error',
          expanded: 'expanded',
          focused: 'focused',
          focusVisible: 'focusVisible',
          required: 'required',
          selected: 'selected'
        };
        function generateUtilityClass(componentName, slot, globalStatePrefix = 'Mui') {
          const globalStateClass = globalStateClassesMapping[slot];
          return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${ClassNameGenerator$1.generate(componentName)}-${slot}`;
        }
        function generateUtilityClasses(componentName, slots, globalStatePrefix = 'Mui') {
          const result = {};
          slots.forEach(slot => {
            result[slot] = generateUtilityClass(componentName, slot, globalStatePrefix);
          });
          return result;
        }
        const THEME_ID = '$$material';
        function memoize$2(fn) {
          var cache = Object.create(null);
          return function (arg) {
            if (cache[arg] === undefined) cache[arg] = fn(arg);
            return cache[arg];
          };
        }
        var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

        var isPropValid = /* #__PURE__ */memoize$2(function (prop) {
          return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
          /* o */ && prop.charCodeAt(1) === 110
          /* n */ && prop.charCodeAt(2) < 91;
        }
        /* Z+1 */);
        function sheetForTag(tag) {
          if (tag.sheet) {
            return tag.sheet;
          }
          for (var i = 0; i < document.styleSheets.length; i++) {
            if (document.styleSheets[i].ownerNode === tag) {
              return document.styleSheets[i];
            }
          }
        }
        function createStyleElement(options) {
          var tag = document.createElement("style");
          tag.setAttribute("data-emotion", options.key);
          if (options.nonce !== void 0) {
            tag.setAttribute("nonce", options.nonce);
          }
          tag.appendChild(document.createTextNode(""));
          tag.setAttribute("data-s", "");
          return tag;
        }
        var StyleSheet = /* @__PURE__ */function () {
          function StyleSheet2(options) {
            var _this = this;
            this._insertTag = function (tag) {
              var before;
              if (_this.tags.length === 0) {
                if (_this.insertionPoint) {
                  before = _this.insertionPoint.nextSibling;
                } else if (_this.prepend) {
                  before = _this.container.firstChild;
                } else {
                  before = _this.before;
                }
              } else {
                before = _this.tags[_this.tags.length - 1].nextSibling;
              }
              _this.container.insertBefore(tag, before);
              _this.tags.push(tag);
            };
            this.isSpeedy = options.speedy === void 0 ? true : options.speedy;
            this.tags = [];
            this.ctr = 0;
            this.nonce = options.nonce;
            this.key = options.key;
            this.container = options.container;
            this.prepend = options.prepend;
            this.insertionPoint = options.insertionPoint;
            this.before = null;
          }
          var _proto = StyleSheet2.prototype;
          _proto.hydrate = function hydrate(nodes) {
            nodes.forEach(this._insertTag);
          };
          _proto.insert = function insert(rule) {
            if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
              this._insertTag(createStyleElement(this));
            }
            var tag = this.tags[this.tags.length - 1];
            if (this.isSpeedy) {
              var sheet = sheetForTag(tag);
              try {
                sheet.insertRule(rule, sheet.cssRules.length);
              } catch (e) {}
            } else {
              tag.appendChild(document.createTextNode(rule));
            }
            this.ctr++;
          };
          _proto.flush = function flush() {
            this.tags.forEach(function (tag) {
              return tag.parentNode && tag.parentNode.removeChild(tag);
            });
            this.tags = [];
            this.ctr = 0;
          };
          return StyleSheet2;
        }();
        var MS$1 = '-ms-';
        var MOZ$1 = '-moz-';
        var WEBKIT$1 = '-webkit-';
        var COMMENT$1 = 'comm';
        var RULESET$1 = 'rule';
        var DECLARATION$1 = 'decl';
        var IMPORT$1 = '@import';
        var KEYFRAMES$1 = '@keyframes';
        var LAYER = '@layer';

        /**
         * @param {number}
         * @return {number}
         */
        var abs$1 = Math.abs;

        /**
         * @param {number}
         * @return {string}
         */
        var from$1 = String.fromCharCode;

        /**
         * @param {object}
         * @return {object}
         */
        var assign$2 = Object.assign;

        /**
         * @param {string} value
         * @param {number} length
         * @return {number}
         */
        function hash$1(value, length) {
          return charat$1(value, 0) ^ 45 ? (((length << 2 ^ charat$1(value, 0)) << 2 ^ charat$1(value, 1)) << 2 ^ charat$1(value, 2)) << 2 ^ charat$1(value, 3) : 0;
        }

        /**
         * @param {string} value
         * @return {string}
         */
        function trim$2(value) {
          return value.trim();
        }

        /**
         * @param {string} value
         * @param {RegExp} pattern
         * @return {string?}
         */
        function match$1(value, pattern) {
          return (value = pattern.exec(value)) ? value[0] : value;
        }

        /**
         * @param {string} value
         * @param {(string|RegExp)} pattern
         * @param {string} replacement
         * @return {string}
         */
        function replace$1(value, pattern, replacement) {
          return value.replace(pattern, replacement);
        }

        /**
         * @param {string} value
         * @param {string} search
         * @return {number}
         */
        function indexof$1(value, search) {
          return value.indexOf(search);
        }

        /**
         * @param {string} value
         * @param {number} index
         * @return {number}
         */
        function charat$1(value, index) {
          return value.charCodeAt(index) | 0;
        }

        /**
         * @param {string} value
         * @param {number} begin
         * @param {number} end
         * @return {string}
         */
        function substr$1(value, begin, end) {
          return value.slice(begin, end);
        }

        /**
         * @param {string} value
         * @return {number}
         */
        function strlen$1(value) {
          return value.length;
        }

        /**
         * @param {any[]} value
         * @return {number}
         */
        function sizeof$1(value) {
          return value.length;
        }

        /**
         * @param {any} value
         * @param {any[]} array
         * @return {any}
         */
        function append$1(value, array) {
          return array.push(value), value;
        }

        /**
         * @param {string[]} array
         * @param {function} callback
         * @return {string}
         */
        function combine$1(array, callback) {
          return array.map(callback).join('');
        }
        var line$1 = 1;
        var column$1 = 1;
        var length$1 = 0;
        var position$1 = 0;
        var character$1 = 0;
        var characters$1 = '';

        /**
         * @param {string} value
         * @param {object | null} root
         * @param {object | null} parent
         * @param {string} type
         * @param {string[] | string} props
         * @param {object[] | string} children
         * @param {number} length
         */
        function node$1(value, root, parent, type, props, children, length) {
          return {
            value: value,
            root: root,
            parent: parent,
            type: type,
            props: props,
            children: children,
            line: line$1,
            column: column$1,
            length: length,
            return: ''
          };
        }

        /**
         * @param {object} root
         * @param {object} props
         * @return {object}
         */
        function copy$1(root, props) {
          return assign$2(node$1('', null, null, '', null, null, 0), root, {
            length: -root.length
          }, props);
        }

        /**
         * @return {number}
         */
        function char$1() {
          return character$1;
        }

        /**
         * @return {number}
         */
        function prev$1() {
          character$1 = position$1 > 0 ? charat$1(characters$1, --position$1) : 0;
          if (column$1--, character$1 === 10) column$1 = 1, line$1--;
          return character$1;
        }

        /**
         * @return {number}
         */
        function next$2() {
          character$1 = position$1 < length$1 ? charat$1(characters$1, position$1++) : 0;
          if (column$1++, character$1 === 10) column$1 = 1, line$1++;
          return character$1;
        }

        /**
         * @return {number}
         */
        function peek$1() {
          return charat$1(characters$1, position$1);
        }

        /**
         * @return {number}
         */
        function caret$1() {
          return position$1;
        }

        /**
         * @param {number} begin
         * @param {number} end
         * @return {string}
         */
        function slice$1(begin, end) {
          return substr$1(characters$1, begin, end);
        }

        /**
         * @param {number} type
         * @return {number}
         */
        function token$1(type) {
          switch (type) {
            // \0 \t \n \r \s whitespace token
            case 0:
            case 9:
            case 10:
            case 13:
            case 32:
              return 5;
            // ! + , / > @ ~ isolate token
            case 33:
            case 43:
            case 44:
            case 47:
            case 62:
            case 64:
            case 126:
            // ; { } breakpoint token
            case 59:
            case 123:
            case 125:
              return 4;
            // : accompanied token
            case 58:
              return 3;
            // " ' ( [ opening delimit token
            case 34:
            case 39:
            case 40:
            case 91:
              return 2;
            // ) ] closing delimit token
            case 41:
            case 93:
              return 1;
          }
          return 0;
        }

        /**
         * @param {string} value
         * @return {any[]}
         */
        function alloc$1(value) {
          return line$1 = column$1 = 1, length$1 = strlen$1(characters$1 = value), position$1 = 0, [];
        }

        /**
         * @param {any} value
         * @return {any}
         */
        function dealloc$1(value) {
          return characters$1 = '', value;
        }

        /**
         * @param {number} type
         * @return {string}
         */
        function delimit$1(type) {
          return trim$2(slice$1(position$1 - 1, delimiter$1(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
        }

        /**
         * @param {number} type
         * @return {string}
         */
        function whitespace$1(type) {
          while (character$1 = peek$1()) if (character$1 < 33) next$2();else break;
          return token$1(type) > 2 || token$1(character$1) > 3 ? '' : ' ';
        }

        /**
         * @param {number} index
         * @param {number} count
         * @return {string}
         */
        function escaping$1(index, count) {
          while (--count && next$2())
          // not 0-9 A-F a-f
          if (character$1 < 48 || character$1 > 102 || character$1 > 57 && character$1 < 65 || character$1 > 70 && character$1 < 97) break;
          return slice$1(index, caret$1() + (count < 6 && peek$1() == 32 && next$2() == 32));
        }

        /**
         * @param {number} type
         * @return {number}
         */
        function delimiter$1(type) {
          while (next$2()) switch (character$1) {
            // ] ) " '
            case type:
              return position$1;
            // " '
            case 34:
            case 39:
              if (type !== 34 && type !== 39) delimiter$1(character$1);
              break;
            // (
            case 40:
              if (type === 41) delimiter$1(type);
              break;
            // \
            case 92:
              next$2();
              break;
          }
          return position$1;
        }

        /**
         * @param {number} type
         * @param {number} index
         * @return {number}
         */
        function commenter$1(type, index) {
          while (next$2())
          // //
          if (type + character$1 === 47 + 10) break;
          // /*
          else if (type + character$1 === 42 + 42 && peek$1() === 47) break;
          return '/*' + slice$1(index, position$1 - 1) + '*' + from$1(type === 47 ? type : next$2());
        }

        /**
         * @param {number} index
         * @return {string}
         */
        function identifier$1(index) {
          while (!token$1(peek$1())) next$2();
          return slice$1(index, position$1);
        }

        /**
         * @param {string} value
         * @return {object[]}
         */
        function compile$1(value) {
          return dealloc$1(parse$1('', null, null, null, [''], value = alloc$1(value), 0, [0], value));
        }

        /**
         * @param {string} value
         * @param {object} root
         * @param {object?} parent
         * @param {string[]} rule
         * @param {string[]} rules
         * @param {string[]} rulesets
         * @param {number[]} pseudo
         * @param {number[]} points
         * @param {string[]} declarations
         * @return {object}
         */
        function parse$1(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
          var index = 0;
          var offset = 0;
          var length = pseudo;
          var atrule = 0;
          var property = 0;
          var previous = 0;
          var variable = 1;
          var scanning = 1;
          var ampersand = 1;
          var character = 0;
          var type = '';
          var props = rules;
          var children = rulesets;
          var reference = rule;
          var characters = type;
          while (scanning) switch (previous = character, character = next$2()) {
            // (
            case 40:
              if (previous != 108 && charat$1(characters, length - 1) == 58) {
                if (indexof$1(characters += replace$1(delimit$1(character), '&', '&\f'), '&\f') != -1) ampersand = -1;
                break;
              }
            // " ' [
            case 34:
            case 39:
            case 91:
              characters += delimit$1(character);
              break;
            // \t \n \r \s
            case 9:
            case 10:
            case 13:
            case 32:
              characters += whitespace$1(previous);
              break;
            // \
            case 92:
              characters += escaping$1(caret$1() - 1, 7);
              continue;
            // /
            case 47:
              switch (peek$1()) {
                case 42:
                case 47:
                  append$1(comment$1(commenter$1(next$2(), caret$1()), root, parent), declarations);
                  break;
                default:
                  characters += '/';
              }
              break;
            // {
            case 123 * variable:
              points[index++] = strlen$1(characters) * ampersand;
            // } ; \0
            case 125 * variable:
            case 59:
            case 0:
              switch (character) {
                // \0 }
                case 0:
                case 125:
                  scanning = 0;
                // ;
                case 59 + offset:
                  if (ampersand == -1) characters = replace$1(characters, /\f/g, '');
                  if (property > 0 && strlen$1(characters) - length) append$1(property > 32 ? declaration$1(characters + ';', rule, parent, length - 1) : declaration$1(replace$1(characters, ' ', '') + ';', rule, parent, length - 2), declarations);
                  break;
                // @ ;
                case 59:
                  characters += ';';
                // { rule/at-rule
                default:
                  append$1(reference = ruleset$1(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length), rulesets);
                  if (character === 123) if (offset === 0) parse$1(characters, root, reference, reference, props, rulesets, length, points, children);else switch (atrule === 99 && charat$1(characters, 3) === 110 ? 100 : atrule) {
                    // d l m s
                    case 100:
                    case 108:
                    case 109:
                    case 115:
                      parse$1(value, reference, reference, rule && append$1(ruleset$1(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length), children), rules, children, length, points, rule ? props : children);
                      break;
                    default:
                      parse$1(characters, reference, reference, reference, [''], children, 0, points, children);
                  }
              }
              index = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo;
              break;
            // :
            case 58:
              length = 1 + strlen$1(characters), property = previous;
            default:
              if (variable < 1) if (character == 123) --variable;else if (character == 125 && variable++ == 0 && prev$1() == 125) continue;
              switch (characters += from$1(character), character * variable) {
                // &
                case 38:
                  ampersand = offset > 0 ? 1 : (characters += '\f', -1);
                  break;
                // ,
                case 44:
                  points[index++] = (strlen$1(characters) - 1) * ampersand, ampersand = 1;
                  break;
                // @
                case 64:
                  // -
                  if (peek$1() === 45) characters += delimit$1(next$2());
                  atrule = peek$1(), offset = length = strlen$1(type = characters += identifier$1(caret$1())), character++;
                  break;
                // -
                case 45:
                  if (previous === 45 && strlen$1(characters) == 2) variable = 0;
              }
          }
          return rulesets;
        }

        /**
         * @param {string} value
         * @param {object} root
         * @param {object?} parent
         * @param {number} index
         * @param {number} offset
         * @param {string[]} rules
         * @param {number[]} points
         * @param {string} type
         * @param {string[]} props
         * @param {string[]} children
         * @param {number} length
         * @return {object}
         */
        function ruleset$1(value, root, parent, index, offset, rules, points, type, props, children, length) {
          var post = offset - 1;
          var rule = offset === 0 ? rules : [''];
          var size = sizeof$1(rule);
          for (var i = 0, j = 0, k = 0; i < index; ++i) for (var x = 0, y = substr$1(value, post + 1, post = abs$1(j = points[i])), z = value; x < size; ++x) if (z = trim$2(j > 0 ? rule[x] + ' ' + y : replace$1(y, /&\f/g, rule[x]))) props[k++] = z;
          return node$1(value, root, parent, offset === 0 ? RULESET$1 : type, props, children, length);
        }

        /**
         * @param {number} value
         * @param {object} root
         * @param {object?} parent
         * @return {object}
         */
        function comment$1(value, root, parent) {
          return node$1(value, root, parent, COMMENT$1, from$1(char$1()), substr$1(value, 2, -2), 0);
        }

        /**
         * @param {string} value
         * @param {object} root
         * @param {object?} parent
         * @param {number} length
         * @return {object}
         */
        function declaration$1(value, root, parent, length) {
          return node$1(value, root, parent, DECLARATION$1, substr$1(value, 0, length), substr$1(value, length + 1, -1), length);
        }

        /**
         * @param {object[]} children
         * @param {function} callback
         * @return {string}
         */
        function serialize$1(children, callback) {
          var output = '';
          var length = sizeof$1(children);
          for (var i = 0; i < length; i++) output += callback(children[i], i, children, callback) || '';
          return output;
        }

        /**
         * @param {object} element
         * @param {number} index
         * @param {object[]} children
         * @param {function} callback
         * @return {string}
         */
        function stringify(element, index, children, callback) {
          switch (element.type) {
            case LAYER:
              if (element.children.length) break;
            case IMPORT$1:
            case DECLARATION$1:
              return element.return = element.return || element.value;
            case COMMENT$1:
              return '';
            case KEYFRAMES$1:
              return element.return = element.value + '{' + serialize$1(element.children, callback) + '}';
            case RULESET$1:
              element.value = element.props.join(',');
          }
          return strlen$1(children = serialize$1(element.children, callback)) ? element.return = element.value + '{' + children + '}' : '';
        }

        /**
         * @param {function[]} collection
         * @return {function}
         */
        function middleware(collection) {
          var length = sizeof$1(collection);
          return function (element, index, children, callback) {
            var output = '';
            for (var i = 0; i < length; i++) output += collection[i](element, index, children, callback) || '';
            return output;
          };
        }

        /**
         * @param {function} callback
         * @return {function}
         */
        function rulesheet(callback) {
          return function (element) {
            if (!element.root) if (element = element.return) callback(element);
          };
        }
        var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index) {
          var previous = 0;
          var character = 0;
          while (true) {
            previous = character;
            character = peek$1();
            if (previous === 38 && character === 12) {
              points[index] = 1;
            }
            if (token$1(character)) {
              break;
            }
            next$2();
          }
          return slice$1(begin, position$1);
        };
        var toRules = function toRules2(parsed, points) {
          var index = -1;
          var character = 44;
          do {
            switch (token$1(character)) {
              case 0:
                if (character === 38 && peek$1() === 12) {
                  points[index] = 1;
                }
                parsed[index] += identifierWithPointTracking(position$1 - 1, points, index);
                break;
              case 2:
                parsed[index] += delimit$1(character);
                break;
              case 4:
                if (character === 44) {
                  parsed[++index] = peek$1() === 58 ? "&\f" : "";
                  points[index] = parsed[index].length;
                  break;
                }
              default:
                parsed[index] += from$1(character);
            }
          } while (character = next$2());
          return parsed;
        };
        var getRules = function getRules2(value, points) {
          return dealloc$1(toRules(alloc$1(value), points));
        };
        var fixedElements = /* @__PURE__ */new WeakMap();
        var compat = function compat2(element) {
          if (element.type !== "rule" || !element.parent ||
          // positive .length indicates that this rule contains pseudo
          // negative .length indicates that this rule has been already prefixed
          element.length < 1) {
            return;
          }
          var value = element.value,
            parent = element.parent;
          var isImplicitRule = element.column === parent.column && element.line === parent.line;
          while (parent.type !== "rule") {
            parent = parent.parent;
            if (!parent) return;
          }
          if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
            return;
          }
          if (isImplicitRule) {
            return;
          }
          fixedElements.set(element, true);
          var points = [];
          var rules = getRules(value, points);
          var parentRules = parent.props;
          for (var i = 0, k = 0; i < rules.length; i++) {
            for (var j = 0; j < parentRules.length; j++, k++) {
              element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
            }
          }
        };
        var removeLabel = function removeLabel2(element) {
          if (element.type === "decl") {
            var value = element.value;
            if (
            // charcode for l
            value.charCodeAt(0) === 108 &&
            // charcode for b
            value.charCodeAt(2) === 98) {
              element["return"] = "";
              element.value = "";
            }
          }
        };
        function prefix$1(value, length) {
          switch (hash$1(value, length)) {
            case 5103:
              return WEBKIT$1 + "print-" + value + value;
            case 5737:
            case 4201:
            case 3177:
            case 3433:
            case 1641:
            case 4457:
            case 2921:
            case 5572:
            case 6356:
            case 5844:
            case 3191:
            case 6645:
            case 3005:
            case 6391:
            case 5879:
            case 5623:
            case 6135:
            case 4599:
            case 4855:
            case 4215:
            case 6389:
            case 5109:
            case 5365:
            case 5621:
            case 3829:
              return WEBKIT$1 + value + value;
            case 5349:
            case 4246:
            case 4810:
            case 6968:
            case 2756:
              return WEBKIT$1 + value + MOZ$1 + value + MS$1 + value + value;
            case 6828:
            case 4268:
              return WEBKIT$1 + value + MS$1 + value + value;
            case 6165:
              return WEBKIT$1 + value + MS$1 + "flex-" + value + value;
            case 5187:
              return WEBKIT$1 + value + replace$1(value, /(\w+).+(:[^]+)/, WEBKIT$1 + "box-$1$2" + MS$1 + "flex-$1$2") + value;
            case 5443:
              return WEBKIT$1 + value + MS$1 + "flex-item-" + replace$1(value, /flex-|-self/, "") + value;
            case 4675:
              return WEBKIT$1 + value + MS$1 + "flex-line-pack" + replace$1(value, /align-content|flex-|-self/, "") + value;
            case 5548:
              return WEBKIT$1 + value + MS$1 + replace$1(value, "shrink", "negative") + value;
            case 5292:
              return WEBKIT$1 + value + MS$1 + replace$1(value, "basis", "preferred-size") + value;
            case 6060:
              return WEBKIT$1 + "box-" + replace$1(value, "-grow", "") + WEBKIT$1 + value + MS$1 + replace$1(value, "grow", "positive") + value;
            case 4554:
              return WEBKIT$1 + replace$1(value, /([^-])(transform)/g, "$1" + WEBKIT$1 + "$2") + value;
            case 6187:
              return replace$1(replace$1(replace$1(value, /(zoom-|grab)/, WEBKIT$1 + "$1"), /(image-set)/, WEBKIT$1 + "$1"), value, "") + value;
            case 5495:
            case 3959:
              return replace$1(value, /(image-set\([^]*)/, WEBKIT$1 + "$1$`$1");
            case 4968:
              return replace$1(replace$1(value, /(.+:)(flex-)?(.*)/, WEBKIT$1 + "box-pack:$3" + MS$1 + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT$1 + value + value;
            case 4095:
            case 3583:
            case 4068:
            case 2532:
              return replace$1(value, /(.+)-inline(.+)/, WEBKIT$1 + "$1$2") + value;
            case 8116:
            case 7059:
            case 5753:
            case 5535:
            case 5445:
            case 5701:
            case 4933:
            case 4677:
            case 5533:
            case 5789:
            case 5021:
            case 4765:
              if (strlen$1(value) - 1 - length > 6) switch (charat$1(value, length + 1)) {
                case 109:
                  if (charat$1(value, length + 4) !== 45) break;
                case 102:
                  return replace$1(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT$1 + "$2-$3$1" + MOZ$1 + (charat$1(value, length + 3) == 108 ? "$3" : "$2-$3")) + value;
                case 115:
                  return ~indexof$1(value, "stretch") ? prefix$1(replace$1(value, "stretch", "fill-available"), length) + value : value;
              }
              break;
            case 4949:
              if (charat$1(value, length + 1) !== 115) break;
            case 6444:
              switch (charat$1(value, strlen$1(value) - 3 - (~indexof$1(value, "!important") && 10))) {
                case 107:
                  return replace$1(value, ":", ":" + WEBKIT$1) + value;
                case 101:
                  return replace$1(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT$1 + (charat$1(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT$1 + "$2$3$1" + MS$1 + "$2box$3") + value;
              }
              break;
            case 5936:
              switch (charat$1(value, length + 11)) {
                case 114:
                  return WEBKIT$1 + value + MS$1 + replace$1(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
                case 108:
                  return WEBKIT$1 + value + MS$1 + replace$1(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
                case 45:
                  return WEBKIT$1 + value + MS$1 + replace$1(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
              }
              return WEBKIT$1 + value + MS$1 + value + value;
          }
          return value;
        }
        var prefixer$1 = function prefixer2(element, index, children, callback) {
          if (element.length > -1) {
            if (!element["return"]) switch (element.type) {
              case DECLARATION$1:
                element["return"] = prefix$1(element.value, element.length);
                break;
              case KEYFRAMES$1:
                return serialize$1([copy$1(element, {
                  value: replace$1(element.value, "@", "@" + WEBKIT$1)
                })], callback);
              case RULESET$1:
                if (element.length) return combine$1(element.props, function (value) {
                  switch (match$1(value, /(::plac\w+|:read-\w+)/)) {
                    case ":read-only":
                    case ":read-write":
                      return serialize$1([copy$1(element, {
                        props: [replace$1(value, /:(read-\w+)/, ":" + MOZ$1 + "$1")]
                      })], callback);
                    case "::placeholder":
                      return serialize$1([copy$1(element, {
                        props: [replace$1(value, /:(plac\w+)/, ":" + WEBKIT$1 + "input-$1")]
                      }), copy$1(element, {
                        props: [replace$1(value, /:(plac\w+)/, ":" + MOZ$1 + "$1")]
                      }), copy$1(element, {
                        props: [replace$1(value, /:(plac\w+)/, MS$1 + "input-$1")]
                      })], callback);
                  }
                  return "";
                });
            }
          }
        };
        var defaultStylisPlugins = [prefixer$1];
        var createCache = function createCache2(options) {
          var key = options.key;
          if (key === "css") {
            var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
            Array.prototype.forEach.call(ssrStyles, function (node) {
              var dataEmotionAttribute = node.getAttribute("data-emotion");
              if (dataEmotionAttribute.indexOf(" ") === -1) {
                return;
              }
              document.head.appendChild(node);
              node.setAttribute("data-s", "");
            });
          }
          var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
          var inserted = {};
          var container;
          var nodesToHydrate = [];
          {
            container = options.container || document.head;
            Array.prototype.forEach.call(
            // this means we will ignore elements which don't have a space in them which
            // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
            document.querySelectorAll('style[data-emotion^="' + key + ' "]'), function (node) {
              var attrib = node.getAttribute("data-emotion").split(" ");
              for (var i = 1; i < attrib.length; i++) {
                inserted[attrib[i]] = true;
              }
              nodesToHydrate.push(node);
            });
          }
          var _insert;
          var omnipresentPlugins = [compat, removeLabel];
          {
            var currentSheet;
            var finalizingPlugins = [stringify, rulesheet(function (rule) {
              currentSheet.insert(rule);
            })];
            var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
            var stylis = function stylis2(styles) {
              return serialize$1(compile$1(styles), serializer);
            };
            _insert = function insert(selector, serialized, sheet, shouldCache) {
              currentSheet = sheet;
              stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
              if (shouldCache) {
                cache.inserted[serialized.name] = true;
              }
            };
          }
          var cache = {
            key,
            sheet: new StyleSheet({
              key,
              container,
              nonce: options.nonce,
              speedy: options.speedy,
              prepend: options.prepend,
              insertionPoint: options.insertionPoint
            }),
            nonce: options.nonce,
            inserted,
            registered: {},
            insert: _insert
          };
          cache.sheet.hydrate(nodesToHydrate);
          return cache;
        };
        var reactIs$1 = {
          exports: {}
        };
        var reactIs_production_min = {};

        /** @license React v16.13.1
         * react-is.production.min.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        var b$1 = "function" === typeof Symbol && Symbol.for,
          c$1 = b$1 ? Symbol.for("react.element") : 60103,
          d$1 = b$1 ? Symbol.for("react.portal") : 60106,
          e$1 = b$1 ? Symbol.for("react.fragment") : 60107,
          f$1 = b$1 ? Symbol.for("react.strict_mode") : 60108,
          g$1 = b$1 ? Symbol.for("react.profiler") : 60114,
          h$3 = b$1 ? Symbol.for("react.provider") : 60109,
          k$2 = b$1 ? Symbol.for("react.context") : 60110,
          l$2 = b$1 ? Symbol.for("react.async_mode") : 60111,
          m$2 = b$1 ? Symbol.for("react.concurrent_mode") : 60111,
          n$3 = b$1 ? Symbol.for("react.forward_ref") : 60112,
          p$3 = b$1 ? Symbol.for("react.suspense") : 60113,
          q$3 = b$1 ? Symbol.for("react.suspense_list") : 60120,
          r$4 = b$1 ? Symbol.for("react.memo") : 60115,
          t$3 = b$1 ? Symbol.for("react.lazy") : 60116,
          v$2 = b$1 ? Symbol.for("react.block") : 60121,
          w$2 = b$1 ? Symbol.for("react.fundamental") : 60117,
          x$1 = b$1 ? Symbol.for("react.responder") : 60118,
          y$1 = b$1 ? Symbol.for("react.scope") : 60119;
        function z$1(a) {
          if ("object" === typeof a && null !== a) {
            var u = a.$$typeof;
            switch (u) {
              case c$1:
                switch (a = a.type, a) {
                  case l$2:
                  case m$2:
                  case e$1:
                  case g$1:
                  case f$1:
                  case p$3:
                    return a;
                  default:
                    switch (a = a && a.$$typeof, a) {
                      case k$2:
                      case n$3:
                      case t$3:
                      case r$4:
                      case h$3:
                        return a;
                      default:
                        return u;
                    }
                }
              case d$1:
                return u;
            }
          }
        }
        function A$1(a) {
          return z$1(a) === m$2;
        }
        reactIs_production_min.AsyncMode = l$2;
        reactIs_production_min.ConcurrentMode = m$2;
        reactIs_production_min.ContextConsumer = k$2;
        reactIs_production_min.ContextProvider = h$3;
        reactIs_production_min.Element = c$1;
        reactIs_production_min.ForwardRef = n$3;
        reactIs_production_min.Fragment = e$1;
        reactIs_production_min.Lazy = t$3;
        reactIs_production_min.Memo = r$4;
        reactIs_production_min.Portal = d$1;
        reactIs_production_min.Profiler = g$1;
        reactIs_production_min.StrictMode = f$1;
        reactIs_production_min.Suspense = p$3;
        reactIs_production_min.isAsyncMode = function (a) {
          return A$1(a) || z$1(a) === l$2;
        };
        reactIs_production_min.isConcurrentMode = A$1;
        reactIs_production_min.isContextConsumer = function (a) {
          return z$1(a) === k$2;
        };
        reactIs_production_min.isContextProvider = function (a) {
          return z$1(a) === h$3;
        };
        reactIs_production_min.isElement = function (a) {
          return "object" === typeof a && null !== a && a.$$typeof === c$1;
        };
        reactIs_production_min.isForwardRef = function (a) {
          return z$1(a) === n$3;
        };
        reactIs_production_min.isFragment = function (a) {
          return z$1(a) === e$1;
        };
        reactIs_production_min.isLazy = function (a) {
          return z$1(a) === t$3;
        };
        reactIs_production_min.isMemo = function (a) {
          return z$1(a) === r$4;
        };
        reactIs_production_min.isPortal = function (a) {
          return z$1(a) === d$1;
        };
        reactIs_production_min.isProfiler = function (a) {
          return z$1(a) === g$1;
        };
        reactIs_production_min.isStrictMode = function (a) {
          return z$1(a) === f$1;
        };
        reactIs_production_min.isSuspense = function (a) {
          return z$1(a) === p$3;
        };
        reactIs_production_min.isValidElementType = function (a) {
          return "string" === typeof a || "function" === typeof a || a === e$1 || a === m$2 || a === g$1 || a === f$1 || a === p$3 || a === q$3 || "object" === typeof a && null !== a && (a.$$typeof === t$3 || a.$$typeof === r$4 || a.$$typeof === h$3 || a.$$typeof === k$2 || a.$$typeof === n$3 || a.$$typeof === w$2 || a.$$typeof === x$1 || a.$$typeof === y$1 || a.$$typeof === v$2);
        };
        reactIs_production_min.typeOf = z$1;
        {
          reactIs$1.exports = reactIs_production_min;
        }
        var reactIsExports = reactIs$1.exports;
        var reactIs = reactIsExports;

        /**
         * Copyright 2015, Yahoo! Inc.
         * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
         */
        var REACT_STATICS = {
          childContextTypes: true,
          contextType: true,
          contextTypes: true,
          defaultProps: true,
          displayName: true,
          getDefaultProps: true,
          getDerivedStateFromError: true,
          getDerivedStateFromProps: true,
          mixins: true,
          propTypes: true,
          type: true
        };
        var KNOWN_STATICS = {
          name: true,
          length: true,
          prototype: true,
          caller: true,
          callee: true,
          arguments: true,
          arity: true
        };
        var FORWARD_REF_STATICS = {
          '$$typeof': true,
          render: true,
          defaultProps: true,
          displayName: true,
          propTypes: true
        };
        var MEMO_STATICS = {
          '$$typeof': true,
          compare: true,
          defaultProps: true,
          displayName: true,
          propTypes: true,
          type: true
        };
        var TYPE_STATICS = {};
        TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
        TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
        function getStatics(component) {
          // React v16.11 and below
          if (reactIs.isMemo(component)) {
            return MEMO_STATICS;
          } // React v16.12 and above

          return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
        }
        var defineProperty = Object.defineProperty;
        var getOwnPropertyNames = Object.getOwnPropertyNames;
        var getOwnPropertySymbols = Object.getOwnPropertySymbols;
        var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
        var getPrototypeOf$1 = Object.getPrototypeOf;
        var objectPrototype = Object.prototype;
        function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
          if (typeof sourceComponent !== 'string') {
            // don't hoist over string (html) components
            if (objectPrototype) {
              var inheritedComponent = getPrototypeOf$1(sourceComponent);
              if (inheritedComponent && inheritedComponent !== objectPrototype) {
                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
              }
            }
            var keys = getOwnPropertyNames(sourceComponent);
            if (getOwnPropertySymbols) {
              keys = keys.concat(getOwnPropertySymbols(sourceComponent));
            }
            var targetStatics = getStatics(targetComponent);
            var sourceStatics = getStatics(sourceComponent);
            for (var i = 0; i < keys.length; ++i) {
              var key = keys[i];
              if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try {
                  // Avoid failures from read-only properties
                  defineProperty(targetComponent, key, descriptor);
                } catch (e) {}
              }
            }
          }
          return targetComponent;
        }
        var hoistNonReactStatics_cjs = hoistNonReactStatics;
        const hoistStatics = exports('cH', /*@__PURE__*/getDefaultExportFromCjs(hoistNonReactStatics_cjs));
        var isBrowser = "object" !== 'undefined';
        function getRegisteredStyles(registered, registeredStyles, classNames) {
          var rawClassName = '';
          classNames.split(' ').forEach(function (className) {
            if (registered[className] !== undefined) {
              registeredStyles.push(registered[className] + ";");
            } else {
              rawClassName += className + " ";
            }
          });
          return rawClassName;
        }
        var registerStyles = function registerStyles(cache, serialized, isStringTag) {
          var className = cache.key + "-" + serialized.name;
          if (
          // we only need to add the styles to the registered cache if the
          // class name could be used further down
          // the tree but if it's a string tag, we know it won't
          // so we don't have to add it to registered cache.
          // this improves memory usage since we can avoid storing the whole style string
          (isStringTag === false ||
          // we need to always store it if we're in compat mode and
          // in node since emotion-server relies on whether a style is in
          // the registered cache to know whether a style is global or not
          // also, note that this check will be dead code eliminated in the browser
          isBrowser === false) && cache.registered[className] === undefined) {
            cache.registered[className] = serialized.styles;
          }
        };
        var insertStyles = function insertStyles(cache, serialized, isStringTag) {
          registerStyles(cache, serialized, isStringTag);
          var className = cache.key + "-" + serialized.name;
          if (cache.inserted[serialized.name] === undefined) {
            var current = serialized;
            do {
              cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);
              current = current.next;
            } while (current !== undefined);
          }
        };

        /* eslint-disable */
        // Inspired by https://github.com/garycourt/murmurhash-js
        // Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
        function murmur2(str) {
          // 'm' and 'r' are mixing constants generated offline.
          // They're not really 'magic', they just happen to work well.
          // const m = 0x5bd1e995;
          // const r = 24;
          // Initialize the hash
          var h = 0; // Mix 4 bytes at a time into the hash

          var k,
            i = 0,
            len = str.length;
          for (; len >= 4; ++i, len -= 4) {
            k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
            k = /* Math.imul(k, m): */
            (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
            k ^= /* k >>> r: */
            k >>> 24;
            h = /* Math.imul(k, m): */
            (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^ /* Math.imul(h, m): */
            (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
          } // Handle the last few bytes of the input array

          switch (len) {
            case 3:
              h ^= (str.charCodeAt(i + 2) & 0xff) << 16;
            case 2:
              h ^= (str.charCodeAt(i + 1) & 0xff) << 8;
            case 1:
              h ^= str.charCodeAt(i) & 0xff;
              h = /* Math.imul(h, m): */
              (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
          } // Do a few final mixes of the hash to ensure the last few
          // bytes are well-incorporated.

          h ^= h >>> 13;
          h = /* Math.imul(h, m): */
          (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
          return ((h ^ h >>> 15) >>> 0).toString(36);
        }
        var unitlessKeys = {
          animationIterationCount: 1,
          aspectRatio: 1,
          borderImageOutset: 1,
          borderImageSlice: 1,
          borderImageWidth: 1,
          boxFlex: 1,
          boxFlexGroup: 1,
          boxOrdinalGroup: 1,
          columnCount: 1,
          columns: 1,
          flex: 1,
          flexGrow: 1,
          flexPositive: 1,
          flexShrink: 1,
          flexNegative: 1,
          flexOrder: 1,
          gridRow: 1,
          gridRowEnd: 1,
          gridRowSpan: 1,
          gridRowStart: 1,
          gridColumn: 1,
          gridColumnEnd: 1,
          gridColumnSpan: 1,
          gridColumnStart: 1,
          msGridRow: 1,
          msGridRowSpan: 1,
          msGridColumn: 1,
          msGridColumnSpan: 1,
          fontWeight: 1,
          lineHeight: 1,
          opacity: 1,
          order: 1,
          orphans: 1,
          tabSize: 1,
          widows: 1,
          zIndex: 1,
          zoom: 1,
          WebkitLineClamp: 1,
          // SVG-related properties
          fillOpacity: 1,
          floodOpacity: 1,
          stopOpacity: 1,
          strokeDasharray: 1,
          strokeDashoffset: 1,
          strokeMiterlimit: 1,
          strokeOpacity: 1,
          strokeWidth: 1
        };
        var hyphenateRegex = /[A-Z]|^ms/g;
        var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
        var isCustomProperty = function isCustomProperty2(property) {
          return property.charCodeAt(1) === 45;
        };
        var isProcessableValue = function isProcessableValue2(value) {
          return value != null && typeof value !== "boolean";
        };
        var processStyleName = /* @__PURE__ */memoize$2(function (styleName) {
          return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
        });
        var processStyleValue = function processStyleValue2(key, value) {
          switch (key) {
            case "animation":
            case "animationName":
              {
                if (typeof value === "string") {
                  return value.replace(animationRegex, function (match, p1, p2) {
                    cursor = {
                      name: p1,
                      styles: p2,
                      next: cursor
                    };
                    return p1;
                  });
                }
              }
          }
          if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
            return value + "px";
          }
          return value;
        };
        var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
        function handleInterpolation(mergedProps, registered, interpolation) {
          if (interpolation == null) {
            return "";
          }
          if (interpolation.__emotion_styles !== void 0) {
            return interpolation;
          }
          switch (typeof interpolation) {
            case "boolean":
              {
                return "";
              }
            case "object":
              {
                if (interpolation.anim === 1) {
                  cursor = {
                    name: interpolation.name,
                    styles: interpolation.styles,
                    next: cursor
                  };
                  return interpolation.name;
                }
                if (interpolation.styles !== void 0) {
                  var next = interpolation.next;
                  if (next !== void 0) {
                    while (next !== void 0) {
                      cursor = {
                        name: next.name,
                        styles: next.styles,
                        next: cursor
                      };
                      next = next.next;
                    }
                  }
                  var styles = interpolation.styles + ";";
                  return styles;
                }
                return createStringFromObject(mergedProps, registered, interpolation);
              }
            case "function":
              {
                if (mergedProps !== void 0) {
                  var previousCursor = cursor;
                  var result = interpolation(mergedProps);
                  cursor = previousCursor;
                  return handleInterpolation(mergedProps, registered, result);
                }
                break;
              }
          }
          if (registered == null) {
            return interpolation;
          }
          var cached = registered[interpolation];
          return cached !== void 0 ? cached : interpolation;
        }
        function createStringFromObject(mergedProps, registered, obj) {
          var string = "";
          if (Array.isArray(obj)) {
            for (var i = 0; i < obj.length; i++) {
              string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
            }
          } else {
            for (var _key in obj) {
              var value = obj[_key];
              if (typeof value !== "object") {
                if (registered != null && registered[value] !== void 0) {
                  string += _key + "{" + registered[value] + "}";
                } else if (isProcessableValue(value)) {
                  string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
                }
              } else {
                if (_key === "NO_COMPONENT_SELECTOR" && false) {
                  throw new Error(noComponentSelectorMessage);
                }
                if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
                  for (var _i = 0; _i < value.length; _i++) {
                    if (isProcessableValue(value[_i])) {
                      string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
                    }
                  }
                } else {
                  var interpolated = handleInterpolation(mergedProps, registered, value);
                  switch (_key) {
                    case "animation":
                    case "animationName":
                      {
                        string += processStyleName(_key) + ":" + interpolated + ";";
                        break;
                      }
                    default:
                      {
                        string += _key + "{" + interpolated + "}";
                      }
                  }
                }
              }
            }
          }
          return string;
        }
        var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
        var cursor;
        var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
          if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
            return args[0];
          }
          var stringMode = true;
          var styles = "";
          cursor = void 0;
          var strings = args[0];
          if (strings == null || strings.raw === void 0) {
            stringMode = false;
            styles += handleInterpolation(mergedProps, registered, strings);
          } else {
            styles += strings[0];
          }
          for (var i = 1; i < args.length; i++) {
            styles += handleInterpolation(mergedProps, registered, args[i]);
            if (stringMode) {
              styles += strings[i];
            }
          }
          labelPattern.lastIndex = 0;
          var identifierName = "";
          var match;
          while ((match = labelPattern.exec(styles)) !== null) {
            identifierName += "-" +
            // $FlowFixMe we know it's not null
            match[1];
          }
          var name = murmur2(styles) + identifierName;
          return {
            name,
            styles,
            next: cursor
          };
        };
        var syncFallback = function syncFallback(create) {
          return create();
        };
        var useInsertionEffect = React$1['useInsertion' + 'Effect'] ? React$1['useInsertion' + 'Effect'] : false;
        var useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect || syncFallback;
        var useInsertionEffectWithLayoutFallback = useInsertionEffect || reactExports.useLayoutEffect;
        var EmotionCacheContext = /* @__PURE__ */reactExports.createContext(
        // we're doing this to avoid preconstruct's dead code elimination in this one case
        // because this module is primarily intended for the browser and node
        // but it's also required in react native and similar environments sometimes
        // and we could have a special build just for that
        // but this is much easier and the native packages
        // might use a different theme context in the future anyway
        typeof HTMLElement !== "undefined" ? /* @__PURE__ */createCache({
          key: "css"
        }) : null);
        var CacheProvider = exports("O", EmotionCacheContext.Provider);
        var withEmotionCache = function withEmotionCache2(func) {
          return /* @__PURE__ */reactExports.forwardRef(function (props, ref) {
            var cache = reactExports.useContext(EmotionCacheContext);
            return func(props, cache, ref);
          });
        };
        var ThemeContext$2 = /* @__PURE__ */reactExports.createContext({});
        var useTheme$4 = exports("b5", function useTheme2() {
          return reactExports.useContext(ThemeContext$2);
        });
        var Global = /* @__PURE__ */withEmotionCache(function (props, cache) {
          var styles = props.styles;
          var serialized = serializeStyles([styles], void 0, reactExports.useContext(ThemeContext$2));
          var sheetRef = reactExports.useRef();
          useInsertionEffectWithLayoutFallback(function () {
            var key = cache.key + "-global";
            var sheet = new cache.sheet.constructor({
              key,
              nonce: cache.sheet.nonce,
              container: cache.sheet.container,
              speedy: cache.sheet.isSpeedy
            });
            var rehydrating = false;
            var node = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
            if (cache.sheet.tags.length) {
              sheet.before = cache.sheet.tags[0];
            }
            if (node !== null) {
              rehydrating = true;
              node.setAttribute("data-emotion", key);
              sheet.hydrate([node]);
            }
            sheetRef.current = [sheet, rehydrating];
            return function () {
              sheet.flush();
            };
          }, [cache]);
          useInsertionEffectWithLayoutFallback(function () {
            var sheetRefCurrent = sheetRef.current;
            var sheet = sheetRefCurrent[0],
              rehydrating = sheetRefCurrent[1];
            if (rehydrating) {
              sheetRefCurrent[1] = false;
              return;
            }
            if (serialized.next !== void 0) {
              insertStyles(cache, serialized.next, true);
            }
            if (sheet.tags.length) {
              var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
              sheet.before = element;
              sheet.flush();
            }
            cache.insert("", serialized, sheet, false);
          }, [cache, serialized.name]);
          return null;
        });
        function css() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return serializeStyles(args);
        }
        var keyframes = function keyframes2() {
          var insertable = css.apply(void 0, arguments);
          var name = "animation-" + insertable.name;
          return {
            name,
            styles: "@keyframes " + name + "{" + insertable.styles + "}",
            anim: 1,
            toString: function toString() {
              return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
            }
          };
        };
        var testOmitPropsOnStringTag = isPropValid;
        var testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
          return key !== "theme";
        };
        var getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
          return typeof tag === "string" &&
          // 96 is one less than the char code
          // for "a" so this is checking that
          // it's a lowercase character
          tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
        };
        var composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
          var shouldForwardProp;
          if (options) {
            var optionsShouldForwardProp = options.shouldForwardProp;
            shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function (propName) {
              return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
            } : optionsShouldForwardProp;
          }
          if (typeof shouldForwardProp !== "function" && isReal) {
            shouldForwardProp = tag.__emotion_forwardProp;
          }
          return shouldForwardProp;
        };
        var Insertion = function Insertion2(_ref) {
          var cache = _ref.cache,
            serialized = _ref.serialized,
            isStringTag = _ref.isStringTag;
          registerStyles(cache, serialized, isStringTag);
          useInsertionEffectAlwaysWithSyncFallback(function () {
            return insertStyles(cache, serialized, isStringTag);
          });
          return null;
        };
        var createStyled$1 = function createStyled2(tag, options) {
          var isReal = tag.__emotion_real === tag;
          var baseTag = isReal && tag.__emotion_base || tag;
          var identifierName;
          var targetClassName;
          if (options !== void 0) {
            identifierName = options.label;
            targetClassName = options.target;
          }
          var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
          var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
          var shouldUseAs = !defaultShouldForwardProp("as");
          return function () {
            var args = arguments;
            var styles = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
            if (identifierName !== void 0) {
              styles.push("label:" + identifierName + ";");
            }
            if (args[0] == null || args[0].raw === void 0) {
              styles.push.apply(styles, args);
            } else {
              styles.push(args[0][0]);
              var len = args.length;
              var i = 1;
              for (; i < len; i++) {
                styles.push(args[i], args[0][i]);
              }
            }
            var Styled = withEmotionCache(function (props, cache, ref) {
              var FinalTag = shouldUseAs && props.as || baseTag;
              var className = "";
              var classInterpolations = [];
              var mergedProps = props;
              if (props.theme == null) {
                mergedProps = {};
                for (var key in props) {
                  mergedProps[key] = props[key];
                }
                mergedProps.theme = reactExports.useContext(ThemeContext$2);
              }
              if (typeof props.className === "string") {
                className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
              } else if (props.className != null) {
                className = props.className + " ";
              }
              var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
              className += cache.key + "-" + serialized.name;
              if (targetClassName !== void 0) {
                className += " " + targetClassName;
              }
              var finalShouldForwardProp = shouldUseAs && shouldForwardProp === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
              var newProps = {};
              for (var _key in props) {
                if (shouldUseAs && _key === "as") continue;
                if (
                // $FlowFixMe
                finalShouldForwardProp(_key)) {
                  newProps[_key] = props[_key];
                }
              }
              newProps.className = className;
              newProps.ref = ref;
              return /* @__PURE__ */reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */reactExports.createElement(Insertion, {
                cache,
                serialized,
                isStringTag: typeof FinalTag === "string"
              }), /* @__PURE__ */reactExports.createElement(FinalTag, newProps));
            });
            Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
            Styled.defaultProps = tag.defaultProps;
            Styled.__emotion_real = Styled;
            Styled.__emotion_base = baseTag;
            Styled.__emotion_styles = styles;
            Styled.__emotion_forwardProp = shouldForwardProp;
            Object.defineProperty(Styled, "toString", {
              value: function value() {
                if (targetClassName === void 0 && false) {
                  return "NO_COMPONENT_SELECTOR";
                }
                return "." + targetClassName;
              }
            });
            Styled.withComponent = function (nextTag, nextOptions) {
              return createStyled2(nextTag, _extends({}, options, nextOptions, {
                shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
              })).apply(void 0, styles);
            };
            return Styled;
          };
        };
        var tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr',
        // SVG
        'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];
        var newStyled = createStyled$1.bind();
        tags.forEach(function (tagName) {
          // $FlowFixMe: we can ignore this because its exposed type is defined by the CreateStyled type
          newStyled[tagName] = newStyled(tagName);
        });
        function isEmpty$4(obj) {
          return obj === void 0 || obj === null || Object.keys(obj).length === 0;
        }
        function GlobalStyles$2(props) {
          const styles = props.styles,
            _props$defaultTheme = props.defaultTheme,
            defaultTheme = _props$defaultTheme === void 0 ? {} : _props$defaultTheme;
          const globalStyles = typeof styles === "function" ? themeInput => styles(isEmpty$4(themeInput) ? defaultTheme : themeInput) : styles;
          return /* @__PURE__ */jsxRuntimeExports.jsx(Global, {
            styles: globalStyles
          });
        }

        /**
         * @mui/styled-engine v5.13.2
         *
         * @license MIT
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        function styled$2(tag, options) {
          const stylesFactory = newStyled(tag, options);
          return stylesFactory;
        }
        const internal_processStyles = (tag, processor) => {
          if (Array.isArray(tag.__emotion_styles)) {
            tag.__emotion_styles = processor(tag.__emotion_styles);
          }
        };
        const _excluded$P = ["values", "unit", "step"];
        const sortBreakpointsValues = values => {
          const breakpointsAsArray = Object.keys(values).map(key => ({
            key,
            val: values[key]
          })) || [];
          // Sort in ascending order
          breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
          return breakpointsAsArray.reduce((acc, obj) => {
            return _extends({}, acc, {
              [obj.key]: obj.val
            });
          }, {});
        };

        // Keep in mind that @media is inclusive by the CSS specification.
        function createBreakpoints(breakpoints) {
          const _breakpoints$values = breakpoints.values,
            values = _breakpoints$values === void 0 ? {
              xs: 0,
              // phone
              sm: 600,
              // tablet
              md: 900,
              // small laptop
              lg: 1200,
              // desktop
              xl: 1536 // large screen
            } : _breakpoints$values,
            _breakpoints$unit = breakpoints.unit,
            unit = _breakpoints$unit === void 0 ? 'px' : _breakpoints$unit,
            _breakpoints$step = breakpoints.step,
            step = _breakpoints$step === void 0 ? 5 : _breakpoints$step,
            other = _objectWithoutPropertiesLoose$2(breakpoints, _excluded$P);
          const sortedValues = sortBreakpointsValues(values);
          const keys = Object.keys(sortedValues);
          function up(key) {
            const value = typeof values[key] === 'number' ? values[key] : key;
            return `@media (min-width:${value}${unit})`;
          }
          function down(key) {
            const value = typeof values[key] === 'number' ? values[key] : key;
            return `@media (max-width:${value - step / 100}${unit})`;
          }
          function between(start, end) {
            const endIndex = keys.indexOf(end);
            return `@media (min-width:${typeof values[start] === 'number' ? values[start] : start}${unit}) and ` + `(max-width:${(endIndex !== -1 && typeof values[keys[endIndex]] === 'number' ? values[keys[endIndex]] : end) - step / 100}${unit})`;
          }
          function only(key) {
            if (keys.indexOf(key) + 1 < keys.length) {
              return between(key, keys[keys.indexOf(key) + 1]);
            }
            return up(key);
          }
          function not(key) {
            // handle first and last key separately, for better readability
            const keyIndex = keys.indexOf(key);
            if (keyIndex === 0) {
              return up(keys[1]);
            }
            if (keyIndex === keys.length - 1) {
              return down(keys[keyIndex]);
            }
            return between(key, keys[keys.indexOf(key) + 1]).replace('@media', '@media not all and');
          }
          return _extends({
            keys,
            values: sortedValues,
            up,
            down,
            between,
            only,
            not,
            unit
          }, other);
        }
        const shape = {
          borderRadius: 4
        };
        const shape$1 = shape;
        function merge$1(acc, item) {
          if (!item) {
            return acc;
          }
          return deepmerge(acc, item, {
            clone: false // No need to clone deep, it's way faster.
          });
        }
        const values$1 = {
          xs: 0,
          // phone
          sm: 600,
          // tablet
          md: 900,
          // small laptop
          lg: 1200,
          // desktop
          xl: 1536
          // large screen
        };
        const defaultBreakpoints = {
          // Sorted ASC by size. That's important.
          // It can't be configured as it's used statically for propTypes.
          keys: ["xs", "sm", "md", "lg", "xl"],
          up: key => `@media (min-width:${values$1[key]}px)`
        };
        function handleBreakpoints(props, propValue, styleFromPropValue) {
          const theme = props.theme || {};
          if (Array.isArray(propValue)) {
            const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
            return propValue.reduce((acc, item, index) => {
              acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
              return acc;
            }, {});
          }
          if (typeof propValue === "object") {
            const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
            return Object.keys(propValue).reduce((acc, breakpoint) => {
              if (Object.keys(themeBreakpoints.values || values$1).indexOf(breakpoint) !== -1) {
                const mediaKey = themeBreakpoints.up(breakpoint);
                acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
              } else {
                const cssKey = breakpoint;
                acc[cssKey] = propValue[cssKey];
              }
              return acc;
            }, {});
          }
          const output = styleFromPropValue(propValue);
          return output;
        }
        function createEmptyBreakpointObject(breakpointsInput = {}) {
          var _breakpointsInput$key;
          const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
            const breakpointStyleKey = breakpointsInput.up(key);
            acc[breakpointStyleKey] = {};
            return acc;
          }, {});
          return breakpointsInOrder || {};
        }
        function removeUnusedBreakpoints(breakpointKeys, style) {
          return breakpointKeys.reduce((acc, key) => {
            const breakpointOutput = acc[key];
            const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
            if (isBreakpointUnused) {
              delete acc[key];
            }
            return acc;
          }, style);
        }
        function mergeBreakpointsInOrder(breakpointsInput, ...styles) {
          const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);
          const mergedOutput = [emptyBreakpoints, ...styles].reduce((prev, next) => deepmerge(prev, next), {});
          return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);
        }
        function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
          if (typeof breakpointValues !== "object") {
            return {};
          }
          const base = {};
          const breakpointsKeys = Object.keys(themeBreakpoints);
          if (Array.isArray(breakpointValues)) {
            breakpointsKeys.forEach((breakpoint, i) => {
              if (i < breakpointValues.length) {
                base[breakpoint] = true;
              }
            });
          } else {
            breakpointsKeys.forEach(breakpoint => {
              if (breakpointValues[breakpoint] != null) {
                base[breakpoint] = true;
              }
            });
          }
          return base;
        }
        function resolveBreakpointValues({
          values: breakpointValues,
          breakpoints: themeBreakpoints,
          base: customBase
        }) {
          const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
          const keys = Object.keys(base);
          if (keys.length === 0) {
            return breakpointValues;
          }
          let previous;
          return keys.reduce((acc, breakpoint, i) => {
            if (Array.isArray(breakpointValues)) {
              acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
              previous = i;
            } else if (typeof breakpointValues === "object") {
              acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
              previous = breakpoint;
            } else {
              acc[breakpoint] = breakpointValues;
            }
            return acc;
          }, {});
        }
        function getPath(obj, path, checkVars = true) {
          if (!path || typeof path !== "string") {
            return null;
          }
          if (obj && obj.vars && checkVars) {
            const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
            if (val != null) {
              return val;
            }
          }
          return path.split(".").reduce((acc, item) => {
            if (acc && acc[item] != null) {
              return acc[item];
            }
            return null;
          }, obj);
        }
        function getStyleValue$1(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
          let value;
          if (typeof themeMapping === "function") {
            value = themeMapping(propValueFinal);
          } else if (Array.isArray(themeMapping)) {
            value = themeMapping[propValueFinal] || userValue;
          } else {
            value = getPath(themeMapping, propValueFinal) || userValue;
          }
          if (transform) {
            value = transform(value, userValue, themeMapping);
          }
          return value;
        }
        function style$1(options) {
          const prop = options.prop,
            _options$cssProperty = options.cssProperty,
            cssProperty = _options$cssProperty === void 0 ? options.prop : _options$cssProperty,
            themeKey = options.themeKey,
            transform = options.transform;
          const fn = props => {
            if (props[prop] == null) {
              return null;
            }
            const propValue = props[prop];
            const theme = props.theme;
            const themeMapping = getPath(theme, themeKey) || {};
            const styleFromPropValue = propValueFinal => {
              let value = getStyleValue$1(themeMapping, transform, propValueFinal);
              if (propValueFinal === value && typeof propValueFinal === "string") {
                value = getStyleValue$1(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : capitalize(propValueFinal)}`, propValueFinal);
              }
              if (cssProperty === false) {
                return value;
              }
              return {
                [cssProperty]: value
              };
            };
            return handleBreakpoints(props, propValue, styleFromPropValue);
          };
          fn.propTypes = {};
          fn.filterProps = [prop];
          return fn;
        }
        function memoize$1(fn) {
          const cache = {};
          return arg => {
            if (cache[arg] === undefined) {
              cache[arg] = fn(arg);
            }
            return cache[arg];
          };
        }
        const properties = {
          m: "margin",
          p: "padding"
        };
        const directions = {
          t: "Top",
          r: "Right",
          b: "Bottom",
          l: "Left",
          x: ["Left", "Right"],
          y: ["Top", "Bottom"]
        };
        const aliases = {
          marginX: "mx",
          marginY: "my",
          paddingX: "px",
          paddingY: "py"
        };
        const getCssProperties = memoize$1(prop => {
          if (prop.length > 2) {
            if (aliases[prop]) {
              prop = aliases[prop];
            } else {
              return [prop];
            }
          }
          const _prop$split = prop.split(""),
            _prop$split2 = _slicedToArray2(_prop$split, 2),
            a = _prop$split2[0],
            b = _prop$split2[1];
          const property = properties[a];
          const direction = directions[b] || "";
          return Array.isArray(direction) ? direction.map(dir => property + dir) : [property + direction];
        });
        const marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
        const paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
        [...marginKeys, ...paddingKeys];
        function createUnaryUnit(theme, themeKey, defaultValue, propName) {
          var _getPath;
          const themeSpacing = (_getPath = getPath(theme, themeKey, false)) != null ? _getPath : defaultValue;
          if (typeof themeSpacing === "number") {
            return abs => {
              if (typeof abs === "string") {
                return abs;
              }
              return themeSpacing * abs;
            };
          }
          if (Array.isArray(themeSpacing)) {
            return abs => {
              if (typeof abs === "string") {
                return abs;
              }
              return themeSpacing[abs];
            };
          }
          if (typeof themeSpacing === "function") {
            return themeSpacing;
          }
          return () => void 0;
        }
        function createUnarySpacing(theme) {
          return createUnaryUnit(theme, "spacing", 8);
        }
        function getValue(transformer, propValue) {
          if (typeof propValue === "string" || propValue == null) {
            return propValue;
          }
          const abs = Math.abs(propValue);
          const transformed = transformer(abs);
          if (propValue >= 0) {
            return transformed;
          }
          if (typeof transformed === "number") {
            return -transformed;
          }
          return `-${transformed}`;
        }
        function getStyleFromPropValue(cssProperties, transformer) {
          return propValue => cssProperties.reduce((acc, cssProperty) => {
            acc[cssProperty] = getValue(transformer, propValue);
            return acc;
          }, {});
        }
        function resolveCssProperty(props, keys, prop, transformer) {
          if (keys.indexOf(prop) === -1) {
            return null;
          }
          const cssProperties = getCssProperties(prop);
          const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
          const propValue = props[prop];
          return handleBreakpoints(props, propValue, styleFromPropValue);
        }
        function style(props, keys) {
          const transformer = createUnarySpacing(props.theme);
          return Object.keys(props).map(prop => resolveCssProperty(props, keys, prop, transformer)).reduce(merge$1, {});
        }
        function margin(props) {
          return style(props, marginKeys);
        }
        margin.propTypes = {};
        margin.filterProps = marginKeys;
        function padding(props) {
          return style(props, paddingKeys);
        }
        padding.propTypes = {};
        padding.filterProps = paddingKeys;
        function createSpacing(spacingInput = 8) {
          if (spacingInput.mui) {
            return spacingInput;
          }
          const transform = createUnarySpacing({
            spacing: spacingInput
          });
          const spacing = (...argsInput) => {
            const args = argsInput.length === 0 ? [1] : argsInput;
            return args.map(argument => {
              const output = transform(argument);
              return typeof output === "number" ? `${output}px` : output;
            }).join(" ");
          };
          spacing.mui = true;
          return spacing;
        }
        function compose$1(...styles) {
          const handlers = styles.reduce((acc, style) => {
            style.filterProps.forEach(prop => {
              acc[prop] = style;
            });
            return acc;
          }, {});
          const fn = props => {
            return Object.keys(props).reduce((acc, prop) => {
              if (handlers[prop]) {
                return merge$1(acc, handlers[prop](props));
              }
              return acc;
            }, {});
          };
          fn.propTypes = {};
          fn.filterProps = styles.reduce((acc, style) => acc.concat(style.filterProps), []);
          return fn;
        }
        function borderTransform(value) {
          if (typeof value !== "number") {
            return value;
          }
          return `${value}px solid`;
        }
        const border = style$1({
          prop: "border",
          themeKey: "borders",
          transform: borderTransform
        });
        const borderTop = style$1({
          prop: "borderTop",
          themeKey: "borders",
          transform: borderTransform
        });
        const borderRight = style$1({
          prop: "borderRight",
          themeKey: "borders",
          transform: borderTransform
        });
        const borderBottom = style$1({
          prop: "borderBottom",
          themeKey: "borders",
          transform: borderTransform
        });
        const borderLeft = style$1({
          prop: "borderLeft",
          themeKey: "borders",
          transform: borderTransform
        });
        const borderColor = style$1({
          prop: "borderColor",
          themeKey: "palette"
        });
        const borderTopColor = style$1({
          prop: "borderTopColor",
          themeKey: "palette"
        });
        const borderRightColor = style$1({
          prop: "borderRightColor",
          themeKey: "palette"
        });
        const borderBottomColor = style$1({
          prop: "borderBottomColor",
          themeKey: "palette"
        });
        const borderLeftColor = style$1({
          prop: "borderLeftColor",
          themeKey: "palette"
        });
        const borderRadius = props => {
          if (props.borderRadius !== void 0 && props.borderRadius !== null) {
            const transformer = createUnaryUnit(props.theme, "shape.borderRadius", 4);
            const styleFromPropValue = propValue => ({
              borderRadius: getValue(transformer, propValue)
            });
            return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
          }
          return null;
        };
        borderRadius.propTypes = {};
        borderRadius.filterProps = ["borderRadius"];
        compose$1(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);
        const gap = props => {
          if (props.gap !== void 0 && props.gap !== null) {
            const transformer = createUnaryUnit(props.theme, "spacing", 8);
            const styleFromPropValue = propValue => ({
              gap: getValue(transformer, propValue)
            });
            return handleBreakpoints(props, props.gap, styleFromPropValue);
          }
          return null;
        };
        gap.propTypes = {};
        gap.filterProps = ["gap"];
        const columnGap = props => {
          if (props.columnGap !== void 0 && props.columnGap !== null) {
            const transformer = createUnaryUnit(props.theme, "spacing", 8);
            const styleFromPropValue = propValue => ({
              columnGap: getValue(transformer, propValue)
            });
            return handleBreakpoints(props, props.columnGap, styleFromPropValue);
          }
          return null;
        };
        columnGap.propTypes = {};
        columnGap.filterProps = ["columnGap"];
        const rowGap = props => {
          if (props.rowGap !== void 0 && props.rowGap !== null) {
            const transformer = createUnaryUnit(props.theme, "spacing", 8);
            const styleFromPropValue = propValue => ({
              rowGap: getValue(transformer, propValue)
            });
            return handleBreakpoints(props, props.rowGap, styleFromPropValue);
          }
          return null;
        };
        rowGap.propTypes = {};
        rowGap.filterProps = ["rowGap"];
        const gridColumn = style$1({
          prop: "gridColumn"
        });
        const gridRow = style$1({
          prop: "gridRow"
        });
        const gridAutoFlow = style$1({
          prop: "gridAutoFlow"
        });
        const gridAutoColumns = style$1({
          prop: "gridAutoColumns"
        });
        const gridAutoRows = style$1({
          prop: "gridAutoRows"
        });
        const gridTemplateColumns = style$1({
          prop: "gridTemplateColumns"
        });
        const gridTemplateRows = style$1({
          prop: "gridTemplateRows"
        });
        const gridTemplateAreas = style$1({
          prop: "gridTemplateAreas"
        });
        const gridArea = style$1({
          prop: "gridArea"
        });
        compose$1(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
        function paletteTransform(value, userValue) {
          if (userValue === 'grey') {
            return userValue;
          }
          return value;
        }
        const color = style$1({
          prop: 'color',
          themeKey: 'palette',
          transform: paletteTransform
        });
        const bgcolor = style$1({
          prop: 'bgcolor',
          cssProperty: 'backgroundColor',
          themeKey: 'palette',
          transform: paletteTransform
        });
        const backgroundColor = style$1({
          prop: 'backgroundColor',
          themeKey: 'palette',
          transform: paletteTransform
        });
        compose$1(color, bgcolor, backgroundColor);
        function sizingTransform(value) {
          return value <= 1 && value !== 0 ? `${value * 100}%` : value;
        }
        const width = style$1({
          prop: 'width',
          transform: sizingTransform
        });
        const maxWidth = props => {
          if (props.maxWidth !== undefined && props.maxWidth !== null) {
            const styleFromPropValue = propValue => {
              var _props$theme;
              const breakpoint = ((_props$theme = props.theme) == null || (_props$theme = _props$theme.breakpoints) == null || (_props$theme = _props$theme.values) == null ? void 0 : _props$theme[propValue]) || values$1[propValue];
              return {
                maxWidth: breakpoint || sizingTransform(propValue)
              };
            };
            return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
          }
          return null;
        };
        maxWidth.filterProps = ['maxWidth'];
        const minWidth = style$1({
          prop: 'minWidth',
          transform: sizingTransform
        });
        const height = style$1({
          prop: 'height',
          transform: sizingTransform
        });
        const maxHeight = style$1({
          prop: 'maxHeight',
          transform: sizingTransform
        });
        const minHeight = style$1({
          prop: 'minHeight',
          transform: sizingTransform
        });
        style$1({
          prop: 'size',
          cssProperty: 'width',
          transform: sizingTransform
        });
        style$1({
          prop: 'size',
          cssProperty: 'height',
          transform: sizingTransform
        });
        const boxSizing = style$1({
          prop: 'boxSizing'
        });
        compose$1(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
        const defaultSxConfig = {
          // borders
          border: {
            themeKey: 'borders',
            transform: borderTransform
          },
          borderTop: {
            themeKey: 'borders',
            transform: borderTransform
          },
          borderRight: {
            themeKey: 'borders',
            transform: borderTransform
          },
          borderBottom: {
            themeKey: 'borders',
            transform: borderTransform
          },
          borderLeft: {
            themeKey: 'borders',
            transform: borderTransform
          },
          borderColor: {
            themeKey: 'palette'
          },
          borderTopColor: {
            themeKey: 'palette'
          },
          borderRightColor: {
            themeKey: 'palette'
          },
          borderBottomColor: {
            themeKey: 'palette'
          },
          borderLeftColor: {
            themeKey: 'palette'
          },
          borderRadius: {
            themeKey: 'shape.borderRadius',
            style: borderRadius
          },
          // palette
          color: {
            themeKey: 'palette',
            transform: paletteTransform
          },
          bgcolor: {
            themeKey: 'palette',
            cssProperty: 'backgroundColor',
            transform: paletteTransform
          },
          backgroundColor: {
            themeKey: 'palette',
            transform: paletteTransform
          },
          // spacing
          p: {
            style: padding
          },
          pt: {
            style: padding
          },
          pr: {
            style: padding
          },
          pb: {
            style: padding
          },
          pl: {
            style: padding
          },
          px: {
            style: padding
          },
          py: {
            style: padding
          },
          padding: {
            style: padding
          },
          paddingTop: {
            style: padding
          },
          paddingRight: {
            style: padding
          },
          paddingBottom: {
            style: padding
          },
          paddingLeft: {
            style: padding
          },
          paddingX: {
            style: padding
          },
          paddingY: {
            style: padding
          },
          paddingInline: {
            style: padding
          },
          paddingInlineStart: {
            style: padding
          },
          paddingInlineEnd: {
            style: padding
          },
          paddingBlock: {
            style: padding
          },
          paddingBlockStart: {
            style: padding
          },
          paddingBlockEnd: {
            style: padding
          },
          m: {
            style: margin
          },
          mt: {
            style: margin
          },
          mr: {
            style: margin
          },
          mb: {
            style: margin
          },
          ml: {
            style: margin
          },
          mx: {
            style: margin
          },
          my: {
            style: margin
          },
          margin: {
            style: margin
          },
          marginTop: {
            style: margin
          },
          marginRight: {
            style: margin
          },
          marginBottom: {
            style: margin
          },
          marginLeft: {
            style: margin
          },
          marginX: {
            style: margin
          },
          marginY: {
            style: margin
          },
          marginInline: {
            style: margin
          },
          marginInlineStart: {
            style: margin
          },
          marginInlineEnd: {
            style: margin
          },
          marginBlock: {
            style: margin
          },
          marginBlockStart: {
            style: margin
          },
          marginBlockEnd: {
            style: margin
          },
          // display
          displayPrint: {
            cssProperty: false,
            transform: value => ({
              '@media print': {
                display: value
              }
            })
          },
          display: {},
          overflow: {},
          textOverflow: {},
          visibility: {},
          whiteSpace: {},
          // flexbox
          flexBasis: {},
          flexDirection: {},
          flexWrap: {},
          justifyContent: {},
          alignItems: {},
          alignContent: {},
          order: {},
          flex: {},
          flexGrow: {},
          flexShrink: {},
          alignSelf: {},
          justifyItems: {},
          justifySelf: {},
          // grid
          gap: {
            style: gap
          },
          rowGap: {
            style: rowGap
          },
          columnGap: {
            style: columnGap
          },
          gridColumn: {},
          gridRow: {},
          gridAutoFlow: {},
          gridAutoColumns: {},
          gridAutoRows: {},
          gridTemplateColumns: {},
          gridTemplateRows: {},
          gridTemplateAreas: {},
          gridArea: {},
          // positions
          position: {},
          zIndex: {
            themeKey: 'zIndex'
          },
          top: {},
          right: {},
          bottom: {},
          left: {},
          // shadows
          boxShadow: {
            themeKey: 'shadows'
          },
          // sizing
          width: {
            transform: sizingTransform
          },
          maxWidth: {
            style: maxWidth
          },
          minWidth: {
            transform: sizingTransform
          },
          height: {
            transform: sizingTransform
          },
          maxHeight: {
            transform: sizingTransform
          },
          minHeight: {
            transform: sizingTransform
          },
          boxSizing: {},
          // typography
          fontFamily: {
            themeKey: 'typography'
          },
          fontSize: {
            themeKey: 'typography'
          },
          fontStyle: {
            themeKey: 'typography'
          },
          fontWeight: {
            themeKey: 'typography'
          },
          letterSpacing: {},
          textTransform: {},
          lineHeight: {},
          textAlign: {},
          typography: {
            cssProperty: false,
            themeKey: 'typography'
          }
        };
        const defaultSxConfig$1 = defaultSxConfig;
        function objectsHaveSameKeys(...objects) {
          const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
          const union = new Set(allKeys);
          return objects.every(object => union.size === Object.keys(object).length);
        }
        function callIfFn(maybeFn, arg) {
          return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;
        }

        // eslint-disable-next-line @typescript-eslint/naming-convention
        function unstable_createStyleFunctionSx() {
          function getThemeValue(prop, val, theme, config) {
            const props = {
              [prop]: val,
              theme
            };
            const options = config[prop];
            if (!options) {
              return {
                [prop]: val
              };
            }
            const _options$cssProperty2 = options.cssProperty,
              cssProperty = _options$cssProperty2 === void 0 ? prop : _options$cssProperty2,
              themeKey = options.themeKey,
              transform = options.transform,
              style = options.style;
            if (val == null) {
              return null;
            }

            // TODO v6: remove, see https://github.com/mui/material-ui/pull/38123
            if (themeKey === 'typography' && val === 'inherit') {
              return {
                [prop]: val
              };
            }
            const themeMapping = getPath(theme, themeKey) || {};
            if (style) {
              return style(props);
            }
            const styleFromPropValue = propValueFinal => {
              let value = getStyleValue$1(themeMapping, transform, propValueFinal);
              if (propValueFinal === value && typeof propValueFinal === 'string') {
                // Haven't found value
                value = getStyleValue$1(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : capitalize(propValueFinal)}`, propValueFinal);
              }
              if (cssProperty === false) {
                return value;
              }
              return {
                [cssProperty]: value
              };
            };
            return handleBreakpoints(props, val, styleFromPropValue);
          }
          function styleFunctionSx(props) {
            var _theme$unstable_sxCon;
            const _ref12 = props || {},
              sx = _ref12.sx,
              _ref12$theme = _ref12.theme,
              theme = _ref12$theme === void 0 ? {} : _ref12$theme;
            if (!sx) {
              return null; // Emotion & styled-components will neglect null
            }
            const config = (_theme$unstable_sxCon = theme.unstable_sxConfig) != null ? _theme$unstable_sxCon : defaultSxConfig$1;

            /*
             * Receive `sxInput` as object or callback
             * and then recursively check keys & values to create media query object styles.
             * (the result will be used in `styled`)
             */
            function traverse(sxInput) {
              let sxObject = sxInput;
              if (typeof sxInput === 'function') {
                sxObject = sxInput(theme);
              } else if (typeof sxInput !== 'object') {
                // value
                return sxInput;
              }
              if (!sxObject) {
                return null;
              }
              const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
              const breakpointsKeys = Object.keys(emptyBreakpoints);
              let css = emptyBreakpoints;
              Object.keys(sxObject).forEach(styleKey => {
                const value = callIfFn(sxObject[styleKey], theme);
                if (value !== null && value !== undefined) {
                  if (typeof value === 'object') {
                    if (config[styleKey]) {
                      css = merge$1(css, getThemeValue(styleKey, value, theme, config));
                    } else {
                      const breakpointsValues = handleBreakpoints({
                        theme
                      }, value, x => ({
                        [styleKey]: x
                      }));
                      if (objectsHaveSameKeys(breakpointsValues, value)) {
                        css[styleKey] = styleFunctionSx({
                          sx: value,
                          theme
                        });
                      } else {
                        css = merge$1(css, breakpointsValues);
                      }
                    }
                  } else {
                    css = merge$1(css, getThemeValue(styleKey, value, theme, config));
                  }
                }
              });
              return removeUnusedBreakpoints(breakpointsKeys, css);
            }
            return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
          }
          return styleFunctionSx;
        }
        const styleFunctionSx = unstable_createStyleFunctionSx();
        styleFunctionSx.filterProps = ['sx'];
        const styleFunctionSx$1 = styleFunctionSx;
        const _excluded$O = ["breakpoints", "palette", "spacing", "shape"];
        function createTheme$1(options = {}, ...args) {
          const _options$breakpoints = options.breakpoints,
            breakpointsInput = _options$breakpoints === void 0 ? {} : _options$breakpoints,
            _options$palette = options.palette,
            paletteInput = _options$palette === void 0 ? {} : _options$palette,
            spacingInput = options.spacing,
            _options$shape = options.shape,
            shapeInput = _options$shape === void 0 ? {} : _options$shape,
            other = _objectWithoutPropertiesLoose$2(options, _excluded$O);
          const breakpoints = createBreakpoints(breakpointsInput);
          const spacing = createSpacing(spacingInput);
          let muiTheme = deepmerge({
            breakpoints,
            direction: 'ltr',
            components: {},
            // Inject component definitions.
            palette: _extends({
              mode: 'light'
            }, paletteInput),
            spacing,
            shape: _extends({}, shape$1, shapeInput)
          }, other);
          muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
          muiTheme.unstable_sxConfig = _extends({}, defaultSxConfig$1, other == null ? void 0 : other.unstable_sxConfig);
          muiTheme.unstable_sx = function sx(props) {
            return styleFunctionSx$1({
              sx: props,
              theme: this
            });
          };
          return muiTheme;
        }
        function isObjectEmpty(obj) {
          return Object.keys(obj).length === 0;
        }
        function useTheme$3(defaultTheme = null) {
          const contextTheme = reactExports.useContext(ThemeContext$2);
          return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme : contextTheme;
        }
        const systemDefaultTheme$1 = createTheme$1();
        function useTheme$2(defaultTheme = systemDefaultTheme$1) {
          return useTheme$3(defaultTheme);
        }
        function GlobalStyles$1({
          styles,
          themeId,
          defaultTheme = {}
        }) {
          const upperTheme = useTheme$2(defaultTheme);
          const globalStyles = typeof styles === "function" ? styles(themeId ? upperTheme[themeId] || upperTheme : upperTheme) : styles;
          return /* @__PURE__ */jsxRuntimeExports.jsx(GlobalStyles$2, {
            styles: globalStyles
          });
        }
        const _excluded$N = ["sx"];
        const splitProps = props => {
          var _props$theme$unstable, _props$theme;
          const result = {
            systemProps: {},
            otherProps: {}
          };
          const config = (_props$theme$unstable = props == null || (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : defaultSxConfig$1;
          Object.keys(props).forEach(prop => {
            if (config[prop]) {
              result.systemProps[prop] = props[prop];
            } else {
              result.otherProps[prop] = props[prop];
            }
          });
          return result;
        };
        function extendSxProp(props) {
          const inSx = props.sx,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$N);
          const _splitProps = splitProps(other),
            systemProps = _splitProps.systemProps,
            otherProps = _splitProps.otherProps;
          let finalSx;
          if (Array.isArray(inSx)) {
            finalSx = [systemProps, ...inSx];
          } else if (typeof inSx === 'function') {
            finalSx = (...args) => {
              const result = inSx(...args);
              if (!isPlainObject$3(result)) {
                return systemProps;
              }
              return _extends({}, systemProps, result);
            };
          } else {
            finalSx = _extends({}, systemProps, inSx);
          }
          return _extends({}, otherProps, {
            sx: finalSx
          });
        }
        function r$3(e) {
          var t,
            f,
            n = "";
          if ("string" == typeof e || "number" == typeof e) n += e;else if ("object" == typeof e) if (Array.isArray(e)) for (t = 0; t < e.length; t++) e[t] && (f = r$3(e[t])) && (n && (n += " "), n += f);else for (t in e) e[t] && (n && (n += " "), n += t);
          return n;
        }
        function clsx() {
          for (var e, t, f = 0, n = ""; f < arguments.length;) (e = arguments[f++]) && (t = r$3(e)) && (n && (n += " "), n += t);
          return n;
        }
        const _excluded$M = ["className", "component"];
        function createBox(options = {}) {
          const themeId = options.themeId,
            defaultTheme = options.defaultTheme,
            _options$defaultClass = options.defaultClassName,
            defaultClassName = _options$defaultClass === void 0 ? 'MuiBox-root' : _options$defaultClass,
            generateClassName = options.generateClassName;
          const BoxRoot = styled$2('div', {
            shouldForwardProp: prop => prop !== 'theme' && prop !== 'sx' && prop !== 'as'
          })(styleFunctionSx$1);
          const Box = /*#__PURE__*/reactExports.forwardRef(function Box(inProps, ref) {
            const theme = useTheme$2(defaultTheme);
            const _extendSxProp = extendSxProp(inProps),
              className = _extendSxProp.className,
              _extendSxProp$compone = _extendSxProp.component,
              component = _extendSxProp$compone === void 0 ? 'div' : _extendSxProp$compone,
              other = _objectWithoutPropertiesLoose$2(_extendSxProp, _excluded$M);
            return /*#__PURE__*/jsxRuntimeExports.jsx(BoxRoot, _extends({
              as: component,
              ref: ref,
              className: clsx(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
              theme: themeId ? theme[themeId] || theme : theme
            }, other));
          });
          return Box;
        }
        const Box$2 = createBox();
        const Box$3 = exports('b9', Box$2);
        const _excluded$L = ["variant"];
        function isEmpty$3(string) {
          return string.length === 0;
        }

        /**
         * Generates string classKey based on the properties provided. It starts with the
         * variant if defined, and then it appends all other properties in alphabetical order.
         * @param {object} props - the properties for which the classKey should be created.
         */
        function propsToClassKey(props) {
          const variant = props.variant,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$L);
          let classKey = variant || '';
          Object.keys(other).sort().forEach(key => {
            if (key === 'color') {
              classKey += isEmpty$3(classKey) ? props[key] : capitalize(props[key]);
            } else {
              classKey += `${isEmpty$3(classKey) ? key : capitalize(key)}${capitalize(props[key].toString())}`;
            }
          });
          return classKey;
        }
        const _excluded$K = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
        function isEmpty$2(obj) {
          return Object.keys(obj).length === 0;
        }
        function isStringTag(tag) {
          return typeof tag === "string" &&
          // 96 is one less than the char code
          // for "a" so this is checking that
          // it's a lowercase character
          tag.charCodeAt(0) > 96;
        }
        const getStyleOverrides = (name, theme) => {
          if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
            return theme.components[name].styleOverrides;
          }
          return null;
        };
        const getVariantStyles = (name, theme) => {
          let variants = [];
          if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
            variants = theme.components[name].variants;
          }
          const variantsStyles = {};
          variants.forEach(definition => {
            const key = propsToClassKey(definition.props);
            variantsStyles[key] = definition.style;
          });
          return variantsStyles;
        };
        const variantsResolver = (props, styles, theme, name) => {
          var _theme$components;
          const _props$ownerState = props.ownerState,
            ownerState = _props$ownerState === void 0 ? {} : _props$ownerState;
          const variantsStyles = [];
          const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[name]) == null ? void 0 : _theme$components.variants;
          if (themeVariants) {
            themeVariants.forEach(themeVariant => {
              let isMatch = true;
              Object.keys(themeVariant.props).forEach(key => {
                if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
                  isMatch = false;
                }
              });
              if (isMatch) {
                variantsStyles.push(styles[propsToClassKey(themeVariant.props)]);
              }
            });
          }
          return variantsStyles;
        };
        function shouldForwardProp(prop) {
          return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
        }
        const systemDefaultTheme = createTheme$1();
        const lowercaseFirstLetter = string => {
          if (!string) {
            return string;
          }
          return string.charAt(0).toLowerCase() + string.slice(1);
        };
        function resolveTheme({
          defaultTheme,
          theme,
          themeId
        }) {
          return isEmpty$2(theme) ? defaultTheme : theme[themeId] || theme;
        }
        function defaultOverridesResolver(slot) {
          if (!slot) {
            return null;
          }
          return (props, styles) => styles[slot];
        }
        function createStyled(input = {}) {
          const themeId = input.themeId,
            _input$defaultTheme = input.defaultTheme,
            defaultTheme = _input$defaultTheme === void 0 ? systemDefaultTheme : _input$defaultTheme,
            _input$rootShouldForw = input.rootShouldForwardProp,
            rootShouldForwardProp = _input$rootShouldForw === void 0 ? shouldForwardProp : _input$rootShouldForw,
            _input$slotShouldForw = input.slotShouldForwardProp,
            slotShouldForwardProp = _input$slotShouldForw === void 0 ? shouldForwardProp : _input$slotShouldForw;
          const systemSx = props => {
            return styleFunctionSx$1(_extends({}, props, {
              theme: resolveTheme(_extends({}, props, {
                defaultTheme,
                themeId
              }))
            }));
          };
          systemSx.__mui_systemSx = true;
          return (tag, inputOptions = {}) => {
            internal_processStyles(tag, styles => styles.filter(style => !(style != null && style.__mui_systemSx)));
            const componentName = inputOptions.name,
              componentSlot = inputOptions.slot,
              inputSkipVariantsResolver = inputOptions.skipVariantsResolver,
              inputSkipSx = inputOptions.skipSx,
              _inputOptions$overrid = inputOptions.overridesResolver,
              overridesResolver = _inputOptions$overrid === void 0 ? defaultOverridesResolver(lowercaseFirstLetter(componentSlot)) : _inputOptions$overrid,
              options = _objectWithoutPropertiesLoose$2(inputOptions, _excluded$K);
            const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver :
            // TODO v6: remove `Root` in the next major release
            // For more details: https://github.com/mui/material-ui/pull/37908
            componentSlot && componentSlot !== "Root" && componentSlot !== "root" || false;
            const skipSx = inputSkipSx || false;
            let label;
            let shouldForwardPropOption = shouldForwardProp;
            if (componentSlot === "Root" || componentSlot === "root") {
              shouldForwardPropOption = rootShouldForwardProp;
            } else if (componentSlot) {
              shouldForwardPropOption = slotShouldForwardProp;
            } else if (isStringTag(tag)) {
              shouldForwardPropOption = void 0;
            }
            const defaultStyledResolver = styled$2(tag, _extends({
              shouldForwardProp: shouldForwardPropOption,
              label
            }, options));
            const muiStyledResolver = (styleArg, ...expressions) => {
              const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {
                return typeof stylesArg === "function" && stylesArg.__emotion_real !== stylesArg ? props => {
                  return stylesArg(_extends({}, props, {
                    theme: resolveTheme(_extends({}, props, {
                      defaultTheme,
                      themeId
                    }))
                  }));
                } : stylesArg;
              }) : [];
              let transformedStyleArg = styleArg;
              if (componentName && overridesResolver) {
                expressionsWithDefaultTheme.push(props => {
                  const theme = resolveTheme(_extends({}, props, {
                    defaultTheme,
                    themeId
                  }));
                  const styleOverrides = getStyleOverrides(componentName, theme);
                  if (styleOverrides) {
                    const resolvedStyleOverrides = {};
                    Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
                      resolvedStyleOverrides[slotKey] = typeof slotStyle === "function" ? slotStyle(_extends({}, props, {
                        theme
                      })) : slotStyle;
                    });
                    return overridesResolver(props, resolvedStyleOverrides);
                  }
                  return null;
                });
              }
              if (componentName && !skipVariantsResolver) {
                expressionsWithDefaultTheme.push(props => {
                  const theme = resolveTheme(_extends({}, props, {
                    defaultTheme,
                    themeId
                  }));
                  return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
                });
              }
              if (!skipSx) {
                expressionsWithDefaultTheme.push(systemSx);
              }
              const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
              if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
                const placeholders = new Array(numOfCustomFnsApplied).fill("");
                transformedStyleArg = [...styleArg, ...placeholders];
                transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
              } else if (typeof styleArg === "function" &&
              // On the server Emotion doesn't use React.forwardRef for creating components, so the created
              // component stays as a function. This condition makes sure that we do not interpolate functions
              // which are basically components used as a selectors.
              styleArg.__emotion_real !== styleArg) {
                transformedStyleArg = props => styleArg(_extends({}, props, {
                  theme: resolveTheme(_extends({}, props, {
                    defaultTheme,
                    themeId
                  }))
                }));
              }
              const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
              if (tag.muiName) {
                Component.muiName = tag.muiName;
              }
              return Component;
            };
            if (defaultStyledResolver.withConfig) {
              muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
            }
            return muiStyledResolver;
          };
        }
        function getThemeProps(params) {
          const theme = params.theme,
            name = params.name,
            props = params.props;
          if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
            return props;
          }
          return resolveProps(theme.components[name].defaultProps, props);
        }
        function useThemeProps$1({
          props,
          name,
          defaultTheme,
          themeId
        }) {
          let theme = useTheme$2(defaultTheme);
          if (themeId) {
            theme = theme[themeId] || theme;
          }
          const mergedProps = getThemeProps({
            theme,
            name,
            props
          });
          return mergedProps;
        }
        function clamp(value, min = 0, max = 1) {
          return Math.min(Math.max(min, value), max);
        }
        function hexToRgb(color) {
          color = color.slice(1);
          const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, "g");
          let colors = color.match(re);
          if (colors && colors[0].length === 1) {
            colors = colors.map(n => n + n);
          }
          return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n, index) => {
            return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1e3) / 1e3;
          }).join(", ")})` : "";
        }
        function decomposeColor(color) {
          if (color.type) {
            return color;
          }
          if (color.charAt(0) === "#") {
            return decomposeColor(hexToRgb(color));
          }
          const marker = color.indexOf("(");
          const type = color.substring(0, marker);
          if (["rgb", "rgba", "hsl", "hsla", "color"].indexOf(type) === -1) {
            throw new Error(formatMuiErrorMessage(9, color));
          }
          let values = color.substring(marker + 1, color.length - 1);
          let colorSpace;
          if (type === "color") {
            values = values.split(" ");
            colorSpace = values.shift();
            if (values.length === 4 && values[3].charAt(0) === "/") {
              values[3] = values[3].slice(1);
            }
            if (["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].indexOf(colorSpace) === -1) {
              throw new Error(formatMuiErrorMessage(10, colorSpace));
            }
          } else {
            values = values.split(",");
          }
          values = values.map(value => parseFloat(value));
          return {
            type,
            values,
            colorSpace
          };
        }
        function recomposeColor(color) {
          const type = color.type,
            colorSpace = color.colorSpace;
          let values = color.values;
          if (type.indexOf("rgb") !== -1) {
            values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);
          } else if (type.indexOf("hsl") !== -1) {
            values[1] = `${values[1]}%`;
            values[2] = `${values[2]}%`;
          }
          if (type.indexOf("color") !== -1) {
            values = `${colorSpace} ${values.join(" ")}`;
          } else {
            values = `${values.join(", ")}`;
          }
          return `${type}(${values})`;
        }
        function hslToRgb(color) {
          color = decomposeColor(color);
          const _color = color,
            values = _color.values;
          const h = values[0];
          const s = values[1] / 100;
          const l = values[2] / 100;
          const a = s * Math.min(l, 1 - l);
          const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
          let type = "rgb";
          const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
          if (color.type === "hsla") {
            type += "a";
            rgb.push(values[3]);
          }
          return recomposeColor({
            type,
            values: rgb
          });
        }
        function getLuminance(color) {
          color = decomposeColor(color);
          let rgb = color.type === "hsl" || color.type === "hsla" ? decomposeColor(hslToRgb(color)).values : color.values;
          rgb = rgb.map(val => {
            if (color.type !== "color") {
              val /= 255;
            }
            return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
          });
          return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
        }
        function getContrastRatio(foreground, background) {
          const lumA = getLuminance(foreground);
          const lumB = getLuminance(background);
          return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
        }
        function alpha(color, value) {
          color = decomposeColor(color);
          value = clamp(value);
          if (color.type === "rgb" || color.type === "hsl") {
            color.type += "a";
          }
          if (color.type === "color") {
            color.values[3] = `/${value}`;
          } else {
            color.values[3] = value;
          }
          return recomposeColor(color);
        }
        function darken(color, coefficient) {
          color = decomposeColor(color);
          coefficient = clamp(coefficient);
          if (color.type.indexOf("hsl") !== -1) {
            color.values[2] *= 1 - coefficient;
          } else if (color.type.indexOf("rgb") !== -1 || color.type.indexOf("color") !== -1) {
            for (let i = 0; i < 3; i += 1) {
              color.values[i] *= 1 - coefficient;
            }
          }
          return recomposeColor(color);
        }
        function lighten(color, coefficient) {
          color = decomposeColor(color);
          coefficient = clamp(coefficient);
          if (color.type.indexOf("hsl") !== -1) {
            color.values[2] += (100 - color.values[2]) * coefficient;
          } else if (color.type.indexOf("rgb") !== -1) {
            for (let i = 0; i < 3; i += 1) {
              color.values[i] += (255 - color.values[i]) * coefficient;
            }
          } else if (color.type.indexOf("color") !== -1) {
            for (let i = 0; i < 3; i += 1) {
              color.values[i] += (1 - color.values[i]) * coefficient;
            }
          }
          return recomposeColor(color);
        }
        function emphasize(color, coefficient = 0.15) {
          return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
        }
        const ThemeContext = /* @__PURE__ */reactExports.createContext(null);
        const ThemeContext$1 = ThemeContext;
        function useTheme$1() {
          const theme = reactExports.useContext(ThemeContext$1);
          return theme;
        }
        const hasSymbol = typeof Symbol === 'function' && Symbol.for;
        const nested = hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';
        function mergeOuterLocalTheme(outerTheme, localTheme) {
          if (typeof localTheme === "function") {
            const mergedTheme = localTheme(outerTheme);
            return mergedTheme;
          }
          return _extends({}, outerTheme, localTheme);
        }
        function ThemeProvider$2(props) {
          const children = props.children,
            localTheme = props.theme;
          const outerTheme = useTheme$1();
          const theme = reactExports.useMemo(() => {
            const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);
            if (output != null) {
              output[nested] = outerTheme !== null;
            }
            return output;
          }, [localTheme, outerTheme]);
          return /* @__PURE__ */jsxRuntimeExports.jsx(ThemeContext$1.Provider, {
            value: theme,
            children
          });
        }
        const EMPTY_THEME = {};
        function useThemeScoping(themeId, upperTheme, localTheme, isPrivate = false) {
          return reactExports.useMemo(() => {
            const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;
            if (typeof localTheme === "function") {
              const mergedTheme = localTheme(resolvedTheme);
              const result = themeId ? _extends({}, upperTheme, {
                [themeId]: mergedTheme
              }) : mergedTheme;
              if (isPrivate) {
                return () => result;
              }
              return result;
            }
            return themeId ? _extends({}, upperTheme, {
              [themeId]: localTheme
            }) : _extends({}, upperTheme, localTheme);
          }, [themeId, upperTheme, localTheme, isPrivate]);
        }
        function ThemeProvider$1(props) {
          const children = props.children,
            localTheme = props.theme,
            themeId = props.themeId;
          const upperTheme = useTheme$3(EMPTY_THEME);
          const upperPrivateTheme = useTheme$1() || EMPTY_THEME;
          const engineTheme = useThemeScoping(themeId, upperTheme, localTheme);
          const privateTheme = useThemeScoping(themeId, upperPrivateTheme, localTheme, true);
          return /* @__PURE__ */jsxRuntimeExports.jsx(ThemeProvider$2, {
            theme: privateTheme,
            children: /* @__PURE__ */jsxRuntimeExports.jsx(ThemeContext$2.Provider, {
              value: engineTheme,
              children
            })
          });
        }
        function createMixins(breakpoints, mixins) {
          return _extends({
            toolbar: {
              minHeight: 56,
              [breakpoints.up('xs')]: {
                '@media (orientation: landscape)': {
                  minHeight: 48
                }
              },
              [breakpoints.up('sm')]: {
                minHeight: 64
              }
            }
          }, mixins);
        }
        const _excluded$J = ["mode", "contrastThreshold", "tonalOffset"];
        const light = {
          // The colors used to style the text.
          text: {
            // The most important text.
            primary: "rgba(0, 0, 0, 0.87)",
            // Secondary text.
            secondary: "rgba(0, 0, 0, 0.6)",
            // Disabled text have even lower visual prominence.
            disabled: "rgba(0, 0, 0, 0.38)"
          },
          // The color used to divide different elements.
          divider: "rgba(0, 0, 0, 0.12)",
          // The background colors used to style the surfaces.
          // Consistency between these values is important.
          background: {
            paper: common$1.white,
            default: common$1.white
          },
          // The colors used to style the action elements.
          action: {
            // The color of an active action like an icon button.
            active: "rgba(0, 0, 0, 0.54)",
            // The color of an hovered action.
            hover: "rgba(0, 0, 0, 0.04)",
            hoverOpacity: 0.04,
            // The color of a selected action.
            selected: "rgba(0, 0, 0, 0.08)",
            selectedOpacity: 0.08,
            // The color of a disabled action.
            disabled: "rgba(0, 0, 0, 0.26)",
            // The background color of a disabled action.
            disabledBackground: "rgba(0, 0, 0, 0.12)",
            disabledOpacity: 0.38,
            focus: "rgba(0, 0, 0, 0.12)",
            focusOpacity: 0.12,
            activatedOpacity: 0.12
          }
        };
        const dark = {
          text: {
            primary: common$1.white,
            secondary: "rgba(255, 255, 255, 0.7)",
            disabled: "rgba(255, 255, 255, 0.5)",
            icon: "rgba(255, 255, 255, 0.5)"
          },
          divider: "rgba(255, 255, 255, 0.12)",
          background: {
            paper: "#121212",
            default: "#121212"
          },
          action: {
            active: common$1.white,
            hover: "rgba(255, 255, 255, 0.08)",
            hoverOpacity: 0.08,
            selected: "rgba(255, 255, 255, 0.16)",
            selectedOpacity: 0.16,
            disabled: "rgba(255, 255, 255, 0.3)",
            disabledBackground: "rgba(255, 255, 255, 0.12)",
            disabledOpacity: 0.38,
            focus: "rgba(255, 255, 255, 0.12)",
            focusOpacity: 0.12,
            activatedOpacity: 0.24
          }
        };
        function addLightOrDark(intent, direction, shade, tonalOffset) {
          const tonalOffsetLight = tonalOffset.light || tonalOffset;
          const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
          if (!intent[direction]) {
            if (intent.hasOwnProperty(shade)) {
              intent[direction] = intent[shade];
            } else if (direction === "light") {
              intent.light = lighten(intent.main, tonalOffsetLight);
            } else if (direction === "dark") {
              intent.dark = darken(intent.main, tonalOffsetDark);
            }
          }
        }
        function getDefaultPrimary(mode = "light") {
          if (mode === "dark") {
            return {
              main: blue$1[200],
              light: blue$1[50],
              dark: blue$1[400]
            };
          }
          return {
            main: blue$1[700],
            light: blue$1[400],
            dark: blue$1[800]
          };
        }
        function getDefaultSecondary(mode = "light") {
          if (mode === "dark") {
            return {
              main: purple$1[200],
              light: purple$1[50],
              dark: purple$1[400]
            };
          }
          return {
            main: purple$1[500],
            light: purple$1[300],
            dark: purple$1[700]
          };
        }
        function getDefaultError(mode = "light") {
          if (mode === "dark") {
            return {
              main: red$1[500],
              light: red$1[300],
              dark: red$1[700]
            };
          }
          return {
            main: red$1[700],
            light: red$1[400],
            dark: red$1[800]
          };
        }
        function getDefaultInfo(mode = "light") {
          if (mode === "dark") {
            return {
              main: lightBlue$1[400],
              light: lightBlue$1[300],
              dark: lightBlue$1[700]
            };
          }
          return {
            main: lightBlue$1[700],
            light: lightBlue$1[500],
            dark: lightBlue$1[900]
          };
        }
        function getDefaultSuccess(mode = "light") {
          if (mode === "dark") {
            return {
              main: green$1[400],
              light: green$1[300],
              dark: green$1[700]
            };
          }
          return {
            main: green$1[800],
            light: green$1[500],
            dark: green$1[900]
          };
        }
        function getDefaultWarning(mode = "light") {
          if (mode === "dark") {
            return {
              main: orange$1[400],
              light: orange$1[300],
              dark: orange$1[700]
            };
          }
          return {
            main: "#ed6c02",
            // closest to orange[800] that pass 3:1.
            light: orange$1[500],
            dark: orange$1[900]
          };
        }
        function createPalette(palette) {
          const _palette$mode = palette.mode,
            mode = _palette$mode === void 0 ? "light" : _palette$mode,
            _palette$contrastThre = palette.contrastThreshold,
            contrastThreshold = _palette$contrastThre === void 0 ? 3 : _palette$contrastThre,
            _palette$tonalOffset = palette.tonalOffset,
            tonalOffset = _palette$tonalOffset === void 0 ? 0.2 : _palette$tonalOffset,
            other = _objectWithoutPropertiesLoose$2(palette, _excluded$J);
          const primary = palette.primary || getDefaultPrimary(mode);
          const secondary = palette.secondary || getDefaultSecondary(mode);
          const error = palette.error || getDefaultError(mode);
          const info = palette.info || getDefaultInfo(mode);
          const success = palette.success || getDefaultSuccess(mode);
          const warning = palette.warning || getDefaultWarning(mode);
          function getContrastText(background) {
            const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
            return contrastText;
          }
          const augmentColor = ({
            color,
            name,
            mainShade = 500,
            lightShade = 300,
            darkShade = 700
          }) => {
            color = _extends({}, color);
            if (!color.main && color[mainShade]) {
              color.main = color[mainShade];
            }
            if (!color.hasOwnProperty("main")) {
              throw new Error(formatMuiErrorMessage(11, name ? ` (${name})` : "", mainShade));
            }
            if (typeof color.main !== "string") {
              throw new Error(formatMuiErrorMessage(12, name ? ` (${name})` : "", JSON.stringify(color.main)));
            }
            addLightOrDark(color, "light", lightShade, tonalOffset);
            addLightOrDark(color, "dark", darkShade, tonalOffset);
            if (!color.contrastText) {
              color.contrastText = getContrastText(color.main);
            }
            return color;
          };
          const modes = {
            dark,
            light
          };
          const paletteOutput = deepmerge(_extends({
            // A collection of common colors.
            common: _extends({}, common$1),
            // prevent mutable object.
            // The palette mode, can be light or dark.
            mode,
            // The colors used to represent primary interface elements for a user.
            primary: augmentColor({
              color: primary,
              name: "primary"
            }),
            // The colors used to represent secondary interface elements for a user.
            secondary: augmentColor({
              color: secondary,
              name: "secondary",
              mainShade: "A400",
              lightShade: "A200",
              darkShade: "A700"
            }),
            // The colors used to represent interface elements that the user should be made aware of.
            error: augmentColor({
              color: error,
              name: "error"
            }),
            // The colors used to represent potentially dangerous actions or important messages.
            warning: augmentColor({
              color: warning,
              name: "warning"
            }),
            // The colors used to present information to the user that is neutral and not necessarily important.
            info: augmentColor({
              color: info,
              name: "info"
            }),
            // The colors used to indicate the successful completion of an action that user triggered.
            success: augmentColor({
              color: success,
              name: "success"
            }),
            // The grey colors.
            grey: grey$1,
            // Used by `getContrastText()` to maximize the contrast between
            // the background and the text.
            contrastThreshold,
            // Takes a background color and returns the text color that maximizes the contrast.
            getContrastText,
            // Generate a rich color object.
            augmentColor,
            // Used by the functions below to shift a color's luminance by approximately
            // two indexes within its tonal palette.
            // E.g., shift from Red 500 to Red 300 or Red 700.
            tonalOffset
          }, modes[mode]), other);
          return paletteOutput;
        }
        const _excluded$I = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
        function round(value) {
          return Math.round(value * 1e5) / 1e5;
        }
        const caseAllCaps = {
          textTransform: "uppercase"
        };
        const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
        function createTypography(palette, typography) {
          const _ref = typeof typography === "function" ? typography(palette) : typography,
            _ref$fontFamily = _ref.fontFamily,
            fontFamily = _ref$fontFamily === void 0 ? defaultFontFamily : _ref$fontFamily,
            _ref$fontSize = _ref.fontSize,
            fontSize = _ref$fontSize === void 0 ? 14 : _ref$fontSize,
            _ref$fontWeightLight = _ref.fontWeightLight,
            fontWeightLight = _ref$fontWeightLight === void 0 ? 300 : _ref$fontWeightLight,
            _ref$fontWeightRegula = _ref.fontWeightRegular,
            fontWeightRegular = _ref$fontWeightRegula === void 0 ? 400 : _ref$fontWeightRegula,
            _ref$fontWeightMedium = _ref.fontWeightMedium,
            fontWeightMedium = _ref$fontWeightMedium === void 0 ? 500 : _ref$fontWeightMedium,
            _ref$fontWeightBold = _ref.fontWeightBold,
            fontWeightBold = _ref$fontWeightBold === void 0 ? 700 : _ref$fontWeightBold,
            _ref$htmlFontSize = _ref.htmlFontSize,
            htmlFontSize = _ref$htmlFontSize === void 0 ? 16 : _ref$htmlFontSize,
            allVariants = _ref.allVariants,
            pxToRem2 = _ref.pxToRem,
            other = _objectWithoutPropertiesLoose$2(_ref, _excluded$I);
          const coef = fontSize / 14;
          const pxToRem = pxToRem2 || (size => `${size / htmlFontSize * coef}rem`);
          const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _extends({
            fontFamily,
            fontWeight,
            fontSize: pxToRem(size),
            // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
            lineHeight
          }, fontFamily === defaultFontFamily ? {
            letterSpacing: `${round(letterSpacing / size)}em`
          } : {}, casing, allVariants);
          const variants = {
            h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
            h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
            h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
            h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
            h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
            h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
            subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
            subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
            body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
            body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
            button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
            caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
            overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
            // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
            inherit: {
              fontFamily: "inherit",
              fontWeight: "inherit",
              fontSize: "inherit",
              lineHeight: "inherit",
              letterSpacing: "inherit"
            }
          };
          return deepmerge(_extends({
            htmlFontSize,
            pxToRem,
            fontFamily,
            fontSize,
            fontWeightLight,
            fontWeightRegular,
            fontWeightMedium,
            fontWeightBold
          }, variants), other, {
            clone: false
            // No need to clone deep
          });
        }
        const shadowKeyUmbraOpacity = 0.2;
        const shadowKeyPenumbraOpacity = 0.14;
        const shadowAmbientShadowOpacity = 0.12;
        function createShadow(...px) {
          return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(',');
        }

        // Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss
        const shadows = ['none', createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
        const shadows$1 = shadows;
        const _excluded$H = ["duration", "easing", "delay"];
        const easing = {
          // This is the most common easing curve.
          easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
          // Objects enter the screen at full velocity from off-screen and
          // slowly decelerate to a resting point.
          easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
          // Objects leave the screen at full velocity. They do not decelerate when off-screen.
          easeIn: "cubic-bezier(0.4, 0, 1, 1)",
          // The sharp curve is used by objects that may return to the screen at any time.
          sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
        };
        const duration = exports("bQ", {
          shortest: 150,
          shorter: 200,
          short: 250,
          // most basic recommended timing
          standard: 300,
          // this is to be used in complex animations
          complex: 375,
          // recommended when something is entering screen
          enteringScreen: 225,
          // recommended when something is leaving screen
          leavingScreen: 195
        });
        function formatMs(milliseconds) {
          return `${Math.round(milliseconds)}ms`;
        }
        function getAutoHeightDuration(height) {
          if (!height) {
            return 0;
          }
          const constant = height / 36;
          return Math.round((4 + 15 * Math.pow(constant, 0.25) + constant / 5) * 10);
        }
        function createTransitions(inputTransitions) {
          const mergedEasing = _extends({}, easing, inputTransitions.easing);
          const mergedDuration = _extends({}, duration, inputTransitions.duration);
          const create = (props = ["all"], options = {}) => {
            const _options$duration = options.duration,
              durationOption = _options$duration === void 0 ? mergedDuration.standard : _options$duration,
              _options$easing = options.easing,
              easingOption = _options$easing === void 0 ? mergedEasing.easeInOut : _options$easing,
              _options$delay = options.delay,
              delay = _options$delay === void 0 ? 0 : _options$delay;
            _objectWithoutPropertiesLoose$2(options, _excluded$H);
            return (Array.isArray(props) ? props : [props]).map(animatedProp => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === "string" ? delay : formatMs(delay)}`).join(",");
          };
          return _extends({
            getAutoHeightDuration,
            create
          }, inputTransitions, {
            easing: mergedEasing,
            duration: mergedDuration
          });
        }

        // We need to centralize the zIndex definitions as they work
        // like global values in the browser.
        const zIndex = {
          mobileStepper: 1000,
          fab: 1050,
          speedDial: 1050,
          appBar: 1100,
          drawer: 1200,
          modal: 1300,
          snackbar: 1400,
          tooltip: 1500
        };
        const zIndex$1 = zIndex;
        const _excluded$G = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
        function createTheme(options = {}, ...args) {
          const _options$mixins = options.mixins,
            mixinsInput = _options$mixins === void 0 ? {} : _options$mixins,
            _options$palette2 = options.palette,
            paletteInput = _options$palette2 === void 0 ? {} : _options$palette2,
            _options$transitions = options.transitions,
            transitionsInput = _options$transitions === void 0 ? {} : _options$transitions,
            _options$typography = options.typography,
            typographyInput = _options$typography === void 0 ? {} : _options$typography,
            other = _objectWithoutPropertiesLoose$2(options, _excluded$G);
          if (options.vars) {
            throw new Error(formatMuiErrorMessage(18));
          }
          const palette = createPalette(paletteInput);
          const systemTheme = createTheme$1(options);
          let muiTheme = deepmerge(systemTheme, {
            mixins: createMixins(systemTheme.breakpoints, mixinsInput),
            palette,
            // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
            shadows: shadows$1.slice(),
            typography: createTypography(palette, typographyInput),
            transitions: createTransitions(transitionsInput),
            zIndex: _extends({}, zIndex$1)
          });
          muiTheme = deepmerge(muiTheme, other);
          muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
          muiTheme.unstable_sxConfig = _extends({}, defaultSxConfig$1, other == null ? void 0 : other.unstable_sxConfig);
          muiTheme.unstable_sx = function sx(props) {
            return styleFunctionSx$1({
              sx: props,
              theme: this
            });
          };
          return muiTheme;
        }
        const defaultTheme$1 = createTheme();
        const defaultTheme$2 = defaultTheme$1;
        function useTheme() {
          const theme = useTheme$2(defaultTheme$2);
          return theme[THEME_ID] || theme;
        }
        function useThemeProps({
          props,
          name
        }) {
          return useThemeProps$1({
            props,
            name,
            defaultTheme: defaultTheme$2,
            themeId: THEME_ID
          });
        }
        const rootShouldForwardProp = exports("bu", prop => shouldForwardProp(prop) && prop !== 'classes');
        const slotShouldForwardProp = exports("c8", shouldForwardProp);
        const styled = createStyled({
          themeId: THEME_ID,
          defaultTheme: defaultTheme$2,
          rootShouldForwardProp
        });
        const styled$1 = exports('s', styled);
        const _excluded$F = ["theme"];
        function ThemeProvider(_ref) {
          let themeInput = _ref.theme,
            props = _objectWithoutPropertiesLoose$2(_ref, _excluded$F);
          const scopedTheme = themeInput[THEME_ID];
          return /* @__PURE__ */jsxRuntimeExports.jsx(ThemeProvider$1, _extends({}, props, {
            themeId: scopedTheme ? THEME_ID : void 0,
            theme: scopedTheme || themeInput
          }));
        }

        // Inspired by https://github.com/material-components/material-components-ios/blob/bca36107405594d5b7b16265a5b0ed698f85a5ee/components/Elevation/src/UIColor%2BMaterialElevation.m#L61
        const getOverlayAlpha = elevation => {
          let alphaValue;
          if (elevation < 1) {
            alphaValue = 5.11916 * Math.pow(elevation, 2);
          } else {
            alphaValue = 4.5 * Math.log(elevation + 1) + 2;
          }
          return (alphaValue / 100).toFixed(2);
        };
        const getOverlayAlpha$1 = getOverlayAlpha;
        function getSvgIconUtilityClass(slot) {
          return generateUtilityClass('MuiSvgIcon', slot);
        }
        generateUtilityClasses('MuiSvgIcon', ['root', 'colorPrimary', 'colorSecondary', 'colorAction', 'colorError', 'colorDisabled', 'fontSizeInherit', 'fontSizeSmall', 'fontSizeMedium', 'fontSizeLarge']);
        const _excluded$E = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
        const useUtilityClasses$v = ownerState => {
          const color = ownerState.color,
            fontSize = ownerState.fontSize,
            classes = ownerState.classes;
          const slots = {
            root: ["root", color !== "inherit" && `color${capitalize(color)}`, `fontSize${capitalize(fontSize)}`]
          };
          return composeClasses(slots, getSvgIconUtilityClass, classes);
        };
        const SvgIconRoot = styled$1("svg", {
          name: "MuiSvgIcon",
          slot: "Root",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [styles.root, ownerState.color !== "inherit" && styles[`color${capitalize(ownerState.color)}`], styles[`fontSize${capitalize(ownerState.fontSize)}`]];
          }
        })(({
          theme,
          ownerState
        }) => {
          var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _palette$ownerState$c, _palette, _palette2, _palette3;
          return {
            userSelect: "none",
            width: "1em",
            height: "1em",
            display: "inline-block",
            // the <svg> will define the property that has `currentColor`
            // e.g. heroicons uses fill="none" and stroke="currentColor"
            fill: ownerState.hasSvgAsChild ? void 0 : "currentColor",
            flexShrink: 0,
            transition: (_theme$transitions = theme.transitions) == null || (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, "fill", {
              duration: (_theme$transitions2 = theme.transitions) == null || (_theme$transitions2 = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2.shorter
            }),
            fontSize: {
              inherit: "inherit",
              small: ((_theme$typography = theme.typography) == null || (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || "1.25rem",
              medium: ((_theme$typography2 = theme.typography) == null || (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || "1.5rem",
              large: ((_theme$typography3 = theme.typography) == null || (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || "2.1875rem"
            }[ownerState.fontSize],
            // TODO v5 deprecate, v6 remove for sx
            color: (_palette$ownerState$c = (_palette = (theme.vars || theme).palette) == null || (_palette = _palette[ownerState.color]) == null ? void 0 : _palette.main) != null ? _palette$ownerState$c : {
              action: (_palette2 = (theme.vars || theme).palette) == null || (_palette2 = _palette2.action) == null ? void 0 : _palette2.active,
              disabled: (_palette3 = (theme.vars || theme).palette) == null || (_palette3 = _palette3.action) == null ? void 0 : _palette3.disabled,
              inherit: void 0
            }[ownerState.color]
          };
        });
        const SvgIcon = /* @__PURE__ */reactExports.forwardRef(function SvgIcon2(inProps, ref) {
          const props = useThemeProps({
            props: inProps,
            name: "MuiSvgIcon"
          });
          const children = props.children,
            className = props.className,
            _props$color = props.color,
            color = _props$color === void 0 ? "inherit" : _props$color,
            _props$component = props.component,
            component = _props$component === void 0 ? "svg" : _props$component,
            _props$fontSize = props.fontSize,
            fontSize = _props$fontSize === void 0 ? "medium" : _props$fontSize,
            htmlColor = props.htmlColor,
            _props$inheritViewBox = props.inheritViewBox,
            inheritViewBox = _props$inheritViewBox === void 0 ? false : _props$inheritViewBox,
            titleAccess = props.titleAccess,
            _props$viewBox = props.viewBox,
            viewBox = _props$viewBox === void 0 ? "0 0 24 24" : _props$viewBox,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$E);
          const hasSvgAsChild = /* @__PURE__ */reactExports.isValidElement(children) && children.type === "svg";
          const ownerState = _extends({}, props, {
            color,
            component,
            fontSize,
            instanceFontSize: inProps.fontSize,
            inheritViewBox,
            viewBox,
            hasSvgAsChild
          });
          const more = {};
          if (!inheritViewBox) {
            more.viewBox = viewBox;
          }
          const classes = useUtilityClasses$v(ownerState);
          return /* @__PURE__ */jsxRuntimeExports.jsxs(SvgIconRoot, _extends({
            as: component,
            className: clsx(classes.root, className),
            focusable: "false",
            color: htmlColor,
            "aria-hidden": titleAccess ? void 0 : true,
            role: titleAccess ? "img" : void 0,
            ref
          }, more, other, hasSvgAsChild && children.props, {
            ownerState,
            children: [hasSvgAsChild ? children.props.children : children, titleAccess ? /* @__PURE__ */jsxRuntimeExports.jsx("title", {
              children: titleAccess
            }) : null]
          }));
        });
        SvgIcon.muiName = "SvgIcon";
        const SvgIcon$1 = SvgIcon;
        function createSvgIcon$1(path, displayName) {
          function Component(props, ref) {
            return /* @__PURE__ */jsxRuntimeExports.jsx(SvgIcon$1, _extends({
              "data-testid": `${displayName}Icon`,
              ref
            }, props, {
              children: path
            }));
          }
          Component.muiName = SvgIcon$1.muiName;
          return /* @__PURE__ */reactExports.memo( /* @__PURE__ */reactExports.forwardRef(Component));
        }
        const unstable_ClassNameGenerator = {
          configure: generator => {
            ClassNameGenerator$1.configure(generator);
          }
        };
        const utils$2 = /*#__PURE__*/Object.freeze( /*#__PURE__*/Object.defineProperty({
          __proto__: null,
          capitalize,
          createChainedFunction,
          createSvgIcon: createSvgIcon$1,
          debounce,
          deprecatedPropType,
          isMuiElement,
          ownerDocument,
          ownerWindow,
          requirePropFactory,
          setRef: setRef$1,
          unstable_ClassNameGenerator,
          unstable_useEnhancedEffect: useEnhancedEffect$1,
          unstable_useId: useId,
          unsupportedProp,
          useControlled,
          useEventCallback,
          useForkRef,
          useIsFocusVisible
        }, Symbol.toStringTag, {
          value: 'Module'
        }));
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          _setPrototypeOf(subClass, superClass);
        }
        const config = {
          disabled: false
        };
        const TransitionGroupContext = React.createContext(null);
        var forceReflow = exports("aL", function forceReflow(node) {
          return node.scrollTop;
        });
        var UNMOUNTED = "unmounted";
        var EXITED = "exited";
        var ENTERING = "entering";
        var ENTERED = "entered";
        var EXITING = "exiting";
        var Transition = /* @__PURE__ */function (_React$Component) {
          _inheritsLoose(Transition2, _React$Component);
          function Transition2(props, context) {
            var _this;
            _this = _React$Component.call(this, props, context) || this;
            var parentGroup = context;
            var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
            var initialStatus;
            _this.appearStatus = null;
            if (props.in) {
              if (appear) {
                initialStatus = EXITED;
                _this.appearStatus = ENTERING;
              } else {
                initialStatus = ENTERED;
              }
            } else {
              if (props.unmountOnExit || props.mountOnEnter) {
                initialStatus = UNMOUNTED;
              } else {
                initialStatus = EXITED;
              }
            }
            _this.state = {
              status: initialStatus
            };
            _this.nextCallback = null;
            return _this;
          }
          Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
            var nextIn = _ref.in;
            if (nextIn && prevState.status === UNMOUNTED) {
              return {
                status: EXITED
              };
            }
            return null;
          };
          var _proto = Transition2.prototype;
          _proto.componentDidMount = function componentDidMount() {
            this.updateStatus(true, this.appearStatus);
          };
          _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
            var nextStatus = null;
            if (prevProps !== this.props) {
              var status = this.state.status;
              if (this.props.in) {
                if (status !== ENTERING && status !== ENTERED) {
                  nextStatus = ENTERING;
                }
              } else {
                if (status === ENTERING || status === ENTERED) {
                  nextStatus = EXITING;
                }
              }
            }
            this.updateStatus(false, nextStatus);
          };
          _proto.componentWillUnmount = function componentWillUnmount() {
            this.cancelNextCallback();
          };
          _proto.getTimeouts = function getTimeouts() {
            var timeout2 = this.props.timeout;
            var exit, enter, appear;
            exit = enter = appear = timeout2;
            if (timeout2 != null && typeof timeout2 !== "number") {
              exit = timeout2.exit;
              enter = timeout2.enter;
              appear = timeout2.appear !== void 0 ? timeout2.appear : enter;
            }
            return {
              exit,
              enter,
              appear
            };
          };
          _proto.updateStatus = function updateStatus(mounting, nextStatus) {
            if (mounting === void 0) {
              mounting = false;
            }
            if (nextStatus !== null) {
              this.cancelNextCallback();
              if (nextStatus === ENTERING) {
                if (this.props.unmountOnExit || this.props.mountOnEnter) {
                  var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
                  if (node) forceReflow(node);
                }
                this.performEnter(mounting);
              } else {
                this.performExit();
              }
            } else if (this.props.unmountOnExit && this.state.status === EXITED) {
              this.setState({
                status: UNMOUNTED
              });
            }
          };
          _proto.performEnter = function performEnter(mounting) {
            var _this2 = this;
            var enter = this.props.enter;
            var appearing = this.context ? this.context.isMounting : mounting;
            var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing],
              maybeNode = _ref2[0],
              maybeAppearing = _ref2[1];
            var timeouts = this.getTimeouts();
            var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
            if (!mounting && !enter || config.disabled) {
              this.safeSetState({
                status: ENTERED
              }, function () {
                _this2.props.onEntered(maybeNode);
              });
              return;
            }
            this.props.onEnter(maybeNode, maybeAppearing);
            this.safeSetState({
              status: ENTERING
            }, function () {
              _this2.props.onEntering(maybeNode, maybeAppearing);
              _this2.onTransitionEnd(enterTimeout, function () {
                _this2.safeSetState({
                  status: ENTERED
                }, function () {
                  _this2.props.onEntered(maybeNode, maybeAppearing);
                });
              });
            });
          };
          _proto.performExit = function performExit() {
            var _this3 = this;
            var exit = this.props.exit;
            var timeouts = this.getTimeouts();
            var maybeNode = this.props.nodeRef ? void 0 : ReactDOM.findDOMNode(this);
            if (!exit || config.disabled) {
              this.safeSetState({
                status: EXITED
              }, function () {
                _this3.props.onExited(maybeNode);
              });
              return;
            }
            this.props.onExit(maybeNode);
            this.safeSetState({
              status: EXITING
            }, function () {
              _this3.props.onExiting(maybeNode);
              _this3.onTransitionEnd(timeouts.exit, function () {
                _this3.safeSetState({
                  status: EXITED
                }, function () {
                  _this3.props.onExited(maybeNode);
                });
              });
            });
          };
          _proto.cancelNextCallback = function cancelNextCallback() {
            if (this.nextCallback !== null) {
              this.nextCallback.cancel();
              this.nextCallback = null;
            }
          };
          _proto.safeSetState = function safeSetState(nextState, callback) {
            callback = this.setNextCallback(callback);
            this.setState(nextState, callback);
          };
          _proto.setNextCallback = function setNextCallback(callback) {
            var _this4 = this;
            var active = true;
            this.nextCallback = function (event) {
              if (active) {
                active = false;
                _this4.nextCallback = null;
                callback(event);
              }
            };
            this.nextCallback.cancel = function () {
              active = false;
            };
            return this.nextCallback;
          };
          _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
            this.setNextCallback(handler);
            var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
            var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
            if (!node || doesNotHaveTimeoutOrListener) {
              setTimeout(this.nextCallback, 0);
              return;
            }
            if (this.props.addEndListener) {
              var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
                maybeNode = _ref3[0],
                maybeNextCallback = _ref3[1];
              this.props.addEndListener(maybeNode, maybeNextCallback);
            }
            if (timeout2 != null) {
              setTimeout(this.nextCallback, timeout2);
            }
          };
          _proto.render = function render() {
            var status = this.state.status;
            if (status === UNMOUNTED) {
              return null;
            }
            var _this$props = this.props,
              children = _this$props.children;
            _this$props.in;
            _this$props.mountOnEnter;
            _this$props.unmountOnExit;
            _this$props.appear;
            _this$props.enter;
            _this$props.exit;
            _this$props.timeout;
            _this$props.addEndListener;
            _this$props.onEnter;
            _this$props.onEntering;
            _this$props.onEntered;
            _this$props.onExit;
            _this$props.onExiting;
            _this$props.onExited;
            _this$props.nodeRef;
            var childProps = _objectWithoutPropertiesLoose$2(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
            return (
              // allows for nested Transitions
              /* @__PURE__ */
              React.createElement(TransitionGroupContext.Provider, {
                value: null
              }, typeof children === "function" ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))
            );
          };
          return Transition2;
        }(React.Component);
        Transition.contextType = TransitionGroupContext;
        Transition.propTypes = {};
        function noop$1() {}
        Transition.defaultProps = {
          in: false,
          mountOnEnter: false,
          unmountOnExit: false,
          appear: false,
          enter: true,
          exit: true,
          onEnter: noop$1,
          onEntering: noop$1,
          onEntered: noop$1,
          onExit: noop$1,
          onExiting: noop$1,
          onExited: noop$1
        };
        Transition.UNMOUNTED = UNMOUNTED;
        Transition.EXITED = EXITED;
        Transition.ENTERING = ENTERING;
        Transition.ENTERED = ENTERED;
        Transition.EXITING = EXITING;
        const Transition$1 = exports('aM', Transition);

        /**
         * Given `this.props.children`, return an object mapping key to child.
         *
         * @param {*} children `this.props.children`
         * @return {object} Mapping of key to child
         */

        function getChildMapping(children, mapFn) {
          var mapper = function mapper(child) {
            return mapFn && reactExports.isValidElement(child) ? mapFn(child) : child;
          };
          var result = Object.create(null);
          if (children) reactExports.Children.map(children, function (c) {
            return c;
          }).forEach(function (child) {
            // run the map function here instead so that the key is the computed one
            result[child.key] = mapper(child);
          });
          return result;
        }
        /**
         * When you're adding or removing children some may be added or removed in the
         * same render pass. We want to show *both* since we want to simultaneously
         * animate elements in and out. This function takes a previous set of keys
         * and a new set of keys and merges them with its best guess of the correct
         * ordering. In the future we may expose some of the utilities in
         * ReactMultiChild to make this easy, but for now React itself does not
         * directly have this concept of the union of prevChildren and nextChildren
         * so we implement it here.
         *
         * @param {object} prev prev children as returned from
         * `ReactTransitionChildMapping.getChildMapping()`.
         * @param {object} next next children as returned from
         * `ReactTransitionChildMapping.getChildMapping()`.
         * @return {object} a key set that contains all keys in `prev` and all keys
         * in `next` in a reasonable order.
         */

        function mergeChildMappings(prev, next) {
          prev = prev || {};
          next = next || {};
          function getValueForKey(key) {
            return key in next ? next[key] : prev[key];
          } // For each key of `next`, the list of keys to insert before that key in
          // the combined list

          var nextKeysPending = Object.create(null);
          var pendingKeys = [];
          for (var prevKey in prev) {
            if (prevKey in next) {
              if (pendingKeys.length) {
                nextKeysPending[prevKey] = pendingKeys;
                pendingKeys = [];
              }
            } else {
              pendingKeys.push(prevKey);
            }
          }
          var i;
          var childMapping = {};
          for (var nextKey in next) {
            if (nextKeysPending[nextKey]) {
              for (i = 0; i < nextKeysPending[nextKey].length; i++) {
                var pendingNextKey = nextKeysPending[nextKey][i];
                childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
              }
            }
            childMapping[nextKey] = getValueForKey(nextKey);
          } // Finally, add the keys which didn't appear before any key in `next`

          for (i = 0; i < pendingKeys.length; i++) {
            childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
          }
          return childMapping;
        }
        function getProp(child, prop, props) {
          return props[prop] != null ? props[prop] : child.props[prop];
        }
        function getInitialChildMapping(props, onExited) {
          return getChildMapping(props.children, function (child) {
            return reactExports.cloneElement(child, {
              onExited: onExited.bind(null, child),
              in: true,
              appear: getProp(child, 'appear', props),
              enter: getProp(child, 'enter', props),
              exit: getProp(child, 'exit', props)
            });
          });
        }
        function getNextChildMapping(nextProps, prevChildMapping, onExited) {
          var nextChildMapping = getChildMapping(nextProps.children);
          var children = mergeChildMappings(prevChildMapping, nextChildMapping);
          Object.keys(children).forEach(function (key) {
            var child = children[key];
            if (!reactExports.isValidElement(child)) return;
            var hasPrev = (key in prevChildMapping);
            var hasNext = (key in nextChildMapping);
            var prevChild = prevChildMapping[key];
            var isLeaving = reactExports.isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)

            if (hasNext && (!hasPrev || isLeaving)) {
              // console.log('entering', key)
              children[key] = reactExports.cloneElement(child, {
                onExited: onExited.bind(null, child),
                in: true,
                exit: getProp(child, 'exit', nextProps),
                enter: getProp(child, 'enter', nextProps)
              });
            } else if (!hasNext && hasPrev && !isLeaving) {
              // item is old (exiting)
              // console.log('leaving', key)
              children[key] = reactExports.cloneElement(child, {
                in: false
              });
            } else if (hasNext && hasPrev && reactExports.isValidElement(prevChild)) {
              // item hasn't changed transition states
              // copy over the last transition props;
              // console.log('unchanged', key)
              children[key] = reactExports.cloneElement(child, {
                onExited: onExited.bind(null, child),
                in: prevChild.props.in,
                exit: getProp(child, 'exit', nextProps),
                enter: getProp(child, 'enter', nextProps)
              });
            }
          });
          return children;
        }
        var values = Object.values || function (obj) {
          return Object.keys(obj).map(function (k) {
            return obj[k];
          });
        };
        var defaultProps = {
          component: "div",
          childFactory: function childFactory(child) {
            return child;
          }
        };
        var TransitionGroup = /* @__PURE__ */function (_React$Component) {
          _inheritsLoose(TransitionGroup2, _React$Component);
          function TransitionGroup2(props, context) {
            var _this;
            _this = _React$Component.call(this, props, context) || this;
            var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
            _this.state = {
              contextValue: {
                isMounting: true
              },
              handleExited,
              firstRender: true
            };
            return _this;
          }
          var _proto = TransitionGroup2.prototype;
          _proto.componentDidMount = function componentDidMount() {
            this.mounted = true;
            this.setState({
              contextValue: {
                isMounting: false
              }
            });
          };
          _proto.componentWillUnmount = function componentWillUnmount() {
            this.mounted = false;
          };
          TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
            var prevChildMapping = _ref.children,
              handleExited = _ref.handleExited,
              firstRender = _ref.firstRender;
            return {
              children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
              firstRender: false
            };
          };
          _proto.handleExited = function handleExited(child, node) {
            var currentChildMapping = getChildMapping(this.props.children);
            if (child.key in currentChildMapping) return;
            if (child.props.onExited) {
              child.props.onExited(node);
            }
            if (this.mounted) {
              this.setState(function (state) {
                var children = _extends({}, state.children);
                delete children[child.key];
                return {
                  children
                };
              });
            }
          };
          _proto.render = function render() {
            var _this$props = this.props,
              Component = _this$props.component,
              childFactory2 = _this$props.childFactory,
              props = _objectWithoutPropertiesLoose$2(_this$props, ["component", "childFactory"]);
            var contextValue = this.state.contextValue;
            var children = values(this.state.children).map(childFactory2);
            delete props.appear;
            delete props.enter;
            delete props.exit;
            if (Component === null) {
              return /* @__PURE__ */React.createElement(TransitionGroupContext.Provider, {
                value: contextValue
              }, children);
            }
            return /* @__PURE__ */React.createElement(TransitionGroupContext.Provider, {
              value: contextValue
            }, /* @__PURE__ */React.createElement(Component, props, children));
          };
          return TransitionGroup2;
        }(React.Component);
        TransitionGroup.propTypes = {};
        TransitionGroup.defaultProps = defaultProps;
        const TransitionGroup$1 = exports('b1', TransitionGroup);
        const reflow = node => node.scrollTop;
        function getTransitionProps(props, options) {
          var _style$transitionDura, _style$transitionTimi;
          const timeout = props.timeout,
            easing = props.easing,
            _props$style = props.style,
            style = _props$style === void 0 ? {} : _props$style;
          return {
            duration: (_style$transitionDura = style.transitionDuration) != null ? _style$transitionDura : typeof timeout === 'number' ? timeout : timeout[options.mode] || 0,
            easing: (_style$transitionTimi = style.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing === 'object' ? easing[options.mode] : easing,
            delay: style.transitionDelay
          };
        }
        function getPaperUtilityClass(slot) {
          return generateUtilityClass('MuiPaper', slot);
        }
        generateUtilityClasses('MuiPaper', ['root', 'rounded', 'outlined', 'elevation', 'elevation0', 'elevation1', 'elevation2', 'elevation3', 'elevation4', 'elevation5', 'elevation6', 'elevation7', 'elevation8', 'elevation9', 'elevation10', 'elevation11', 'elevation12', 'elevation13', 'elevation14', 'elevation15', 'elevation16', 'elevation17', 'elevation18', 'elevation19', 'elevation20', 'elevation21', 'elevation22', 'elevation23', 'elevation24']);
        const _excluded$D = ["className", "component", "elevation", "square", "variant"];
        const useUtilityClasses$u = ownerState => {
          const square = ownerState.square,
            elevation = ownerState.elevation,
            variant = ownerState.variant,
            classes = ownerState.classes;
          const slots = {
            root: ["root", variant, !square && "rounded", variant === "elevation" && `elevation${elevation}`]
          };
          return composeClasses(slots, getPaperUtilityClass, classes);
        };
        const PaperRoot = styled$1("div", {
          name: "MuiPaper",
          slot: "Root",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [styles.root, styles[ownerState.variant], !ownerState.square && styles.rounded, ownerState.variant === "elevation" && styles[`elevation${ownerState.elevation}`]];
          }
        })(({
          theme,
          ownerState
        }) => {
          var _theme$vars$overlays;
          return _extends({
            backgroundColor: (theme.vars || theme).palette.background.paper,
            color: (theme.vars || theme).palette.text.primary,
            transition: theme.transitions.create("box-shadow")
          }, !ownerState.square && {
            borderRadius: theme.shape.borderRadius
          }, ownerState.variant === "outlined" && {
            border: `1px solid ${(theme.vars || theme).palette.divider}`
          }, ownerState.variant === "elevation" && _extends({
            boxShadow: (theme.vars || theme).shadows[ownerState.elevation]
          }, !theme.vars && theme.palette.mode === "dark" && {
            backgroundImage: `linear-gradient(${alpha("#fff", getOverlayAlpha$1(ownerState.elevation))}, ${alpha("#fff", getOverlayAlpha$1(ownerState.elevation))})`
          }, theme.vars && {
            backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
          }));
        });
        const Paper = /* @__PURE__ */reactExports.forwardRef(function Paper2(inProps, ref) {
          const props = useThemeProps({
            props: inProps,
            name: "MuiPaper"
          });
          const className = props.className,
            _props$component2 = props.component,
            component = _props$component2 === void 0 ? "div" : _props$component2,
            _props$elevation = props.elevation,
            elevation = _props$elevation === void 0 ? 1 : _props$elevation,
            _props$square = props.square,
            square = _props$square === void 0 ? false : _props$square,
            _props$variant = props.variant,
            variant = _props$variant === void 0 ? "elevation" : _props$variant,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$D);
          const ownerState = _extends({}, props, {
            component,
            elevation,
            square,
            variant
          });
          const classes = useUtilityClasses$u(ownerState);
          return /* @__PURE__ */jsxRuntimeExports.jsx(PaperRoot, _extends({
            as: component,
            ownerState,
            className: clsx(classes.root, className),
            ref
          }, other));
        });
        const Paper$1 = exports('P', Paper);
        function Ripple(props) {
          const className = props.className,
            classes = props.classes,
            _props$pulsate = props.pulsate,
            pulsate = _props$pulsate === void 0 ? false : _props$pulsate,
            rippleX = props.rippleX,
            rippleY = props.rippleY,
            rippleSize = props.rippleSize,
            inProp = props.in,
            onExited = props.onExited,
            timeout = props.timeout;
          const _reactExports$useStat7 = reactExports.useState(false),
            _reactExports$useStat8 = _slicedToArray2(_reactExports$useStat7, 2),
            leaving = _reactExports$useStat8[0],
            setLeaving = _reactExports$useStat8[1];
          const rippleClassName = clsx(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
          const rippleStyles = {
            width: rippleSize,
            height: rippleSize,
            top: -(rippleSize / 2) + rippleY,
            left: -(rippleSize / 2) + rippleX
          };
          const childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
          if (!inProp && !leaving) {
            setLeaving(true);
          }
          reactExports.useEffect(() => {
            if (!inProp && onExited != null) {
              const timeoutId = setTimeout(onExited, timeout);
              return () => {
                clearTimeout(timeoutId);
              };
            }
            return void 0;
          }, [onExited, inProp, timeout]);
          return /* @__PURE__ */jsxRuntimeExports.jsx("span", {
            className: rippleClassName,
            style: rippleStyles,
            children: /* @__PURE__ */jsxRuntimeExports.jsx("span", {
              className: childClassName
            })
          });
        }
        const touchRippleClasses = generateUtilityClasses('MuiTouchRipple', ['root', 'ripple', 'rippleVisible', 'ripplePulsate', 'child', 'childLeaving', 'childPulsate']);
        const touchRippleClasses$1 = touchRippleClasses;
        const _excluded$C = ["center", "classes", "className"];
        let _$2 = t => t,
          _t$1,
          _t2$1,
          _t3$1,
          _t4$1;
        const DURATION = 550;
        const DELAY_RIPPLE = 80;
        const enterKeyframe = keyframes(_t$1 || (_t$1 = _$2`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
        const exitKeyframe = keyframes(_t2$1 || (_t2$1 = _$2`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
        const pulsateKeyframe = keyframes(_t3$1 || (_t3$1 = _$2`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
        const TouchRippleRoot = styled$1("span", {
          name: "MuiTouchRipple",
          slot: "Root"
        })({
          overflow: "hidden",
          pointerEvents: "none",
          position: "absolute",
          zIndex: 0,
          top: 0,
          right: 0,
          bottom: 0,
          left: 0,
          borderRadius: "inherit"
        });
        const TouchRippleRipple = styled$1(Ripple, {
          name: "MuiTouchRipple",
          slot: "Ripple"
        })(_t4$1 || (_t4$1 = _$2`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), touchRippleClasses$1.rippleVisible, enterKeyframe, DURATION, ({
          theme
        }) => theme.transitions.easing.easeInOut, touchRippleClasses$1.ripplePulsate, ({
          theme
        }) => theme.transitions.duration.shorter, touchRippleClasses$1.child, touchRippleClasses$1.childLeaving, exitKeyframe, DURATION, ({
          theme
        }) => theme.transitions.easing.easeInOut, touchRippleClasses$1.childPulsate, pulsateKeyframe, ({
          theme
        }) => theme.transitions.easing.easeInOut);
        const TouchRipple = /* @__PURE__ */reactExports.forwardRef(function TouchRipple2(inProps, ref) {
          const props = useThemeProps({
            props: inProps,
            name: "MuiTouchRipple"
          });
          const _props$center = props.center,
            centerProp = _props$center === void 0 ? false : _props$center,
            _props$classes = props.classes,
            classes = _props$classes === void 0 ? {} : _props$classes,
            className = props.className,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$C);
          const _reactExports$useStat9 = reactExports.useState([]),
            _reactExports$useStat10 = _slicedToArray2(_reactExports$useStat9, 2),
            ripples = _reactExports$useStat10[0],
            setRipples = _reactExports$useStat10[1];
          const nextKey = reactExports.useRef(0);
          const rippleCallback = reactExports.useRef(null);
          reactExports.useEffect(() => {
            if (rippleCallback.current) {
              rippleCallback.current();
              rippleCallback.current = null;
            }
          }, [ripples]);
          const ignoringMouseDown = reactExports.useRef(false);
          const startTimer = reactExports.useRef(0);
          const startTimerCommit = reactExports.useRef(null);
          const container = reactExports.useRef(null);
          reactExports.useEffect(() => {
            return () => {
              if (startTimer.current) {
                clearTimeout(startTimer.current);
              }
            };
          }, []);
          const startCommit = reactExports.useCallback(params => {
            const pulsate2 = params.pulsate,
              rippleX = params.rippleX,
              rippleY = params.rippleY,
              rippleSize = params.rippleSize,
              cb = params.cb;
            setRipples(oldRipples => [...oldRipples, /* @__PURE__ */jsxRuntimeExports.jsx(TouchRippleRipple, {
              classes: {
                ripple: clsx(classes.ripple, touchRippleClasses$1.ripple),
                rippleVisible: clsx(classes.rippleVisible, touchRippleClasses$1.rippleVisible),
                ripplePulsate: clsx(classes.ripplePulsate, touchRippleClasses$1.ripplePulsate),
                child: clsx(classes.child, touchRippleClasses$1.child),
                childLeaving: clsx(classes.childLeaving, touchRippleClasses$1.childLeaving),
                childPulsate: clsx(classes.childPulsate, touchRippleClasses$1.childPulsate)
              },
              timeout: DURATION,
              pulsate: pulsate2,
              rippleX,
              rippleY,
              rippleSize
            }, nextKey.current)]);
            nextKey.current += 1;
            rippleCallback.current = cb;
          }, [classes]);
          const start = reactExports.useCallback((event = {}, options = {}, cb = () => {}) => {
            const _options$pulsate = options.pulsate,
              pulsate2 = _options$pulsate === void 0 ? false : _options$pulsate,
              _options$center = options.center,
              center = _options$center === void 0 ? centerProp || options.pulsate : _options$center,
              _options$fakeElement = options.fakeElement,
              fakeElement = _options$fakeElement === void 0 ? false : _options$fakeElement;
            if ((event == null ? void 0 : event.type) === "mousedown" && ignoringMouseDown.current) {
              ignoringMouseDown.current = false;
              return;
            }
            if ((event == null ? void 0 : event.type) === "touchstart") {
              ignoringMouseDown.current = true;
            }
            const element = fakeElement ? null : container.current;
            const rect = element ? element.getBoundingClientRect() : {
              width: 0,
              height: 0,
              left: 0,
              top: 0
            };
            let rippleX;
            let rippleY;
            let rippleSize;
            if (center || event === void 0 || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
              rippleX = Math.round(rect.width / 2);
              rippleY = Math.round(rect.height / 2);
            } else {
              const _ref13 = event.touches && event.touches.length > 0 ? event.touches[0] : event,
                clientX = _ref13.clientX,
                clientY = _ref13.clientY;
              rippleX = Math.round(clientX - rect.left);
              rippleY = Math.round(clientY - rect.top);
            }
            if (center) {
              rippleSize = Math.sqrt((2 * Math.pow(rect.width, 2) + Math.pow(rect.height, 2)) / 3);
              if (rippleSize % 2 === 0) {
                rippleSize += 1;
              }
            } else {
              const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
              const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
              rippleSize = Math.sqrt(Math.pow(sizeX, 2) + Math.pow(sizeY, 2));
            }
            if (event != null && event.touches) {
              if (startTimerCommit.current === null) {
                startTimerCommit.current = () => {
                  startCommit({
                    pulsate: pulsate2,
                    rippleX,
                    rippleY,
                    rippleSize,
                    cb
                  });
                };
                startTimer.current = setTimeout(() => {
                  if (startTimerCommit.current) {
                    startTimerCommit.current();
                    startTimerCommit.current = null;
                  }
                }, DELAY_RIPPLE);
              }
            } else {
              startCommit({
                pulsate: pulsate2,
                rippleX,
                rippleY,
                rippleSize,
                cb
              });
            }
          }, [centerProp, startCommit]);
          const pulsate = reactExports.useCallback(() => {
            start({}, {
              pulsate: true
            });
          }, [start]);
          const stop = reactExports.useCallback((event, cb) => {
            clearTimeout(startTimer.current);
            if ((event == null ? void 0 : event.type) === "touchend" && startTimerCommit.current) {
              startTimerCommit.current();
              startTimerCommit.current = null;
              startTimer.current = setTimeout(() => {
                stop(event, cb);
              });
              return;
            }
            startTimerCommit.current = null;
            setRipples(oldRipples => {
              if (oldRipples.length > 0) {
                return oldRipples.slice(1);
              }
              return oldRipples;
            });
            rippleCallback.current = cb;
          }, []);
          reactExports.useImperativeHandle(ref, () => ({
            pulsate,
            start,
            stop
          }), [pulsate, start, stop]);
          return /* @__PURE__ */jsxRuntimeExports.jsx(TouchRippleRoot, _extends({
            className: clsx(touchRippleClasses$1.root, classes.root, className),
            ref: container
          }, other, {
            children: /* @__PURE__ */jsxRuntimeExports.jsx(TransitionGroup$1, {
              component: null,
              exit: true,
              children: ripples
            })
          }));
        });
        const TouchRipple$1 = TouchRipple;
        function getButtonBaseUtilityClass(slot) {
          return generateUtilityClass('MuiButtonBase', slot);
        }
        const buttonBaseClasses = generateUtilityClasses('MuiButtonBase', ['root', 'disabled', 'focusVisible']);
        const buttonBaseClasses$1 = buttonBaseClasses;
        const _excluded$B = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "touchRippleRef", "type"];
        const useUtilityClasses$t = ownerState => {
          const disabled = ownerState.disabled,
            focusVisible = ownerState.focusVisible,
            focusVisibleClassName = ownerState.focusVisibleClassName,
            classes = ownerState.classes;
          const slots = {
            root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
          };
          const composedClasses = composeClasses(slots, getButtonBaseUtilityClass, classes);
          if (focusVisible && focusVisibleClassName) {
            composedClasses.root += ` ${focusVisibleClassName}`;
          }
          return composedClasses;
        };
        const ButtonBaseRoot = styled$1("button", {
          name: "MuiButtonBase",
          slot: "Root",
          overridesResolver: (props, styles) => styles.root
        })({
          display: "inline-flex",
          alignItems: "center",
          justifyContent: "center",
          position: "relative",
          boxSizing: "border-box",
          WebkitTapHighlightColor: "transparent",
          backgroundColor: "transparent",
          // Reset default value
          // We disable the focus ring for mouse, touch and keyboard users.
          outline: 0,
          border: 0,
          margin: 0,
          // Remove the margin in Safari
          borderRadius: 0,
          padding: 0,
          // Remove the padding in Firefox
          cursor: "pointer",
          userSelect: "none",
          verticalAlign: "middle",
          MozAppearance: "none",
          // Reset
          WebkitAppearance: "none",
          // Reset
          textDecoration: "none",
          // So we take precedent over the style of a native <a /> element.
          color: "inherit",
          "&::-moz-focus-inner": {
            borderStyle: "none"
            // Remove Firefox dotted outline.
          },
          [`&.${buttonBaseClasses$1.disabled}`]: {
            pointerEvents: "none",
            // Disable link interactions
            cursor: "default"
          },
          "@media print": {
            colorAdjust: "exact"
          }
        });
        const ButtonBase = /* @__PURE__ */reactExports.forwardRef(function ButtonBase2(inProps, ref) {
          const props = useThemeProps({
            props: inProps,
            name: "MuiButtonBase"
          });
          const action = props.action,
            _props$centerRipple = props.centerRipple,
            centerRipple = _props$centerRipple === void 0 ? false : _props$centerRipple,
            children = props.children,
            className = props.className,
            _props$component3 = props.component,
            component = _props$component3 === void 0 ? "button" : _props$component3,
            _props$disabled = props.disabled,
            disabled = _props$disabled === void 0 ? false : _props$disabled,
            _props$disableRipple = props.disableRipple,
            disableRipple = _props$disableRipple === void 0 ? false : _props$disableRipple,
            _props$disableTouchRi = props.disableTouchRipple,
            disableTouchRipple = _props$disableTouchRi === void 0 ? false : _props$disableTouchRi,
            _props$focusRipple = props.focusRipple,
            focusRipple = _props$focusRipple === void 0 ? false : _props$focusRipple,
            _props$LinkComponent = props.LinkComponent,
            LinkComponent = _props$LinkComponent === void 0 ? "a" : _props$LinkComponent,
            onBlur = props.onBlur,
            onClick = props.onClick,
            onContextMenu = props.onContextMenu,
            onDragLeave = props.onDragLeave,
            onFocus = props.onFocus,
            onFocusVisible = props.onFocusVisible,
            onKeyDown = props.onKeyDown,
            onKeyUp = props.onKeyUp,
            onMouseDown = props.onMouseDown,
            onMouseLeave = props.onMouseLeave,
            onMouseUp = props.onMouseUp,
            onTouchEnd = props.onTouchEnd,
            onTouchMove = props.onTouchMove,
            onTouchStart = props.onTouchStart,
            _props$tabIndex = props.tabIndex,
            tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,
            TouchRippleProps = props.TouchRippleProps,
            touchRippleRef = props.touchRippleRef,
            type = props.type,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$B);
          const buttonRef = reactExports.useRef(null);
          const rippleRef = reactExports.useRef(null);
          const handleRippleRef = useForkRef(rippleRef, touchRippleRef);
          const _useIsFocusVisible = useIsFocusVisible(),
            isFocusVisibleRef = _useIsFocusVisible.isFocusVisibleRef,
            handleFocusVisible = _useIsFocusVisible.onFocus,
            handleBlurVisible = _useIsFocusVisible.onBlur,
            focusVisibleRef = _useIsFocusVisible.ref;
          const _reactExports$useStat11 = reactExports.useState(false),
            _reactExports$useStat12 = _slicedToArray2(_reactExports$useStat11, 2),
            focusVisible = _reactExports$useStat12[0],
            setFocusVisible = _reactExports$useStat12[1];
          if (disabled && focusVisible) {
            setFocusVisible(false);
          }
          reactExports.useImperativeHandle(action, () => ({
            focusVisible: () => {
              setFocusVisible(true);
              buttonRef.current.focus();
            }
          }), []);
          const _reactExports$useStat13 = reactExports.useState(false),
            _reactExports$useStat14 = _slicedToArray2(_reactExports$useStat13, 2),
            mountedState = _reactExports$useStat14[0],
            setMountedState = _reactExports$useStat14[1];
          reactExports.useEffect(() => {
            setMountedState(true);
          }, []);
          const enableTouchRipple = mountedState && !disableRipple && !disabled;
          reactExports.useEffect(() => {
            if (focusVisible && focusRipple && !disableRipple && mountedState) {
              rippleRef.current.pulsate();
            }
          }, [disableRipple, focusRipple, focusVisible, mountedState]);
          function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
            return useEventCallback(event => {
              if (eventCallback) {
                eventCallback(event);
              }
              const ignore = skipRippleAction;
              if (!ignore && rippleRef.current) {
                rippleRef.current[rippleAction](event);
              }
              return true;
            });
          }
          const handleMouseDown = useRippleHandler("start", onMouseDown);
          const handleContextMenu = useRippleHandler("stop", onContextMenu);
          const handleDragLeave = useRippleHandler("stop", onDragLeave);
          const handleMouseUp = useRippleHandler("stop", onMouseUp);
          const handleMouseLeave = useRippleHandler("stop", event => {
            if (focusVisible) {
              event.preventDefault();
            }
            if (onMouseLeave) {
              onMouseLeave(event);
            }
          });
          const handleTouchStart = useRippleHandler("start", onTouchStart);
          const handleTouchEnd = useRippleHandler("stop", onTouchEnd);
          const handleTouchMove = useRippleHandler("stop", onTouchMove);
          const handleBlur = useRippleHandler("stop", event => {
            handleBlurVisible(event);
            if (isFocusVisibleRef.current === false) {
              setFocusVisible(false);
            }
            if (onBlur) {
              onBlur(event);
            }
          }, false);
          const handleFocus = useEventCallback(event => {
            if (!buttonRef.current) {
              buttonRef.current = event.currentTarget;
            }
            handleFocusVisible(event);
            if (isFocusVisibleRef.current === true) {
              setFocusVisible(true);
              if (onFocusVisible) {
                onFocusVisible(event);
              }
            }
            if (onFocus) {
              onFocus(event);
            }
          });
          const isNonNativeButton = () => {
            const button = buttonRef.current;
            return component && component !== "button" && !(button.tagName === "A" && button.href);
          };
          const keydownRef = reactExports.useRef(false);
          const handleKeyDown = useEventCallback(event => {
            if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === " ") {
              keydownRef.current = true;
              rippleRef.current.stop(event, () => {
                rippleRef.current.start(event);
              });
            }
            if (event.target === event.currentTarget && isNonNativeButton() && event.key === " ") {
              event.preventDefault();
            }
            if (onKeyDown) {
              onKeyDown(event);
            }
            if (event.target === event.currentTarget && isNonNativeButton() && event.key === "Enter" && !disabled) {
              event.preventDefault();
              if (onClick) {
                onClick(event);
              }
            }
          });
          const handleKeyUp = useEventCallback(event => {
            if (focusRipple && event.key === " " && rippleRef.current && focusVisible && !event.defaultPrevented) {
              keydownRef.current = false;
              rippleRef.current.stop(event, () => {
                rippleRef.current.pulsate(event);
              });
            }
            if (onKeyUp) {
              onKeyUp(event);
            }
            if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === " " && !event.defaultPrevented) {
              onClick(event);
            }
          });
          let ComponentProp = component;
          if (ComponentProp === "button" && (other.href || other.to)) {
            ComponentProp = LinkComponent;
          }
          const buttonProps = {};
          if (ComponentProp === "button") {
            buttonProps.type = type === void 0 ? "button" : type;
            buttonProps.disabled = disabled;
          } else {
            if (!other.href && !other.to) {
              buttonProps.role = "button";
            }
            if (disabled) {
              buttonProps["aria-disabled"] = disabled;
            }
          }
          const handleRef = useForkRef(ref, focusVisibleRef, buttonRef);
          const ownerState = _extends({}, props, {
            centerRipple,
            component,
            disabled,
            disableRipple,
            disableTouchRipple,
            focusRipple,
            tabIndex,
            focusVisible
          });
          const classes = useUtilityClasses$t(ownerState);
          return /* @__PURE__ */jsxRuntimeExports.jsxs(ButtonBaseRoot, _extends({
            as: ComponentProp,
            className: clsx(classes.root, className),
            ownerState,
            onBlur: handleBlur,
            onClick,
            onContextMenu: handleContextMenu,
            onFocus: handleFocus,
            onKeyDown: handleKeyDown,
            onKeyUp: handleKeyUp,
            onMouseDown: handleMouseDown,
            onMouseLeave: handleMouseLeave,
            onMouseUp: handleMouseUp,
            onDragLeave: handleDragLeave,
            onTouchEnd: handleTouchEnd,
            onTouchMove: handleTouchMove,
            onTouchStart: handleTouchStart,
            ref: handleRef,
            tabIndex: disabled ? -1 : tabIndex,
            type
          }, buttonProps, other, {
            children: [children, enableTouchRipple ? ( /* TouchRipple is only needed client-side, x2 boost on the server. */
            /* @__PURE__ */jsxRuntimeExports.jsx(TouchRipple$1, _extends({
              ref: handleRippleRef,
              center: centerRipple
            }, TouchRippleProps))) : null]
          }));
        });
        const ButtonBase$1 = exports('aU', ButtonBase);
        function getIconButtonUtilityClass(slot) {
          return generateUtilityClass('MuiIconButton', slot);
        }
        const iconButtonClasses = generateUtilityClasses('MuiIconButton', ['root', 'disabled', 'colorInherit', 'colorPrimary', 'colorSecondary', 'colorError', 'colorInfo', 'colorSuccess', 'colorWarning', 'edgeStart', 'edgeEnd', 'sizeSmall', 'sizeMedium', 'sizeLarge']);
        const iconButtonClasses$1 = iconButtonClasses;
        const _excluded$A = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];
        const useUtilityClasses$s = ownerState => {
          const classes = ownerState.classes,
            disabled = ownerState.disabled,
            color = ownerState.color,
            edge = ownerState.edge,
            size = ownerState.size;
          const slots = {
            root: ["root", disabled && "disabled", color !== "default" && `color${capitalize(color)}`, edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`]
          };
          return composeClasses(slots, getIconButtonUtilityClass, classes);
        };
        const IconButtonRoot = styled$1(ButtonBase$1, {
          name: "MuiIconButton",
          slot: "Root",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [styles.root, ownerState.color !== "default" && styles[`color${capitalize(ownerState.color)}`], ownerState.edge && styles[`edge${capitalize(ownerState.edge)}`], styles[`size${capitalize(ownerState.size)}`]];
          }
        })(({
          theme,
          ownerState
        }) => _extends({
          textAlign: "center",
          flex: "0 0 auto",
          fontSize: theme.typography.pxToRem(24),
          padding: 8,
          borderRadius: "50%",
          overflow: "visible",
          // Explicitly set the default value to solve a bug on IE11.
          color: (theme.vars || theme).palette.action.active,
          transition: theme.transitions.create("background-color", {
            duration: theme.transitions.duration.shortest
          })
        }, !ownerState.disableRipple && {
          "&:hover": {
            backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          }
        }, ownerState.edge === "start" && {
          marginLeft: ownerState.size === "small" ? -3 : -12
        }, ownerState.edge === "end" && {
          marginRight: ownerState.size === "small" ? -3 : -12
        }), ({
          theme,
          ownerState
        }) => {
          var _palette;
          const palette = (_palette = (theme.vars || theme).palette) == null ? void 0 : _palette[ownerState.color];
          return _extends({}, ownerState.color === "inherit" && {
            color: "inherit"
          }, ownerState.color !== "inherit" && ownerState.color !== "default" && _extends({
            color: palette == null ? void 0 : palette.main
          }, !ownerState.disableRipple && {
            "&:hover": _extends({}, palette && {
              backgroundColor: theme.vars ? `rgba(${palette.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(palette.main, theme.palette.action.hoverOpacity)
            }, {
              // Reset on touch devices, it doesn't add specificity
              "@media (hover: none)": {
                backgroundColor: "transparent"
              }
            })
          }), ownerState.size === "small" && {
            padding: 5,
            fontSize: theme.typography.pxToRem(18)
          }, ownerState.size === "large" && {
            padding: 12,
            fontSize: theme.typography.pxToRem(28)
          }, {
            [`&.${iconButtonClasses$1.disabled}`]: {
              backgroundColor: "transparent",
              color: (theme.vars || theme).palette.action.disabled
            }
          });
        });
        const IconButton = /* @__PURE__ */reactExports.forwardRef(function IconButton2(inProps, ref) {
          const props = useThemeProps({
            props: inProps,
            name: "MuiIconButton"
          });
          const _props$edge = props.edge,
            edge = _props$edge === void 0 ? false : _props$edge,
            children = props.children,
            className = props.className,
            _props$color2 = props.color,
            color = _props$color2 === void 0 ? "default" : _props$color2,
            _props$disabled2 = props.disabled,
            disabled = _props$disabled2 === void 0 ? false : _props$disabled2,
            _props$disableFocusRi = props.disableFocusRipple,
            disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,
            _props$size = props.size,
            size = _props$size === void 0 ? "medium" : _props$size,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$A);
          const ownerState = _extends({}, props, {
            edge,
            color,
            disabled,
            disableFocusRipple,
            size
          });
          const classes = useUtilityClasses$s(ownerState);
          return /* @__PURE__ */jsxRuntimeExports.jsx(IconButtonRoot, _extends({
            className: clsx(classes.root, className),
            centerRipple: true,
            focusRipple: !disableFocusRipple,
            disabled,
            ref,
            ownerState
          }, other, {
            children
          }));
        });
        const IconButton$1 = exports('I', IconButton);
        function getTypographyUtilityClass(slot) {
          return generateUtilityClass('MuiTypography', slot);
        }
        generateUtilityClasses('MuiTypography', ['root', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'inherit', 'button', 'caption', 'overline', 'alignLeft', 'alignRight', 'alignCenter', 'alignJustify', 'noWrap', 'gutterBottom', 'paragraph']);
        const _excluded$z = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];
        const useUtilityClasses$r = ownerState => {
          const align = ownerState.align,
            gutterBottom = ownerState.gutterBottom,
            noWrap = ownerState.noWrap,
            paragraph = ownerState.paragraph,
            variant = ownerState.variant,
            classes = ownerState.classes;
          const slots = {
            root: ["root", variant, ownerState.align !== "inherit" && `align${capitalize(align)}`, gutterBottom && "gutterBottom", noWrap && "noWrap", paragraph && "paragraph"]
          };
          return composeClasses(slots, getTypographyUtilityClass, classes);
        };
        const TypographyRoot = styled$1("span", {
          name: "MuiTypography",
          slot: "Root",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== "inherit" && styles[`align${capitalize(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];
          }
        })(({
          theme,
          ownerState
        }) => _extends({
          margin: 0
        }, ownerState.variant === "inherit" && {
          // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.
          font: "inherit"
        }, ownerState.variant !== "inherit" && theme.typography[ownerState.variant], ownerState.align !== "inherit" && {
          textAlign: ownerState.align
        }, ownerState.noWrap && {
          overflow: "hidden",
          textOverflow: "ellipsis",
          whiteSpace: "nowrap"
        }, ownerState.gutterBottom && {
          marginBottom: "0.35em"
        }, ownerState.paragraph && {
          marginBottom: 16
        }));
        const defaultVariantMapping = {
          h1: "h1",
          h2: "h2",
          h3: "h3",
          h4: "h4",
          h5: "h5",
          h6: "h6",
          subtitle1: "h6",
          subtitle2: "h6",
          body1: "p",
          body2: "p",
          inherit: "p"
        };
        const colorTransformations = {
          primary: "primary.main",
          textPrimary: "text.primary",
          secondary: "secondary.main",
          textSecondary: "text.secondary",
          error: "error.main"
        };
        const transformDeprecatedColors = color => {
          return colorTransformations[color] || color;
        };
        const Typography = /* @__PURE__ */reactExports.forwardRef(function Typography2(inProps, ref) {
          const themeProps = useThemeProps({
            props: inProps,
            name: "MuiTypography"
          });
          const color = transformDeprecatedColors(themeProps.color);
          const props = extendSxProp(_extends({}, themeProps, {
            color
          }));
          const _props$align = props.align,
            align = _props$align === void 0 ? "inherit" : _props$align,
            className = props.className,
            component = props.component,
            _props$gutterBottom = props.gutterBottom,
            gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom,
            _props$noWrap = props.noWrap,
            noWrap = _props$noWrap === void 0 ? false : _props$noWrap,
            _props$paragraph = props.paragraph,
            paragraph = _props$paragraph === void 0 ? false : _props$paragraph,
            _props$variant2 = props.variant,
            variant = _props$variant2 === void 0 ? "body1" : _props$variant2,
            _props$variantMapping = props.variantMapping,
            variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping : _props$variantMapping,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$z);
          const ownerState = _extends({}, props, {
            align,
            color,
            className,
            component,
            gutterBottom,
            noWrap,
            paragraph,
            variant,
            variantMapping
          });
          const Component = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
          const classes = useUtilityClasses$r(ownerState);
          return /* @__PURE__ */jsxRuntimeExports.jsx(TypographyRoot, _extends({
            as: Component,
            ref,
            ownerState,
            className: clsx(classes.root, className)
          }, other));
        });
        const Typography$1 = exports('a0', Typography);
        function getAppBarUtilityClass(slot) {
          return generateUtilityClass('MuiAppBar', slot);
        }
        generateUtilityClasses('MuiAppBar', ['root', 'positionFixed', 'positionAbsolute', 'positionSticky', 'positionStatic', 'positionRelative', 'colorDefault', 'colorPrimary', 'colorSecondary', 'colorInherit', 'colorTransparent']);
        const _excluded$y = ["className", "color", "enableColorOnDark", "position"];
        const useUtilityClasses$q = ownerState => {
          const color = ownerState.color,
            position = ownerState.position,
            classes = ownerState.classes;
          const slots = {
            root: ["root", `color${capitalize(color)}`, `position${capitalize(position)}`]
          };
          return composeClasses(slots, getAppBarUtilityClass, classes);
        };
        const joinVars = (var1, var2) => var1 ? `${var1 == null ? void 0 : var1.replace(")", "")}, ${var2})` : var2;
        const AppBarRoot = styled$1(Paper$1, {
          name: "MuiAppBar",
          slot: "Root",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [styles.root, styles[`position${capitalize(ownerState.position)}`], styles[`color${capitalize(ownerState.color)}`]];
          }
        })(({
          theme,
          ownerState
        }) => {
          const backgroundColorDefault = theme.palette.mode === "light" ? theme.palette.grey[100] : theme.palette.grey[900];
          return _extends({
            display: "flex",
            flexDirection: "column",
            width: "100%",
            boxSizing: "border-box",
            // Prevent padding issue with the Modal and fixed positioned AppBar.
            flexShrink: 0
          }, ownerState.position === "fixed" && {
            position: "fixed",
            zIndex: (theme.vars || theme).zIndex.appBar,
            top: 0,
            left: "auto",
            right: 0,
            "@media print": {
              // Prevent the app bar to be visible on each printed page.
              position: "absolute"
            }
          }, ownerState.position === "absolute" && {
            position: "absolute",
            zIndex: (theme.vars || theme).zIndex.appBar,
            top: 0,
            left: "auto",
            right: 0
          }, ownerState.position === "sticky" && {
            // ⚠️ sticky is not supported by IE11.
            position: "sticky",
            zIndex: (theme.vars || theme).zIndex.appBar,
            top: 0,
            left: "auto",
            right: 0
          }, ownerState.position === "static" && {
            position: "static"
          }, ownerState.position === "relative" && {
            position: "relative"
          }, !theme.vars && _extends({}, ownerState.color === "default" && {
            backgroundColor: backgroundColorDefault,
            color: theme.palette.getContrastText(backgroundColorDefault)
          }, ownerState.color && ownerState.color !== "default" && ownerState.color !== "inherit" && ownerState.color !== "transparent" && {
            backgroundColor: theme.palette[ownerState.color].main,
            color: theme.palette[ownerState.color].contrastText
          }, ownerState.color === "inherit" && {
            color: "inherit"
          }, theme.palette.mode === "dark" && !ownerState.enableColorOnDark && {
            backgroundColor: null,
            color: null
          }, ownerState.color === "transparent" && _extends({
            backgroundColor: "transparent",
            color: "inherit"
          }, theme.palette.mode === "dark" && {
            backgroundImage: "none"
          })), theme.vars && _extends({}, ownerState.color === "default" && {
            "--AppBar-background": ownerState.enableColorOnDark ? theme.vars.palette.AppBar.defaultBg : joinVars(theme.vars.palette.AppBar.darkBg, theme.vars.palette.AppBar.defaultBg),
            "--AppBar-color": ownerState.enableColorOnDark ? theme.vars.palette.text.primary : joinVars(theme.vars.palette.AppBar.darkColor, theme.vars.palette.text.primary)
          }, ownerState.color && !ownerState.color.match(/^(default|inherit|transparent)$/) && {
            "--AppBar-background": ownerState.enableColorOnDark ? theme.vars.palette[ownerState.color].main : joinVars(theme.vars.palette.AppBar.darkBg, theme.vars.palette[ownerState.color].main),
            "--AppBar-color": ownerState.enableColorOnDark ? theme.vars.palette[ownerState.color].contrastText : joinVars(theme.vars.palette.AppBar.darkColor, theme.vars.palette[ownerState.color].contrastText)
          }, {
            backgroundColor: "var(--AppBar-background)",
            color: ownerState.color === "inherit" ? "inherit" : "var(--AppBar-color)"
          }, ownerState.color === "transparent" && {
            backgroundImage: "none",
            backgroundColor: "transparent",
            color: "inherit"
          }));
        });
        const AppBar = /* @__PURE__ */reactExports.forwardRef(function AppBar2(inProps, ref) {
          const props = useThemeProps({
            props: inProps,
            name: "MuiAppBar"
          });
          const className = props.className,
            _props$color3 = props.color,
            color = _props$color3 === void 0 ? "primary" : _props$color3,
            _props$enableColorOnD = props.enableColorOnDark,
            enableColorOnDark = _props$enableColorOnD === void 0 ? false : _props$enableColorOnD,
            _props$position = props.position,
            position = _props$position === void 0 ? "fixed" : _props$position,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$y);
          const ownerState = _extends({}, props, {
            color,
            position,
            enableColorOnDark
          });
          const classes = useUtilityClasses$q(ownerState);
          return /* @__PURE__ */jsxRuntimeExports.jsx(AppBarRoot, _extends({
            square: true,
            component: "header",
            ownerState,
            elevation: 4,
            className: clsx(classes.root, className, position === "fixed" && "mui-fixed"),
            ref
          }, other));
        });
        const AppBar$1 = AppBar;

        /**
         * Determines if a given element is a DOM element name (i.e. not a React component).
         */
        function isHostComponent(element) {
          return typeof element === 'string';
        }

        /**
         * Type of the ownerState based on the type of an element it applies to.
         * This resolves to the provided OwnerState for React components and `undefined` for host components.
         * Falls back to `OwnerState | undefined` when the exact type can't be determined in development time.
         */

        /**
         * Appends the ownerState object to the props, merging with the existing one if necessary.
         *
         * @param elementType Type of the element that owns the `existingProps`. If the element is a DOM node or undefined, `ownerState` is not applied.
         * @param otherProps Props of the element.
         * @param ownerState
         */
        function appendOwnerState(elementType, otherProps, ownerState) {
          if (elementType === undefined || isHostComponent(elementType)) {
            return otherProps;
          }
          return _extends({}, otherProps, {
            ownerState: _extends({}, otherProps.ownerState, ownerState)
          });
        }
        const defaultContextValue = {
          disableDefaultClasses: false
        };
        const ClassNameConfiguratorContext = /*#__PURE__*/reactExports.createContext(defaultContextValue);
        /**
         * @ignore - internal hook.
         *
         * Wraps the `generateUtilityClass` function and controls how the classes are generated.
         * Currently it only affects whether the classes are applied or not.
         *
         * @returns Function to be called with the `generateUtilityClass` function specific to a component to generate the classes.
         */
        function useClassNamesOverride(generateUtilityClass) {
          const _reactExports$useCont11 = reactExports.useContext(ClassNameConfiguratorContext),
            disableDefaultClasses = _reactExports$useCont11.disableDefaultClasses;
          return slot => {
            if (disableDefaultClasses) {
              return '';
            }
            return generateUtilityClass(slot);
          };
        }

        /**
         * Extracts event handlers from a given object.
         * A prop is considered an event handler if it is a function and its name starts with `on`.
         *
         * @param object An object to extract event handlers from.
         * @param excludeKeys An array of keys to exclude from the returned object.
         */
        function extractEventHandlers(object, excludeKeys = []) {
          if (object === undefined) {
            return {};
          }
          const result = {};
          Object.keys(object).filter(prop => prop.match(/^on[A-Z]/) && typeof object[prop] === 'function' && !excludeKeys.includes(prop)).forEach(prop => {
            result[prop] = object[prop];
          });
          return result;
        }

        /**
         * If `componentProps` is a function, calls it with the provided `ownerState`.
         * Otherwise, just returns `componentProps`.
         */
        function resolveComponentProps(componentProps, ownerState, slotState) {
          if (typeof componentProps === 'function') {
            return componentProps(ownerState, slotState);
          }
          return componentProps;
        }

        /**
         * Removes event handlers from the given object.
         * A field is considered an event handler if it is a function with a name beginning with `on`.
         *
         * @param object Object to remove event handlers from.
         * @returns Object with event handlers removed.
         */
        function omitEventHandlers(object) {
          if (object === undefined) {
            return {};
          }
          const result = {};
          Object.keys(object).filter(prop => !(prop.match(/^on[A-Z]/) && typeof object[prop] === 'function')).forEach(prop => {
            result[prop] = object[prop];
          });
          return result;
        }

        /**
         * Merges the slot component internal props (usually coming from a hook)
         * with the externally provided ones.
         *
         * The merge order is (the latter overrides the former):
         * 1. The internal props (specified as a getter function to work with get*Props hook result)
         * 2. Additional props (specified internally on a Base UI component)
         * 3. External props specified on the owner component. These should only be used on a root slot.
         * 4. External props specified in the `slotProps.*` prop.
         * 5. The `className` prop - combined from all the above.
         * @param parameters
         * @returns
         */
        function mergeSlotProps(parameters) {
          const getSlotProps = parameters.getSlotProps,
            additionalProps = parameters.additionalProps,
            externalSlotProps = parameters.externalSlotProps,
            externalForwardedProps = parameters.externalForwardedProps,
            className = parameters.className;
          if (!getSlotProps) {
            // The simpler case - getSlotProps is not defined, so no internal event handlers are defined,
            // so we can simply merge all the props without having to worry about extracting event handlers.
            const joinedClasses = clsx(externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className, className, additionalProps == null ? void 0 : additionalProps.className);
            const mergedStyle = _extends({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
            const props = _extends({}, additionalProps, externalForwardedProps, externalSlotProps);
            if (joinedClasses.length > 0) {
              props.className = joinedClasses;
            }
            if (Object.keys(mergedStyle).length > 0) {
              props.style = mergedStyle;
            }
            return {
              props,
              internalRef: undefined
            };
          }

          // In this case, getSlotProps is responsible for calling the external event handlers.
          // We don't need to include them in the merged props because of this.

          const eventHandlers = extractEventHandlers(_extends({}, externalForwardedProps, externalSlotProps));
          const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);
          const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);
          const internalSlotProps = getSlotProps(eventHandlers);

          // The order of classes is important here.
          // Emotion (that we use in libraries consuming Base UI) depends on this order
          // to properly override style. It requires the most important classes to be last
          // (see https://github.com/mui/material-ui/pull/33205) for the related discussion.
          const joinedClasses = clsx(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
          const mergedStyle = _extends({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
          const props = _extends({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);
          if (joinedClasses.length > 0) {
            props.className = joinedClasses;
          }
          if (Object.keys(mergedStyle).length > 0) {
            props.style = mergedStyle;
          }
          return {
            props,
            internalRef: internalSlotProps.ref
          };
        }
        const _excluded$x = ["elementType", "externalSlotProps", "ownerState", "skipResolvingSlotProps"];
        /**
         * @ignore - do not document.
         * Builds the props to be passed into the slot of an unstyled component.
         * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.
         * If the slot component is not a host component, it also merges in the `ownerState`.
         *
         * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.
         */
        function useSlotProps(parameters) {
          var _parameters$additiona;
          const elementType = parameters.elementType,
            externalSlotProps = parameters.externalSlotProps,
            ownerState = parameters.ownerState,
            _parameters$skipResol = parameters.skipResolvingSlotProps,
            skipResolvingSlotProps = _parameters$skipResol === void 0 ? false : _parameters$skipResol,
            rest = _objectWithoutPropertiesLoose$2(parameters, _excluded$x);
          const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps(externalSlotProps, ownerState);
          const _mergeSlotProps = mergeSlotProps(_extends({}, rest, {
              externalSlotProps: resolvedComponentsProps
            })),
            mergedProps = _mergeSlotProps.props,
            internalRef = _mergeSlotProps.internalRef;
          const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
          const props = appendOwnerState(elementType, _extends({}, mergedProps, {
            ref
          }), ownerState);
          return props;
        }
        const candidatesSelector = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
        function getTabIndex(node) {
          const tabindexAttr = parseInt(node.getAttribute("tabindex") || "", 10);
          if (!Number.isNaN(tabindexAttr)) {
            return tabindexAttr;
          }
          if (node.contentEditable === "true" || (node.nodeName === "AUDIO" || node.nodeName === "VIDEO" || node.nodeName === "DETAILS") && node.getAttribute("tabindex") === null) {
            return 0;
          }
          return node.tabIndex;
        }
        function isNonTabbableRadio(node) {
          if (node.tagName !== "INPUT" || node.type !== "radio") {
            return false;
          }
          if (!node.name) {
            return false;
          }
          const getRadio = selector => node.ownerDocument.querySelector(`input[type="radio"]${selector}`);
          let roving = getRadio(`[name="${node.name}"]:checked`);
          if (!roving) {
            roving = getRadio(`[name="${node.name}"]`);
          }
          return roving !== node;
        }
        function isNodeMatchingSelectorFocusable(node) {
          if (node.disabled || node.tagName === "INPUT" && node.type === "hidden" || isNonTabbableRadio(node)) {
            return false;
          }
          return true;
        }
        function defaultGetTabbable(root) {
          const regularTabNodes = [];
          const orderedTabNodes = [];
          Array.from(root.querySelectorAll(candidatesSelector)).forEach((node, i) => {
            const nodeTabIndex = getTabIndex(node);
            if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) {
              return;
            }
            if (nodeTabIndex === 0) {
              regularTabNodes.push(node);
            } else {
              orderedTabNodes.push({
                documentOrder: i,
                tabIndex: nodeTabIndex,
                node
              });
            }
          });
          return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map(a => a.node).concat(regularTabNodes);
        }
        function defaultIsEnabled() {
          return true;
        }
        function FocusTrap(props) {
          const children = props.children,
            _props$disableAutoFoc = props.disableAutoFocus,
            disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,
            _props$disableEnforce = props.disableEnforceFocus,
            disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce,
            _props$disableRestore = props.disableRestoreFocus,
            disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore,
            _props$getTabbable = props.getTabbable,
            getTabbable = _props$getTabbable === void 0 ? defaultGetTabbable : _props$getTabbable,
            _props$isEnabled = props.isEnabled,
            isEnabled = _props$isEnabled === void 0 ? defaultIsEnabled : _props$isEnabled,
            open = props.open;
          const ignoreNextEnforceFocus = reactExports.useRef(false);
          const sentinelStart = reactExports.useRef(null);
          const sentinelEnd = reactExports.useRef(null);
          const nodeToRestore = reactExports.useRef(null);
          const reactFocusEventTarget = reactExports.useRef(null);
          const activated = reactExports.useRef(false);
          const rootRef = reactExports.useRef(null);
          const handleRef = useForkRef(children.ref, rootRef);
          const lastKeydown = reactExports.useRef(null);
          reactExports.useEffect(() => {
            if (!open || !rootRef.current) {
              return;
            }
            activated.current = !disableAutoFocus;
          }, [disableAutoFocus, open]);
          reactExports.useEffect(() => {
            if (!open || !rootRef.current) {
              return;
            }
            const doc = ownerDocument(rootRef.current);
            if (!rootRef.current.contains(doc.activeElement)) {
              if (!rootRef.current.hasAttribute("tabIndex")) {
                rootRef.current.setAttribute("tabIndex", "-1");
              }
              if (activated.current) {
                rootRef.current.focus();
              }
            }
            return () => {
              if (!disableRestoreFocus) {
                if (nodeToRestore.current && nodeToRestore.current.focus) {
                  ignoreNextEnforceFocus.current = true;
                  nodeToRestore.current.focus();
                }
                nodeToRestore.current = null;
              }
            };
          }, [open]);
          reactExports.useEffect(() => {
            if (!open || !rootRef.current) {
              return;
            }
            const doc = ownerDocument(rootRef.current);
            const contain = nativeEvent => {
              const rootElement = rootRef.current;
              if (rootElement === null) {
                return;
              }
              if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
                ignoreNextEnforceFocus.current = false;
                return;
              }
              if (!rootElement.contains(doc.activeElement)) {
                if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) {
                  reactFocusEventTarget.current = null;
                } else if (reactFocusEventTarget.current !== null) {
                  return;
                }
                if (!activated.current) {
                  return;
                }
                let tabbable = [];
                if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
                  tabbable = getTabbable(rootRef.current);
                }
                if (tabbable.length > 0) {
                  var _lastKeydown$current, _lastKeydown$current2;
                  const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === "Tab");
                  const focusNext = tabbable[0];
                  const focusPrevious = tabbable[tabbable.length - 1];
                  if (typeof focusNext !== "string" && typeof focusPrevious !== "string") {
                    if (isShiftTab) {
                      focusPrevious.focus();
                    } else {
                      focusNext.focus();
                    }
                  }
                } else {
                  rootElement.focus();
                }
              }
            };
            const loopFocus = nativeEvent => {
              lastKeydown.current = nativeEvent;
              if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== "Tab") {
                return;
              }
              if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
                ignoreNextEnforceFocus.current = true;
                if (sentinelEnd.current) {
                  sentinelEnd.current.focus();
                }
              }
            };
            doc.addEventListener("focusin", contain);
            doc.addEventListener("keydown", loopFocus, true);
            const interval = setInterval(() => {
              if (doc.activeElement && doc.activeElement.tagName === "BODY") {
                contain(null);
              }
            }, 50);
            return () => {
              clearInterval(interval);
              doc.removeEventListener("focusin", contain);
              doc.removeEventListener("keydown", loopFocus, true);
            };
          }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
          const onFocus = event => {
            if (nodeToRestore.current === null) {
              nodeToRestore.current = event.relatedTarget;
            }
            activated.current = true;
            reactFocusEventTarget.current = event.target;
            const childrenPropsHandler = children.props.onFocus;
            if (childrenPropsHandler) {
              childrenPropsHandler(event);
            }
          };
          const handleFocusSentinel = event => {
            if (nodeToRestore.current === null) {
              nodeToRestore.current = event.relatedTarget;
            }
            activated.current = true;
          };
          return /* @__PURE__ */jsxRuntimeExports.jsxs(reactExports.Fragment, {
            children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
              tabIndex: open ? 0 : -1,
              onFocus: handleFocusSentinel,
              ref: sentinelStart,
              "data-testid": "sentinelStart"
            }), /* @__PURE__ */reactExports.cloneElement(children, {
              ref: handleRef,
              onFocus
            }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
              tabIndex: open ? 0 : -1,
              onFocus: handleFocusSentinel,
              ref: sentinelEnd,
              "data-testid": "sentinelEnd"
            })]
          });
        }
        function getContainer$1(container) {
          return typeof container === "function" ? container() : container;
        }
        const Portal = exports("aN", /* @__PURE__ */reactExports.forwardRef(function Portal2(props, forwardedRef) {
          const children = props.children,
            container = props.container,
            _props$disablePortal = props.disablePortal,
            disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal;
          const _reactExports$useStat15 = reactExports.useState(null),
            _reactExports$useStat16 = _slicedToArray2(_reactExports$useStat15, 2),
            mountNode = _reactExports$useStat16[0],
            setMountNode = _reactExports$useStat16[1];
          const handleRef = useForkRef( /* @__PURE__ */reactExports.isValidElement(children) ? children.ref : null, forwardedRef);
          useEnhancedEffect$1(() => {
            if (!disablePortal) {
              setMountNode(getContainer$1(container) || document.body);
            }
          }, [container, disablePortal]);
          useEnhancedEffect$1(() => {
            if (mountNode && !disablePortal) {
              setRef$1(forwardedRef, mountNode);
              return () => {
                setRef$1(forwardedRef, null);
              };
            }
            return void 0;
          }, [forwardedRef, mountNode, disablePortal]);
          if (disablePortal) {
            if ( /* @__PURE__ */reactExports.isValidElement(children)) {
              const newProps = {
                ref: handleRef
              };
              return /* @__PURE__ */reactExports.cloneElement(children, newProps);
            }
            return /* @__PURE__ */jsxRuntimeExports.jsx(reactExports.Fragment, {
              children
            });
          }
          return /* @__PURE__ */jsxRuntimeExports.jsx(reactExports.Fragment, {
            children: mountNode ? /* @__PURE__ */reactDomExports.createPortal(children, mountNode) : mountNode
          });
        }));

        // Is a vertical scrollbar displayed?
        function isOverflowing(container) {
          const doc = ownerDocument(container);
          if (doc.body === container) {
            return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
          }
          return container.scrollHeight > container.clientHeight;
        }
        function ariaHidden(element, show) {
          if (show) {
            element.setAttribute('aria-hidden', 'true');
          } else {
            element.removeAttribute('aria-hidden');
          }
        }
        function getPaddingRight(element) {
          return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
        }
        function isAriaHiddenForbiddenOnElement(element) {
          // The forbidden HTML tags are the ones from ARIA specification that
          // can be children of body and can't have aria-hidden attribute.
          // cf. https://www.w3.org/TR/html-aria/#docconformance
          const forbiddenTagNames = ['TEMPLATE', 'SCRIPT', 'STYLE', 'LINK', 'MAP', 'META', 'NOSCRIPT', 'PICTURE', 'COL', 'COLGROUP', 'PARAM', 'SLOT', 'SOURCE', 'TRACK'];
          const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;
          const isInputHidden = element.tagName === 'INPUT' && element.getAttribute('type') === 'hidden';
          return isForbiddenTagName || isInputHidden;
        }
        function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, show) {
          const blacklist = [mountElement, currentElement, ...elementsToExclude];
          [].forEach.call(container.children, element => {
            const isNotExcludedElement = blacklist.indexOf(element) === -1;
            const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
            if (isNotExcludedElement && isNotForbiddenElement) {
              ariaHidden(element, show);
            }
          });
        }
        function findIndexOf(items, callback) {
          let idx = -1;
          items.some((item, index) => {
            if (callback(item)) {
              idx = index;
              return true;
            }
            return false;
          });
          return idx;
        }
        function handleContainer(containerInfo, props) {
          const restoreStyle = [];
          const container = containerInfo.container;
          if (!props.disableScrollLock) {
            if (isOverflowing(container)) {
              // Compute the size before applying overflow hidden to avoid any scroll jumps.
              const scrollbarSize = getScrollbarSize(ownerDocument(container));
              restoreStyle.push({
                value: container.style.paddingRight,
                property: 'padding-right',
                el: container
              });
              // Use computed style, here to get the real padding to add our scrollbar width.
              container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;

              // .mui-fixed is a global helper.
              const fixedElements = ownerDocument(container).querySelectorAll('.mui-fixed');
              [].forEach.call(fixedElements, element => {
                restoreStyle.push({
                  value: element.style.paddingRight,
                  property: 'padding-right',
                  el: element
                });
                element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
              });
            }
            let scrollContainer;
            if (container.parentNode instanceof DocumentFragment) {
              scrollContainer = ownerDocument(container).body;
            } else {
              // Improve Gatsby support
              // https://css-tricks.com/snippets/css/force-vertical-scrollbar/
              const parent = container.parentElement;
              const containerWindow = ownerWindow(container);
              scrollContainer = (parent == null ? void 0 : parent.nodeName) === 'HTML' && containerWindow.getComputedStyle(parent).overflowY === 'scroll' ? parent : container;
            }

            // Block the scroll even if no scrollbar is visible to account for mobile keyboard
            // screensize shrink.
            restoreStyle.push({
              value: scrollContainer.style.overflow,
              property: 'overflow',
              el: scrollContainer
            }, {
              value: scrollContainer.style.overflowX,
              property: 'overflow-x',
              el: scrollContainer
            }, {
              value: scrollContainer.style.overflowY,
              property: 'overflow-y',
              el: scrollContainer
            });
            scrollContainer.style.overflow = 'hidden';
          }
          const restore = () => {
            restoreStyle.forEach(({
              value,
              el,
              property
            }) => {
              if (value) {
                el.style.setProperty(property, value);
              } else {
                el.style.removeProperty(property);
              }
            });
          };
          return restore;
        }
        function getHiddenSiblings(container) {
          const hiddenSiblings = [];
          [].forEach.call(container.children, element => {
            if (element.getAttribute('aria-hidden') === 'true') {
              hiddenSiblings.push(element);
            }
          });
          return hiddenSiblings;
        }
        /**
         * @ignore - do not document.
         *
         * Proper state management for containers and the modals in those containers.
         * Simplified, but inspired by react-overlay's ModalManager class.
         * Used by the Modal to ensure proper styling of containers.
         */
        class ModalManager {
          constructor() {
            this.containers = void 0;
            this.modals = void 0;
            this.modals = [];
            this.containers = [];
          }
          add(modal, container) {
            let modalIndex = this.modals.indexOf(modal);
            if (modalIndex !== -1) {
              return modalIndex;
            }
            modalIndex = this.modals.length;
            this.modals.push(modal);

            // If the modal we are adding is already in the DOM.
            if (modal.modalRef) {
              ariaHidden(modal.modalRef, false);
            }
            const hiddenSiblings = getHiddenSiblings(container);
            ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
            const containerIndex = findIndexOf(this.containers, item => item.container === container);
            if (containerIndex !== -1) {
              this.containers[containerIndex].modals.push(modal);
              return modalIndex;
            }
            this.containers.push({
              modals: [modal],
              container,
              restore: null,
              hiddenSiblings
            });
            return modalIndex;
          }
          mount(modal, props) {
            const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);
            const containerInfo = this.containers[containerIndex];
            if (!containerInfo.restore) {
              containerInfo.restore = handleContainer(containerInfo, props);
            }
          }
          remove(modal, ariaHiddenState = true) {
            const modalIndex = this.modals.indexOf(modal);
            if (modalIndex === -1) {
              return modalIndex;
            }
            const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);
            const containerInfo = this.containers[containerIndex];
            containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
            this.modals.splice(modalIndex, 1);

            // If that was the last modal in a container, clean up the container.
            if (containerInfo.modals.length === 0) {
              // The modal might be closed before it had the chance to be mounted in the DOM.
              if (containerInfo.restore) {
                containerInfo.restore();
              }
              if (modal.modalRef) {
                // In case the modal wasn't in the DOM yet.
                ariaHidden(modal.modalRef, ariaHiddenState);
              }
              ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
              this.containers.splice(containerIndex, 1);
            } else {
              // Otherwise make sure the next top modal is visible to a screen reader.
              const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
              // as soon as a modal is adding its modalRef is undefined. it can't set
              // aria-hidden because the dom element doesn't exist either
              // when modal was unmounted before modalRef gets null
              if (nextTop.modalRef) {
                ariaHidden(nextTop.modalRef, false);
              }
            }
            return modalIndex;
          }
          isTopModal(modal) {
            return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
          }
        }
        function getContainer(container) {
          return typeof container === 'function' ? container() : container;
        }
        function getHasTransition(children) {
          return children ? children.props.hasOwnProperty('in') : false;
        }

        // A modal manager used to track and manage the state of open Modals.
        // Modals don't open on the server so this won't conflict with concurrent requests.
        const defaultManager = new ModalManager();
        /**
         *
         * Demos:
         *
         * - [Modal](https://mui.com/base-ui/react-modal/#hook)
         *
         * API:
         *
         * - [useModal API](https://mui.com/base-ui/react-modal/hooks-api/#use-modal)
         */
        function useModal(parameters) {
          const container = parameters.container,
            _parameters$disableEs = parameters.disableEscapeKeyDown,
            disableEscapeKeyDown = _parameters$disableEs === void 0 ? false : _parameters$disableEs,
            _parameters$disableSc = parameters.disableScrollLock,
            disableScrollLock = _parameters$disableSc === void 0 ? false : _parameters$disableSc,
            _parameters$manager = parameters.manager,
            manager = _parameters$manager === void 0 ? defaultManager : _parameters$manager,
            _parameters$closeAfte = parameters.closeAfterTransition,
            closeAfterTransition = _parameters$closeAfte === void 0 ? false : _parameters$closeAfte,
            onTransitionEnter = parameters.onTransitionEnter,
            onTransitionExited = parameters.onTransitionExited,
            children = parameters.children,
            onClose = parameters.onClose,
            open = parameters.open,
            rootRef = parameters.rootRef;

          // @ts-ignore internal logic
          const modal = reactExports.useRef({});
          const mountNodeRef = reactExports.useRef(null);
          const modalRef = reactExports.useRef(null);
          const handleRef = useForkRef(modalRef, rootRef);
          const _reactExports$useStat17 = reactExports.useState(!open),
            _reactExports$useStat18 = _slicedToArray2(_reactExports$useStat17, 2),
            exited = _reactExports$useStat18[0],
            setExited = _reactExports$useStat18[1];
          const hasTransition = getHasTransition(children);
          let ariaHiddenProp = true;
          if (parameters['aria-hidden'] === 'false' || parameters['aria-hidden'] === false) {
            ariaHiddenProp = false;
          }
          const getDoc = () => ownerDocument(mountNodeRef.current);
          const getModal = () => {
            modal.current.modalRef = modalRef.current;
            modal.current.mount = mountNodeRef.current;
            return modal.current;
          };
          const handleMounted = () => {
            manager.mount(getModal(), {
              disableScrollLock
            });

            // Fix a bug on Chrome where the scroll isn't initially 0.
            if (modalRef.current) {
              modalRef.current.scrollTop = 0;
            }
          };
          const handleOpen = useEventCallback(() => {
            const resolvedContainer = getContainer(container) || getDoc().body;
            manager.add(getModal(), resolvedContainer);

            // The element was already mounted.
            if (modalRef.current) {
              handleMounted();
            }
          });
          const isTopModal = reactExports.useCallback(() => manager.isTopModal(getModal()), [manager]);
          const handlePortalRef = useEventCallback(node => {
            mountNodeRef.current = node;
            if (!node) {
              return;
            }
            if (open && isTopModal()) {
              handleMounted();
            } else if (modalRef.current) {
              ariaHidden(modalRef.current, ariaHiddenProp);
            }
          });
          const handleClose = reactExports.useCallback(() => {
            manager.remove(getModal(), ariaHiddenProp);
          }, [ariaHiddenProp, manager]);
          reactExports.useEffect(() => {
            return () => {
              handleClose();
            };
          }, [handleClose]);
          reactExports.useEffect(() => {
            if (open) {
              handleOpen();
            } else if (!hasTransition || !closeAfterTransition) {
              handleClose();
            }
          }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
          const createHandleKeyDown = otherHandlers => event => {
            var _otherHandlers$onKeyD;
            (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);

            // The handler doesn't take event.defaultPrevented into account:
            //
            // event.preventDefault() is meant to stop default behaviors like
            // clicking a checkbox to check it, hitting a button to submit a form,
            // and hitting left arrow to move the cursor in a text input etc.
            // Only special HTML elements have these default behaviors.
            if (event.key !== 'Escape' || !isTopModal()) {
              return;
            }
            if (!disableEscapeKeyDown) {
              // Swallow the event, in case someone is listening for the escape key on the body.
              event.stopPropagation();
              if (onClose) {
                onClose(event, 'escapeKeyDown');
              }
            }
          };
          const createHandleBackdropClick = otherHandlers => event => {
            var _otherHandlers$onClic;
            (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
            if (event.target !== event.currentTarget) {
              return;
            }
            if (onClose) {
              onClose(event, 'backdropClick');
            }
          };
          const getRootProps = (otherHandlers = {}) => {
            const propsEventHandlers = extractEventHandlers(parameters);

            // The custom event handlers shouldn't be spread on the root element
            delete propsEventHandlers.onTransitionEnter;
            delete propsEventHandlers.onTransitionExited;
            const externalEventHandlers = _extends({}, propsEventHandlers, otherHandlers);
            return _extends({
              role: 'presentation'
            }, externalEventHandlers, {
              onKeyDown: createHandleKeyDown(externalEventHandlers),
              ref: handleRef
            });
          };
          const getBackdropProps = (otherHandlers = {}) => {
            const externalEventHandlers = otherHandlers;
            return _extends({
              'aria-hidden': true
            }, externalEventHandlers, {
              onClick: createHandleBackdropClick(externalEventHandlers),
              open
            });
          };
          const getTransitionProps = () => {
            const handleEnter = () => {
              setExited(false);
              if (onTransitionEnter) {
                onTransitionEnter();
              }
            };
            const handleExited = () => {
              setExited(true);
              if (onTransitionExited) {
                onTransitionExited();
              }
              if (closeAfterTransition) {
                handleClose();
              }
            };
            return {
              onEnter: createChainedFunction(handleEnter, children.props.onEnter),
              onExited: createChainedFunction(handleExited, children.props.onExited)
            };
          };
          return {
            getRootProps,
            getBackdropProps,
            getTransitionProps,
            rootRef: handleRef,
            portalRef: handlePortalRef,
            isTopModal,
            exited,
            hasTransition
          };
        }
        function getModalUtilityClass(slot) {
          return generateUtilityClass('MuiModal', slot);
        }
        generateUtilityClasses('MuiModal', ['root', 'hidden', 'backdrop']);
        const _excluded$w = ["children", "closeAfterTransition", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "onKeyDown", "open", "onTransitionEnter", "onTransitionExited", "slotProps", "slots"];
        const useUtilityClasses$p = ownerState => {
          const open = ownerState.open,
            exited = ownerState.exited;
          const slots = {
            root: ["root", !open && exited && "hidden"],
            backdrop: ["backdrop"]
          };
          return composeClasses(slots, useClassNamesOverride(getModalUtilityClass));
        };
        const Modal$2 = /* @__PURE__ */reactExports.forwardRef(function Modal2(props, forwardedRef) {
          var _slots$root;
          const children = props.children,
            _props$closeAfterTran = props.closeAfterTransition,
            closeAfterTransition = _props$closeAfterTran === void 0 ? false : _props$closeAfterTran,
            container = props.container,
            _props$disableAutoFoc2 = props.disableAutoFocus,
            disableAutoFocus = _props$disableAutoFoc2 === void 0 ? false : _props$disableAutoFoc2,
            _props$disableEnforce2 = props.disableEnforceFocus,
            disableEnforceFocus = _props$disableEnforce2 === void 0 ? false : _props$disableEnforce2,
            _props$disableEscapeK = props.disableEscapeKeyDown,
            disableEscapeKeyDown = _props$disableEscapeK === void 0 ? false : _props$disableEscapeK,
            _props$disablePortal2 = props.disablePortal,
            disablePortal = _props$disablePortal2 === void 0 ? false : _props$disablePortal2,
            _props$disableRestore2 = props.disableRestoreFocus,
            disableRestoreFocus = _props$disableRestore2 === void 0 ? false : _props$disableRestore2,
            _props$disableScrollL = props.disableScrollLock,
            disableScrollLock = _props$disableScrollL === void 0 ? false : _props$disableScrollL,
            _props$hideBackdrop = props.hideBackdrop,
            hideBackdrop = _props$hideBackdrop === void 0 ? false : _props$hideBackdrop,
            _props$keepMounted = props.keepMounted,
            keepMounted = _props$keepMounted === void 0 ? false : _props$keepMounted,
            onBackdropClick = props.onBackdropClick,
            open = props.open,
            _props$slotProps = props.slotProps,
            slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,
            _props$slots = props.slots,
            slots = _props$slots === void 0 ? {} : _props$slots,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$w);
          const propsWithDefaults = _extends({}, props, {
            closeAfterTransition,
            disableAutoFocus,
            disableEnforceFocus,
            disableEscapeKeyDown,
            disablePortal,
            disableRestoreFocus,
            disableScrollLock,
            hideBackdrop,
            keepMounted
          });
          const _useModal = useModal(_extends({}, propsWithDefaults, {
              rootRef: forwardedRef
            })),
            getRootProps = _useModal.getRootProps,
            getBackdropProps = _useModal.getBackdropProps,
            getTransitionProps = _useModal.getTransitionProps,
            portalRef = _useModal.portalRef,
            isTopModal = _useModal.isTopModal,
            exited = _useModal.exited,
            hasTransition = _useModal.hasTransition;
          const ownerState = _extends({}, propsWithDefaults, {
            exited,
            hasTransition
          });
          const classes = useUtilityClasses$p(ownerState);
          const childProps = {};
          if (children.props.tabIndex === void 0) {
            childProps.tabIndex = "-1";
          }
          if (hasTransition) {
            const _getTransitionProps = getTransitionProps(),
              onEnter = _getTransitionProps.onEnter,
              onExited = _getTransitionProps.onExited;
            childProps.onEnter = onEnter;
            childProps.onExited = onExited;
          }
          const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
          const rootProps = useSlotProps({
            elementType: Root,
            externalSlotProps: slotProps.root,
            externalForwardedProps: other,
            getSlotProps: getRootProps,
            className: classes.root,
            ownerState
          });
          const BackdropComponent = slots.backdrop;
          const backdropProps = useSlotProps({
            elementType: BackdropComponent,
            externalSlotProps: slotProps.backdrop,
            getSlotProps: otherHandlers => {
              return getBackdropProps(_extends({}, otherHandlers, {
                onClick: e => {
                  if (onBackdropClick) {
                    onBackdropClick(e);
                  }
                  if (otherHandlers != null && otherHandlers.onClick) {
                    otherHandlers.onClick(e);
                  }
                }
              }));
            },
            className: classes.backdrop,
            ownerState
          });
          if (!keepMounted && !open && (!hasTransition || exited)) {
            return null;
          }
          return /* @__PURE__ */jsxRuntimeExports.jsx(Portal, {
            ref: portalRef,
            container,
            disablePortal,
            children: /* @__PURE__ */jsxRuntimeExports.jsxs(Root, _extends({}, rootProps, {
              children: [!hideBackdrop && BackdropComponent ? /* @__PURE__ */jsxRuntimeExports.jsx(BackdropComponent, _extends({}, backdropProps)) : null, /* @__PURE__ */jsxRuntimeExports.jsx(FocusTrap, {
                disableEnforceFocus,
                disableAutoFocus,
                disableRestoreFocus,
                isEnabled: isTopModal,
                open,
                children: /* @__PURE__ */reactExports.cloneElement(children, childProps)
              })]
            }))
          });
        });
        const _excluded$v = ["onChange", "maxRows", "minRows", "style", "value"];
        function getStyleValue(value) {
          return parseInt(value, 10) || 0;
        }
        const styles$b = {
          shadow: {
            // Visibility needed to hide the extra text area on iPads
            visibility: "hidden",
            // Remove from the content flow
            position: "absolute",
            // Ignore the scrollbar width
            overflow: "hidden",
            height: 0,
            top: 0,
            left: 0,
            // Create a new layer, increase the isolation of the computed values
            transform: "translateZ(0)"
          }
        };
        function isEmpty$1(obj) {
          return obj === void 0 || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflow;
        }
        const TextareaAutosize = exports("bp", /* @__PURE__ */reactExports.forwardRef(function TextareaAutosize2(props, forwardedRef) {
          const onChange = props.onChange,
            maxRows = props.maxRows,
            _props$minRows = props.minRows,
            minRows = _props$minRows === void 0 ? 1 : _props$minRows,
            style = props.style,
            value = props.value,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$v);
          const _reactExports$useRef2 = reactExports.useRef(value != null),
            isControlled = _reactExports$useRef2.current;
          const inputRef = reactExports.useRef(null);
          const handleRef = useForkRef(forwardedRef, inputRef);
          const shadowRef = reactExports.useRef(null);
          const renders = reactExports.useRef(0);
          const _reactExports$useStat19 = reactExports.useState({
              outerHeightStyle: 0
            }),
            _reactExports$useStat20 = _slicedToArray2(_reactExports$useStat19, 2),
            state = _reactExports$useStat20[0],
            setState = _reactExports$useStat20[1];
          const getUpdatedState = reactExports.useCallback(() => {
            const input = inputRef.current;
            const containerWindow = ownerWindow(input);
            const computedStyle = containerWindow.getComputedStyle(input);
            if (computedStyle.width === "0px") {
              return {
                outerHeightStyle: 0
              };
            }
            const inputShallow = shadowRef.current;
            inputShallow.style.width = computedStyle.width;
            inputShallow.value = input.value || props.placeholder || "x";
            if (inputShallow.value.slice(-1) === "\n") {
              inputShallow.value += " ";
            }
            const boxSizing = computedStyle.boxSizing;
            const padding = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);
            const border = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth);
            const innerHeight = inputShallow.scrollHeight;
            inputShallow.value = "x";
            const singleRowHeight = inputShallow.scrollHeight;
            let outerHeight = innerHeight;
            if (minRows) {
              outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
            }
            if (maxRows) {
              outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
            }
            outerHeight = Math.max(outerHeight, singleRowHeight);
            const outerHeightStyle = outerHeight + (boxSizing === "border-box" ? padding + border : 0);
            const overflow = Math.abs(outerHeight - innerHeight) <= 1;
            return {
              outerHeightStyle,
              overflow
            };
          }, [maxRows, minRows, props.placeholder]);
          const updateState = (prevState, newState) => {
            const outerHeightStyle = newState.outerHeightStyle,
              overflow = newState.overflow;
            if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {
              renders.current += 1;
              return {
                overflow,
                outerHeightStyle
              };
            }
            return prevState;
          };
          const syncHeight = reactExports.useCallback(() => {
            const newState = getUpdatedState();
            if (isEmpty$1(newState)) {
              return;
            }
            setState(prevState => {
              return updateState(prevState, newState);
            });
          }, [getUpdatedState]);
          const syncHeightWithFlushSync = () => {
            const newState = getUpdatedState();
            if (isEmpty$1(newState)) {
              return;
            }
            reactDomExports.flushSync(() => {
              setState(prevState => {
                return updateState(prevState, newState);
              });
            });
          };
          reactExports.useEffect(() => {
            const handleResize = debounce(() => {
              renders.current = 0;
              if (inputRef.current) {
                syncHeightWithFlushSync();
              }
            });
            let resizeObserver;
            const input = inputRef.current;
            const containerWindow = ownerWindow(input);
            containerWindow.addEventListener("resize", handleResize);
            if (typeof ResizeObserver !== "undefined") {
              resizeObserver = new ResizeObserver(handleResize);
              resizeObserver.observe(input);
            }
            return () => {
              handleResize.clear();
              containerWindow.removeEventListener("resize", handleResize);
              if (resizeObserver) {
                resizeObserver.disconnect();
              }
            };
          });
          useEnhancedEffect$1(() => {
            syncHeight();
          });
          reactExports.useEffect(() => {
            renders.current = 0;
          }, [value]);
          const handleChange = event => {
            renders.current = 0;
            if (!isControlled) {
              syncHeight();
            }
            if (onChange) {
              onChange(event);
            }
          };
          return /* @__PURE__ */jsxRuntimeExports.jsxs(reactExports.Fragment, {
            children: [/* @__PURE__ */jsxRuntimeExports.jsx("textarea", _extends({
              value,
              onChange: handleChange,
              ref: handleRef,
              rows: minRows,
              style: _extends({
                height: state.outerHeightStyle,
                // Need a large enough difference to allow scrolling.
                // This prevents infinite rendering loop.
                overflow: state.overflow ? "hidden" : void 0
              }, style)
            }, other)), /* @__PURE__ */jsxRuntimeExports.jsx("textarea", {
              "aria-hidden": true,
              className: props.className,
              readOnly: true,
              ref: shadowRef,
              tabIndex: -1,
              style: _extends({}, styles$b.shadow, style, {
                paddingTop: 0,
                paddingBottom: 0
              })
            })]
          });
        }));
        function formControlState({
          props,
          states,
          muiFormControl
        }) {
          return states.reduce((acc, state) => {
            acc[state] = props[state];
            if (muiFormControl) {
              if (typeof props[state] === 'undefined') {
                acc[state] = muiFormControl[state];
              }
            }
            return acc;
          }, {});
        }
        const FormControlContext = /* @__PURE__ */reactExports.createContext(void 0);
        const FormControlContext$1 = exports('aT', FormControlContext);
        function useFormControl() {
          return reactExports.useContext(FormControlContext$1);
        }
        function GlobalStyles(props) {
          return /* @__PURE__ */jsxRuntimeExports.jsx(GlobalStyles$1, _extends({}, props, {
            defaultTheme: defaultTheme$2,
            themeId: THEME_ID
          }));
        }

        // Supports determination of isControlled().
        // Controlled input accepts its current value as a prop.
        //
        // @see https://facebook.github.io/react/docs/forms.html#controlled-components
        // @param value
        // @returns {boolean} true if string (including '') or number (including zero)
        function hasValue(value) {
          return value != null && !(Array.isArray(value) && value.length === 0);
        }

        // Determine if field is empty or filled.
        // Response determines if label is presented above field or as placeholder.
        //
        // @param obj
        // @param SSR
        // @returns {boolean} False when not present or empty string.
        //                    True when any number or string with length.
        function isFilled(obj, SSR = false) {
          return obj && (hasValue(obj.value) && obj.value !== '' || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== '');
        }

        // Determine if an Input is adorned on start.
        // It's corresponding to the left with LTR.
        //
        // @param obj
        // @returns {boolean} False when no adornments.
        //                    True when adorned at the start.
        function isAdornedStart(obj) {
          return obj.startAdornment;
        }
        function getInputBaseUtilityClass(slot) {
          return generateUtilityClass('MuiInputBase', slot);
        }
        const inputBaseClasses = generateUtilityClasses('MuiInputBase', ['root', 'formControl', 'focused', 'disabled', 'adornedStart', 'adornedEnd', 'error', 'sizeSmall', 'multiline', 'colorSecondary', 'fullWidth', 'hiddenLabel', 'readOnly', 'input', 'inputSizeSmall', 'inputMultiline', 'inputTypeSearch', 'inputAdornedStart', 'inputAdornedEnd', 'inputHiddenLabel']);
        const inputBaseClasses$1 = exports('b$', inputBaseClasses);
        const _excluded$u = ["aria-describedby", "autoComplete", "autoFocus", "className", "color", "components", "componentsProps", "defaultValue", "disabled", "disableInjectingGlobalStyles", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "size", "slotProps", "slots", "startAdornment", "type", "value"];
        const rootOverridesResolver = (props, styles) => {
          const ownerState = props.ownerState;
          return [styles.root, ownerState.formControl && styles.formControl, ownerState.startAdornment && styles.adornedStart, ownerState.endAdornment && styles.adornedEnd, ownerState.error && styles.error, ownerState.size === "small" && styles.sizeSmall, ownerState.multiline && styles.multiline, ownerState.color && styles[`color${capitalize(ownerState.color)}`], ownerState.fullWidth && styles.fullWidth, ownerState.hiddenLabel && styles.hiddenLabel];
        };
        const inputOverridesResolver = (props, styles) => {
          const ownerState = props.ownerState;
          return [styles.input, ownerState.size === "small" && styles.inputSizeSmall, ownerState.multiline && styles.inputMultiline, ownerState.type === "search" && styles.inputTypeSearch, ownerState.startAdornment && styles.inputAdornedStart, ownerState.endAdornment && styles.inputAdornedEnd, ownerState.hiddenLabel && styles.inputHiddenLabel];
        };
        const useUtilityClasses$o = ownerState => {
          const classes = ownerState.classes,
            color = ownerState.color,
            disabled = ownerState.disabled,
            error = ownerState.error,
            endAdornment = ownerState.endAdornment,
            focused = ownerState.focused,
            formControl = ownerState.formControl,
            fullWidth = ownerState.fullWidth,
            hiddenLabel = ownerState.hiddenLabel,
            multiline = ownerState.multiline,
            readOnly = ownerState.readOnly,
            size = ownerState.size,
            startAdornment = ownerState.startAdornment,
            type = ownerState.type;
          const slots = {
            root: ["root", `color${capitalize(color)}`, disabled && "disabled", error && "error", fullWidth && "fullWidth", focused && "focused", formControl && "formControl", size === "small" && "sizeSmall", multiline && "multiline", startAdornment && "adornedStart", endAdornment && "adornedEnd", hiddenLabel && "hiddenLabel", readOnly && "readOnly"],
            input: ["input", disabled && "disabled", type === "search" && "inputTypeSearch", multiline && "inputMultiline", size === "small" && "inputSizeSmall", hiddenLabel && "inputHiddenLabel", startAdornment && "inputAdornedStart", endAdornment && "inputAdornedEnd", readOnly && "readOnly"]
          };
          return composeClasses(slots, getInputBaseUtilityClass, classes);
        };
        const InputBaseRoot = styled$1("div", {
          name: "MuiInputBase",
          slot: "Root",
          overridesResolver: rootOverridesResolver
        })(({
          theme,
          ownerState
        }) => _extends({}, theme.typography.body1, {
          color: (theme.vars || theme).palette.text.primary,
          lineHeight: "1.4375em",
          // 23px
          boxSizing: "border-box",
          // Prevent padding issue with fullWidth.
          position: "relative",
          cursor: "text",
          display: "inline-flex",
          alignItems: "center",
          [`&.${inputBaseClasses$1.disabled}`]: {
            color: (theme.vars || theme).palette.text.disabled,
            cursor: "default"
          }
        }, ownerState.multiline && _extends({
          padding: "4px 0 5px"
        }, ownerState.size === "small" && {
          paddingTop: 1
        }), ownerState.fullWidth && {
          width: "100%"
        }));
        const InputBaseComponent = styled$1("input", {
          name: "MuiInputBase",
          slot: "Input",
          overridesResolver: inputOverridesResolver
        })(({
          theme,
          ownerState
        }) => {
          const light = theme.palette.mode === "light";
          const placeholder = _extends({
            color: "currentColor"
          }, theme.vars ? {
            opacity: theme.vars.opacity.inputPlaceholder
          } : {
            opacity: light ? 0.42 : 0.5
          }, {
            transition: theme.transitions.create("opacity", {
              duration: theme.transitions.duration.shorter
            })
          });
          const placeholderHidden = {
            opacity: "0 !important"
          };
          const placeholderVisible = theme.vars ? {
            opacity: theme.vars.opacity.inputPlaceholder
          } : {
            opacity: light ? 0.42 : 0.5
          };
          return _extends({
            font: "inherit",
            letterSpacing: "inherit",
            color: "currentColor",
            padding: "4px 0 5px",
            border: 0,
            boxSizing: "content-box",
            background: "none",
            height: "1.4375em",
            // Reset 23pxthe native input line-height
            margin: 0,
            // Reset for Safari
            WebkitTapHighlightColor: "transparent",
            display: "block",
            // Make the flex item shrink with Firefox
            minWidth: 0,
            width: "100%",
            // Fix IE11 width issue
            animationName: "mui-auto-fill-cancel",
            animationDuration: "10ms",
            "&::-webkit-input-placeholder": placeholder,
            "&::-moz-placeholder": placeholder,
            // Firefox 19+
            "&:-ms-input-placeholder": placeholder,
            // IE11
            "&::-ms-input-placeholder": placeholder,
            // Edge
            "&:focus": {
              outline: 0
            },
            // Reset Firefox invalid required input style
            "&:invalid": {
              boxShadow: "none"
            },
            "&::-webkit-search-decoration": {
              // Remove the padding when type=search.
              WebkitAppearance: "none"
            },
            // Show and hide the placeholder logic
            [`label[data-shrink=false] + .${inputBaseClasses$1.formControl} &`]: {
              "&::-webkit-input-placeholder": placeholderHidden,
              "&::-moz-placeholder": placeholderHidden,
              // Firefox 19+
              "&:-ms-input-placeholder": placeholderHidden,
              // IE11
              "&::-ms-input-placeholder": placeholderHidden,
              // Edge
              "&:focus::-webkit-input-placeholder": placeholderVisible,
              "&:focus::-moz-placeholder": placeholderVisible,
              // Firefox 19+
              "&:focus:-ms-input-placeholder": placeholderVisible,
              // IE11
              "&:focus::-ms-input-placeholder": placeholderVisible
              // Edge
            },
            [`&.${inputBaseClasses$1.disabled}`]: {
              opacity: 1,
              // Reset iOS opacity
              WebkitTextFillColor: (theme.vars || theme).palette.text.disabled
              // Fix opacity Safari bug
            },
            "&:-webkit-autofill": {
              animationDuration: "5000s",
              animationName: "mui-auto-fill"
            }
          }, ownerState.size === "small" && {
            paddingTop: 1
          }, ownerState.multiline && {
            height: "auto",
            resize: "none",
            padding: 0,
            paddingTop: 0
          }, ownerState.type === "search" && {
            // Improve type search style.
            MozAppearance: "textfield"
          });
        });
        const inputGlobalStyles = /* @__PURE__ */jsxRuntimeExports.jsx(GlobalStyles, {
          styles: {
            "@keyframes mui-auto-fill": {
              from: {
                display: "block"
              }
            },
            "@keyframes mui-auto-fill-cancel": {
              from: {
                display: "block"
              }
            }
          }
        });
        const InputBase = /* @__PURE__ */reactExports.forwardRef(function InputBase2(inProps, ref) {
          var _slotProps$input;
          const props = useThemeProps({
            props: inProps,
            name: "MuiInputBase"
          });
          const ariaDescribedby = props["aria-describedby"],
            autoComplete = props.autoComplete,
            autoFocus = props.autoFocus,
            className = props.className,
            _props$components = props.components,
            components = _props$components === void 0 ? {} : _props$components,
            _props$componentsProp = props.componentsProps,
            componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,
            defaultValue = props.defaultValue,
            disabled = props.disabled,
            disableInjectingGlobalStyles = props.disableInjectingGlobalStyles,
            endAdornment = props.endAdornment,
            _props$fullWidth = props.fullWidth,
            fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
            id = props.id,
            _props$inputComponent = props.inputComponent,
            inputComponent = _props$inputComponent === void 0 ? "input" : _props$inputComponent,
            _props$inputProps = props.inputProps,
            inputPropsProp = _props$inputProps === void 0 ? {} : _props$inputProps,
            inputRefProp = props.inputRef,
            maxRows = props.maxRows,
            minRows = props.minRows,
            _props$multiline = props.multiline,
            multiline = _props$multiline === void 0 ? false : _props$multiline,
            name = props.name,
            onBlur = props.onBlur,
            onChange = props.onChange,
            onClick = props.onClick,
            onFocus = props.onFocus,
            onKeyDown = props.onKeyDown,
            onKeyUp = props.onKeyUp,
            placeholder = props.placeholder,
            readOnly = props.readOnly,
            renderSuffix = props.renderSuffix,
            rows = props.rows,
            _props$slotProps2 = props.slotProps,
            slotProps = _props$slotProps2 === void 0 ? {} : _props$slotProps2,
            _props$slots2 = props.slots,
            slots = _props$slots2 === void 0 ? {} : _props$slots2,
            startAdornment = props.startAdornment,
            _props$type = props.type,
            type = _props$type === void 0 ? "text" : _props$type,
            valueProp = props.value,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$u);
          const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
          const _reactExports$useRef3 = reactExports.useRef(value != null),
            isControlled = _reactExports$useRef3.current;
          const inputRef = reactExports.useRef();
          const handleInputRefWarning = reactExports.useCallback(instance => {}, []);
          const handleInputRef = useForkRef(inputRef, inputRefProp, inputPropsProp.ref, handleInputRefWarning);
          const _reactExports$useStat21 = reactExports.useState(false),
            _reactExports$useStat22 = _slicedToArray2(_reactExports$useStat21, 2),
            focused = _reactExports$useStat22[0],
            setFocused = _reactExports$useStat22[1];
          const muiFormControl = useFormControl();
          const fcs = formControlState({
            props,
            muiFormControl,
            states: ["color", "disabled", "error", "hiddenLabel", "size", "required", "filled"]
          });
          fcs.focused = muiFormControl ? muiFormControl.focused : focused;
          reactExports.useEffect(() => {
            if (!muiFormControl && disabled && focused) {
              setFocused(false);
              if (onBlur) {
                onBlur();
              }
            }
          }, [muiFormControl, disabled, focused, onBlur]);
          const onFilled = muiFormControl && muiFormControl.onFilled;
          const onEmpty = muiFormControl && muiFormControl.onEmpty;
          const checkDirty = reactExports.useCallback(obj => {
            if (isFilled(obj)) {
              if (onFilled) {
                onFilled();
              }
            } else if (onEmpty) {
              onEmpty();
            }
          }, [onFilled, onEmpty]);
          useEnhancedEffect$1(() => {
            if (isControlled) {
              checkDirty({
                value
              });
            }
          }, [value, checkDirty, isControlled]);
          const handleFocus = event => {
            if (fcs.disabled) {
              event.stopPropagation();
              return;
            }
            if (onFocus) {
              onFocus(event);
            }
            if (inputPropsProp.onFocus) {
              inputPropsProp.onFocus(event);
            }
            if (muiFormControl && muiFormControl.onFocus) {
              muiFormControl.onFocus(event);
            } else {
              setFocused(true);
            }
          };
          const handleBlur = event => {
            if (onBlur) {
              onBlur(event);
            }
            if (inputPropsProp.onBlur) {
              inputPropsProp.onBlur(event);
            }
            if (muiFormControl && muiFormControl.onBlur) {
              muiFormControl.onBlur(event);
            } else {
              setFocused(false);
            }
          };
          const handleChange = (event, ...args) => {
            if (!isControlled) {
              const element = event.target || inputRef.current;
              if (element == null) {
                throw new Error(formatMuiErrorMessage(1));
              }
              checkDirty({
                value: element.value
              });
            }
            if (inputPropsProp.onChange) {
              inputPropsProp.onChange(event, ...args);
            }
            if (onChange) {
              onChange(event, ...args);
            }
          };
          reactExports.useEffect(() => {
            checkDirty(inputRef.current);
          }, []);
          const handleClick = event => {
            if (inputRef.current && event.currentTarget === event.target) {
              inputRef.current.focus();
            }
            if (onClick && !fcs.disabled) {
              onClick(event);
            }
          };
          let InputComponent = inputComponent;
          let inputProps = inputPropsProp;
          if (multiline && InputComponent === "input") {
            if (rows) {
              inputProps = _extends({
                type: void 0,
                minRows: rows,
                maxRows: rows
              }, inputProps);
            } else {
              inputProps = _extends({
                type: void 0,
                maxRows,
                minRows
              }, inputProps);
            }
            InputComponent = TextareaAutosize;
          }
          const handleAutoFill = event => {
            checkDirty(event.animationName === "mui-auto-fill-cancel" ? inputRef.current : {
              value: "x"
            });
          };
          reactExports.useEffect(() => {
            if (muiFormControl) {
              muiFormControl.setAdornedStart(Boolean(startAdornment));
            }
          }, [muiFormControl, startAdornment]);
          const ownerState = _extends({}, props, {
            color: fcs.color || "primary",
            disabled: fcs.disabled,
            endAdornment,
            error: fcs.error,
            focused: fcs.focused,
            formControl: muiFormControl,
            fullWidth,
            hiddenLabel: fcs.hiddenLabel,
            multiline,
            size: fcs.size,
            startAdornment,
            type
          });
          const classes = useUtilityClasses$o(ownerState);
          const Root = slots.root || components.Root || InputBaseRoot;
          const rootProps = slotProps.root || componentsProps.root || {};
          const Input = slots.input || components.Input || InputBaseComponent;
          inputProps = _extends({}, inputProps, (_slotProps$input = slotProps.input) != null ? _slotProps$input : componentsProps.input);
          return /* @__PURE__ */jsxRuntimeExports.jsxs(reactExports.Fragment, {
            children: [!disableInjectingGlobalStyles && inputGlobalStyles, /* @__PURE__ */jsxRuntimeExports.jsxs(Root, _extends({}, rootProps, !isHostComponent(Root) && {
              ownerState: _extends({}, ownerState, rootProps.ownerState)
            }, {
              ref,
              onClick: handleClick
            }, other, {
              className: clsx(classes.root, rootProps.className, className, readOnly && "MuiInputBase-readOnly"),
              children: [startAdornment, /* @__PURE__ */jsxRuntimeExports.jsx(FormControlContext$1.Provider, {
                value: null,
                children: /* @__PURE__ */jsxRuntimeExports.jsx(Input, _extends({
                  ownerState,
                  "aria-invalid": fcs.error,
                  "aria-describedby": ariaDescribedby,
                  autoComplete,
                  autoFocus,
                  defaultValue,
                  disabled: fcs.disabled,
                  id,
                  onAnimationStart: handleAutoFill,
                  name,
                  placeholder,
                  readOnly,
                  required: fcs.required,
                  rows,
                  value,
                  onKeyDown,
                  onKeyUp,
                  type
                }, inputProps, !isHostComponent(Input) && {
                  as: InputComponent,
                  ownerState: _extends({}, ownerState, inputProps.ownerState)
                }, {
                  ref: handleInputRef,
                  className: clsx(classes.input, inputProps.className, readOnly && "MuiInputBase-readOnly"),
                  onBlur: handleBlur,
                  onChange: handleChange,
                  onFocus: handleFocus
                }))
              }), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {
                startAdornment
              })) : null]
            }))]
          });
        });
        const InputBase$1 = exports('bM', InputBase);
        function getInputUtilityClass(slot) {
          return generateUtilityClass('MuiInput', slot);
        }
        const inputClasses = _extends({}, inputBaseClasses$1, generateUtilityClasses('MuiInput', ['root', 'underline', 'input']));
        const inputClasses$1 = exports('b_', inputClasses);
        function getOutlinedInputUtilityClass(slot) {
          return generateUtilityClass('MuiOutlinedInput', slot);
        }
        const outlinedInputClasses = _extends({}, inputBaseClasses$1, generateUtilityClasses('MuiOutlinedInput', ['root', 'notchedOutline', 'input']));
        const outlinedInputClasses$1 = exports('c0', outlinedInputClasses);
        function getFilledInputUtilityClass(slot) {
          return generateUtilityClass('MuiFilledInput', slot);
        }
        const filledInputClasses = _extends({}, inputBaseClasses$1, generateUtilityClasses('MuiFilledInput', ['root', 'underline', 'input']));
        const filledInputClasses$1 = exports('c1', filledInputClasses);
        const ArrowDropDownIcon = exports('c2', createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
          d: "M7 10l5 5 5-5z"
        }), 'ArrowDropDown'));
        const _excluded$t = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
        const styles$a = {
          entering: {
            opacity: 1
          },
          entered: {
            opacity: 1
          }
        };
        const Fade = /* @__PURE__ */reactExports.forwardRef(function Fade2(props, ref) {
          const theme = useTheme();
          const defaultTimeout = {
            enter: theme.transitions.duration.enteringScreen,
            exit: theme.transitions.duration.leavingScreen
          };
          const addEndListener = props.addEndListener,
            _props$appear = props.appear,
            appear = _props$appear === void 0 ? true : _props$appear,
            _children = props.children,
            easing = props.easing,
            inProp = props.in,
            onEnter = props.onEnter,
            onEntered = props.onEntered,
            onEntering = props.onEntering,
            onExit = props.onExit,
            onExited = props.onExited,
            onExiting = props.onExiting,
            style = props.style,
            _props$timeout = props.timeout,
            timeout = _props$timeout === void 0 ? defaultTimeout : _props$timeout,
            _props$TransitionComp = props.TransitionComponent,
            TransitionComponent = _props$TransitionComp === void 0 ? Transition$1 : _props$TransitionComp,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$t);
          const nodeRef = reactExports.useRef(null);
          const handleRef = useForkRef(nodeRef, _children.ref, ref);
          const normalizedTransitionCallback = callback => maybeIsAppearing => {
            if (callback) {
              const node = nodeRef.current;
              if (maybeIsAppearing === void 0) {
                callback(node);
              } else {
                callback(node, maybeIsAppearing);
              }
            }
          };
          const handleEntering = normalizedTransitionCallback(onEntering);
          const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
            reflow(node);
            const transitionProps = getTransitionProps({
              style,
              timeout,
              easing
            }, {
              mode: "enter"
            });
            node.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
            node.style.transition = theme.transitions.create("opacity", transitionProps);
            if (onEnter) {
              onEnter(node, isAppearing);
            }
          });
          const handleEntered = normalizedTransitionCallback(onEntered);
          const handleExiting = normalizedTransitionCallback(onExiting);
          const handleExit = normalizedTransitionCallback(node => {
            const transitionProps = getTransitionProps({
              style,
              timeout,
              easing
            }, {
              mode: "exit"
            });
            node.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
            node.style.transition = theme.transitions.create("opacity", transitionProps);
            if (onExit) {
              onExit(node);
            }
          });
          const handleExited = normalizedTransitionCallback(onExited);
          const handleAddEndListener = next => {
            if (addEndListener) {
              addEndListener(nodeRef.current, next);
            }
          };
          return /* @__PURE__ */jsxRuntimeExports.jsx(TransitionComponent, _extends({
            appear,
            in: inProp,
            nodeRef: nodeRef,
            onEnter: handleEnter,
            onEntered: handleEntered,
            onEntering: handleEntering,
            onExit: handleExit,
            onExited: handleExited,
            onExiting: handleExiting,
            addEndListener: handleAddEndListener,
            timeout
          }, other, {
            children: (state, childProps) => {
              return /* @__PURE__ */reactExports.cloneElement(_children, _extends({
                style: _extends({
                  opacity: 0,
                  visibility: state === "exited" && !inProp ? "hidden" : void 0
                }, styles$a[state], style, _children.props.style),
                ref: handleRef
              }, childProps));
            }
          }));
        });
        const Fade$1 = exports('b2', Fade);
        function getBackdropUtilityClass(slot) {
          return generateUtilityClass('MuiBackdrop', slot);
        }
        generateUtilityClasses('MuiBackdrop', ['root', 'invisible']);
        const _excluded$s = ["children", "className", "component", "components", "componentsProps", "invisible", "open", "slotProps", "slots", "TransitionComponent", "transitionDuration"];
        const useUtilityClasses$n = ownerState => {
          const classes = ownerState.classes,
            invisible = ownerState.invisible;
          const slots = {
            root: ["root", invisible && "invisible"]
          };
          return composeClasses(slots, getBackdropUtilityClass, classes);
        };
        const BackdropRoot = styled$1("div", {
          name: "MuiBackdrop",
          slot: "Root",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [styles.root, ownerState.invisible && styles.invisible];
          }
        })(({
          ownerState
        }) => _extends({
          position: "fixed",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          right: 0,
          bottom: 0,
          top: 0,
          left: 0,
          backgroundColor: "rgba(0, 0, 0, 0.5)",
          WebkitTapHighlightColor: "transparent"
        }, ownerState.invisible && {
          backgroundColor: "transparent"
        }));
        const Backdrop = /* @__PURE__ */reactExports.forwardRef(function Backdrop2(inProps, ref) {
          var _slotProps$root, _ref, _slots$root;
          const props = useThemeProps({
            props: inProps,
            name: "MuiBackdrop"
          });
          const children = props.children,
            className = props.className,
            _props$component4 = props.component,
            component = _props$component4 === void 0 ? "div" : _props$component4,
            _props$components2 = props.components,
            components = _props$components2 === void 0 ? {} : _props$components2,
            _props$componentsProp2 = props.componentsProps,
            componentsProps = _props$componentsProp2 === void 0 ? {} : _props$componentsProp2,
            _props$invisible = props.invisible,
            invisible = _props$invisible === void 0 ? false : _props$invisible,
            open = props.open,
            _props$slotProps3 = props.slotProps,
            slotProps = _props$slotProps3 === void 0 ? {} : _props$slotProps3,
            _props$slots3 = props.slots,
            slots = _props$slots3 === void 0 ? {} : _props$slots3,
            _props$TransitionComp2 = props.TransitionComponent,
            TransitionComponent = _props$TransitionComp2 === void 0 ? Fade$1 : _props$TransitionComp2,
            transitionDuration = props.transitionDuration,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$s);
          const ownerState = _extends({}, props, {
            component,
            invisible
          });
          const classes = useUtilityClasses$n(ownerState);
          const rootSlotProps = (_slotProps$root = slotProps.root) != null ? _slotProps$root : componentsProps.root;
          return /* @__PURE__ */jsxRuntimeExports.jsx(TransitionComponent, _extends({
            in: open,
            timeout: transitionDuration
          }, other, {
            children: /* @__PURE__ */jsxRuntimeExports.jsx(BackdropRoot, _extends({
              "aria-hidden": true
            }, rootSlotProps, {
              as: (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : component,
              className: clsx(classes.root, className, rootSlotProps == null ? void 0 : rootSlotProps.className),
              ownerState: _extends({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
              classes,
              ref,
              children
            }))
          }));
        });
        const Backdrop$1 = exports('bP', Backdrop);
        const defaultTheme = createTheme();
        const Box = createBox({
          themeId: THEME_ID,
          defaultTheme,
          defaultClassName: "MuiBox-root",
          generateClassName: ClassNameGenerator$1.generate
        });
        const Box$1 = exports('B', Box);
        function getButtonUtilityClass(slot) {
          return generateUtilityClass('MuiButton', slot);
        }
        const buttonClasses = generateUtilityClasses('MuiButton', ['root', 'text', 'textInherit', 'textPrimary', 'textSecondary', 'textSuccess', 'textError', 'textInfo', 'textWarning', 'outlined', 'outlinedInherit', 'outlinedPrimary', 'outlinedSecondary', 'outlinedSuccess', 'outlinedError', 'outlinedInfo', 'outlinedWarning', 'contained', 'containedInherit', 'containedPrimary', 'containedSecondary', 'containedSuccess', 'containedError', 'containedInfo', 'containedWarning', 'disableElevation', 'focusVisible', 'disabled', 'colorInherit', 'textSizeSmall', 'textSizeMedium', 'textSizeLarge', 'outlinedSizeSmall', 'outlinedSizeMedium', 'outlinedSizeLarge', 'containedSizeSmall', 'containedSizeMedium', 'containedSizeLarge', 'sizeMedium', 'sizeSmall', 'sizeLarge', 'fullWidth', 'startIcon', 'endIcon', 'iconSizeSmall', 'iconSizeMedium', 'iconSizeLarge']);
        const buttonClasses$1 = buttonClasses;
        const ButtonGroupContext = /* @__PURE__ */reactExports.createContext({});
        const ButtonGroupContext$1 = exports('c3', ButtonGroupContext);
        const _excluded$r = ["children", "color", "component", "className", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];
        const useUtilityClasses$m = ownerState => {
          const color = ownerState.color,
            disableElevation = ownerState.disableElevation,
            fullWidth = ownerState.fullWidth,
            size = ownerState.size,
            variant = ownerState.variant,
            classes = ownerState.classes;
          const slots = {
            root: ["root", variant, `${variant}${capitalize(color)}`, `size${capitalize(size)}`, `${variant}Size${capitalize(size)}`, color === "inherit" && "colorInherit", disableElevation && "disableElevation", fullWidth && "fullWidth"],
            label: ["label"],
            startIcon: ["startIcon", `iconSize${capitalize(size)}`],
            endIcon: ["endIcon", `iconSize${capitalize(size)}`]
          };
          const composedClasses = composeClasses(slots, getButtonUtilityClass, classes);
          return _extends({}, classes, composedClasses);
        };
        const commonIconStyles = ownerState => _extends({}, ownerState.size === "small" && {
          "& > *:nth-of-type(1)": {
            fontSize: 18
          }
        }, ownerState.size === "medium" && {
          "& > *:nth-of-type(1)": {
            fontSize: 20
          }
        }, ownerState.size === "large" && {
          "& > *:nth-of-type(1)": {
            fontSize: 22
          }
        });
        const ButtonRoot = styled$1(ButtonBase$1, {
          shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === "classes",
          name: "MuiButton",
          slot: "Root",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${capitalize(ownerState.color)}`], styles[`size${capitalize(ownerState.size)}`], styles[`${ownerState.variant}Size${capitalize(ownerState.size)}`], ownerState.color === "inherit" && styles.colorInherit, ownerState.disableElevation && styles.disableElevation, ownerState.fullWidth && styles.fullWidth];
          }
        })(({
          theme,
          ownerState
        }) => {
          var _theme$palette$getCon, _theme$palette;
          const inheritContainedBackgroundColor = theme.palette.mode === "light" ? theme.palette.grey[300] : theme.palette.grey[800];
          const inheritContainedHoverBackgroundColor = theme.palette.mode === "light" ? theme.palette.grey.A100 : theme.palette.grey[700];
          return _extends({}, theme.typography.button, {
            minWidth: 64,
            padding: "6px 16px",
            borderRadius: (theme.vars || theme).shape.borderRadius,
            transition: theme.transitions.create(["background-color", "box-shadow", "border-color", "color"], {
              duration: theme.transitions.duration.short
            }),
            "&:hover": _extends({
              textDecoration: "none",
              backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
              // Reset on touch devices, it doesn't add specificity
              "@media (hover: none)": {
                backgroundColor: "transparent"
              }
            }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
              backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
              // Reset on touch devices, it doesn't add specificity
              "@media (hover: none)": {
                backgroundColor: "transparent"
              }
            }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
              border: `1px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
              backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
              // Reset on touch devices, it doesn't add specificity
              "@media (hover: none)": {
                backgroundColor: "transparent"
              }
            }, ownerState.variant === "contained" && {
              backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedHoverBg : inheritContainedHoverBackgroundColor,
              boxShadow: (theme.vars || theme).shadows[4],
              // Reset on touch devices, it doesn't add specificity
              "@media (hover: none)": {
                boxShadow: (theme.vars || theme).shadows[2],
                backgroundColor: (theme.vars || theme).palette.grey[300]
              }
            }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
              backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
              // Reset on touch devices, it doesn't add specificity
              "@media (hover: none)": {
                backgroundColor: (theme.vars || theme).palette[ownerState.color].main
              }
            }),
            "&:active": _extends({}, ownerState.variant === "contained" && {
              boxShadow: (theme.vars || theme).shadows[8]
            }),
            [`&.${buttonClasses$1.focusVisible}`]: _extends({}, ownerState.variant === "contained" && {
              boxShadow: (theme.vars || theme).shadows[6]
            }),
            [`&.${buttonClasses$1.disabled}`]: _extends({
              color: (theme.vars || theme).palette.action.disabled
            }, ownerState.variant === "outlined" && {
              border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`
            }, ownerState.variant === "contained" && {
              color: (theme.vars || theme).palette.action.disabled,
              boxShadow: (theme.vars || theme).shadows[0],
              backgroundColor: (theme.vars || theme).palette.action.disabledBackground
            })
          }, ownerState.variant === "text" && {
            padding: "6px 8px"
          }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
            color: (theme.vars || theme).palette[ownerState.color].main
          }, ownerState.variant === "outlined" && {
            padding: "5px 15px",
            border: "1px solid currentColor"
          }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
            color: (theme.vars || theme).palette[ownerState.color].main,
            border: theme.vars ? `1px solid rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : `1px solid ${alpha(theme.palette[ownerState.color].main, 0.5)}`
          }, ownerState.variant === "contained" && {
            color: theme.vars ?
            // this is safe because grey does not change between default light/dark mode
            theme.vars.palette.text.primary : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
            backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedBg : inheritContainedBackgroundColor,
            boxShadow: (theme.vars || theme).shadows[2]
          }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
            color: (theme.vars || theme).palette[ownerState.color].contrastText,
            backgroundColor: (theme.vars || theme).palette[ownerState.color].main
          }, ownerState.color === "inherit" && {
            color: "inherit",
            borderColor: "currentColor"
          }, ownerState.size === "small" && ownerState.variant === "text" && {
            padding: "4px 5px",
            fontSize: theme.typography.pxToRem(13)
          }, ownerState.size === "large" && ownerState.variant === "text" && {
            padding: "8px 11px",
            fontSize: theme.typography.pxToRem(15)
          }, ownerState.size === "small" && ownerState.variant === "outlined" && {
            padding: "3px 9px",
            fontSize: theme.typography.pxToRem(13)
          }, ownerState.size === "large" && ownerState.variant === "outlined" && {
            padding: "7px 21px",
            fontSize: theme.typography.pxToRem(15)
          }, ownerState.size === "small" && ownerState.variant === "contained" && {
            padding: "4px 10px",
            fontSize: theme.typography.pxToRem(13)
          }, ownerState.size === "large" && ownerState.variant === "contained" && {
            padding: "8px 22px",
            fontSize: theme.typography.pxToRem(15)
          }, ownerState.fullWidth && {
            width: "100%"
          });
        }, ({
          ownerState
        }) => ownerState.disableElevation && {
          boxShadow: "none",
          "&:hover": {
            boxShadow: "none"
          },
          [`&.${buttonClasses$1.focusVisible}`]: {
            boxShadow: "none"
          },
          "&:active": {
            boxShadow: "none"
          },
          [`&.${buttonClasses$1.disabled}`]: {
            boxShadow: "none"
          }
        });
        const ButtonStartIcon = styled$1("span", {
          name: "MuiButton",
          slot: "StartIcon",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [styles.startIcon, styles[`iconSize${capitalize(ownerState.size)}`]];
          }
        })(({
          ownerState
        }) => _extends({
          display: "inherit",
          marginRight: 8,
          marginLeft: -4
        }, ownerState.size === "small" && {
          marginLeft: -2
        }, commonIconStyles(ownerState)));
        const ButtonEndIcon = styled$1("span", {
          name: "MuiButton",
          slot: "EndIcon",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [styles.endIcon, styles[`iconSize${capitalize(ownerState.size)}`]];
          }
        })(({
          ownerState
        }) => _extends({
          display: "inherit",
          marginRight: -4,
          marginLeft: 8
        }, ownerState.size === "small" && {
          marginRight: -2
        }, commonIconStyles(ownerState)));
        const Button = /* @__PURE__ */reactExports.forwardRef(function Button2(inProps, ref) {
          const contextProps = reactExports.useContext(ButtonGroupContext$1);
          const resolvedProps = resolveProps(contextProps, inProps);
          const props = useThemeProps({
            props: resolvedProps,
            name: "MuiButton"
          });
          const children = props.children,
            _props$color4 = props.color,
            color = _props$color4 === void 0 ? "primary" : _props$color4,
            _props$component5 = props.component,
            component = _props$component5 === void 0 ? "button" : _props$component5,
            className = props.className,
            _props$disabled3 = props.disabled,
            disabled = _props$disabled3 === void 0 ? false : _props$disabled3,
            _props$disableElevati = props.disableElevation,
            disableElevation = _props$disableElevati === void 0 ? false : _props$disableElevati,
            _props$disableFocusRi2 = props.disableFocusRipple,
            disableFocusRipple = _props$disableFocusRi2 === void 0 ? false : _props$disableFocusRi2,
            endIconProp = props.endIcon,
            focusVisibleClassName = props.focusVisibleClassName,
            _props$fullWidth2 = props.fullWidth,
            fullWidth = _props$fullWidth2 === void 0 ? false : _props$fullWidth2,
            _props$size2 = props.size,
            size = _props$size2 === void 0 ? "medium" : _props$size2,
            startIconProp = props.startIcon,
            type = props.type,
            _props$variant3 = props.variant,
            variant = _props$variant3 === void 0 ? "text" : _props$variant3,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$r);
          const ownerState = _extends({}, props, {
            color,
            component,
            disabled,
            disableElevation,
            disableFocusRipple,
            fullWidth,
            size,
            type,
            variant
          });
          const classes = useUtilityClasses$m(ownerState);
          const startIcon = startIconProp && /* @__PURE__ */jsxRuntimeExports.jsx(ButtonStartIcon, {
            className: classes.startIcon,
            ownerState,
            children: startIconProp
          });
          const endIcon = endIconProp && /* @__PURE__ */jsxRuntimeExports.jsx(ButtonEndIcon, {
            className: classes.endIcon,
            ownerState,
            children: endIconProp
          });
          return /* @__PURE__ */jsxRuntimeExports.jsxs(ButtonRoot, _extends({
            ownerState,
            className: clsx(contextProps.className, classes.root, className),
            component,
            disabled,
            focusRipple: !disableFocusRipple,
            focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
            ref,
            type
          }, other, {
            classes,
            children: [startIcon, children, endIcon]
          }));
        });
        const Button$1 = exports('a1', Button);
        function getCardUtilityClass(slot) {
          return generateUtilityClass('MuiCard', slot);
        }
        generateUtilityClasses('MuiCard', ['root']);
        const _excluded$q = ["className", "raised"];
        const useUtilityClasses$l = ownerState => {
          const classes = ownerState.classes;
          const slots = {
            root: ["root"]
          };
          return composeClasses(slots, getCardUtilityClass, classes);
        };
        const CardRoot = styled$1(Paper$1, {
          name: "MuiCard",
          slot: "Root",
          overridesResolver: (props, styles) => styles.root
        })(() => {
          return {
            overflow: "hidden"
          };
        });
        const Card = /* @__PURE__ */reactExports.forwardRef(function Card2(inProps, ref) {
          const props = useThemeProps({
            props: inProps,
            name: "MuiCard"
          });
          const className = props.className,
            _props$raised = props.raised,
            raised = _props$raised === void 0 ? false : _props$raised,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$q);
          const ownerState = _extends({}, props, {
            raised
          });
          const classes = useUtilityClasses$l(ownerState);
          return /* @__PURE__ */jsxRuntimeExports.jsx(CardRoot, _extends({
            className: clsx(classes.root, className),
            elevation: raised ? 8 : void 0,
            ref,
            ownerState
          }, other));
        });
        const Card$1 = exports('bt', Card);
        function getCardMediaUtilityClass(slot) {
          return generateUtilityClass('MuiCardMedia', slot);
        }
        generateUtilityClasses('MuiCardMedia', ['root', 'media', 'img']);
        const _excluded$p = ["children", "className", "component", "image", "src", "style"];
        const useUtilityClasses$k = ownerState => {
          const classes = ownerState.classes,
            isMediaComponent = ownerState.isMediaComponent,
            isImageComponent = ownerState.isImageComponent;
          const slots = {
            root: ["root", isMediaComponent && "media", isImageComponent && "img"]
          };
          return composeClasses(slots, getCardMediaUtilityClass, classes);
        };
        const CardMediaRoot = styled$1("div", {
          name: "MuiCardMedia",
          slot: "Root",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            const isMediaComponent = ownerState.isMediaComponent,
              isImageComponent = ownerState.isImageComponent;
            return [styles.root, isMediaComponent && styles.media, isImageComponent && styles.img];
          }
        })(({
          ownerState
        }) => _extends({
          display: "block",
          backgroundSize: "cover",
          backgroundRepeat: "no-repeat",
          backgroundPosition: "center"
        }, ownerState.isMediaComponent && {
          width: "100%"
        }, ownerState.isImageComponent && {
          // ⚠️ object-fit is not supported by IE11.
          objectFit: "cover"
        }));
        const MEDIA_COMPONENTS = ["video", "audio", "picture", "iframe", "img"];
        const IMAGE_COMPONENTS = ["picture", "img"];
        const CardMedia = /* @__PURE__ */reactExports.forwardRef(function CardMedia2(inProps, ref) {
          const props = useThemeProps({
            props: inProps,
            name: "MuiCardMedia"
          });
          const children = props.children,
            className = props.className,
            _props$component6 = props.component,
            component = _props$component6 === void 0 ? "div" : _props$component6,
            image = props.image,
            src = props.src,
            style = props.style,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$p);
          const isMediaComponent = MEDIA_COMPONENTS.indexOf(component) !== -1;
          const composedStyle = !isMediaComponent && image ? _extends({
            backgroundImage: `url("${image}")`
          }, style) : style;
          const ownerState = _extends({}, props, {
            component,
            isMediaComponent,
            isImageComponent: IMAGE_COMPONENTS.indexOf(component) !== -1
          });
          const classes = useUtilityClasses$k(ownerState);
          return /* @__PURE__ */jsxRuntimeExports.jsx(CardMediaRoot, _extends({
            className: clsx(classes.root, className),
            as: component,
            role: !isMediaComponent && image ? "img" : void 0,
            ref,
            style: composedStyle,
            ownerState,
            src: isMediaComponent ? image || src : void 0
          }, other, {
            children
          }));
        });
        const CardMedia$1 = exports('cx', CardMedia);
        function getCircularProgressUtilityClass(slot) {
          return generateUtilityClass('MuiCircularProgress', slot);
        }
        generateUtilityClasses('MuiCircularProgress', ['root', 'determinate', 'indeterminate', 'colorPrimary', 'colorSecondary', 'svg', 'circle', 'circleDeterminate', 'circleIndeterminate', 'circleDisableShrink']);
        const _excluded$o = ["className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"];
        let _$1 = t => t,
          _t,
          _t2,
          _t3,
          _t4;
        const SIZE = 44;
        const circularRotateKeyframe = keyframes(_t || (_t = _$1`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`));
        const circularDashKeyframe = keyframes(_t2 || (_t2 = _$1`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`));
        const useUtilityClasses$j = ownerState => {
          const classes = ownerState.classes,
            variant = ownerState.variant,
            color = ownerState.color,
            disableShrink = ownerState.disableShrink;
          const slots = {
            root: ["root", variant, `color${capitalize(color)}`],
            svg: ["svg"],
            circle: ["circle", `circle${capitalize(variant)}`, disableShrink && "circleDisableShrink"]
          };
          return composeClasses(slots, getCircularProgressUtilityClass, classes);
        };
        const CircularProgressRoot = styled$1("span", {
          name: "MuiCircularProgress",
          slot: "Root",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [styles.root, styles[ownerState.variant], styles[`color${capitalize(ownerState.color)}`]];
          }
        })(({
          ownerState,
          theme
        }) => _extends({
          display: "inline-block"
        }, ownerState.variant === "determinate" && {
          transition: theme.transitions.create("transform")
        }, ownerState.color !== "inherit" && {
          color: (theme.vars || theme).palette[ownerState.color].main
        }), ({
          ownerState
        }) => ownerState.variant === "indeterminate" && css(_t3 || (_t3 = _$1`
      animation: ${0} 1.4s linear infinite;
    `), circularRotateKeyframe));
        const CircularProgressSVG = styled$1("svg", {
          name: "MuiCircularProgress",
          slot: "Svg",
          overridesResolver: (props, styles) => styles.svg
        })({
          display: "block"
          // Keeps the progress centered
        });
        const CircularProgressCircle = styled$1("circle", {
          name: "MuiCircularProgress",
          slot: "Circle",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [styles.circle, styles[`circle${capitalize(ownerState.variant)}`], ownerState.disableShrink && styles.circleDisableShrink];
          }
        })(({
          ownerState,
          theme
        }) => _extends({
          stroke: "currentColor"
        }, ownerState.variant === "determinate" && {
          transition: theme.transitions.create("stroke-dashoffset")
        }, ownerState.variant === "indeterminate" && {
          // Some default value that looks fine waiting for the animation to kicks in.
          strokeDasharray: "80px, 200px",
          strokeDashoffset: 0
          // Add the unit to fix a Edge 16 and below bug.
        }), ({
          ownerState
        }) => ownerState.variant === "indeterminate" && !ownerState.disableShrink && css(_t4 || (_t4 = _$1`
      animation: ${0} 1.4s ease-in-out infinite;
    `), circularDashKeyframe));
        const CircularProgress = /* @__PURE__ */reactExports.forwardRef(function CircularProgress2(inProps, ref) {
          const props = useThemeProps({
            props: inProps,
            name: "MuiCircularProgress"
          });
          const className = props.className,
            _props$color5 = props.color,
            color = _props$color5 === void 0 ? "primary" : _props$color5,
            _props$disableShrink = props.disableShrink,
            disableShrink = _props$disableShrink === void 0 ? false : _props$disableShrink,
            _props$size3 = props.size,
            size = _props$size3 === void 0 ? 40 : _props$size3,
            style = props.style,
            _props$thickness = props.thickness,
            thickness = _props$thickness === void 0 ? 3.6 : _props$thickness,
            _props$value = props.value,
            value = _props$value === void 0 ? 0 : _props$value,
            _props$variant4 = props.variant,
            variant = _props$variant4 === void 0 ? "indeterminate" : _props$variant4,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$o);
          const ownerState = _extends({}, props, {
            color,
            disableShrink,
            size,
            thickness,
            value,
            variant
          });
          const classes = useUtilityClasses$j(ownerState);
          const circleStyle = {};
          const rootStyle = {};
          const rootProps = {};
          if (variant === "determinate") {
            const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
            circleStyle.strokeDasharray = circumference.toFixed(3);
            rootProps["aria-valuenow"] = Math.round(value);
            circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;
            rootStyle.transform = "rotate(-90deg)";
          }
          return /* @__PURE__ */jsxRuntimeExports.jsx(CircularProgressRoot, _extends({
            className: clsx(classes.root, className),
            style: _extends({
              width: size,
              height: size
            }, rootStyle, style),
            ownerState,
            ref,
            role: "progressbar"
          }, rootProps, other, {
            children: /* @__PURE__ */jsxRuntimeExports.jsx(CircularProgressSVG, {
              className: classes.svg,
              ownerState,
              viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,
              children: /* @__PURE__ */jsxRuntimeExports.jsx(CircularProgressCircle, {
                className: classes.circle,
                style: circleStyle,
                ownerState,
                cx: SIZE,
                cy: SIZE,
                r: (SIZE - thickness) / 2,
                fill: "none",
                strokeWidth: thickness
              })
            })
          }));
        });
        const CircularProgress$1 = exports('an', CircularProgress);
        const _excluded$n = ["BackdropComponent", "BackdropProps", "classes", "className", "closeAfterTransition", "children", "container", "component", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "open", "slotProps", "slots", "theme"];
        const ModalRoot = styled$1("div", {
          name: "MuiModal",
          slot: "Root",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [styles.root, !ownerState.open && ownerState.exited && styles.hidden];
          }
        })(({
          theme,
          ownerState
        }) => _extends({
          position: "fixed",
          zIndex: (theme.vars || theme).zIndex.modal,
          right: 0,
          bottom: 0,
          top: 0,
          left: 0
        }, !ownerState.open && ownerState.exited && {
          visibility: "hidden"
        }));
        const ModalBackdrop = styled$1(Backdrop$1, {
          name: "MuiModal",
          slot: "Backdrop",
          overridesResolver: (props, styles) => {
            return styles.backdrop;
          }
        })({
          zIndex: -1
        });
        const Modal = /* @__PURE__ */reactExports.forwardRef(function Modal2(inProps, ref) {
          var _ref, _slots$root, _ref2, _slots$backdrop, _slotProps$root, _slotProps$backdrop;
          const props = useThemeProps({
            name: "MuiModal",
            props: inProps
          });
          const _props$BackdropCompon = props.BackdropComponent,
            BackdropComponent = _props$BackdropCompon === void 0 ? ModalBackdrop : _props$BackdropCompon,
            BackdropProps = props.BackdropProps,
            classes = props.classes,
            className = props.className,
            _props$closeAfterTran2 = props.closeAfterTransition,
            closeAfterTransition = _props$closeAfterTran2 === void 0 ? false : _props$closeAfterTran2,
            children = props.children,
            container = props.container,
            component = props.component,
            _props$components3 = props.components,
            components = _props$components3 === void 0 ? {} : _props$components3,
            _props$componentsProp3 = props.componentsProps,
            componentsProps = _props$componentsProp3 === void 0 ? {} : _props$componentsProp3,
            _props$disableAutoFoc3 = props.disableAutoFocus,
            disableAutoFocus = _props$disableAutoFoc3 === void 0 ? false : _props$disableAutoFoc3,
            _props$disableEnforce3 = props.disableEnforceFocus,
            disableEnforceFocus = _props$disableEnforce3 === void 0 ? false : _props$disableEnforce3,
            _props$disableEscapeK2 = props.disableEscapeKeyDown,
            disableEscapeKeyDown = _props$disableEscapeK2 === void 0 ? false : _props$disableEscapeK2,
            _props$disablePortal3 = props.disablePortal,
            disablePortal = _props$disablePortal3 === void 0 ? false : _props$disablePortal3,
            _props$disableRestore3 = props.disableRestoreFocus,
            disableRestoreFocus = _props$disableRestore3 === void 0 ? false : _props$disableRestore3,
            _props$disableScrollL2 = props.disableScrollLock,
            disableScrollLock = _props$disableScrollL2 === void 0 ? false : _props$disableScrollL2,
            _props$hideBackdrop2 = props.hideBackdrop,
            hideBackdrop = _props$hideBackdrop2 === void 0 ? false : _props$hideBackdrop2,
            _props$keepMounted2 = props.keepMounted,
            keepMounted = _props$keepMounted2 === void 0 ? false : _props$keepMounted2,
            onBackdropClick = props.onBackdropClick,
            onClose = props.onClose,
            open = props.open,
            slotProps = props.slotProps,
            slots = props.slots,
            theme = props.theme,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$n);
          const _reactExports$useStat23 = reactExports.useState(true),
            _reactExports$useStat24 = _slicedToArray2(_reactExports$useStat23, 2),
            exited = _reactExports$useStat24[0],
            setExited = _reactExports$useStat24[1];
          const commonProps = {
            container,
            closeAfterTransition,
            disableAutoFocus,
            disableEnforceFocus,
            disableEscapeKeyDown,
            disablePortal,
            disableRestoreFocus,
            disableScrollLock,
            hideBackdrop,
            keepMounted,
            onBackdropClick,
            onClose,
            open
          };
          const ownerState = _extends({}, props, commonProps, {
            exited
          });
          const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : ModalRoot;
          const BackdropSlot = (_ref2 = (_slots$backdrop = slots == null ? void 0 : slots.backdrop) != null ? _slots$backdrop : components.Backdrop) != null ? _ref2 : BackdropComponent;
          const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
          const backdropSlotProps = (_slotProps$backdrop = slotProps == null ? void 0 : slotProps.backdrop) != null ? _slotProps$backdrop : componentsProps.backdrop;
          return /* @__PURE__ */jsxRuntimeExports.jsx(Modal$2, _extends({
            slots: {
              root: RootSlot,
              backdrop: BackdropSlot
            },
            slotProps: {
              root: () => _extends({}, resolveComponentProps(rootSlotProps, ownerState), !isHostComponent(RootSlot) && {
                as: component,
                theme
              }, {
                className: clsx(className, rootSlotProps == null ? void 0 : rootSlotProps.className, classes == null ? void 0 : classes.root, !ownerState.open && ownerState.exited && (classes == null ? void 0 : classes.hidden))
              }),
              backdrop: () => _extends({}, BackdropProps, resolveComponentProps(backdropSlotProps, ownerState), {
                className: clsx(backdropSlotProps == null ? void 0 : backdropSlotProps.className, BackdropProps == null ? void 0 : BackdropProps.className, classes == null ? void 0 : classes.backdrop)
              })
            },
            onTransitionEnter: () => setExited(false),
            onTransitionExited: () => setExited(true),
            ref
          }, other, commonProps, {
            children
          }));
        });
        const Modal$1 = exports('$', Modal);
        function getDialogUtilityClass(slot) {
          return generateUtilityClass('MuiDialog', slot);
        }
        const dialogClasses = generateUtilityClasses('MuiDialog', ['root', 'scrollPaper', 'scrollBody', 'container', 'paper', 'paperScrollPaper', 'paperScrollBody', 'paperWidthFalse', 'paperWidthXs', 'paperWidthSm', 'paperWidthMd', 'paperWidthLg', 'paperWidthXl', 'paperFullWidth', 'paperFullScreen']);
        const dialogClasses$1 = exports('b3', dialogClasses);
        const DialogContext = /* @__PURE__ */reactExports.createContext({});
        const DialogContext$1 = DialogContext;
        const _excluded$m = ["aria-describedby", "aria-labelledby", "BackdropComponent", "BackdropProps", "children", "className", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClose", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps"];
        const DialogBackdrop = styled$1(Backdrop$1, {
          name: "MuiDialog",
          slot: "Backdrop",
          overrides: (props, styles) => styles.backdrop
        })({
          // Improve scrollable dialog support.
          zIndex: -1
        });
        const useUtilityClasses$i = ownerState => {
          const classes = ownerState.classes,
            scroll = ownerState.scroll,
            maxWidth = ownerState.maxWidth,
            fullWidth = ownerState.fullWidth,
            fullScreen = ownerState.fullScreen;
          const slots = {
            root: ["root"],
            container: ["container", `scroll${capitalize(scroll)}`],
            paper: ["paper", `paperScroll${capitalize(scroll)}`, `paperWidth${capitalize(String(maxWidth))}`, fullWidth && "paperFullWidth", fullScreen && "paperFullScreen"]
          };
          return composeClasses(slots, getDialogUtilityClass, classes);
        };
        const DialogRoot = styled$1(Modal$1, {
          name: "MuiDialog",
          slot: "Root",
          overridesResolver: (props, styles) => styles.root
        })({
          "@media print": {
            // Use !important to override the Modal inline-style.
            position: "absolute !important"
          }
        });
        const DialogContainer = styled$1("div", {
          name: "MuiDialog",
          slot: "Container",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [styles.container, styles[`scroll${capitalize(ownerState.scroll)}`]];
          }
        })(({
          ownerState
        }) => _extends({
          height: "100%",
          "@media print": {
            height: "auto"
          },
          // We disable the focus ring for mouse, touch and keyboard users.
          outline: 0
        }, ownerState.scroll === "paper" && {
          display: "flex",
          justifyContent: "center",
          alignItems: "center"
        }, ownerState.scroll === "body" && {
          overflowY: "auto",
          overflowX: "hidden",
          textAlign: "center",
          "&:after": {
            content: '""',
            display: "inline-block",
            verticalAlign: "middle",
            height: "100%",
            width: "0"
          }
        }));
        const DialogPaper = styled$1(Paper$1, {
          name: "MuiDialog",
          slot: "Paper",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [styles.paper, styles[`scrollPaper${capitalize(ownerState.scroll)}`], styles[`paperWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fullWidth && styles.paperFullWidth, ownerState.fullScreen && styles.paperFullScreen];
          }
        })(({
          theme,
          ownerState
        }) => _extends({
          margin: 32,
          position: "relative",
          overflowY: "auto",
          // Fix IE11 issue, to remove at some point.
          "@media print": {
            overflowY: "visible",
            boxShadow: "none"
          }
        }, ownerState.scroll === "paper" && {
          display: "flex",
          flexDirection: "column",
          maxHeight: "calc(100% - 64px)"
        }, ownerState.scroll === "body" && {
          display: "inline-block",
          verticalAlign: "middle",
          textAlign: "left"
          // 'initial' doesn't work on IE11
        }, !ownerState.maxWidth && {
          maxWidth: "calc(100% - 64px)"
        }, ownerState.maxWidth === "xs" && {
          maxWidth: theme.breakpoints.unit === "px" ? Math.max(theme.breakpoints.values.xs, 444) : `max(${theme.breakpoints.values.xs}${theme.breakpoints.unit}, 444px)`,
          [`&.${dialogClasses$1.paperScrollBody}`]: {
            [theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 444) + 32 * 2)]: {
              maxWidth: "calc(100% - 64px)"
            }
          }
        }, ownerState.maxWidth && ownerState.maxWidth !== "xs" && {
          maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`,
          [`&.${dialogClasses$1.paperScrollBody}`]: {
            [theme.breakpoints.down(theme.breakpoints.values[ownerState.maxWidth] + 32 * 2)]: {
              maxWidth: "calc(100% - 64px)"
            }
          }
        }, ownerState.fullWidth && {
          width: "calc(100% - 64px)"
        }, ownerState.fullScreen && {
          margin: 0,
          width: "100%",
          maxWidth: "100%",
          height: "100%",
          maxHeight: "none",
          borderRadius: 0,
          [`&.${dialogClasses$1.paperScrollBody}`]: {
            margin: 0,
            maxWidth: "100%"
          }
        }));
        const Dialog = /* @__PURE__ */reactExports.forwardRef(function Dialog2(inProps, ref) {
          const props = useThemeProps({
            props: inProps,
            name: "MuiDialog"
          });
          const theme = useTheme();
          const defaultTransitionDuration = {
            enter: theme.transitions.duration.enteringScreen,
            exit: theme.transitions.duration.leavingScreen
          };
          const ariaDescribedby = props["aria-describedby"],
            ariaLabelledbyProp = props["aria-labelledby"],
            BackdropComponent = props.BackdropComponent,
            BackdropProps = props.BackdropProps,
            children = props.children,
            className = props.className,
            _props$disableEscapeK3 = props.disableEscapeKeyDown,
            disableEscapeKeyDown = _props$disableEscapeK3 === void 0 ? false : _props$disableEscapeK3,
            _props$fullScreen = props.fullScreen,
            fullScreen = _props$fullScreen === void 0 ? false : _props$fullScreen,
            _props$fullWidth3 = props.fullWidth,
            fullWidth = _props$fullWidth3 === void 0 ? false : _props$fullWidth3,
            _props$maxWidth = props.maxWidth,
            maxWidth = _props$maxWidth === void 0 ? "sm" : _props$maxWidth,
            onBackdropClick = props.onBackdropClick,
            onClose = props.onClose,
            open = props.open,
            _props$PaperComponent = props.PaperComponent,
            PaperComponent = _props$PaperComponent === void 0 ? Paper$1 : _props$PaperComponent,
            _props$PaperProps = props.PaperProps,
            PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,
            _props$scroll = props.scroll,
            scroll = _props$scroll === void 0 ? "paper" : _props$scroll,
            _props$TransitionComp3 = props.TransitionComponent,
            TransitionComponent = _props$TransitionComp3 === void 0 ? Fade$1 : _props$TransitionComp3,
            _props$transitionDura = props.transitionDuration,
            transitionDuration = _props$transitionDura === void 0 ? defaultTransitionDuration : _props$transitionDura,
            TransitionProps = props.TransitionProps,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$m);
          const ownerState = _extends({}, props, {
            disableEscapeKeyDown,
            fullScreen,
            fullWidth,
            maxWidth,
            scroll
          });
          const classes = useUtilityClasses$i(ownerState);
          const backdropClick = reactExports.useRef();
          const handleMouseDown = event => {
            backdropClick.current = event.target === event.currentTarget;
          };
          const handleBackdropClick = event => {
            if (!backdropClick.current) {
              return;
            }
            backdropClick.current = null;
            if (onBackdropClick) {
              onBackdropClick(event);
            }
            if (onClose) {
              onClose(event, "backdropClick");
            }
          };
          const ariaLabelledby = useId(ariaLabelledbyProp);
          const dialogContextValue = reactExports.useMemo(() => {
            return {
              titleId: ariaLabelledby
            };
          }, [ariaLabelledby]);
          return /* @__PURE__ */jsxRuntimeExports.jsx(DialogRoot, _extends({
            className: clsx(classes.root, className),
            closeAfterTransition: true,
            components: {
              Backdrop: DialogBackdrop
            },
            componentsProps: {
              backdrop: _extends({
                transitionDuration,
                as: BackdropComponent
              }, BackdropProps)
            },
            disableEscapeKeyDown,
            onClose,
            open,
            ref,
            onClick: handleBackdropClick,
            ownerState
          }, other, {
            children: /* @__PURE__ */jsxRuntimeExports.jsx(TransitionComponent, _extends({
              appear: true,
              in: open,
              timeout: transitionDuration,
              role: "presentation"
            }, TransitionProps, {
              children: /* @__PURE__ */jsxRuntimeExports.jsx(DialogContainer, {
                className: clsx(classes.container),
                onMouseDown: handleMouseDown,
                ownerState,
                children: /* @__PURE__ */jsxRuntimeExports.jsx(DialogPaper, _extends({
                  as: PaperComponent,
                  elevation: 24,
                  role: "dialog",
                  "aria-describedby": ariaDescribedby,
                  "aria-labelledby": ariaLabelledby
                }, PaperProps, {
                  className: clsx(classes.paper, PaperProps.className),
                  ownerState,
                  children: /* @__PURE__ */jsxRuntimeExports.jsx(DialogContext$1.Provider, {
                    value: dialogContextValue,
                    children
                  })
                }))
              })
            }))
          }));
        });
        const Dialog$1 = exports('aa', Dialog);
        function getDialogActionsUtilityClass(slot) {
          return generateUtilityClass('MuiDialogActions', slot);
        }
        generateUtilityClasses('MuiDialogActions', ['root', 'spacing']);
        const _excluded$l = ["className", "disableSpacing"];
        const useUtilityClasses$h = ownerState => {
          const classes = ownerState.classes,
            disableSpacing = ownerState.disableSpacing;
          const slots = {
            root: ["root", !disableSpacing && "spacing"]
          };
          return composeClasses(slots, getDialogActionsUtilityClass, classes);
        };
        const DialogActionsRoot = styled$1("div", {
          name: "MuiDialogActions",
          slot: "Root",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [styles.root, !ownerState.disableSpacing && styles.spacing];
          }
        })(({
          ownerState
        }) => _extends({
          display: "flex",
          alignItems: "center",
          padding: 8,
          justifyContent: "flex-end",
          flex: "0 0 auto"
        }, !ownerState.disableSpacing && {
          "& > :not(:first-of-type)": {
            marginLeft: 8
          }
        }));
        const DialogActions = /* @__PURE__ */reactExports.forwardRef(function DialogActions2(inProps, ref) {
          const props = useThemeProps({
            props: inProps,
            name: "MuiDialogActions"
          });
          const className = props.className,
            _props$disableSpacing = props.disableSpacing,
            disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$l);
          const ownerState = _extends({}, props, {
            disableSpacing
          });
          const classes = useUtilityClasses$h(ownerState);
          return /* @__PURE__ */jsxRuntimeExports.jsx(DialogActionsRoot, _extends({
            className: clsx(classes.root, className),
            ownerState,
            ref
          }, other));
        });
        const DialogActions$1 = exports('aY', DialogActions);
        function getDialogContentUtilityClass(slot) {
          return generateUtilityClass('MuiDialogContent', slot);
        }
        generateUtilityClasses('MuiDialogContent', ['root', 'dividers']);
        function getDialogTitleUtilityClass(slot) {
          return generateUtilityClass('MuiDialogTitle', slot);
        }
        const dialogTitleClasses = generateUtilityClasses('MuiDialogTitle', ['root']);
        const dialogTitleClasses$1 = dialogTitleClasses;
        const _excluded$k = ["className", "dividers"];
        const useUtilityClasses$g = ownerState => {
          const classes = ownerState.classes,
            dividers = ownerState.dividers;
          const slots = {
            root: ["root", dividers && "dividers"]
          };
          return composeClasses(slots, getDialogContentUtilityClass, classes);
        };
        const DialogContentRoot = styled$1("div", {
          name: "MuiDialogContent",
          slot: "Root",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [styles.root, ownerState.dividers && styles.dividers];
          }
        })(({
          theme,
          ownerState
        }) => _extends({
          flex: "1 1 auto",
          // Add iOS momentum scrolling for iOS < 13.0
          WebkitOverflowScrolling: "touch",
          overflowY: "auto",
          padding: "20px 24px"
        }, ownerState.dividers ? {
          padding: "16px 24px",
          borderTop: `1px solid ${(theme.vars || theme).palette.divider}`,
          borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
        } : {
          [`.${dialogTitleClasses$1.root} + &`]: {
            paddingTop: 0
          }
        }));
        const DialogContent = /* @__PURE__ */reactExports.forwardRef(function DialogContent2(inProps, ref) {
          const props = useThemeProps({
            props: inProps,
            name: "MuiDialogContent"
          });
          const className = props.className,
            _props$dividers = props.dividers,
            dividers = _props$dividers === void 0 ? false : _props$dividers,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$k);
          const ownerState = _extends({}, props, {
            dividers
          });
          const classes = useUtilityClasses$g(ownerState);
          return /* @__PURE__ */jsxRuntimeExports.jsx(DialogContentRoot, _extends({
            className: clsx(classes.root, className),
            ownerState,
            ref
          }, other));
        });
        const DialogContent$1 = exports('ac', DialogContent);
        const _excluded$j = ["className", "id"];
        const useUtilityClasses$f = ownerState => {
          const classes = ownerState.classes;
          const slots = {
            root: ["root"]
          };
          return composeClasses(slots, getDialogTitleUtilityClass, classes);
        };
        const DialogTitleRoot = styled$1(Typography$1, {
          name: "MuiDialogTitle",
          slot: "Root",
          overridesResolver: (props, styles) => styles.root
        })({
          padding: "16px 24px",
          flex: "0 0 auto"
        });
        const DialogTitle = /* @__PURE__ */reactExports.forwardRef(function DialogTitle2(inProps, ref) {
          const props = useThemeProps({
            props: inProps,
            name: "MuiDialogTitle"
          });
          const className = props.className,
            idProp = props.id,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$j);
          const ownerState = props;
          const classes = useUtilityClasses$f(ownerState);
          const _reactExports$useCont12 = reactExports.useContext(DialogContext$1),
            _reactExports$useCont13 = _reactExports$useCont12.titleId,
            titleId = _reactExports$useCont13 === void 0 ? idProp : _reactExports$useCont13;
          return /* @__PURE__ */jsxRuntimeExports.jsx(DialogTitleRoot, _extends({
            component: "h2",
            className: clsx(classes.root, className),
            ownerState,
            ref,
            variant: "h6",
            id: idProp != null ? idProp : titleId
          }, other));
        });
        const DialogTitle$1 = exports('ab', DialogTitle);
        const dividerClasses = generateUtilityClasses('MuiDivider', ['root', 'absolute', 'fullWidth', 'inset', 'middle', 'flexItem', 'light', 'vertical', 'withChildren', 'withChildrenVertical', 'textAlignRight', 'textAlignLeft', 'wrapper', 'wrapperVertical']);
        const dividerClasses$1 = dividerClasses;
        const _excluded$i = ["addEndListener", "appear", "children", "container", "direction", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
        function getTranslateValue(direction, node, resolvedContainer) {
          const rect = node.getBoundingClientRect();
          const containerRect = resolvedContainer && resolvedContainer.getBoundingClientRect();
          const containerWindow = ownerWindow(node);
          let transform;
          if (node.fakeTransform) {
            transform = node.fakeTransform;
          } else {
            const computedStyle = containerWindow.getComputedStyle(node);
            transform = computedStyle.getPropertyValue("-webkit-transform") || computedStyle.getPropertyValue("transform");
          }
          let offsetX = 0;
          let offsetY = 0;
          if (transform && transform !== "none" && typeof transform === "string") {
            const transformValues = transform.split("(")[1].split(")")[0].split(",");
            offsetX = parseInt(transformValues[4], 10);
            offsetY = parseInt(transformValues[5], 10);
          }
          if (direction === "left") {
            if (containerRect) {
              return `translateX(${containerRect.right + offsetX - rect.left}px)`;
            }
            return `translateX(${containerWindow.innerWidth + offsetX - rect.left}px)`;
          }
          if (direction === "right") {
            if (containerRect) {
              return `translateX(-${rect.right - containerRect.left - offsetX}px)`;
            }
            return `translateX(-${rect.left + rect.width - offsetX}px)`;
          }
          if (direction === "up") {
            if (containerRect) {
              return `translateY(${containerRect.bottom + offsetY - rect.top}px)`;
            }
            return `translateY(${containerWindow.innerHeight + offsetY - rect.top}px)`;
          }
          if (containerRect) {
            return `translateY(-${rect.top - containerRect.top + rect.height - offsetY}px)`;
          }
          return `translateY(-${rect.top + rect.height - offsetY}px)`;
        }
        function resolveContainer(containerPropProp) {
          return typeof containerPropProp === "function" ? containerPropProp() : containerPropProp;
        }
        function setTranslateValue(direction, node, containerProp) {
          const resolvedContainer = resolveContainer(containerProp);
          const transform = getTranslateValue(direction, node, resolvedContainer);
          if (transform) {
            node.style.webkitTransform = transform;
            node.style.transform = transform;
          }
        }
        const Slide = /* @__PURE__ */reactExports.forwardRef(function Slide2(props, ref) {
          const theme = useTheme();
          const defaultEasing = {
            enter: theme.transitions.easing.easeOut,
            exit: theme.transitions.easing.sharp
          };
          const defaultTimeout = {
            enter: theme.transitions.duration.enteringScreen,
            exit: theme.transitions.duration.leavingScreen
          };
          const addEndListener = props.addEndListener,
            _props$appear2 = props.appear,
            appear = _props$appear2 === void 0 ? true : _props$appear2,
            _children2 = props.children,
            containerProp = props.container,
            _props$direction = props.direction,
            direction = _props$direction === void 0 ? "down" : _props$direction,
            _props$easing = props.easing,
            easingProp = _props$easing === void 0 ? defaultEasing : _props$easing,
            inProp = props.in,
            onEnter = props.onEnter,
            onEntered = props.onEntered,
            onEntering = props.onEntering,
            onExit = props.onExit,
            onExited = props.onExited,
            onExiting = props.onExiting,
            style = props.style,
            _props$timeout2 = props.timeout,
            timeout = _props$timeout2 === void 0 ? defaultTimeout : _props$timeout2,
            _props$TransitionComp4 = props.TransitionComponent,
            TransitionComponent = _props$TransitionComp4 === void 0 ? Transition$1 : _props$TransitionComp4,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$i);
          const childrenRef = reactExports.useRef(null);
          const handleRef = useForkRef(_children2.ref, childrenRef, ref);
          const normalizedTransitionCallback = callback => isAppearing => {
            if (callback) {
              if (isAppearing === void 0) {
                callback(childrenRef.current);
              } else {
                callback(childrenRef.current, isAppearing);
              }
            }
          };
          const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
            setTranslateValue(direction, node, containerProp);
            reflow(node);
            if (onEnter) {
              onEnter(node, isAppearing);
            }
          });
          const handleEntering = normalizedTransitionCallback((node, isAppearing) => {
            const transitionProps = getTransitionProps({
              timeout,
              style,
              easing: easingProp
            }, {
              mode: "enter"
            });
            node.style.webkitTransition = theme.transitions.create("-webkit-transform", _extends({}, transitionProps));
            node.style.transition = theme.transitions.create("transform", _extends({}, transitionProps));
            node.style.webkitTransform = "none";
            node.style.transform = "none";
            if (onEntering) {
              onEntering(node, isAppearing);
            }
          });
          const handleEntered = normalizedTransitionCallback(onEntered);
          const handleExiting = normalizedTransitionCallback(onExiting);
          const handleExit = normalizedTransitionCallback(node => {
            const transitionProps = getTransitionProps({
              timeout,
              style,
              easing: easingProp
            }, {
              mode: "exit"
            });
            node.style.webkitTransition = theme.transitions.create("-webkit-transform", transitionProps);
            node.style.transition = theme.transitions.create("transform", transitionProps);
            setTranslateValue(direction, node, containerProp);
            if (onExit) {
              onExit(node);
            }
          });
          const handleExited = normalizedTransitionCallback(node => {
            node.style.webkitTransition = "";
            node.style.transition = "";
            if (onExited) {
              onExited(node);
            }
          });
          const handleAddEndListener = next => {
            if (addEndListener) {
              addEndListener(childrenRef.current, next);
            }
          };
          const updatePosition = reactExports.useCallback(() => {
            if (childrenRef.current) {
              setTranslateValue(direction, childrenRef.current, containerProp);
            }
          }, [direction, containerProp]);
          reactExports.useEffect(() => {
            if (inProp || direction === "down" || direction === "right") {
              return void 0;
            }
            const handleResize = debounce(() => {
              if (childrenRef.current) {
                setTranslateValue(direction, childrenRef.current, containerProp);
              }
            });
            const containerWindow = ownerWindow(childrenRef.current);
            containerWindow.addEventListener("resize", handleResize);
            return () => {
              handleResize.clear();
              containerWindow.removeEventListener("resize", handleResize);
            };
          }, [direction, inProp, containerProp]);
          reactExports.useEffect(() => {
            if (!inProp) {
              updatePosition();
            }
          }, [inProp, updatePosition]);
          return /* @__PURE__ */jsxRuntimeExports.jsx(TransitionComponent, _extends({
            nodeRef: childrenRef,
            onEnter: handleEnter,
            onEntered: handleEntered,
            onEntering: handleEntering,
            onExit: handleExit,
            onExited: handleExited,
            onExiting: handleExiting,
            addEndListener: handleAddEndListener,
            appear,
            in: inProp,
            timeout
          }, other, {
            children: (state, childProps) => {
              return /* @__PURE__ */reactExports.cloneElement(_children2, _extends({
                ref: handleRef,
                style: _extends({
                  visibility: state === "exited" && !inProp ? "hidden" : void 0
                }, style, _children2.props.style)
              }, childProps));
            }
          }));
        });
        const Slide$1 = exports('cz', Slide);
        function getDrawerUtilityClass(slot) {
          return generateUtilityClass('MuiDrawer', slot);
        }
        generateUtilityClasses('MuiDrawer', ['root', 'docked', 'paper', 'paperAnchorLeft', 'paperAnchorRight', 'paperAnchorTop', 'paperAnchorBottom', 'paperAnchorDockedLeft', 'paperAnchorDockedRight', 'paperAnchorDockedTop', 'paperAnchorDockedBottom', 'modal']);
        const _excluded$h = ["BackdropProps"],
          _excluded2$2 = ["anchor", "BackdropProps", "children", "className", "elevation", "hideBackdrop", "ModalProps", "onClose", "open", "PaperProps", "SlideProps", "TransitionComponent", "transitionDuration", "variant"];
        const overridesResolver$1 = (props, styles) => {
          const ownerState = props.ownerState;
          return [styles.root, (ownerState.variant === "permanent" || ownerState.variant === "persistent") && styles.docked, styles.modal];
        };
        const useUtilityClasses$e = ownerState => {
          const classes = ownerState.classes,
            anchor = ownerState.anchor,
            variant = ownerState.variant;
          const slots = {
            root: ["root"],
            docked: [(variant === "permanent" || variant === "persistent") && "docked"],
            modal: ["modal"],
            paper: ["paper", `paperAnchor${capitalize(anchor)}`, variant !== "temporary" && `paperAnchorDocked${capitalize(anchor)}`]
          };
          return composeClasses(slots, getDrawerUtilityClass, classes);
        };
        const DrawerRoot = styled$1(Modal$1, {
          name: "MuiDrawer",
          slot: "Root",
          overridesResolver: overridesResolver$1
        })(({
          theme
        }) => ({
          zIndex: (theme.vars || theme).zIndex.drawer
        }));
        const DrawerDockedRoot = styled$1("div", {
          shouldForwardProp: rootShouldForwardProp,
          name: "MuiDrawer",
          slot: "Docked",
          skipVariantsResolver: false,
          overridesResolver: overridesResolver$1
        })({
          flex: "0 0 auto"
        });
        const DrawerPaper = styled$1(Paper$1, {
          name: "MuiDrawer",
          slot: "Paper",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [styles.paper, styles[`paperAnchor${capitalize(ownerState.anchor)}`], ownerState.variant !== "temporary" && styles[`paperAnchorDocked${capitalize(ownerState.anchor)}`]];
          }
        })(({
          theme,
          ownerState
        }) => _extends({
          overflowY: "auto",
          display: "flex",
          flexDirection: "column",
          height: "100%",
          flex: "1 0 auto",
          zIndex: (theme.vars || theme).zIndex.drawer,
          // Add iOS momentum scrolling for iOS < 13.0
          WebkitOverflowScrolling: "touch",
          // temporary style
          position: "fixed",
          top: 0,
          // We disable the focus ring for mouse, touch and keyboard users.
          // At some point, it would be better to keep it for keyboard users.
          // :focus-ring CSS pseudo-class will help.
          outline: 0
        }, ownerState.anchor === "left" && {
          left: 0
        }, ownerState.anchor === "top" && {
          top: 0,
          left: 0,
          right: 0,
          height: "auto",
          maxHeight: "100%"
        }, ownerState.anchor === "right" && {
          right: 0
        }, ownerState.anchor === "bottom" && {
          top: "auto",
          left: 0,
          bottom: 0,
          right: 0,
          height: "auto",
          maxHeight: "100%"
        }, ownerState.anchor === "left" && ownerState.variant !== "temporary" && {
          borderRight: `1px solid ${(theme.vars || theme).palette.divider}`
        }, ownerState.anchor === "top" && ownerState.variant !== "temporary" && {
          borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
        }, ownerState.anchor === "right" && ownerState.variant !== "temporary" && {
          borderLeft: `1px solid ${(theme.vars || theme).palette.divider}`
        }, ownerState.anchor === "bottom" && ownerState.variant !== "temporary" && {
          borderTop: `1px solid ${(theme.vars || theme).palette.divider}`
        }));
        const oppositeDirection = {
          left: "right",
          right: "left",
          top: "down",
          bottom: "up"
        };
        function isHorizontal(anchor) {
          return ["left", "right"].indexOf(anchor) !== -1;
        }
        function getAnchor(theme, anchor) {
          return theme.direction === "rtl" && isHorizontal(anchor) ? oppositeDirection[anchor] : anchor;
        }
        const Drawer = /* @__PURE__ */reactExports.forwardRef(function Drawer2(inProps, ref) {
          const props = useThemeProps({
            props: inProps,
            name: "MuiDrawer"
          });
          const theme = useTheme();
          const defaultTransitionDuration = {
            enter: theme.transitions.duration.enteringScreen,
            exit: theme.transitions.duration.leavingScreen
          };
          const _props$anchor = props.anchor,
            anchorProp = _props$anchor === void 0 ? "left" : _props$anchor,
            BackdropProps = props.BackdropProps,
            children = props.children,
            className = props.className,
            _props$elevation2 = props.elevation,
            elevation = _props$elevation2 === void 0 ? 16 : _props$elevation2,
            _props$hideBackdrop3 = props.hideBackdrop,
            hideBackdrop = _props$hideBackdrop3 === void 0 ? false : _props$hideBackdrop3,
            _props$ModalProps = props.ModalProps,
            _props$ModalProps2 = _props$ModalProps === void 0 ? {} : _props$ModalProps,
            BackdropPropsProp = _props$ModalProps2.BackdropProps,
            onClose = props.onClose,
            _props$open = props.open,
            open = _props$open === void 0 ? false : _props$open,
            _props$PaperProps2 = props.PaperProps,
            PaperProps = _props$PaperProps2 === void 0 ? {} : _props$PaperProps2,
            SlideProps = props.SlideProps,
            _props$TransitionComp5 = props.TransitionComponent,
            TransitionComponent = _props$TransitionComp5 === void 0 ? Slide$1 : _props$TransitionComp5,
            _props$transitionDura2 = props.transitionDuration,
            transitionDuration = _props$transitionDura2 === void 0 ? defaultTransitionDuration : _props$transitionDura2,
            _props$variant5 = props.variant,
            variant = _props$variant5 === void 0 ? "temporary" : _props$variant5,
            ModalProps = _objectWithoutPropertiesLoose$2(props.ModalProps, _excluded$h),
            other = _objectWithoutPropertiesLoose$2(props, _excluded2$2);
          const mounted = reactExports.useRef(false);
          reactExports.useEffect(() => {
            mounted.current = true;
          }, []);
          const anchorInvariant = getAnchor(theme, anchorProp);
          const anchor = anchorProp;
          const ownerState = _extends({}, props, {
            anchor,
            elevation,
            open,
            variant
          }, other);
          const classes = useUtilityClasses$e(ownerState);
          const drawer = /* @__PURE__ */jsxRuntimeExports.jsx(DrawerPaper, _extends({
            elevation: variant === "temporary" ? elevation : 0,
            square: true
          }, PaperProps, {
            className: clsx(classes.paper, PaperProps.className),
            ownerState,
            children
          }));
          if (variant === "permanent") {
            return /* @__PURE__ */jsxRuntimeExports.jsx(DrawerDockedRoot, _extends({
              className: clsx(classes.root, classes.docked, className),
              ownerState,
              ref
            }, other, {
              children: drawer
            }));
          }
          const slidingDrawer = /* @__PURE__ */jsxRuntimeExports.jsx(TransitionComponent, _extends({
            in: open,
            direction: oppositeDirection[anchorInvariant],
            timeout: transitionDuration,
            appear: mounted.current
          }, SlideProps, {
            children: drawer
          }));
          if (variant === "persistent") {
            return /* @__PURE__ */jsxRuntimeExports.jsx(DrawerDockedRoot, _extends({
              className: clsx(classes.root, classes.docked, className),
              ownerState,
              ref
            }, other, {
              children: slidingDrawer
            }));
          }
          return /* @__PURE__ */jsxRuntimeExports.jsx(DrawerRoot, _extends({
            BackdropProps: _extends({}, BackdropProps, BackdropPropsProp, {
              transitionDuration
            }),
            className: clsx(classes.root, classes.modal, className),
            open,
            ownerState,
            onClose,
            hideBackdrop,
            ref
          }, other, ModalProps, {
            children: slidingDrawer
          }));
        });
        const Drawer$1 = Drawer;
        const _excluded$g = ["disableUnderline", "components", "componentsProps", "fullWidth", "hiddenLabel", "inputComponent", "multiline", "slotProps", "slots", "type"];
        const useUtilityClasses$d = ownerState => {
          const classes = ownerState.classes,
            disableUnderline = ownerState.disableUnderline;
          const slots = {
            root: ["root", !disableUnderline && "underline"],
            input: ["input"]
          };
          const composedClasses = composeClasses(slots, getFilledInputUtilityClass, classes);
          return _extends({}, classes, composedClasses);
        };
        const FilledInputRoot = styled$1(InputBaseRoot, {
          shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === "classes",
          name: "MuiFilledInput",
          slot: "Root",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [...rootOverridesResolver(props, styles), !ownerState.disableUnderline && styles.underline];
          }
        })(({
          theme,
          ownerState
        }) => {
          var _palette;
          const light = theme.palette.mode === "light";
          const bottomLineColor = light ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
          const backgroundColor = light ? "rgba(0, 0, 0, 0.06)" : "rgba(255, 255, 255, 0.09)";
          const hoverBackground = light ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.13)";
          const disabledBackground = light ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)";
          return _extends({
            position: "relative",
            backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor,
            borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
            borderTopRightRadius: (theme.vars || theme).shape.borderRadius,
            transition: theme.transitions.create("background-color", {
              duration: theme.transitions.duration.shorter,
              easing: theme.transitions.easing.easeOut
            }),
            "&:hover": {
              backgroundColor: theme.vars ? theme.vars.palette.FilledInput.hoverBg : hoverBackground,
              // Reset on touch devices, it doesn't add specificity
              "@media (hover: none)": {
                backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor
              }
            },
            [`&.${filledInputClasses$1.focused}`]: {
              backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor
            },
            [`&.${filledInputClasses$1.disabled}`]: {
              backgroundColor: theme.vars ? theme.vars.palette.FilledInput.disabledBg : disabledBackground
            }
          }, !ownerState.disableUnderline && {
            "&:after": {
              borderBottom: `2px solid ${(_palette = (theme.vars || theme).palette[ownerState.color || "primary"]) == null ? void 0 : _palette.main}`,
              left: 0,
              bottom: 0,
              // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
              content: '""',
              position: "absolute",
              right: 0,
              transform: "scaleX(0)",
              transition: theme.transitions.create("transform", {
                duration: theme.transitions.duration.shorter,
                easing: theme.transitions.easing.easeOut
              }),
              pointerEvents: "none"
              // Transparent to the hover style.
            },
            [`&.${filledInputClasses$1.focused}:after`]: {
              // translateX(0) is a workaround for Safari transform scale bug
              // See https://github.com/mui/material-ui/issues/31766
              transform: "scaleX(1) translateX(0)"
            },
            [`&.${filledInputClasses$1.error}`]: {
              "&:before, &:after": {
                borderBottomColor: (theme.vars || theme).palette.error.main
              }
            },
            "&:before": {
              borderBottom: `1px solid ${theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})` : bottomLineColor}`,
              left: 0,
              bottom: 0,
              // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
              content: '"\\00a0"',
              position: "absolute",
              right: 0,
              transition: theme.transitions.create("border-bottom-color", {
                duration: theme.transitions.duration.shorter
              }),
              pointerEvents: "none"
              // Transparent to the hover style.
            },
            [`&:hover:not(.${filledInputClasses$1.disabled}, .${filledInputClasses$1.error}):before`]: {
              borderBottom: `1px solid ${(theme.vars || theme).palette.text.primary}`
            },
            [`&.${filledInputClasses$1.disabled}:before`]: {
              borderBottomStyle: "dotted"
            }
          }, ownerState.startAdornment && {
            paddingLeft: 12
          }, ownerState.endAdornment && {
            paddingRight: 12
          }, ownerState.multiline && _extends({
            padding: "25px 12px 8px"
          }, ownerState.size === "small" && {
            paddingTop: 21,
            paddingBottom: 4
          }, ownerState.hiddenLabel && {
            paddingTop: 16,
            paddingBottom: 17
          }));
        });
        const FilledInputInput = styled$1(InputBaseComponent, {
          name: "MuiFilledInput",
          slot: "Input",
          overridesResolver: inputOverridesResolver
        })(({
          theme,
          ownerState
        }) => _extends({
          paddingTop: 25,
          paddingRight: 12,
          paddingBottom: 8,
          paddingLeft: 12
        }, !theme.vars && {
          "&:-webkit-autofill": {
            WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
            WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
            caretColor: theme.palette.mode === "light" ? null : "#fff",
            borderTopLeftRadius: "inherit",
            borderTopRightRadius: "inherit"
          }
        }, theme.vars && {
          "&:-webkit-autofill": {
            borderTopLeftRadius: "inherit",
            borderTopRightRadius: "inherit"
          },
          [theme.getColorSchemeSelector("dark")]: {
            "&:-webkit-autofill": {
              WebkitBoxShadow: "0 0 0 100px #266798 inset",
              WebkitTextFillColor: "#fff",
              caretColor: "#fff"
            }
          }
        }, ownerState.size === "small" && {
          paddingTop: 21,
          paddingBottom: 4
        }, ownerState.hiddenLabel && {
          paddingTop: 16,
          paddingBottom: 17
        }, ownerState.multiline && {
          paddingTop: 0,
          paddingBottom: 0,
          paddingLeft: 0,
          paddingRight: 0
        }, ownerState.startAdornment && {
          paddingLeft: 0
        }, ownerState.endAdornment && {
          paddingRight: 0
        }, ownerState.hiddenLabel && ownerState.size === "small" && {
          paddingTop: 8,
          paddingBottom: 9
        }));
        const FilledInput = /* @__PURE__ */reactExports.forwardRef(function FilledInput2(inProps, ref) {
          var _ref, _slots$root, _ref2, _slots$input;
          const props = useThemeProps({
            props: inProps,
            name: "MuiFilledInput"
          });
          const _props$components4 = props.components,
            components = _props$components4 === void 0 ? {} : _props$components4,
            componentsPropsProp = props.componentsProps,
            _props$fullWidth4 = props.fullWidth,
            fullWidth = _props$fullWidth4 === void 0 ? false : _props$fullWidth4,
            _props$inputComponent2 = props.inputComponent,
            inputComponent = _props$inputComponent2 === void 0 ? "input" : _props$inputComponent2,
            _props$multiline2 = props.multiline,
            multiline = _props$multiline2 === void 0 ? false : _props$multiline2,
            slotProps = props.slotProps,
            _props$slots4 = props.slots,
            slots = _props$slots4 === void 0 ? {} : _props$slots4,
            _props$type2 = props.type,
            type = _props$type2 === void 0 ? "text" : _props$type2,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$g);
          const ownerState = _extends({}, props, {
            fullWidth,
            inputComponent,
            multiline,
            type
          });
          const classes = useUtilityClasses$d(props);
          const filledInputComponentsProps = {
            root: {
              ownerState
            },
            input: {
              ownerState
            }
          };
          const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? deepmerge(slotProps != null ? slotProps : componentsPropsProp, filledInputComponentsProps) : filledInputComponentsProps;
          const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : FilledInputRoot;
          const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : FilledInputInput;
          return /* @__PURE__ */jsxRuntimeExports.jsx(InputBase$1, _extends({
            slots: {
              root: RootSlot,
              input: InputSlot
            },
            componentsProps,
            fullWidth,
            inputComponent,
            multiline,
            ref,
            type
          }, other, {
            classes
          }));
        });
        FilledInput.muiName = "Input";
        const FilledInput$1 = exports('br', FilledInput);
        function getFormControlUtilityClasses(slot) {
          return generateUtilityClass('MuiFormControl', slot);
        }
        generateUtilityClasses('MuiFormControl', ['root', 'marginNone', 'marginNormal', 'marginDense', 'fullWidth', 'disabled']);
        const _excluded$f = ["children", "className", "color", "component", "disabled", "error", "focused", "fullWidth", "hiddenLabel", "margin", "required", "size", "variant"];
        const useUtilityClasses$c = ownerState => {
          const classes = ownerState.classes,
            margin = ownerState.margin,
            fullWidth = ownerState.fullWidth;
          const slots = {
            root: ["root", margin !== "none" && `margin${capitalize(margin)}`, fullWidth && "fullWidth"]
          };
          return composeClasses(slots, getFormControlUtilityClasses, classes);
        };
        const FormControlRoot = styled$1("div", {
          name: "MuiFormControl",
          slot: "Root",
          overridesResolver: ({
            ownerState
          }, styles) => {
            return _extends({}, styles.root, styles[`margin${capitalize(ownerState.margin)}`], ownerState.fullWidth && styles.fullWidth);
          }
        })(({
          ownerState
        }) => _extends({
          display: "inline-flex",
          flexDirection: "column",
          position: "relative",
          // Reset fieldset default style.
          minWidth: 0,
          padding: 0,
          margin: 0,
          border: 0,
          verticalAlign: "top"
        }, ownerState.margin === "normal" && {
          marginTop: 16,
          marginBottom: 8
        }, ownerState.margin === "dense" && {
          marginTop: 8,
          marginBottom: 4
        }, ownerState.fullWidth && {
          width: "100%"
        }));
        const FormControl = /* @__PURE__ */reactExports.forwardRef(function FormControl2(inProps, ref) {
          const props = useThemeProps({
            props: inProps,
            name: "MuiFormControl"
          });
          const children = props.children,
            className = props.className,
            _props$color6 = props.color,
            color = _props$color6 === void 0 ? "primary" : _props$color6,
            _props$component7 = props.component,
            component = _props$component7 === void 0 ? "div" : _props$component7,
            _props$disabled4 = props.disabled,
            disabled = _props$disabled4 === void 0 ? false : _props$disabled4,
            _props$error = props.error,
            error = _props$error === void 0 ? false : _props$error,
            visuallyFocused = props.focused,
            _props$fullWidth5 = props.fullWidth,
            fullWidth = _props$fullWidth5 === void 0 ? false : _props$fullWidth5,
            _props$hiddenLabel = props.hiddenLabel,
            hiddenLabel = _props$hiddenLabel === void 0 ? false : _props$hiddenLabel,
            _props$margin = props.margin,
            margin = _props$margin === void 0 ? "none" : _props$margin,
            _props$required = props.required,
            required = _props$required === void 0 ? false : _props$required,
            _props$size4 = props.size,
            size = _props$size4 === void 0 ? "medium" : _props$size4,
            _props$variant6 = props.variant,
            variant = _props$variant6 === void 0 ? "outlined" : _props$variant6,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$f);
          const ownerState = _extends({}, props, {
            color,
            component,
            disabled,
            error,
            fullWidth,
            hiddenLabel,
            margin,
            required,
            size,
            variant
          });
          const classes = useUtilityClasses$c(ownerState);
          const _reactExports$useStat25 = reactExports.useState(() => {
              let initialAdornedStart = false;
              if (children) {
                reactExports.Children.forEach(children, child => {
                  if (!isMuiElement(child, ["Input", "Select"])) {
                    return;
                  }
                  const input = isMuiElement(child, ["Select"]) ? child.props.input : child;
                  if (input && isAdornedStart(input.props)) {
                    initialAdornedStart = true;
                  }
                });
              }
              return initialAdornedStart;
            }),
            _reactExports$useStat26 = _slicedToArray2(_reactExports$useStat25, 2),
            adornedStart = _reactExports$useStat26[0],
            setAdornedStart = _reactExports$useStat26[1];
          const _reactExports$useStat27 = reactExports.useState(() => {
              let initialFilled = false;
              if (children) {
                reactExports.Children.forEach(children, child => {
                  if (!isMuiElement(child, ["Input", "Select"])) {
                    return;
                  }
                  if (isFilled(child.props, true) || isFilled(child.props.inputProps, true)) {
                    initialFilled = true;
                  }
                });
              }
              return initialFilled;
            }),
            _reactExports$useStat28 = _slicedToArray2(_reactExports$useStat27, 2),
            filled = _reactExports$useStat28[0],
            setFilled = _reactExports$useStat28[1];
          const _reactExports$useStat29 = reactExports.useState(false),
            _reactExports$useStat30 = _slicedToArray2(_reactExports$useStat29, 2),
            focusedState = _reactExports$useStat30[0],
            setFocused = _reactExports$useStat30[1];
          if (disabled && focusedState) {
            setFocused(false);
          }
          const focused = visuallyFocused !== void 0 && !disabled ? visuallyFocused : focusedState;
          let registerEffect;
          const childContext = reactExports.useMemo(() => {
            return {
              adornedStart,
              setAdornedStart,
              color,
              disabled,
              error,
              filled,
              focused,
              fullWidth,
              hiddenLabel,
              size,
              onBlur: () => {
                setFocused(false);
              },
              onEmpty: () => {
                setFilled(false);
              },
              onFilled: () => {
                setFilled(true);
              },
              onFocus: () => {
                setFocused(true);
              },
              registerEffect,
              required,
              variant
            };
          }, [adornedStart, color, disabled, error, filled, focused, fullWidth, hiddenLabel, registerEffect, required, size, variant]);
          return /* @__PURE__ */jsxRuntimeExports.jsx(FormControlContext$1.Provider, {
            value: childContext,
            children: /* @__PURE__ */jsxRuntimeExports.jsx(FormControlRoot, _extends({
              as: component,
              ownerState,
              className: clsx(classes.root, className),
              ref
            }, other, {
              children
            }))
          });
        });
        const FormControl$1 = exports('ag', FormControl);
        function getFormLabelUtilityClasses(slot) {
          return generateUtilityClass('MuiFormLabel', slot);
        }
        const formLabelClasses = generateUtilityClasses('MuiFormLabel', ['root', 'colorSecondary', 'focused', 'disabled', 'error', 'filled', 'required', 'asterisk']);
        const formLabelClasses$1 = formLabelClasses;
        const _excluded$e = ["children", "className", "color", "component", "disabled", "error", "filled", "focused", "required"];
        const useUtilityClasses$b = ownerState => {
          const classes = ownerState.classes,
            color = ownerState.color,
            focused = ownerState.focused,
            disabled = ownerState.disabled,
            error = ownerState.error,
            filled = ownerState.filled,
            required = ownerState.required;
          const slots = {
            root: ["root", `color${capitalize(color)}`, disabled && "disabled", error && "error", filled && "filled", focused && "focused", required && "required"],
            asterisk: ["asterisk", error && "error"]
          };
          return composeClasses(slots, getFormLabelUtilityClasses, classes);
        };
        const FormLabelRoot = styled$1("label", {
          name: "MuiFormLabel",
          slot: "Root",
          overridesResolver: ({
            ownerState
          }, styles) => {
            return _extends({}, styles.root, ownerState.color === "secondary" && styles.colorSecondary, ownerState.filled && styles.filled);
          }
        })(({
          theme,
          ownerState
        }) => _extends({
          color: (theme.vars || theme).palette.text.secondary
        }, theme.typography.body1, {
          lineHeight: "1.4375em",
          padding: 0,
          position: "relative",
          [`&.${formLabelClasses$1.focused}`]: {
            color: (theme.vars || theme).palette[ownerState.color].main
          },
          [`&.${formLabelClasses$1.disabled}`]: {
            color: (theme.vars || theme).palette.text.disabled
          },
          [`&.${formLabelClasses$1.error}`]: {
            color: (theme.vars || theme).palette.error.main
          }
        }));
        const AsteriskComponent = styled$1("span", {
          name: "MuiFormLabel",
          slot: "Asterisk",
          overridesResolver: (props, styles) => styles.asterisk
        })(({
          theme
        }) => ({
          [`&.${formLabelClasses$1.error}`]: {
            color: (theme.vars || theme).palette.error.main
          }
        }));
        const FormLabel = /* @__PURE__ */reactExports.forwardRef(function FormLabel2(inProps, ref) {
          const props = useThemeProps({
            props: inProps,
            name: "MuiFormLabel"
          });
          const children = props.children,
            className = props.className,
            _props$component8 = props.component,
            component = _props$component8 === void 0 ? "label" : _props$component8,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$e);
          const muiFormControl = useFormControl();
          const fcs = formControlState({
            props,
            muiFormControl,
            states: ["color", "required", "focused", "disabled", "error", "filled"]
          });
          const ownerState = _extends({}, props, {
            color: fcs.color || "primary",
            component,
            disabled: fcs.disabled,
            error: fcs.error,
            filled: fcs.filled,
            focused: fcs.focused,
            required: fcs.required
          });
          const classes = useUtilityClasses$b(ownerState);
          return /* @__PURE__ */jsxRuntimeExports.jsxs(FormLabelRoot, _extends({
            as: component,
            ownerState,
            className: clsx(classes.root, className),
            ref
          }, other, {
            children: [children, fcs.required && /* @__PURE__ */jsxRuntimeExports.jsxs(AsteriskComponent, {
              ownerState,
              "aria-hidden": true,
              className: classes.asterisk,
              children: [" ", "*"]
            })]
          }));
        });
        const FormLabel$1 = exports('Z', FormLabel);
        const _excluded$d = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
        function getScale(value) {
          return `scale(${value}, ${Math.pow(value, 2)})`;
        }
        const styles$9 = {
          entering: {
            opacity: 1,
            transform: getScale(1)
          },
          entered: {
            opacity: 1,
            transform: "none"
          }
        };
        const isWebKit154 = typeof navigator !== "undefined" && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent);
        const Grow = /* @__PURE__ */reactExports.forwardRef(function Grow2(props, ref) {
          const addEndListener = props.addEndListener,
            _props$appear3 = props.appear,
            appear = _props$appear3 === void 0 ? true : _props$appear3,
            _children3 = props.children,
            easing = props.easing,
            inProp = props.in,
            onEnter = props.onEnter,
            onEntered = props.onEntered,
            onEntering = props.onEntering,
            onExit = props.onExit,
            onExited = props.onExited,
            onExiting = props.onExiting,
            style = props.style,
            _props$timeout3 = props.timeout,
            timeout = _props$timeout3 === void 0 ? "auto" : _props$timeout3,
            _props$TransitionComp6 = props.TransitionComponent,
            TransitionComponent = _props$TransitionComp6 === void 0 ? Transition$1 : _props$TransitionComp6,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$d);
          const timer = reactExports.useRef();
          const autoTimeout = reactExports.useRef();
          const theme = useTheme();
          const nodeRef = reactExports.useRef(null);
          const handleRef = useForkRef(nodeRef, _children3.ref, ref);
          const normalizedTransitionCallback = callback => maybeIsAppearing => {
            if (callback) {
              const node = nodeRef.current;
              if (maybeIsAppearing === void 0) {
                callback(node);
              } else {
                callback(node, maybeIsAppearing);
              }
            }
          };
          const handleEntering = normalizedTransitionCallback(onEntering);
          const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
            reflow(node);
            const _getTransitionProps2 = getTransitionProps({
                style,
                timeout,
                easing
              }, {
                mode: "enter"
              }),
              transitionDuration = _getTransitionProps2.duration,
              delay = _getTransitionProps2.delay,
              transitionTimingFunction = _getTransitionProps2.easing;
            let duration;
            if (timeout === "auto") {
              duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
              autoTimeout.current = duration;
            } else {
              duration = transitionDuration;
            }
            node.style.transition = [theme.transitions.create("opacity", {
              duration,
              delay
            }), theme.transitions.create("transform", {
              duration: isWebKit154 ? duration : duration * 0.666,
              delay,
              easing: transitionTimingFunction
            })].join(",");
            if (onEnter) {
              onEnter(node, isAppearing);
            }
          });
          const handleEntered = normalizedTransitionCallback(onEntered);
          const handleExiting = normalizedTransitionCallback(onExiting);
          const handleExit = normalizedTransitionCallback(node => {
            const _getTransitionProps3 = getTransitionProps({
                style,
                timeout,
                easing
              }, {
                mode: "exit"
              }),
              transitionDuration = _getTransitionProps3.duration,
              delay = _getTransitionProps3.delay,
              transitionTimingFunction = _getTransitionProps3.easing;
            let duration;
            if (timeout === "auto") {
              duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
              autoTimeout.current = duration;
            } else {
              duration = transitionDuration;
            }
            node.style.transition = [theme.transitions.create("opacity", {
              duration,
              delay
            }), theme.transitions.create("transform", {
              duration: isWebKit154 ? duration : duration * 0.666,
              delay: isWebKit154 ? delay : delay || duration * 0.333,
              easing: transitionTimingFunction
            })].join(",");
            node.style.opacity = 0;
            node.style.transform = getScale(0.75);
            if (onExit) {
              onExit(node);
            }
          });
          const handleExited = normalizedTransitionCallback(onExited);
          const handleAddEndListener = next => {
            if (timeout === "auto") {
              timer.current = setTimeout(next, autoTimeout.current || 0);
            }
            if (addEndListener) {
              addEndListener(nodeRef.current, next);
            }
          };
          reactExports.useEffect(() => {
            return () => {
              clearTimeout(timer.current);
            };
          }, []);
          return /* @__PURE__ */jsxRuntimeExports.jsx(TransitionComponent, _extends({
            appear,
            in: inProp,
            nodeRef,
            onEnter: handleEnter,
            onEntered: handleEntered,
            onEntering: handleEntering,
            onExit: handleExit,
            onExited: handleExited,
            onExiting: handleExiting,
            addEndListener: handleAddEndListener,
            timeout: timeout === "auto" ? null : timeout
          }, other, {
            children: (state, childProps) => {
              return /* @__PURE__ */reactExports.cloneElement(_children3, _extends({
                style: _extends({
                  opacity: 0,
                  transform: getScale(0.75),
                  visibility: state === "exited" && !inProp ? "hidden" : void 0
                }, styles$9[state], style, _children3.props.style),
                ref: handleRef
              }, childProps));
            }
          }));
        });
        Grow.muiSupportAuto = true;
        const Grow$1 = exports('G', Grow);
        const _excluded$c = ["disableUnderline", "components", "componentsProps", "fullWidth", "inputComponent", "multiline", "slotProps", "slots", "type"];
        const useUtilityClasses$a = ownerState => {
          const classes = ownerState.classes,
            disableUnderline = ownerState.disableUnderline;
          const slots = {
            root: ["root", !disableUnderline && "underline"],
            input: ["input"]
          };
          const composedClasses = composeClasses(slots, getInputUtilityClass, classes);
          return _extends({}, classes, composedClasses);
        };
        const InputRoot = styled$1(InputBaseRoot, {
          shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === "classes",
          name: "MuiInput",
          slot: "Root",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [...rootOverridesResolver(props, styles), !ownerState.disableUnderline && styles.underline];
          }
        })(({
          theme,
          ownerState
        }) => {
          const light = theme.palette.mode === "light";
          let bottomLineColor = light ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
          if (theme.vars) {
            bottomLineColor = `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})`;
          }
          return _extends({
            position: "relative"
          }, ownerState.formControl && {
            "label + &": {
              marginTop: 16
            }
          }, !ownerState.disableUnderline && {
            "&:after": {
              borderBottom: `2px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
              left: 0,
              bottom: 0,
              // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
              content: '""',
              position: "absolute",
              right: 0,
              transform: "scaleX(0)",
              transition: theme.transitions.create("transform", {
                duration: theme.transitions.duration.shorter,
                easing: theme.transitions.easing.easeOut
              }),
              pointerEvents: "none"
              // Transparent to the hover style.
            },
            [`&.${inputClasses$1.focused}:after`]: {
              // translateX(0) is a workaround for Safari transform scale bug
              // See https://github.com/mui/material-ui/issues/31766
              transform: "scaleX(1) translateX(0)"
            },
            [`&.${inputClasses$1.error}`]: {
              "&:before, &:after": {
                borderBottomColor: (theme.vars || theme).palette.error.main
              }
            },
            "&:before": {
              borderBottom: `1px solid ${bottomLineColor}`,
              left: 0,
              bottom: 0,
              // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
              content: '"\\00a0"',
              position: "absolute",
              right: 0,
              transition: theme.transitions.create("border-bottom-color", {
                duration: theme.transitions.duration.shorter
              }),
              pointerEvents: "none"
              // Transparent to the hover style.
            },
            [`&:hover:not(.${inputClasses$1.disabled}, .${inputClasses$1.error}):before`]: {
              borderBottom: `2px solid ${(theme.vars || theme).palette.text.primary}`,
              // Reset on touch devices, it doesn't add specificity
              "@media (hover: none)": {
                borderBottom: `1px solid ${bottomLineColor}`
              }
            },
            [`&.${inputClasses$1.disabled}:before`]: {
              borderBottomStyle: "dotted"
            }
          });
        });
        const InputInput = styled$1(InputBaseComponent, {
          name: "MuiInput",
          slot: "Input",
          overridesResolver: inputOverridesResolver
        })({});
        const Input = /* @__PURE__ */reactExports.forwardRef(function Input2(inProps, ref) {
          var _ref, _slots$root, _ref2, _slots$input;
          const props = useThemeProps({
            props: inProps,
            name: "MuiInput"
          });
          const disableUnderline = props.disableUnderline,
            _props$components5 = props.components,
            components = _props$components5 === void 0 ? {} : _props$components5,
            componentsPropsProp = props.componentsProps,
            _props$fullWidth6 = props.fullWidth,
            fullWidth = _props$fullWidth6 === void 0 ? false : _props$fullWidth6,
            _props$inputComponent3 = props.inputComponent,
            inputComponent = _props$inputComponent3 === void 0 ? "input" : _props$inputComponent3,
            _props$multiline3 = props.multiline,
            multiline = _props$multiline3 === void 0 ? false : _props$multiline3,
            slotProps = props.slotProps,
            _props$slots5 = props.slots,
            slots = _props$slots5 === void 0 ? {} : _props$slots5,
            _props$type3 = props.type,
            type = _props$type3 === void 0 ? "text" : _props$type3,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$c);
          const classes = useUtilityClasses$a(props);
          const ownerState = {
            disableUnderline
          };
          const inputComponentsProps = {
            root: {
              ownerState
            }
          };
          const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? deepmerge(slotProps != null ? slotProps : componentsPropsProp, inputComponentsProps) : inputComponentsProps;
          const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : InputRoot;
          const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : InputInput;
          return /* @__PURE__ */jsxRuntimeExports.jsx(InputBase$1, _extends({
            slots: {
              root: RootSlot,
              input: InputSlot
            },
            slotProps: componentsProps,
            fullWidth,
            inputComponent,
            multiline,
            ref,
            type
          }, other, {
            classes
          }));
        });
        Input.muiName = "Input";
        const Input$1 = exports('bq', Input);
        function getInputLabelUtilityClasses(slot) {
          return generateUtilityClass('MuiInputLabel', slot);
        }
        generateUtilityClasses('MuiInputLabel', ['root', 'focused', 'disabled', 'error', 'required', 'asterisk', 'formControl', 'sizeSmall', 'shrink', 'animated', 'standard', 'filled', 'outlined']);
        const _excluded$b = ["disableAnimation", "margin", "shrink", "variant", "className"];
        const useUtilityClasses$9 = ownerState => {
          const classes = ownerState.classes,
            formControl = ownerState.formControl,
            size = ownerState.size,
            shrink = ownerState.shrink,
            disableAnimation = ownerState.disableAnimation,
            variant = ownerState.variant,
            required = ownerState.required;
          const slots = {
            root: ["root", formControl && "formControl", !disableAnimation && "animated", shrink && "shrink", size === "small" && "sizeSmall", variant],
            asterisk: [required && "asterisk"]
          };
          const composedClasses = composeClasses(slots, getInputLabelUtilityClasses, classes);
          return _extends({}, classes, composedClasses);
        };
        const InputLabelRoot = styled$1(FormLabel$1, {
          shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === "classes",
          name: "MuiInputLabel",
          slot: "Root",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [{
              [`& .${formLabelClasses$1.asterisk}`]: styles.asterisk
            }, styles.root, ownerState.formControl && styles.formControl, ownerState.size === "small" && styles.sizeSmall, ownerState.shrink && styles.shrink, !ownerState.disableAnimation && styles.animated, styles[ownerState.variant]];
          }
        })(({
          theme,
          ownerState
        }) => _extends({
          display: "block",
          transformOrigin: "top left",
          whiteSpace: "nowrap",
          overflow: "hidden",
          textOverflow: "ellipsis",
          maxWidth: "100%"
        }, ownerState.formControl && {
          position: "absolute",
          left: 0,
          top: 0,
          // slight alteration to spec spacing to match visual spec result
          transform: "translate(0, 20px) scale(1)"
        }, ownerState.size === "small" && {
          // Compensation for the `Input.inputSizeSmall` style.
          transform: "translate(0, 17px) scale(1)"
        }, ownerState.shrink && {
          transform: "translate(0, -1.5px) scale(0.75)",
          transformOrigin: "top left",
          maxWidth: "133%"
        }, !ownerState.disableAnimation && {
          transition: theme.transitions.create(["color", "transform", "max-width"], {
            duration: theme.transitions.duration.shorter,
            easing: theme.transitions.easing.easeOut
          })
        }, ownerState.variant === "filled" && _extends({
          // Chrome's autofill feature gives the input field a yellow background.
          // Since the input field is behind the label in the HTML tree,
          // the input field is drawn last and hides the label with an opaque background color.
          // zIndex: 1 will raise the label above opaque background-colors of input.
          zIndex: 1,
          pointerEvents: "none",
          transform: "translate(12px, 16px) scale(1)",
          maxWidth: "calc(100% - 24px)"
        }, ownerState.size === "small" && {
          transform: "translate(12px, 13px) scale(1)"
        }, ownerState.shrink && _extends({
          userSelect: "none",
          pointerEvents: "auto",
          transform: "translate(12px, 7px) scale(0.75)",
          maxWidth: "calc(133% - 24px)"
        }, ownerState.size === "small" && {
          transform: "translate(12px, 4px) scale(0.75)"
        })), ownerState.variant === "outlined" && _extends({
          // see comment above on filled.zIndex
          zIndex: 1,
          pointerEvents: "none",
          transform: "translate(14px, 16px) scale(1)",
          maxWidth: "calc(100% - 24px)"
        }, ownerState.size === "small" && {
          transform: "translate(14px, 9px) scale(1)"
        }, ownerState.shrink && {
          userSelect: "none",
          pointerEvents: "auto",
          // Theoretically, we should have (8+5)*2/0.75 = 34px
          // but it feels a better when it bleeds a bit on the left, so 32px.
          maxWidth: "calc(133% - 32px)",
          transform: "translate(14px, -9px) scale(0.75)"
        })));
        const InputLabel = /* @__PURE__ */reactExports.forwardRef(function InputLabel2(inProps, ref) {
          const props = useThemeProps({
            name: "MuiInputLabel",
            props: inProps
          });
          const _props$disableAnimati = props.disableAnimation,
            disableAnimation = _props$disableAnimati === void 0 ? false : _props$disableAnimati,
            shrinkProp = props.shrink,
            className = props.className,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$b);
          const muiFormControl = useFormControl();
          let shrink = shrinkProp;
          if (typeof shrink === "undefined" && muiFormControl) {
            shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
          }
          const fcs = formControlState({
            props,
            muiFormControl,
            states: ["size", "variant", "required"]
          });
          const ownerState = _extends({}, props, {
            disableAnimation,
            formControl: muiFormControl,
            shrink,
            size: fcs.size,
            variant: fcs.variant,
            required: fcs.required
          });
          const classes = useUtilityClasses$9(ownerState);
          return /* @__PURE__ */jsxRuntimeExports.jsx(InputLabelRoot, _extends({
            "data-shrink": shrink,
            ownerState,
            ref,
            className: clsx(classes.root, className)
          }, other, {
            classes
          }));
        });
        const InputLabel$1 = exports('ah', InputLabel);
        const ListContext = /* @__PURE__ */reactExports.createContext({});
        const ListContext$1 = exports('c4', ListContext);
        function getListUtilityClass(slot) {
          return generateUtilityClass('MuiList', slot);
        }
        generateUtilityClasses('MuiList', ['root', 'padding', 'dense', 'subheader']);
        const _excluded$a = ["children", "className", "component", "dense", "disablePadding", "subheader"];
        const useUtilityClasses$8 = ownerState => {
          const classes = ownerState.classes,
            disablePadding = ownerState.disablePadding,
            dense = ownerState.dense,
            subheader = ownerState.subheader;
          const slots = {
            root: ["root", !disablePadding && "padding", dense && "dense", subheader && "subheader"]
          };
          return composeClasses(slots, getListUtilityClass, classes);
        };
        const ListRoot = styled$1("ul", {
          name: "MuiList",
          slot: "Root",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [styles.root, !ownerState.disablePadding && styles.padding, ownerState.dense && styles.dense, ownerState.subheader && styles.subheader];
          }
        })(({
          ownerState
        }) => _extends({
          listStyle: "none",
          margin: 0,
          padding: 0,
          position: "relative"
        }, !ownerState.disablePadding && {
          paddingTop: 8,
          paddingBottom: 8
        }, ownerState.subheader && {
          paddingTop: 0
        }));
        const List = /* @__PURE__ */reactExports.forwardRef(function List2(inProps, ref) {
          const props = useThemeProps({
            props: inProps,
            name: "MuiList"
          });
          const children = props.children,
            className = props.className,
            _props$component9 = props.component,
            component = _props$component9 === void 0 ? "ul" : _props$component9,
            _props$dense = props.dense,
            dense = _props$dense === void 0 ? false : _props$dense,
            _props$disablePadding = props.disablePadding,
            disablePadding = _props$disablePadding === void 0 ? false : _props$disablePadding,
            subheader = props.subheader,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$a);
          const context = reactExports.useMemo(() => ({
            dense
          }), [dense]);
          const ownerState = _extends({}, props, {
            component,
            dense,
            disablePadding
          });
          const classes = useUtilityClasses$8(ownerState);
          return /* @__PURE__ */jsxRuntimeExports.jsx(ListContext$1.Provider, {
            value: context,
            children: /* @__PURE__ */jsxRuntimeExports.jsxs(ListRoot, _extends({
              as: component,
              className: clsx(classes.root, className),
              ref,
              ownerState
            }, other, {
              children: [subheader, children]
            }))
          });
        });
        const List$1 = List;
        function getListItemIconUtilityClass(slot) {
          return generateUtilityClass('MuiListItemIcon', slot);
        }
        const listItemIconClasses = generateUtilityClasses('MuiListItemIcon', ['root', 'alignItemsFlexStart']);
        const listItemIconClasses$1 = listItemIconClasses;
        function getListItemTextUtilityClass(slot) {
          return generateUtilityClass('MuiListItemText', slot);
        }
        const listItemTextClasses = generateUtilityClasses('MuiListItemText', ['root', 'multiline', 'dense', 'inset', 'primary', 'secondary']);
        const listItemTextClasses$1 = exports('c6', listItemTextClasses);
        const _excluded$9 = ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"];
        function nextItem(list, item, disableListWrap) {
          if (list === item) {
            return list.firstChild;
          }
          if (item && item.nextElementSibling) {
            return item.nextElementSibling;
          }
          return disableListWrap ? null : list.firstChild;
        }
        function previousItem(list, item, disableListWrap) {
          if (list === item) {
            return disableListWrap ? list.firstChild : list.lastChild;
          }
          if (item && item.previousElementSibling) {
            return item.previousElementSibling;
          }
          return disableListWrap ? null : list.lastChild;
        }
        function textCriteriaMatches(nextFocus, textCriteria) {
          if (textCriteria === void 0) {
            return true;
          }
          let text = nextFocus.innerText;
          if (text === void 0) {
            text = nextFocus.textContent;
          }
          text = text.trim().toLowerCase();
          if (text.length === 0) {
            return false;
          }
          if (textCriteria.repeating) {
            return text[0] === textCriteria.keys[0];
          }
          return text.indexOf(textCriteria.keys.join("")) === 0;
        }
        function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
          let wrappedOnce = false;
          let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
          while (nextFocus) {
            if (nextFocus === list.firstChild) {
              if (wrappedOnce) {
                return false;
              }
              wrappedOnce = true;
            }
            const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
            if (!nextFocus.hasAttribute("tabindex") || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
              nextFocus = traversalFunction(list, nextFocus, disableListWrap);
            } else {
              nextFocus.focus();
              return true;
            }
          }
          return false;
        }
        const MenuList = /* @__PURE__ */reactExports.forwardRef(function MenuList2(props, ref) {
          const actions = props.actions,
            _props$autoFocus = props.autoFocus,
            autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,
            _props$autoFocusItem = props.autoFocusItem,
            autoFocusItem = _props$autoFocusItem === void 0 ? false : _props$autoFocusItem,
            children = props.children,
            className = props.className,
            _props$disabledItemsF = props.disabledItemsFocusable,
            disabledItemsFocusable = _props$disabledItemsF === void 0 ? false : _props$disabledItemsF,
            _props$disableListWra = props.disableListWrap,
            disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra,
            onKeyDown = props.onKeyDown,
            _props$variant7 = props.variant,
            variant = _props$variant7 === void 0 ? "selectedMenu" : _props$variant7,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$9);
          const listRef = reactExports.useRef(null);
          const textCriteriaRef = reactExports.useRef({
            keys: [],
            repeating: true,
            previousKeyMatched: true,
            lastTime: null
          });
          useEnhancedEffect$1(() => {
            if (autoFocus) {
              listRef.current.focus();
            }
          }, [autoFocus]);
          reactExports.useImperativeHandle(actions, () => ({
            adjustStyleForScrollbar: (containerElement, theme) => {
              const noExplicitWidth = !listRef.current.style.width;
              if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
                const scrollbarSize = `${getScrollbarSize(ownerDocument(containerElement))}px`;
                listRef.current.style[theme.direction === "rtl" ? "paddingLeft" : "paddingRight"] = scrollbarSize;
                listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
              }
              return listRef.current;
            }
          }), []);
          const handleKeyDown = event => {
            const list = listRef.current;
            const key = event.key;
            const currentFocus = ownerDocument(list).activeElement;
            if (key === "ArrowDown") {
              event.preventDefault();
              moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
            } else if (key === "ArrowUp") {
              event.preventDefault();
              moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
            } else if (key === "Home") {
              event.preventDefault();
              moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
            } else if (key === "End") {
              event.preventDefault();
              moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
            } else if (key.length === 1) {
              const criteria = textCriteriaRef.current;
              const lowerKey = key.toLowerCase();
              const currTime = performance.now();
              if (criteria.keys.length > 0) {
                if (currTime - criteria.lastTime > 500) {
                  criteria.keys = [];
                  criteria.repeating = true;
                  criteria.previousKeyMatched = true;
                } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
                  criteria.repeating = false;
                }
              }
              criteria.lastTime = currTime;
              criteria.keys.push(lowerKey);
              const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);
              if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
                event.preventDefault();
              } else {
                criteria.previousKeyMatched = false;
              }
            }
            if (onKeyDown) {
              onKeyDown(event);
            }
          };
          const handleRef = useForkRef(listRef, ref);
          let activeItemIndex = -1;
          reactExports.Children.forEach(children, (child, index) => {
            if (! /* @__PURE__ */reactExports.isValidElement(child)) {
              if (activeItemIndex === index) {
                activeItemIndex += 1;
                if (activeItemIndex >= children.length) {
                  activeItemIndex = -1;
                }
              }
              return;
            }
            if (!child.props.disabled) {
              if (variant === "selectedMenu" && child.props.selected) {
                activeItemIndex = index;
              } else if (activeItemIndex === -1) {
                activeItemIndex = index;
              }
            }
            if (activeItemIndex === index && (child.props.disabled || child.props.muiSkipListHighlight || child.type.muiSkipListHighlight)) {
              activeItemIndex += 1;
              if (activeItemIndex >= children.length) {
                activeItemIndex = -1;
              }
            }
          });
          const items = reactExports.Children.map(children, (child, index) => {
            if (index === activeItemIndex) {
              const newChildProps = {};
              if (autoFocusItem) {
                newChildProps.autoFocus = true;
              }
              if (child.props.tabIndex === void 0 && variant === "selectedMenu") {
                newChildProps.tabIndex = 0;
              }
              return /* @__PURE__ */reactExports.cloneElement(child, newChildProps);
            }
            return child;
          });
          return /* @__PURE__ */jsxRuntimeExports.jsx(List$1, _extends({
            role: "menu",
            ref: handleRef,
            className,
            onKeyDown: handleKeyDown,
            tabIndex: autoFocus ? 0 : -1
          }, other, {
            children: items
          }));
        });
        const MenuList$1 = MenuList;
        function getPopoverUtilityClass(slot) {
          return generateUtilityClass('MuiPopover', slot);
        }
        generateUtilityClasses('MuiPopover', ['root', 'paper']);
        const _excluded$8 = ["onEntering"],
          _excluded2$1 = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "slots", "slotProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps"],
          _excluded3 = ["slotProps"];
        function getOffsetTop(rect, vertical) {
          let offset = 0;
          if (typeof vertical === "number") {
            offset = vertical;
          } else if (vertical === "center") {
            offset = rect.height / 2;
          } else if (vertical === "bottom") {
            offset = rect.height;
          }
          return offset;
        }
        function getOffsetLeft(rect, horizontal) {
          let offset = 0;
          if (typeof horizontal === "number") {
            offset = horizontal;
          } else if (horizontal === "center") {
            offset = rect.width / 2;
          } else if (horizontal === "right") {
            offset = rect.width;
          }
          return offset;
        }
        function getTransformOriginValue(transformOrigin) {
          return [transformOrigin.horizontal, transformOrigin.vertical].map(n => typeof n === "number" ? `${n}px` : n).join(" ");
        }
        function resolveAnchorEl(anchorEl) {
          return typeof anchorEl === "function" ? anchorEl() : anchorEl;
        }
        const useUtilityClasses$7 = ownerState => {
          const classes = ownerState.classes;
          const slots = {
            root: ["root"],
            paper: ["paper"]
          };
          return composeClasses(slots, getPopoverUtilityClass, classes);
        };
        const PopoverRoot = styled$1(Modal$1, {
          name: "MuiPopover",
          slot: "Root",
          overridesResolver: (props, styles) => styles.root
        })({});
        const PopoverPaper = styled$1(Paper$1, {
          name: "MuiPopover",
          slot: "Paper",
          overridesResolver: (props, styles) => styles.paper
        })({
          position: "absolute",
          overflowY: "auto",
          overflowX: "hidden",
          // So we see the popover when it's empty.
          // It's most likely on issue on userland.
          minWidth: 16,
          minHeight: 16,
          maxWidth: "calc(100% - 32px)",
          maxHeight: "calc(100% - 32px)",
          // We disable the focus ring for mouse, touch and keyboard users.
          outline: 0
        });
        const Popover = /* @__PURE__ */reactExports.forwardRef(function Popover2(inProps, ref) {
          var _slotProps$paper, _slots$root, _slots$paper;
          const props = useThemeProps({
            props: inProps,
            name: "MuiPopover"
          });
          const action = props.action,
            anchorEl = props.anchorEl,
            _props$anchorOrigin = props.anchorOrigin,
            anchorOrigin = _props$anchorOrigin === void 0 ? {
              vertical: "top",
              horizontal: "left"
            } : _props$anchorOrigin,
            anchorPosition = props.anchorPosition,
            _props$anchorReferenc = props.anchorReference,
            anchorReference = _props$anchorReferenc === void 0 ? "anchorEl" : _props$anchorReferenc,
            children = props.children,
            className = props.className,
            containerProp = props.container,
            _props$elevation3 = props.elevation,
            elevation = _props$elevation3 === void 0 ? 8 : _props$elevation3,
            _props$marginThreshol = props.marginThreshold,
            marginThreshold = _props$marginThreshol === void 0 ? 16 : _props$marginThreshol,
            open = props.open,
            _props$PaperProps3 = props.PaperProps,
            PaperPropsProp = _props$PaperProps3 === void 0 ? {} : _props$PaperProps3,
            slots = props.slots,
            slotProps = props.slotProps,
            _props$transformOrigi = props.transformOrigin,
            transformOrigin = _props$transformOrigi === void 0 ? {
              vertical: "top",
              horizontal: "left"
            } : _props$transformOrigi,
            _props$TransitionComp7 = props.TransitionComponent,
            TransitionComponent = _props$TransitionComp7 === void 0 ? Grow$1 : _props$TransitionComp7,
            _props$transitionDura3 = props.transitionDuration,
            transitionDurationProp = _props$transitionDura3 === void 0 ? "auto" : _props$transitionDura3,
            _props$TransitionProp = props.TransitionProps,
            _props$TransitionProp2 = _props$TransitionProp === void 0 ? {} : _props$TransitionProp,
            onEntering = _props$TransitionProp2.onEntering,
            TransitionProps = _objectWithoutPropertiesLoose$2(props.TransitionProps, _excluded$8),
            other = _objectWithoutPropertiesLoose$2(props, _excluded2$1);
          const externalPaperSlotProps = (_slotProps$paper = slotProps == null ? void 0 : slotProps.paper) != null ? _slotProps$paper : PaperPropsProp;
          const paperRef = reactExports.useRef();
          const handlePaperRef = useForkRef(paperRef, externalPaperSlotProps.ref);
          const ownerState = _extends({}, props, {
            anchorOrigin,
            anchorReference,
            elevation,
            marginThreshold,
            externalPaperSlotProps,
            transformOrigin,
            TransitionComponent,
            transitionDuration: transitionDurationProp,
            TransitionProps
          });
          const classes = useUtilityClasses$7(ownerState);
          const getAnchorOffset = reactExports.useCallback(() => {
            if (anchorReference === "anchorPosition") {
              return anchorPosition;
            }
            const resolvedAnchorEl = resolveAnchorEl(anchorEl);
            const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument(paperRef.current).body;
            const anchorRect = anchorElement.getBoundingClientRect();
            return {
              top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
              left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
            };
          }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);
          const getTransformOrigin = reactExports.useCallback(elemRect => {
            return {
              vertical: getOffsetTop(elemRect, transformOrigin.vertical),
              horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
            };
          }, [transformOrigin.horizontal, transformOrigin.vertical]);
          const getPositioningStyle = reactExports.useCallback(element => {
            const elemRect = {
              width: element.offsetWidth,
              height: element.offsetHeight
            };
            const elemTransformOrigin = getTransformOrigin(elemRect);
            if (anchorReference === "none") {
              return {
                top: null,
                left: null,
                transformOrigin: getTransformOriginValue(elemTransformOrigin)
              };
            }
            const anchorOffset = getAnchorOffset();
            let top = anchorOffset.top - elemTransformOrigin.vertical;
            let left = anchorOffset.left - elemTransformOrigin.horizontal;
            const bottom = top + elemRect.height;
            const right = left + elemRect.width;
            const containerWindow = ownerWindow(resolveAnchorEl(anchorEl));
            const heightThreshold = containerWindow.innerHeight - marginThreshold;
            const widthThreshold = containerWindow.innerWidth - marginThreshold;
            if (top < marginThreshold) {
              const diff = top - marginThreshold;
              top -= diff;
              elemTransformOrigin.vertical += diff;
            } else if (bottom > heightThreshold) {
              const diff = bottom - heightThreshold;
              top -= diff;
              elemTransformOrigin.vertical += diff;
            }
            if (left < marginThreshold) {
              const diff = left - marginThreshold;
              left -= diff;
              elemTransformOrigin.horizontal += diff;
            } else if (right > widthThreshold) {
              const diff = right - widthThreshold;
              left -= diff;
              elemTransformOrigin.horizontal += diff;
            }
            return {
              top: `${Math.round(top)}px`,
              left: `${Math.round(left)}px`,
              transformOrigin: getTransformOriginValue(elemTransformOrigin)
            };
          }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
          const _reactExports$useStat31 = reactExports.useState(open),
            _reactExports$useStat32 = _slicedToArray2(_reactExports$useStat31, 2),
            isPositioned = _reactExports$useStat32[0],
            setIsPositioned = _reactExports$useStat32[1];
          const setPositioningStyles = reactExports.useCallback(() => {
            const element = paperRef.current;
            if (!element) {
              return;
            }
            const positioning = getPositioningStyle(element);
            if (positioning.top !== null) {
              element.style.top = positioning.top;
            }
            if (positioning.left !== null) {
              element.style.left = positioning.left;
            }
            element.style.transformOrigin = positioning.transformOrigin;
            setIsPositioned(true);
          }, [getPositioningStyle]);
          const handleEntering = (element, isAppearing) => {
            if (onEntering) {
              onEntering(element, isAppearing);
            }
            setPositioningStyles();
          };
          const handleExited = () => {
            setIsPositioned(false);
          };
          reactExports.useEffect(() => {
            if (open) {
              setPositioningStyles();
            }
          });
          reactExports.useImperativeHandle(action, () => open ? {
            updatePosition: () => {
              setPositioningStyles();
            }
          } : null, [open, setPositioningStyles]);
          reactExports.useEffect(() => {
            if (!open) {
              return void 0;
            }
            const handleResize = debounce(() => {
              setPositioningStyles();
            });
            const containerWindow = ownerWindow(anchorEl);
            containerWindow.addEventListener("resize", handleResize);
            return () => {
              handleResize.clear();
              containerWindow.removeEventListener("resize", handleResize);
            };
          }, [anchorEl, open, setPositioningStyles]);
          let transitionDuration = transitionDurationProp;
          if (transitionDurationProp === "auto" && !TransitionComponent.muiSupportAuto) {
            transitionDuration = void 0;
          }
          const container = containerProp || (anchorEl ? ownerDocument(resolveAnchorEl(anchorEl)).body : void 0);
          const RootSlot = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : PopoverRoot;
          const PaperSlot = (_slots$paper = slots == null ? void 0 : slots.paper) != null ? _slots$paper : PopoverPaper;
          const paperProps = useSlotProps({
            elementType: PaperSlot,
            externalSlotProps: _extends({}, externalPaperSlotProps, {
              style: isPositioned ? externalPaperSlotProps.style : _extends({}, externalPaperSlotProps.style, {
                opacity: 0
              })
            }),
            additionalProps: {
              elevation,
              ref: handlePaperRef
            },
            ownerState,
            className: clsx(classes.paper, externalPaperSlotProps == null ? void 0 : externalPaperSlotProps.className)
          });
          const _useSlotProps = useSlotProps({
              elementType: RootSlot,
              externalSlotProps: (slotProps == null ? void 0 : slotProps.root) || {},
              externalForwardedProps: other,
              additionalProps: {
                ref,
                slotProps: {
                  backdrop: {
                    invisible: true
                  }
                },
                container,
                open
              },
              ownerState,
              className: clsx(classes.root, className)
            }),
            rootSlotPropsProp = _useSlotProps.slotProps,
            rootProps = _objectWithoutPropertiesLoose$2(_useSlotProps, _excluded3);
          return /* @__PURE__ */jsxRuntimeExports.jsx(RootSlot, _extends({}, rootProps, !isHostComponent(RootSlot) && {
            slotProps: rootSlotPropsProp
          }, {
            children: /* @__PURE__ */jsxRuntimeExports.jsx(TransitionComponent, _extends({
              appear: true,
              in: open,
              onEntering: handleEntering,
              onExited: handleExited,
              timeout: transitionDuration
            }, TransitionProps, {
              children: /* @__PURE__ */jsxRuntimeExports.jsx(PaperSlot, _extends({}, paperProps, {
                children
              }))
            }))
          }));
        });
        const Popover$1 = Popover;
        function getMenuUtilityClass(slot) {
          return generateUtilityClass('MuiMenu', slot);
        }
        generateUtilityClasses('MuiMenu', ['root', 'paper', 'list']);
        const _excluded$7 = ["onEntering"],
          _excluded2 = ["autoFocus", "children", "className", "disableAutoFocusItem", "MenuListProps", "onClose", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant", "slots", "slotProps"];
        const RTL_ORIGIN = {
          vertical: "top",
          horizontal: "right"
        };
        const LTR_ORIGIN = {
          vertical: "top",
          horizontal: "left"
        };
        const useUtilityClasses$6 = ownerState => {
          const classes = ownerState.classes;
          const slots = {
            root: ["root"],
            paper: ["paper"],
            list: ["list"]
          };
          return composeClasses(slots, getMenuUtilityClass, classes);
        };
        const MenuRoot = styled$1(Popover$1, {
          shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === "classes",
          name: "MuiMenu",
          slot: "Root",
          overridesResolver: (props, styles) => styles.root
        })({});
        const MenuPaper = styled$1(PopoverPaper, {
          name: "MuiMenu",
          slot: "Paper",
          overridesResolver: (props, styles) => styles.paper
        })({
          // specZ: The maximum height of a simple menu should be one or more rows less than the view
          // height. This ensures a tappable area outside of the simple menu with which to dismiss
          // the menu.
          maxHeight: "calc(100% - 96px)",
          // Add iOS momentum scrolling for iOS < 13.0
          WebkitOverflowScrolling: "touch"
        });
        const MenuMenuList = styled$1(MenuList$1, {
          name: "MuiMenu",
          slot: "List",
          overridesResolver: (props, styles) => styles.list
        })({
          // We disable the focus ring for mouse, touch and keyboard users.
          outline: 0
        });
        const Menu$1 = /* @__PURE__ */reactExports.forwardRef(function Menu2(inProps, ref) {
          var _slots$paper, _slotProps$paper;
          const props = useThemeProps({
            props: inProps,
            name: "MuiMenu"
          });
          const _props$autoFocus2 = props.autoFocus,
            autoFocus = _props$autoFocus2 === void 0 ? true : _props$autoFocus2,
            children = props.children,
            className = props.className,
            _props$disableAutoFoc4 = props.disableAutoFocusItem,
            disableAutoFocusItem = _props$disableAutoFoc4 === void 0 ? false : _props$disableAutoFoc4,
            _props$MenuListProps = props.MenuListProps,
            MenuListProps = _props$MenuListProps === void 0 ? {} : _props$MenuListProps,
            onClose = props.onClose,
            open = props.open,
            _props$PaperProps4 = props.PaperProps,
            PaperProps = _props$PaperProps4 === void 0 ? {} : _props$PaperProps4,
            PopoverClasses = props.PopoverClasses,
            _props$transitionDura4 = props.transitionDuration,
            transitionDuration = _props$transitionDura4 === void 0 ? "auto" : _props$transitionDura4,
            _props$TransitionProp3 = props.TransitionProps,
            _props$TransitionProp4 = _props$TransitionProp3 === void 0 ? {} : _props$TransitionProp3,
            onEntering = _props$TransitionProp4.onEntering,
            _props$variant8 = props.variant,
            variant = _props$variant8 === void 0 ? "selectedMenu" : _props$variant8,
            _props$slots6 = props.slots,
            slots = _props$slots6 === void 0 ? {} : _props$slots6,
            _props$slotProps4 = props.slotProps,
            slotProps = _props$slotProps4 === void 0 ? {} : _props$slotProps4,
            TransitionProps = _objectWithoutPropertiesLoose$2(props.TransitionProps, _excluded$7),
            other = _objectWithoutPropertiesLoose$2(props, _excluded2);
          const theme = useTheme();
          const isRtl = theme.direction === "rtl";
          const ownerState = _extends({}, props, {
            autoFocus,
            disableAutoFocusItem,
            MenuListProps,
            onEntering,
            PaperProps,
            transitionDuration,
            TransitionProps,
            variant
          });
          const classes = useUtilityClasses$6(ownerState);
          const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
          const menuListActionsRef = reactExports.useRef(null);
          const handleEntering = (element, isAppearing) => {
            if (menuListActionsRef.current) {
              menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
            }
            if (onEntering) {
              onEntering(element, isAppearing);
            }
          };
          const handleListKeyDown = event => {
            if (event.key === "Tab") {
              event.preventDefault();
              if (onClose) {
                onClose(event, "tabKeyDown");
              }
            }
          };
          let activeItemIndex = -1;
          reactExports.Children.map(children, (child, index) => {
            if (! /* @__PURE__ */reactExports.isValidElement(child)) {
              return;
            }
            if (!child.props.disabled) {
              if (variant === "selectedMenu" && child.props.selected) {
                activeItemIndex = index;
              } else if (activeItemIndex === -1) {
                activeItemIndex = index;
              }
            }
          });
          const PaperSlot = (_slots$paper = slots.paper) != null ? _slots$paper : MenuPaper;
          const paperExternalSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : PaperProps;
          const rootSlotProps = useSlotProps({
            elementType: slots.root,
            externalSlotProps: slotProps.root,
            ownerState,
            className: [classes.root, className]
          });
          const paperSlotProps = useSlotProps({
            elementType: PaperSlot,
            externalSlotProps: paperExternalSlotProps,
            ownerState,
            className: classes.paper
          });
          return /* @__PURE__ */jsxRuntimeExports.jsx(MenuRoot, _extends({
            onClose,
            anchorOrigin: {
              vertical: "bottom",
              horizontal: isRtl ? "right" : "left"
            },
            transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
            slots: {
              paper: PaperSlot,
              root: slots.root
            },
            slotProps: {
              root: rootSlotProps,
              paper: paperSlotProps
            },
            open,
            ref,
            transitionDuration,
            TransitionProps: _extends({
              onEntering: handleEntering
            }, TransitionProps),
            ownerState
          }, other, {
            classes: PopoverClasses,
            children: /* @__PURE__ */jsxRuntimeExports.jsx(MenuMenuList, _extends({
              onKeyDown: handleListKeyDown,
              actions: menuListActionsRef,
              autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
              autoFocusItem,
              variant
            }, MenuListProps, {
              className: clsx(classes.list, MenuListProps.className),
              children
            }))
          }));
        });
        const Menu$2 = exports('A', Menu$1);
        function getMenuItemUtilityClass(slot) {
          return generateUtilityClass('MuiMenuItem', slot);
        }
        const menuItemClasses = generateUtilityClasses('MuiMenuItem', ['root', 'focusVisible', 'dense', 'disabled', 'divider', 'gutters', 'selected']);
        const menuItemClasses$1 = menuItemClasses;
        const _excluded$6 = ["autoFocus", "component", "dense", "divider", "disableGutters", "focusVisibleClassName", "role", "tabIndex", "className"];
        const overridesResolver = (props, styles) => {
          const ownerState = props.ownerState;
          return [styles.root, ownerState.dense && styles.dense, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters];
        };
        const useUtilityClasses$5 = ownerState => {
          const disabled = ownerState.disabled,
            dense = ownerState.dense,
            divider = ownerState.divider,
            disableGutters = ownerState.disableGutters,
            selected = ownerState.selected,
            classes = ownerState.classes;
          const slots = {
            root: ["root", dense && "dense", disabled && "disabled", !disableGutters && "gutters", divider && "divider", selected && "selected"]
          };
          const composedClasses = composeClasses(slots, getMenuItemUtilityClass, classes);
          return _extends({}, classes, composedClasses);
        };
        const MenuItemRoot = styled$1(ButtonBase$1, {
          shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === "classes",
          name: "MuiMenuItem",
          slot: "Root",
          overridesResolver
        })(({
          theme,
          ownerState
        }) => _extends({}, theme.typography.body1, {
          display: "flex",
          justifyContent: "flex-start",
          alignItems: "center",
          position: "relative",
          textDecoration: "none",
          minHeight: 48,
          paddingTop: 6,
          paddingBottom: 6,
          boxSizing: "border-box",
          whiteSpace: "nowrap"
        }, !ownerState.disableGutters && {
          paddingLeft: 16,
          paddingRight: 16
        }, ownerState.divider && {
          borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
          backgroundClip: "padding-box"
        }, {
          "&:hover": {
            textDecoration: "none",
            backgroundColor: (theme.vars || theme).palette.action.hover,
            // Reset on touch devices, it doesn't add specificity
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          },
          [`&.${menuItemClasses$1.selected}`]: {
            backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
            [`&.${menuItemClasses$1.focusVisible}`]: {
              backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
            }
          },
          [`&.${menuItemClasses$1.selected}:hover`]: {
            backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            "@media (hover: none)": {
              backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
            }
          },
          [`&.${menuItemClasses$1.focusVisible}`]: {
            backgroundColor: (theme.vars || theme).palette.action.focus
          },
          [`&.${menuItemClasses$1.disabled}`]: {
            opacity: (theme.vars || theme).palette.action.disabledOpacity
          },
          [`& + .${dividerClasses$1.root}`]: {
            marginTop: theme.spacing(1),
            marginBottom: theme.spacing(1)
          },
          [`& + .${dividerClasses$1.inset}`]: {
            marginLeft: 52
          },
          [`& .${listItemTextClasses$1.root}`]: {
            marginTop: 0,
            marginBottom: 0
          },
          [`& .${listItemTextClasses$1.inset}`]: {
            paddingLeft: 36
          },
          [`& .${listItemIconClasses$1.root}`]: {
            minWidth: 36
          }
        }, !ownerState.dense && {
          [theme.breakpoints.up("sm")]: {
            minHeight: "auto"
          }
        }, ownerState.dense && _extends({
          minHeight: 32,
          // https://m2.material.io/components/menus#specs > Dense
          paddingTop: 4,
          paddingBottom: 4
        }, theme.typography.body2, {
          [`& .${listItemIconClasses$1.root} svg`]: {
            fontSize: "1.25rem"
          }
        })));
        const MenuItem = /* @__PURE__ */reactExports.forwardRef(function MenuItem2(inProps, ref) {
          const props = useThemeProps({
            props: inProps,
            name: "MuiMenuItem"
          });
          const _props$autoFocus3 = props.autoFocus,
            autoFocus = _props$autoFocus3 === void 0 ? false : _props$autoFocus3,
            _props$component10 = props.component,
            component = _props$component10 === void 0 ? "li" : _props$component10,
            _props$dense2 = props.dense,
            dense = _props$dense2 === void 0 ? false : _props$dense2,
            _props$divider = props.divider,
            divider = _props$divider === void 0 ? false : _props$divider,
            _props$disableGutters = props.disableGutters,
            disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,
            focusVisibleClassName = props.focusVisibleClassName,
            _props$role = props.role,
            role = _props$role === void 0 ? "menuitem" : _props$role,
            tabIndexProp = props.tabIndex,
            className = props.className,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$6);
          const context = reactExports.useContext(ListContext$1);
          const childContext = reactExports.useMemo(() => ({
            dense: dense || context.dense || false,
            disableGutters
          }), [context.dense, dense, disableGutters]);
          const menuItemRef = reactExports.useRef(null);
          useEnhancedEffect$1(() => {
            if (autoFocus) {
              if (menuItemRef.current) {
                menuItemRef.current.focus();
              }
            }
          }, [autoFocus]);
          const ownerState = _extends({}, props, {
            dense: childContext.dense,
            divider,
            disableGutters
          });
          const classes = useUtilityClasses$5(props);
          const handleRef = useForkRef(menuItemRef, ref);
          let tabIndex;
          if (!props.disabled) {
            tabIndex = tabIndexProp !== void 0 ? tabIndexProp : -1;
          }
          return /* @__PURE__ */jsxRuntimeExports.jsx(ListContext$1.Provider, {
            value: childContext,
            children: /* @__PURE__ */jsxRuntimeExports.jsx(MenuItemRoot, _extends({
              ref: handleRef,
              role,
              tabIndex,
              component,
              focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
              className: clsx(classes.root, className)
            }, other, {
              ownerState,
              classes
            }))
          });
        });
        const MenuItem$1 = exports('M', MenuItem);
        function getNativeSelectUtilityClasses(slot) {
          return generateUtilityClass('MuiNativeSelect', slot);
        }
        const nativeSelectClasses = generateUtilityClasses('MuiNativeSelect', ['root', 'select', 'multiple', 'filled', 'outlined', 'standard', 'disabled', 'icon', 'iconOpen', 'iconFilled', 'iconOutlined', 'iconStandard', 'nativeInput', 'error']);
        const nativeSelectClasses$1 = nativeSelectClasses;
        const _excluded$5 = ["className", "disabled", "error", "IconComponent", "inputRef", "variant"];
        const useUtilityClasses$4 = ownerState => {
          const classes = ownerState.classes,
            variant = ownerState.variant,
            disabled = ownerState.disabled,
            multiple = ownerState.multiple,
            open = ownerState.open,
            error = ownerState.error;
          const slots = {
            select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
            icon: ["icon", `icon${capitalize(variant)}`, open && "iconOpen", disabled && "disabled"]
          };
          return composeClasses(slots, getNativeSelectUtilityClasses, classes);
        };
        const nativeSelectSelectStyles = ({
          ownerState,
          theme
        }) => _extends({
          MozAppearance: "none",
          // Reset
          WebkitAppearance: "none",
          // Reset
          // When interacting quickly, the text can end up selected.
          // Native select can't be selected either.
          userSelect: "none",
          borderRadius: 0,
          // Reset
          cursor: "pointer",
          "&:focus": _extends({}, theme.vars ? {
            backgroundColor: `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.05)`
          } : {
            backgroundColor: theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.05)" : "rgba(255, 255, 255, 0.05)"
          }, {
            borderRadius: 0
            // Reset Chrome style
          }),
          // Remove IE11 arrow
          "&::-ms-expand": {
            display: "none"
          },
          [`&.${nativeSelectClasses$1.disabled}`]: {
            cursor: "default"
          },
          "&[multiple]": {
            height: "auto"
          },
          "&:not([multiple]) option, &:not([multiple]) optgroup": {
            backgroundColor: (theme.vars || theme).palette.background.paper
          },
          // Bump specificity to allow extending custom inputs
          "&&&": {
            paddingRight: 24,
            minWidth: 16
            // So it doesn't collapse.
          }
        }, ownerState.variant === "filled" && {
          "&&&": {
            paddingRight: 32
          }
        }, ownerState.variant === "outlined" && {
          borderRadius: (theme.vars || theme).shape.borderRadius,
          "&:focus": {
            borderRadius: (theme.vars || theme).shape.borderRadius
            // Reset the reset for Chrome style
          },
          "&&&": {
            paddingRight: 32
          }
        });
        const NativeSelectSelect = styled$1("select", {
          name: "MuiNativeSelect",
          slot: "Select",
          shouldForwardProp: rootShouldForwardProp,
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [styles.select, styles[ownerState.variant], ownerState.error && styles.error, {
              [`&.${nativeSelectClasses$1.multiple}`]: styles.multiple
            }];
          }
        })(nativeSelectSelectStyles);
        const nativeSelectIconStyles = ({
          ownerState,
          theme
        }) => _extends({
          // We use a position absolute over a flexbox in order to forward the pointer events
          // to the input and to support wrapping tags..
          position: "absolute",
          right: 0,
          top: "calc(50% - .5em)",
          // Center vertically, height is 1em
          pointerEvents: "none",
          // Don't block pointer events on the select under the icon.
          color: (theme.vars || theme).palette.action.active,
          [`&.${nativeSelectClasses$1.disabled}`]: {
            color: (theme.vars || theme).palette.action.disabled
          }
        }, ownerState.open && {
          transform: "rotate(180deg)"
        }, ownerState.variant === "filled" && {
          right: 7
        }, ownerState.variant === "outlined" && {
          right: 7
        });
        const NativeSelectIcon = styled$1("svg", {
          name: "MuiNativeSelect",
          slot: "Icon",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [styles.icon, ownerState.variant && styles[`icon${capitalize(ownerState.variant)}`], ownerState.open && styles.iconOpen];
          }
        })(nativeSelectIconStyles);
        const NativeSelectInput = /* @__PURE__ */reactExports.forwardRef(function NativeSelectInput2(props, ref) {
          const className = props.className,
            disabled = props.disabled,
            error = props.error,
            IconComponent = props.IconComponent,
            inputRef = props.inputRef,
            _props$variant9 = props.variant,
            variant = _props$variant9 === void 0 ? "standard" : _props$variant9,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$5);
          const ownerState = _extends({}, props, {
            disabled,
            variant,
            error
          });
          const classes = useUtilityClasses$4(ownerState);
          return /* @__PURE__ */jsxRuntimeExports.jsxs(reactExports.Fragment, {
            children: [/* @__PURE__ */jsxRuntimeExports.jsx(NativeSelectSelect, _extends({
              ownerState,
              className: clsx(classes.select, className),
              disabled,
              ref: inputRef || ref
            }, other)), props.multiple ? null : /* @__PURE__ */jsxRuntimeExports.jsx(NativeSelectIcon, {
              as: IconComponent,
              ownerState,
              className: classes.icon
            })]
          });
        });
        const NativeSelectInput$1 = NativeSelectInput;
        var _span$1;
        const _excluded$4 = ["children", "classes", "className", "label", "notched"];
        const NotchedOutlineRoot$1 = styled$1("fieldset")({
          textAlign: "left",
          position: "absolute",
          bottom: 0,
          right: 0,
          top: -5,
          left: 0,
          margin: 0,
          padding: "0 8px",
          pointerEvents: "none",
          borderRadius: "inherit",
          borderStyle: "solid",
          borderWidth: 1,
          overflow: "hidden",
          minWidth: "0%"
        });
        const NotchedOutlineLegend = styled$1("legend")(({
          ownerState,
          theme
        }) => _extends({
          float: "unset",
          // Fix conflict with bootstrap
          width: "auto",
          // Fix conflict with bootstrap
          overflow: "hidden"
        }, !ownerState.withLabel && {
          padding: 0,
          lineHeight: "11px",
          // sync with `height` in `legend` styles
          transition: theme.transitions.create("width", {
            duration: 150,
            easing: theme.transitions.easing.easeOut
          })
        }, ownerState.withLabel && _extends({
          display: "block",
          // Fix conflict with normalize.css and sanitize.css
          padding: 0,
          height: 11,
          // sync with `lineHeight` in `legend` styles
          fontSize: "0.75em",
          visibility: "hidden",
          maxWidth: 0.01,
          transition: theme.transitions.create("max-width", {
            duration: 50,
            easing: theme.transitions.easing.easeOut
          }),
          whiteSpace: "nowrap",
          "& > span": {
            paddingLeft: 5,
            paddingRight: 5,
            display: "inline-block",
            opacity: 0,
            visibility: "visible"
          }
        }, ownerState.notched && {
          maxWidth: "100%",
          transition: theme.transitions.create("max-width", {
            duration: 100,
            easing: theme.transitions.easing.easeOut,
            delay: 50
          })
        })));
        function NotchedOutline(props) {
          const className = props.className,
            label = props.label,
            notched = props.notched,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$4);
          const withLabel = label != null && label !== "";
          const ownerState = _extends({}, props, {
            notched,
            withLabel
          });
          return /* @__PURE__ */jsxRuntimeExports.jsx(NotchedOutlineRoot$1, _extends({
            "aria-hidden": true,
            className,
            ownerState
          }, other, {
            children: /* @__PURE__ */jsxRuntimeExports.jsx(NotchedOutlineLegend, {
              ownerState,
              children: withLabel ? /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                children: label
              }) :
              // notranslate needed while Google Translate will not fix zero-width space issue
              _span$1 || (_span$1 = /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                className: "notranslate",
                children: "​"
              }))
            })
          }));
        }
        const _excluded$3 = ["components", "fullWidth", "inputComponent", "label", "multiline", "notched", "slots", "type"];
        const useUtilityClasses$3 = ownerState => {
          const classes = ownerState.classes;
          const slots = {
            root: ["root"],
            notchedOutline: ["notchedOutline"],
            input: ["input"]
          };
          const composedClasses = composeClasses(slots, getOutlinedInputUtilityClass, classes);
          return _extends({}, classes, composedClasses);
        };
        const OutlinedInputRoot = styled$1(InputBaseRoot, {
          shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === "classes",
          name: "MuiOutlinedInput",
          slot: "Root",
          overridesResolver: rootOverridesResolver
        })(({
          theme,
          ownerState
        }) => {
          const borderColor = theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
          return _extends({
            position: "relative",
            borderRadius: (theme.vars || theme).shape.borderRadius,
            [`&:hover .${outlinedInputClasses$1.notchedOutline}`]: {
              borderColor: (theme.vars || theme).palette.text.primary
            },
            // Reset on touch devices, it doesn't add specificity
            "@media (hover: none)": {
              [`&:hover .${outlinedInputClasses$1.notchedOutline}`]: {
                borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor
              }
            },
            [`&.${outlinedInputClasses$1.focused} .${outlinedInputClasses$1.notchedOutline}`]: {
              borderColor: (theme.vars || theme).palette[ownerState.color].main,
              borderWidth: 2
            },
            [`&.${outlinedInputClasses$1.error} .${outlinedInputClasses$1.notchedOutline}`]: {
              borderColor: (theme.vars || theme).palette.error.main
            },
            [`&.${outlinedInputClasses$1.disabled} .${outlinedInputClasses$1.notchedOutline}`]: {
              borderColor: (theme.vars || theme).palette.action.disabled
            }
          }, ownerState.startAdornment && {
            paddingLeft: 14
          }, ownerState.endAdornment && {
            paddingRight: 14
          }, ownerState.multiline && _extends({
            padding: "16.5px 14px"
          }, ownerState.size === "small" && {
            padding: "8.5px 14px"
          }));
        });
        const NotchedOutlineRoot = styled$1(NotchedOutline, {
          name: "MuiOutlinedInput",
          slot: "NotchedOutline",
          overridesResolver: (props, styles) => styles.notchedOutline
        })(({
          theme
        }) => {
          const borderColor = theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
          return {
            borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor
          };
        });
        const OutlinedInputInput = styled$1(InputBaseComponent, {
          name: "MuiOutlinedInput",
          slot: "Input",
          overridesResolver: inputOverridesResolver
        })(({
          theme,
          ownerState
        }) => _extends({
          padding: "16.5px 14px"
        }, !theme.vars && {
          "&:-webkit-autofill": {
            WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
            WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
            caretColor: theme.palette.mode === "light" ? null : "#fff",
            borderRadius: "inherit"
          }
        }, theme.vars && {
          "&:-webkit-autofill": {
            borderRadius: "inherit"
          },
          [theme.getColorSchemeSelector("dark")]: {
            "&:-webkit-autofill": {
              WebkitBoxShadow: "0 0 0 100px #266798 inset",
              WebkitTextFillColor: "#fff",
              caretColor: "#fff"
            }
          }
        }, ownerState.size === "small" && {
          padding: "8.5px 14px"
        }, ownerState.multiline && {
          padding: 0
        }, ownerState.startAdornment && {
          paddingLeft: 0
        }, ownerState.endAdornment && {
          paddingRight: 0
        }));
        const OutlinedInput = /* @__PURE__ */reactExports.forwardRef(function OutlinedInput2(inProps, ref) {
          var _ref, _slots$root, _ref2, _slots$input, _React$Fragment;
          const props = useThemeProps({
            props: inProps,
            name: "MuiOutlinedInput"
          });
          const _props$components6 = props.components,
            components = _props$components6 === void 0 ? {} : _props$components6,
            _props$fullWidth7 = props.fullWidth,
            fullWidth = _props$fullWidth7 === void 0 ? false : _props$fullWidth7,
            _props$inputComponent4 = props.inputComponent,
            inputComponent = _props$inputComponent4 === void 0 ? "input" : _props$inputComponent4,
            label = props.label,
            _props$multiline4 = props.multiline,
            multiline = _props$multiline4 === void 0 ? false : _props$multiline4,
            notched = props.notched,
            _props$slots7 = props.slots,
            slots = _props$slots7 === void 0 ? {} : _props$slots7,
            _props$type4 = props.type,
            type = _props$type4 === void 0 ? "text" : _props$type4,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$3);
          const classes = useUtilityClasses$3(props);
          const muiFormControl = useFormControl();
          const fcs = formControlState({
            props,
            muiFormControl,
            states: ["color", "disabled", "error", "focused", "hiddenLabel", "size", "required"]
          });
          const ownerState = _extends({}, props, {
            color: fcs.color || "primary",
            disabled: fcs.disabled,
            error: fcs.error,
            focused: fcs.focused,
            formControl: muiFormControl,
            fullWidth,
            hiddenLabel: fcs.hiddenLabel,
            multiline,
            size: fcs.size,
            type
          });
          const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : OutlinedInputRoot;
          const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : OutlinedInputInput;
          return /* @__PURE__ */jsxRuntimeExports.jsx(InputBase$1, _extends({
            slots: {
              root: RootSlot,
              input: InputSlot
            },
            renderSuffix: state => /* @__PURE__ */jsxRuntimeExports.jsx(NotchedOutlineRoot, {
              ownerState,
              className: classes.notchedOutline,
              label: label != null && label !== "" && fcs.required ? _React$Fragment || (_React$Fragment = /* @__PURE__ */jsxRuntimeExports.jsxs(reactExports.Fragment, {
                children: [label, " ", "*"]
              })) : label,
              notched: typeof notched !== "undefined" ? notched : Boolean(state.startAdornment || state.filled || state.focused)
            }),
            fullWidth,
            inputComponent,
            multiline,
            ref,
            type
          }, other, {
            classes: _extends({}, classes, {
              notchedOutline: null
            })
          }));
        });
        OutlinedInput.muiName = "Input";
        const OutlinedInput$1 = exports('bs', OutlinedInput);
        function getSelectUtilityClasses(slot) {
          return generateUtilityClass('MuiSelect', slot);
        }
        const selectClasses = generateUtilityClasses('MuiSelect', ['select', 'multiple', 'filled', 'outlined', 'standard', 'disabled', 'focused', 'icon', 'iconOpen', 'iconFilled', 'iconOutlined', 'iconStandard', 'nativeInput', 'error']);
        const selectClasses$1 = selectClasses;
        var _span;
        const _excluded$2 = ["aria-describedby", "aria-label", "autoFocus", "autoWidth", "children", "className", "defaultOpen", "defaultValue", "disabled", "displayEmpty", "error", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"];
        const SelectSelect = styled$1("div", {
          name: "MuiSelect",
          slot: "Select",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [
            // Win specificity over the input base
            {
              [`&.${selectClasses$1.select}`]: styles.select
            }, {
              [`&.${selectClasses$1.select}`]: styles[ownerState.variant]
            }, {
              [`&.${selectClasses$1.error}`]: styles.error
            }, {
              [`&.${selectClasses$1.multiple}`]: styles.multiple
            }];
          }
        })(nativeSelectSelectStyles, {
          // Win specificity over the input base
          [`&.${selectClasses$1.select}`]: {
            height: "auto",
            // Resets for multiple select with chips
            minHeight: "1.4375em",
            // Required for select\text-field height consistency
            textOverflow: "ellipsis",
            whiteSpace: "nowrap",
            overflow: "hidden"
          }
        });
        const SelectIcon = styled$1("svg", {
          name: "MuiSelect",
          slot: "Icon",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [styles.icon, ownerState.variant && styles[`icon${capitalize(ownerState.variant)}`], ownerState.open && styles.iconOpen];
          }
        })(nativeSelectIconStyles);
        const SelectNativeInput = styled$1("input", {
          shouldForwardProp: prop => slotShouldForwardProp(prop) && prop !== "classes",
          name: "MuiSelect",
          slot: "NativeInput",
          overridesResolver: (props, styles) => styles.nativeInput
        })({
          bottom: 0,
          left: 0,
          position: "absolute",
          opacity: 0,
          pointerEvents: "none",
          width: "100%",
          boxSizing: "border-box"
        });
        function areEqualValues(a, b) {
          if (typeof b === "object" && b !== null) {
            return a === b;
          }
          return String(a) === String(b);
        }
        function isEmpty(display) {
          return display == null || typeof display === "string" && !display.trim();
        }
        const useUtilityClasses$2 = ownerState => {
          const classes = ownerState.classes,
            variant = ownerState.variant,
            disabled = ownerState.disabled,
            multiple = ownerState.multiple,
            open = ownerState.open,
            error = ownerState.error;
          const slots = {
            select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
            icon: ["icon", `icon${capitalize(variant)}`, open && "iconOpen", disabled && "disabled"],
            nativeInput: ["nativeInput"]
          };
          return composeClasses(slots, getSelectUtilityClasses, classes);
        };
        const SelectInput = /* @__PURE__ */reactExports.forwardRef(function SelectInput2(props, ref) {
          const ariaDescribedby = props["aria-describedby"],
            ariaLabel = props["aria-label"],
            autoFocus = props.autoFocus,
            autoWidth = props.autoWidth,
            children = props.children,
            className = props.className,
            defaultOpen = props.defaultOpen,
            defaultValue = props.defaultValue,
            disabled = props.disabled,
            displayEmpty = props.displayEmpty,
            _props$error2 = props.error,
            error = _props$error2 === void 0 ? false : _props$error2,
            IconComponent = props.IconComponent,
            inputRefProp = props.inputRef,
            labelId = props.labelId,
            _props$MenuProps = props.MenuProps,
            MenuProps = _props$MenuProps === void 0 ? {} : _props$MenuProps,
            multiple = props.multiple,
            name = props.name,
            onBlur = props.onBlur,
            onChange = props.onChange,
            onClose = props.onClose,
            onFocus = props.onFocus,
            onOpen = props.onOpen,
            openProp = props.open,
            readOnly = props.readOnly,
            renderValue = props.renderValue,
            _props$SelectDisplayP = props.SelectDisplayProps,
            SelectDisplayProps = _props$SelectDisplayP === void 0 ? {} : _props$SelectDisplayP,
            tabIndexProp = props.tabIndex,
            valueProp = props.value,
            _props$variant10 = props.variant,
            variant = _props$variant10 === void 0 ? "standard" : _props$variant10,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$2);
          const _useControlled = useControlled({
              controlled: valueProp,
              default: defaultValue,
              name: "Select"
            }),
            _useControlled2 = _slicedToArray2(_useControlled, 2),
            value = _useControlled2[0],
            setValueState = _useControlled2[1];
          const _useControlled3 = useControlled({
              controlled: openProp,
              default: defaultOpen,
              name: "Select"
            }),
            _useControlled4 = _slicedToArray2(_useControlled3, 2),
            openState = _useControlled4[0],
            setOpenState = _useControlled4[1];
          const inputRef = reactExports.useRef(null);
          const displayRef = reactExports.useRef(null);
          const _reactExports$useStat33 = reactExports.useState(null),
            _reactExports$useStat34 = _slicedToArray2(_reactExports$useStat33, 2),
            displayNode = _reactExports$useStat34[0],
            setDisplayNode = _reactExports$useStat34[1];
          const _reactExports$useRef4 = reactExports.useRef(openProp != null),
            isOpenControlled = _reactExports$useRef4.current;
          const _reactExports$useStat35 = reactExports.useState(),
            _reactExports$useStat36 = _slicedToArray2(_reactExports$useStat35, 2),
            menuMinWidthState = _reactExports$useStat36[0],
            setMenuMinWidthState = _reactExports$useStat36[1];
          const handleRef = useForkRef(ref, inputRefProp);
          const handleDisplayRef = reactExports.useCallback(node => {
            displayRef.current = node;
            if (node) {
              setDisplayNode(node);
            }
          }, []);
          const anchorElement = displayNode == null ? void 0 : displayNode.parentNode;
          reactExports.useImperativeHandle(handleRef, () => ({
            focus: () => {
              displayRef.current.focus();
            },
            node: inputRef.current,
            value
          }), [value]);
          reactExports.useEffect(() => {
            if (defaultOpen && openState && displayNode && !isOpenControlled) {
              setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
              displayRef.current.focus();
            }
          }, [displayNode, autoWidth]);
          reactExports.useEffect(() => {
            if (autoFocus) {
              displayRef.current.focus();
            }
          }, [autoFocus]);
          reactExports.useEffect(() => {
            if (!labelId) {
              return void 0;
            }
            const label = ownerDocument(displayRef.current).getElementById(labelId);
            if (label) {
              const handler = () => {
                if (getSelection().isCollapsed) {
                  displayRef.current.focus();
                }
              };
              label.addEventListener("click", handler);
              return () => {
                label.removeEventListener("click", handler);
              };
            }
            return void 0;
          }, [labelId]);
          const update = (open2, event) => {
            if (open2) {
              if (onOpen) {
                onOpen(event);
              }
            } else if (onClose) {
              onClose(event);
            }
            if (!isOpenControlled) {
              setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
              setOpenState(open2);
            }
          };
          const handleMouseDown = event => {
            if (event.button !== 0) {
              return;
            }
            event.preventDefault();
            displayRef.current.focus();
            update(true, event);
          };
          const handleClose = event => {
            update(false, event);
          };
          const childrenArray = reactExports.Children.toArray(children);
          const handleChange = event => {
            const child = childrenArray.find(childItem => childItem.props.value === event.target.value);
            if (child === void 0) {
              return;
            }
            setValueState(child.props.value);
            if (onChange) {
              onChange(event, child);
            }
          };
          const handleItemClick = child => event => {
            let newValue;
            if (!event.currentTarget.hasAttribute("tabindex")) {
              return;
            }
            if (multiple) {
              newValue = Array.isArray(value) ? value.slice() : [];
              const itemIndex = value.indexOf(child.props.value);
              if (itemIndex === -1) {
                newValue.push(child.props.value);
              } else {
                newValue.splice(itemIndex, 1);
              }
            } else {
              newValue = child.props.value;
            }
            if (child.props.onClick) {
              child.props.onClick(event);
            }
            if (value !== newValue) {
              setValueState(newValue);
              if (onChange) {
                const nativeEvent = event.nativeEvent || event;
                const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                Object.defineProperty(clonedEvent, "target", {
                  writable: true,
                  value: {
                    value: newValue,
                    name
                  }
                });
                onChange(clonedEvent, child);
              }
            }
            if (!multiple) {
              update(false, event);
            }
          };
          const handleKeyDown = event => {
            if (!readOnly) {
              const validKeys = [" ", "ArrowUp", "ArrowDown",
              // The native select doesn't respond to enter on macOS, but it's recommended by
              // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/
              "Enter"];
              if (validKeys.indexOf(event.key) !== -1) {
                event.preventDefault();
                update(true, event);
              }
            }
          };
          const open = displayNode !== null && openState;
          const handleBlur = event => {
            if (!open && onBlur) {
              Object.defineProperty(event, "target", {
                writable: true,
                value: {
                  value,
                  name
                }
              });
              onBlur(event);
            }
          };
          delete other["aria-invalid"];
          let display;
          let displaySingle;
          const displayMultiple = [];
          let computeDisplay = false;
          if (isFilled({
            value
          }) || displayEmpty) {
            if (renderValue) {
              display = renderValue(value);
            } else {
              computeDisplay = true;
            }
          }
          const items = childrenArray.map(child => {
            if (! /* @__PURE__ */reactExports.isValidElement(child)) {
              return null;
            }
            let selected;
            if (multiple) {
              if (!Array.isArray(value)) {
                throw new Error(formatMuiErrorMessage(2));
              }
              selected = value.some(v => areEqualValues(v, child.props.value));
              if (selected && computeDisplay) {
                displayMultiple.push(child.props.children);
              }
            } else {
              selected = areEqualValues(value, child.props.value);
              if (selected && computeDisplay) {
                displaySingle = child.props.children;
              }
            }
            return /* @__PURE__ */reactExports.cloneElement(child, {
              "aria-selected": selected ? "true" : "false",
              onClick: handleItemClick(child),
              onKeyUp: event => {
                if (event.key === " ") {
                  event.preventDefault();
                }
                if (child.props.onKeyUp) {
                  child.props.onKeyUp(event);
                }
              },
              role: "option",
              selected,
              value: void 0,
              // The value is most likely not a valid HTML attribute.
              "data-value": child.props.value
              // Instead, we provide it as a data attribute.
            });
          });
          if (computeDisplay) {
            if (multiple) {
              if (displayMultiple.length === 0) {
                display = null;
              } else {
                display = displayMultiple.reduce((output, child, index) => {
                  output.push(child);
                  if (index < displayMultiple.length - 1) {
                    output.push(", ");
                  }
                  return output;
                }, []);
              }
            } else {
              display = displaySingle;
            }
          }
          let menuMinWidth = menuMinWidthState;
          if (!autoWidth && isOpenControlled && displayNode) {
            menuMinWidth = anchorElement.clientWidth;
          }
          let tabIndex;
          if (typeof tabIndexProp !== "undefined") {
            tabIndex = tabIndexProp;
          } else {
            tabIndex = disabled ? null : 0;
          }
          const buttonId = SelectDisplayProps.id || (name ? `mui-component-select-${name}` : void 0);
          const ownerState = _extends({}, props, {
            variant,
            value,
            open,
            error
          });
          const classes = useUtilityClasses$2(ownerState);
          return /* @__PURE__ */jsxRuntimeExports.jsxs(reactExports.Fragment, {
            children: [/* @__PURE__ */jsxRuntimeExports.jsx(SelectSelect, _extends({
              ref: handleDisplayRef,
              tabIndex,
              role: "button",
              "aria-disabled": disabled ? "true" : void 0,
              "aria-expanded": open ? "true" : "false",
              "aria-haspopup": "listbox",
              "aria-label": ariaLabel,
              "aria-labelledby": [labelId, buttonId].filter(Boolean).join(" ") || void 0,
              "aria-describedby": ariaDescribedby,
              onKeyDown: handleKeyDown,
              onMouseDown: disabled || readOnly ? null : handleMouseDown,
              onBlur: handleBlur,
              onFocus
            }, SelectDisplayProps, {
              ownerState,
              className: clsx(SelectDisplayProps.className, classes.select, className),
              id: buttonId,
              children: isEmpty(display) ?
              // notranslate needed while Google Translate will not fix zero-width space issue
              _span || (_span = /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                className: "notranslate",
                children: "​"
              })) : display
            })), /* @__PURE__ */jsxRuntimeExports.jsx(SelectNativeInput, _extends({
              "aria-invalid": error,
              value: Array.isArray(value) ? value.join(",") : value,
              name,
              ref: inputRef,
              "aria-hidden": true,
              onChange: handleChange,
              tabIndex: -1,
              disabled,
              className: classes.nativeInput,
              autoFocus,
              ownerState
            }, other)), /* @__PURE__ */jsxRuntimeExports.jsx(SelectIcon, {
              as: IconComponent,
              className: classes.icon,
              ownerState
            }), /* @__PURE__ */jsxRuntimeExports.jsx(Menu$2, _extends({
              id: `menu-${name || ""}`,
              anchorEl: anchorElement,
              open,
              onClose: handleClose,
              anchorOrigin: {
                vertical: "bottom",
                horizontal: "center"
              },
              transformOrigin: {
                vertical: "top",
                horizontal: "center"
              }
            }, MenuProps, {
              MenuListProps: _extends({
                "aria-labelledby": labelId,
                role: "listbox",
                disableListWrap: true
              }, MenuProps.MenuListProps),
              PaperProps: _extends({}, MenuProps.PaperProps, {
                style: _extends({
                  minWidth: menuMinWidth
                }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)
              }),
              children: items
            }))]
          });
        });
        const SelectInput$1 = SelectInput;
        const _excluded$1 = ["autoWidth", "children", "classes", "className", "defaultOpen", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"];
        const useUtilityClasses$1 = ownerState => {
          const classes = ownerState.classes;
          return classes;
        };
        const styledRootConfig = {
          name: "MuiSelect",
          overridesResolver: (props, styles) => styles.root,
          shouldForwardProp: prop => rootShouldForwardProp(prop) && prop !== "variant",
          slot: "Root"
        };
        const StyledInput = styled$1(Input$1, styledRootConfig)("");
        const StyledOutlinedInput = styled$1(OutlinedInput$1, styledRootConfig)("");
        const StyledFilledInput = styled$1(FilledInput$1, styledRootConfig)("");
        const Select = /* @__PURE__ */reactExports.forwardRef(function Select2(inProps, ref) {
          const props = useThemeProps({
            name: "MuiSelect",
            props: inProps
          });
          const _props$autoWidth = props.autoWidth,
            autoWidth = _props$autoWidth === void 0 ? false : _props$autoWidth,
            children = props.children,
            _props$classes2 = props.classes,
            classesProp = _props$classes2 === void 0 ? {} : _props$classes2,
            className = props.className,
            _props$defaultOpen = props.defaultOpen,
            defaultOpen = _props$defaultOpen === void 0 ? false : _props$defaultOpen,
            _props$displayEmpty = props.displayEmpty,
            displayEmpty = _props$displayEmpty === void 0 ? false : _props$displayEmpty,
            _props$IconComponent = props.IconComponent,
            IconComponent = _props$IconComponent === void 0 ? ArrowDropDownIcon : _props$IconComponent,
            id = props.id,
            input = props.input,
            inputProps = props.inputProps,
            label = props.label,
            labelId = props.labelId,
            MenuProps = props.MenuProps,
            _props$multiple = props.multiple,
            multiple = _props$multiple === void 0 ? false : _props$multiple,
            _props$native = props.native,
            native = _props$native === void 0 ? false : _props$native,
            onClose = props.onClose,
            onOpen = props.onOpen,
            open = props.open,
            renderValue = props.renderValue,
            SelectDisplayProps = props.SelectDisplayProps,
            _props$variant11 = props.variant,
            variantProp = _props$variant11 === void 0 ? "outlined" : _props$variant11,
            other = _objectWithoutPropertiesLoose$2(props, _excluded$1);
          const inputComponent = native ? NativeSelectInput$1 : SelectInput$1;
          const muiFormControl = useFormControl();
          const fcs = formControlState({
            props,
            muiFormControl,
            states: ["variant", "error"]
          });
          const variant = fcs.variant || variantProp;
          const ownerState = _extends({}, props, {
            variant,
            classes: classesProp
          });
          const classes = useUtilityClasses$1(ownerState);
          const InputComponent = input || {
            standard: /* @__PURE__ */jsxRuntimeExports.jsx(StyledInput, {
              ownerState
            }),
            outlined: /* @__PURE__ */jsxRuntimeExports.jsx(StyledOutlinedInput, {
              label,
              ownerState
            }),
            filled: /* @__PURE__ */jsxRuntimeExports.jsx(StyledFilledInput, {
              ownerState
            })
          }[variant];
          const inputComponentRef = useForkRef(ref, InputComponent.ref);
          return /* @__PURE__ */jsxRuntimeExports.jsx(reactExports.Fragment, {
            children: /* @__PURE__ */reactExports.cloneElement(InputComponent, _extends({
              // Most of the logic is implemented in `SelectInput`.
              // The `Select` component is a simple API wrapper to expose something better to play with.
              inputComponent,
              inputProps: _extends({
                children,
                error: fcs.error,
                IconComponent,
                variant,
                type: void 0,
                // We render a select. We can ignore the type provided by the `Input`.
                multiple
              }, native ? {
                id
              } : {
                autoWidth,
                defaultOpen,
                displayEmpty,
                labelId,
                MenuProps,
                onClose,
                onOpen,
                open,
                renderValue,
                SelectDisplayProps: _extends({
                  id
                }, SelectDisplayProps)
              }, inputProps, {
                classes: inputProps ? deepmerge(classes, inputProps.classes) : classes
              }, input ? input.props.inputProps : {})
            }, multiple && native && variant === "outlined" ? {
              notched: true
            } : {}, {
              ref: inputComponentRef,
              className: clsx(InputComponent.props.className, className)
            }, !input && {
              variant
            }, other))
          });
        });
        Select.muiName = "Select";
        const Select$1 = exports('S', Select);
        function getToolbarUtilityClass(slot) {
          return generateUtilityClass('MuiToolbar', slot);
        }
        generateUtilityClasses('MuiToolbar', ['root', 'gutters', 'regular', 'dense']);
        const _excluded = ["className", "component", "disableGutters", "variant"];
        const useUtilityClasses = ownerState => {
          const classes = ownerState.classes,
            disableGutters = ownerState.disableGutters,
            variant = ownerState.variant;
          const slots = {
            root: ["root", !disableGutters && "gutters", variant]
          };
          return composeClasses(slots, getToolbarUtilityClass, classes);
        };
        const ToolbarRoot = styled$1("div", {
          name: "MuiToolbar",
          slot: "Root",
          overridesResolver: (props, styles) => {
            const ownerState = props.ownerState;
            return [styles.root, !ownerState.disableGutters && styles.gutters, styles[ownerState.variant]];
          }
        })(({
          theme,
          ownerState
        }) => _extends({
          position: "relative",
          display: "flex",
          alignItems: "center"
        }, !ownerState.disableGutters && {
          paddingLeft: theme.spacing(2),
          paddingRight: theme.spacing(2),
          [theme.breakpoints.up("sm")]: {
            paddingLeft: theme.spacing(3),
            paddingRight: theme.spacing(3)
          }
        }, ownerState.variant === "dense" && {
          minHeight: 48
        }), ({
          theme,
          ownerState
        }) => ownerState.variant === "regular" && theme.mixins.toolbar);
        const Toolbar = /* @__PURE__ */reactExports.forwardRef(function Toolbar2(inProps, ref) {
          const props = useThemeProps({
            props: inProps,
            name: "MuiToolbar"
          });
          const className = props.className,
            _props$component11 = props.component,
            component = _props$component11 === void 0 ? "div" : _props$component11,
            _props$disableGutters2 = props.disableGutters,
            disableGutters = _props$disableGutters2 === void 0 ? false : _props$disableGutters2,
            _props$variant12 = props.variant,
            variant = _props$variant12 === void 0 ? "regular" : _props$variant12,
            other = _objectWithoutPropertiesLoose$2(props, _excluded);
          const ownerState = _extends({}, props, {
            component,
            disableGutters,
            variant
          });
          const classes = useUtilityClasses(ownerState);
          return /* @__PURE__ */jsxRuntimeExports.jsx(ToolbarRoot, _extends({
            as: component,
            className: clsx(classes.root, className),
            ref,
            ownerState
          }, other));
        });
        const Toolbar$1 = exports('bL', Toolbar);
        reactExports.lazy(() => __vitePreload(() => Promise.resolve().then(() => Android$1), false ? "__VITE_PRELOAD__" : void 0));
        reactExports.lazy(() => __vitePreload(() => module.import('./Web-legacy-LDhM2X1u.js').then(n => n.W), false ? "__VITE_PRELOAD__" : void 0));
        var shim = {
          exports: {}
        };
        var useSyncExternalStoreShim_production_min = {};

        /**
         * @license React
         * use-sync-external-store-shim.production.min.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        var e = reactExports;
        function h$2(a, b) {
          return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
        }
        var k$1 = "function" === typeof Object.is ? Object.is : h$2,
          l$1 = e.useState,
          m$1 = e.useEffect,
          n$2 = e.useLayoutEffect,
          p$2 = e.useDebugValue;
        function q$2(a, b) {
          var d = b(),
            f = l$1({
              inst: {
                value: d,
                getSnapshot: b
              }
            }),
            c = f[0].inst,
            g = f[1];
          n$2(function () {
            c.value = d;
            c.getSnapshot = b;
            r$2(c) && g({
              inst: c
            });
          }, [a, d, b]);
          m$1(function () {
            r$2(c) && g({
              inst: c
            });
            return a(function () {
              r$2(c) && g({
                inst: c
              });
            });
          }, [a]);
          p$2(d);
          return d;
        }
        function r$2(a) {
          var b = a.getSnapshot;
          a = a.value;
          try {
            var d = b();
            return !k$1(a, d);
          } catch (f) {
            return !0;
          }
        }
        function t$2(a, b) {
          return b();
        }
        var u$2 = "undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement ? t$2 : q$2;
        useSyncExternalStoreShim_production_min.useSyncExternalStore = void 0 !== e.useSyncExternalStore ? e.useSyncExternalStore : u$2;
        {
          shim.exports = useSyncExternalStoreShim_production_min;
        }
        var shimExports = shim.exports;
        var withSelector = {
          exports: {}
        };
        var withSelector_production_min = {};

        /**
         * @license React
         * use-sync-external-store-shim/with-selector.production.min.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */
        var h$1 = reactExports,
          n$1 = shimExports;
        function p$1(a, b) {
          return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
        }
        var q$1 = "function" === typeof Object.is ? Object.is : p$1,
          r$1 = n$1.useSyncExternalStore,
          t$1 = h$1.useRef,
          u$1 = h$1.useEffect,
          v$1 = h$1.useMemo,
          w$1 = h$1.useDebugValue;
        withSelector_production_min.useSyncExternalStoreWithSelector = function (a, b, e, l, g) {
          var c = t$1(null);
          if (null === c.current) {
            var f = {
              hasValue: !1,
              value: null
            };
            c.current = f;
          } else f = c.current;
          c = v$1(function () {
            function a(a) {
              if (!c) {
                c = !0;
                d = a;
                a = l(a);
                if (void 0 !== g && f.hasValue) {
                  var b = f.value;
                  if (g(b, a)) return k = b;
                }
                return k = a;
              }
              b = k;
              if (q$1(d, a)) return b;
              var e = l(a);
              if (void 0 !== g && g(b, e)) return b;
              d = a;
              return k = e;
            }
            var c = !1,
              d,
              k,
              m = void 0 === e ? null : e;
            return [function () {
              return a(b());
            }, null === m ? void 0 : function () {
              return a(m());
            }];
          }, [b, e, l, g]);
          var d = r$1(a, c[0], c[1]);
          u$1(function () {
            f.hasValue = !0;
            f.value = d;
          }, [d]);
          w$1(d);
          return d;
        };
        {
          withSelector.exports = withSelector_production_min;
        }
        var withSelectorExports = withSelector.exports;

        // Default to a dummy "batch" implementation that just runs the callback
        function defaultNoopBatch(callback) {
          callback();
        }
        let batch = defaultNoopBatch; // Allow injecting another batching function later

        const setBatch = newBatch => batch = newBatch; // Supply a getter just to skip dealing with ESM bindings

        const getBatch = () => batch;
        const ContextKey = Symbol.for(`react-redux-context`);
        const gT = typeof globalThis !== "undefined" ? globalThis : ( /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
        {});
        function getContext() {
          var _gT$ContextKey;
          if (!reactExports.createContext) return {};
          const contextMap = (_gT$ContextKey = gT[ContextKey]) != null ? _gT$ContextKey : gT[ContextKey] = /* @__PURE__ */new Map();
          let realContext = contextMap.get(reactExports.createContext);
          if (!realContext) {
            realContext = reactExports.createContext(null);
            contextMap.set(reactExports.createContext, realContext);
          }
          return realContext;
        }
        const ReactReduxContext = /* @__PURE__ */getContext();
        function createReduxContextHook(context = ReactReduxContext) {
          return function useReduxContext2() {
            const contextValue = reactExports.useContext(context);
            return contextValue;
          };
        }
        const useReduxContext = /* @__PURE__ */createReduxContextHook();
        const notInitialized = () => {
          throw new Error('uSES not initialized!');
        };
        let useSyncExternalStoreWithSelector = notInitialized;
        const initializeUseSelector = fn => {
          useSyncExternalStoreWithSelector = fn;
        };
        const refEquality = (a, b) => a === b;
        function createSelectorHook(context = ReactReduxContext) {
          const useReduxContext$1 = context === ReactReduxContext ? useReduxContext : createReduxContextHook(context);
          return function useSelector2(selector, equalityFnOrOptions = {}) {
            const _ref14 = typeof equalityFnOrOptions === "function" ? {
                equalityFn: equalityFnOrOptions
              } : equalityFnOrOptions,
              _ref14$equalityFn = _ref14.equalityFn,
              equalityFn = _ref14$equalityFn === void 0 ? refEquality : _ref14$equalityFn,
              _ref14$stabilityCheck = _ref14.stabilityCheck,
              stabilityCheck = _ref14$stabilityCheck === void 0 ? void 0 : _ref14$stabilityCheck,
              _ref14$noopCheck = _ref14.noopCheck,
              noopCheck = _ref14$noopCheck === void 0 ? void 0 : _ref14$noopCheck;
            const _useReduxContext$ = useReduxContext$1(),
              store = _useReduxContext$.store,
              subscription = _useReduxContext$.subscription,
              getServerState = _useReduxContext$.getServerState,
              globalStabilityCheck = _useReduxContext$.stabilityCheck,
              globalNoopCheck = _useReduxContext$.noopCheck;
            reactExports.useRef(true);
            const wrappedSelector = reactExports.useCallback({
              [selector.name](state) {
                const selected = selector(state);
                return selected;
              }
            }[selector.name], [selector, globalStabilityCheck, stabilityCheck]);
            const selectedState = useSyncExternalStoreWithSelector(subscription.addNestedSub, store.getState, getServerState || store.getState, wrappedSelector, equalityFn);
            reactExports.useDebugValue(selectedState);
            return selectedState;
          };
        }
        const useSelector = exports("E", /* @__PURE__ */createSelectorHook());

        // well as nesting subscriptions of descendant components, so that we can ensure the
        // ancestor components re-render before descendants

        function createListenerCollection() {
          const batch = getBatch();
          let first = null;
          let last = null;
          return {
            clear() {
              first = null;
              last = null;
            },
            notify() {
              batch(() => {
                let listener = first;
                while (listener) {
                  listener.callback();
                  listener = listener.next;
                }
              });
            },
            get() {
              let listeners = [];
              let listener = first;
              while (listener) {
                listeners.push(listener);
                listener = listener.next;
              }
              return listeners;
            },
            subscribe(callback) {
              let isSubscribed = true;
              let listener = last = {
                callback,
                next: null,
                prev: last
              };
              if (listener.prev) {
                listener.prev.next = listener;
              } else {
                first = listener;
              }
              return function unsubscribe() {
                if (!isSubscribed || first === null) return;
                isSubscribed = false;
                if (listener.next) {
                  listener.next.prev = listener.prev;
                } else {
                  last = listener.prev;
                }
                if (listener.prev) {
                  listener.prev.next = listener.next;
                } else {
                  first = listener.next;
                }
              };
            }
          };
        }
        const nullListeners = {
          notify() {},
          get: () => []
        };
        function createSubscription(store, parentSub) {
          let unsubscribe;
          let listeners = nullListeners;
          function addNestedSub(listener) {
            trySubscribe();
            return listeners.subscribe(listener);
          }
          function notifyNestedSubs() {
            listeners.notify();
          }
          function handleChangeWrapper() {
            if (subscription.onStateChange) {
              subscription.onStateChange();
            }
          }
          function isSubscribed() {
            return Boolean(unsubscribe);
          }
          function trySubscribe() {
            if (!unsubscribe) {
              unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);
              listeners = createListenerCollection();
            }
          }
          function tryUnsubscribe() {
            if (unsubscribe) {
              unsubscribe();
              unsubscribe = undefined;
              listeners.clear();
              listeners = nullListeners;
            }
          }
          const subscription = {
            addNestedSub,
            notifyNestedSubs,
            handleChangeWrapper,
            isSubscribed,
            trySubscribe,
            tryUnsubscribe,
            getListeners: () => listeners
          };
          return subscription;
        }

        // To get around it, we can conditionally useEffect on the server (no-op) and
        // useLayoutEffect in the browser. We need useLayoutEffect to ensure the store
        // subscription callback always has the selector from the latest render commit
        // available, otherwise a store update may happen between render and the effect,
        // which may cause missed updates; we also must ensure the store subscription
        // is created synchronously, otherwise a store update may occur before the
        // subscription is created and an inconsistent state may be observed
        // Matches logic in React's `shared/ExecutionEnvironment` file

        const canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');
        const useIsomorphicLayoutEffect$1 = canUseDOM ? reactExports.useLayoutEffect : reactExports.useEffect;
        function is(x, y) {
          if (x === y) {
            return x !== 0 || y !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function shallowEqual$1(objA, objB) {
          if (is(objA, objB)) return true;
          if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
            return false;
          }
          const keysA = Object.keys(objA);
          const keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) return false;
          for (let i = 0; i < keysA.length; i++) {
            if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
              return false;
            }
          }
          return true;
        }
        function Provider({
          store,
          context,
          children,
          serverState,
          stabilityCheck = 'once',
          noopCheck = 'once'
        }) {
          const contextValue = reactExports.useMemo(() => {
            const subscription = createSubscription(store);
            return {
              store,
              subscription,
              getServerState: serverState ? () => serverState : undefined,
              stabilityCheck,
              noopCheck
            };
          }, [store, serverState, stabilityCheck, noopCheck]);
          const previousState = reactExports.useMemo(() => store.getState(), [store]);
          useIsomorphicLayoutEffect$1(() => {
            const subscription = contextValue.subscription;
            subscription.onStateChange = subscription.notifyNestedSubs;
            subscription.trySubscribe();
            if (previousState !== store.getState()) {
              subscription.notifyNestedSubs();
            }
            return () => {
              subscription.tryUnsubscribe();
              subscription.onStateChange = undefined;
            };
          }, [contextValue, previousState]);
          const Context = context || ReactReduxContext; // @ts-ignore 'AnyAction' is assignable to the constraint of type 'A', but 'A' could be instantiated with a different subtype

          return /*#__PURE__*/reactExports.createElement(Context.Provider, {
            value: contextValue
          }, children);
        }

        /**
         * Hook factory, which creates a `useStore` hook bound to a given context.
         *
         * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
         * @returns {Function} A `useStore` hook bound to the specified context.
         */

        function createStoreHook(context = ReactReduxContext) {
          const useReduxContext$1 =
          // @ts-ignore
          context === ReactReduxContext ? useReduxContext :
          // @ts-ignore
          createReduxContextHook(context);
          return function useStore() {
            const _useReduxContext$2 = useReduxContext$1(),
              store = _useReduxContext$2.store; // @ts-ignore

            return store;
          };
        }
        /**
         * A hook to access the redux store.
         *
         * @returns {any} the redux store
         *
         * @example
         *
         * import React from 'react'
         * import { useStore } from 'react-redux'
         *
         * export const ExampleComponent = () => {
         *   const store = useStore()
         *   return <div>{store.getState()}</div>
         * }
         */

        const useStore = /*#__PURE__*/createStoreHook();

        /**
         * Hook factory, which creates a `useDispatch` hook bound to a given context.
         *
         * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
         * @returns {Function} A `useDispatch` hook bound to the specified context.
         */

        function createDispatchHook(context = ReactReduxContext) {
          const useStore$1 =
          // @ts-ignore
          context === ReactReduxContext ? useStore : createStoreHook(context);
          return function useDispatch() {
            const store = useStore$1(); // @ts-ignore

            return store.dispatch;
          };
        }
        /**
         * A hook to access the redux `dispatch` function.
         *
         * @returns {any|function} redux store's `dispatch` function
         *
         * @example
         *
         * import React, { useCallback } from 'react'
         * import { useDispatch } from 'react-redux'
         *
         * export const CounterComponent = ({ value }) => {
         *   const dispatch = useDispatch()
         *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])
         *   return (
         *     <div>
         *       <span>{value}</span>
         *       <button onClick={increaseCounter}>Increase counter</button>
         *     </div>
         *   )
         * }
         */

        const useDispatch = exports("z", /*#__PURE__*/createDispatchHook());

        // The primary entry point assumes we're working with standard ReactDOM/RN, but
        // older versions that do not include `useSyncExternalStore` (React 16.9 - 17.x).
        // Because of that, the useSyncExternalStore compat shim is needed.
        initializeUseSelector(withSelectorExports.useSyncExternalStoreWithSelector);
        // with standard React renderers (ReactDOM, React Native)

        setBatch(reactDomExports.unstable_batchedUpdates);
        function n(n2) {
          for (var r2 = arguments.length, t2 = Array(r2 > 1 ? r2 - 1 : 0), e2 = 1; e2 < r2; e2++) t2[e2 - 1] = arguments[e2];
          throw Error("[Immer] minified error nr: " + n2 + (t2.length ? " " + t2.map(function (n3) {
            return "'" + n3 + "'";
          }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
        }
        function r(n2) {
          return !!n2 && !!n2[Q];
        }
        function t(n2) {
          var r2;
          return !!n2 && (function (n3) {
            if (!n3 || "object" != typeof n3) return false;
            var r3 = Object.getPrototypeOf(n3);
            if (null === r3) return true;
            var t2 = Object.hasOwnProperty.call(r3, "constructor") && r3.constructor;
            return t2 === Object || "function" == typeof t2 && Function.toString.call(t2) === Z;
          }(n2) || Array.isArray(n2) || !!n2[L] || !!(null === (r2 = n2.constructor) || void 0 === r2 ? void 0 : r2[L]) || s(n2) || v(n2));
        }
        function i(n2, r2, t2) {
          void 0 === t2 && (t2 = false), 0 === o(n2) ? (t2 ? Object.keys : nn)(n2).forEach(function (e2) {
            t2 && "symbol" == typeof e2 || r2(e2, n2[e2], n2);
          }) : n2.forEach(function (t3, e2) {
            return r2(e2, t3, n2);
          });
        }
        function o(n2) {
          var r2 = n2[Q];
          return r2 ? r2.i > 3 ? r2.i - 4 : r2.i : Array.isArray(n2) ? 1 : s(n2) ? 2 : v(n2) ? 3 : 0;
        }
        function u(n2, r2) {
          return 2 === o(n2) ? n2.has(r2) : Object.prototype.hasOwnProperty.call(n2, r2);
        }
        function a(n2, r2) {
          return 2 === o(n2) ? n2.get(r2) : n2[r2];
        }
        function f(n2, r2, t2) {
          var e2 = o(n2);
          2 === e2 ? n2.set(r2, t2) : 3 === e2 ? n2.add(t2) : n2[r2] = t2;
        }
        function c(n2, r2) {
          return n2 === r2 ? 0 !== n2 || 1 / n2 == 1 / r2 : n2 != n2 && r2 != r2;
        }
        function s(n2) {
          return X && n2 instanceof Map;
        }
        function v(n2) {
          return q && n2 instanceof Set;
        }
        function p(n2) {
          return n2.o || n2.t;
        }
        function l(n2) {
          if (Array.isArray(n2)) return Array.prototype.slice.call(n2);
          var r2 = rn(n2);
          delete r2[Q];
          for (var t2 = nn(r2), e2 = 0; e2 < t2.length; e2++) {
            var i2 = t2[e2],
              o2 = r2[i2];
            false === o2.writable && (o2.writable = true, o2.configurable = true), (o2.get || o2.set) && (r2[i2] = {
              configurable: true,
              writable: true,
              enumerable: o2.enumerable,
              value: n2[i2]
            });
          }
          return Object.create(Object.getPrototypeOf(n2), r2);
        }
        function d(n2, e2) {
          return void 0 === e2 && (e2 = false), y(n2) || r(n2) || !t(n2) || (o(n2) > 1 && (n2.set = n2.add = n2.clear = n2.delete = h), Object.freeze(n2), e2 && i(n2, function (n3, r2) {
            return d(r2, true);
          }, true)), n2;
        }
        function h() {
          n(2);
        }
        function y(n2) {
          return null == n2 || "object" != typeof n2 || Object.isFrozen(n2);
        }
        function b(r2) {
          var t2 = tn[r2];
          return t2 || n(18, r2), t2;
        }
        function m(n2, r2) {
          tn[n2] || (tn[n2] = r2);
        }
        function _() {
          return U;
        }
        function j(n2, r2) {
          r2 && (b("Patches"), n2.u = [], n2.s = [], n2.v = r2);
        }
        function g(n2) {
          O(n2), n2.p.forEach(S), n2.p = null;
        }
        function O(n2) {
          n2 === U && (U = n2.l);
        }
        function w(n2) {
          return U = {
            p: [],
            l: U,
            h: n2,
            m: true,
            _: 0
          };
        }
        function S(n2) {
          var r2 = n2[Q];
          0 === r2.i || 1 === r2.i ? r2.j() : r2.g = true;
        }
        function P(r2, e2) {
          e2._ = e2.p.length;
          var i2 = e2.p[0],
            o2 = void 0 !== r2 && r2 !== i2;
          return e2.h.O || b("ES5").S(e2, r2, o2), o2 ? (i2[Q].P && (g(e2), n(4)), t(r2) && (r2 = M(e2, r2), e2.l || x(e2, r2)), e2.u && b("Patches").M(i2[Q].t, r2, e2.u, e2.s)) : r2 = M(e2, i2, []), g(e2), e2.u && e2.v(e2.u, e2.s), r2 !== H ? r2 : void 0;
        }
        function M(n2, r2, t2) {
          if (y(r2)) return r2;
          var e2 = r2[Q];
          if (!e2) return i(r2, function (i2, o3) {
            return A(n2, e2, r2, i2, o3, t2);
          }, true), r2;
          if (e2.A !== n2) return r2;
          if (!e2.P) return x(n2, e2.t, true), e2.t;
          if (!e2.I) {
            e2.I = true, e2.A._--;
            var o2 = 4 === e2.i || 5 === e2.i ? e2.o = l(e2.k) : e2.o,
              u2 = o2,
              a2 = false;
            3 === e2.i && (u2 = new Set(o2), o2.clear(), a2 = true), i(u2, function (r3, i2) {
              return A(n2, e2, o2, r3, i2, t2, a2);
            }), x(n2, o2, false), t2 && n2.u && b("Patches").N(e2, t2, n2.u, n2.s);
          }
          return e2.o;
        }
        function A(e2, i2, o2, a2, c2, s2, v2) {
          if (r(c2)) {
            var p2 = M(e2, c2, s2 && i2 && 3 !== i2.i && !u(i2.R, a2) ? s2.concat(a2) : void 0);
            if (f(o2, a2, p2), !r(p2)) return;
            e2.m = false;
          } else v2 && o2.add(c2);
          if (t(c2) && !y(c2)) {
            if (!e2.h.D && e2._ < 1) return;
            M(e2, c2), i2 && i2.A.l || x(e2, c2);
          }
        }
        function x(n2, r2, t2) {
          void 0 === t2 && (t2 = false), !n2.l && n2.h.D && n2.m && d(r2, t2);
        }
        function z(n2, r2) {
          var t2 = n2[Q];
          return (t2 ? p(t2) : n2)[r2];
        }
        function I(n2, r2) {
          if (r2 in n2) for (var t2 = Object.getPrototypeOf(n2); t2;) {
            var e2 = Object.getOwnPropertyDescriptor(t2, r2);
            if (e2) return e2;
            t2 = Object.getPrototypeOf(t2);
          }
        }
        function k(n2) {
          n2.P || (n2.P = true, n2.l && k(n2.l));
        }
        function E(n2) {
          n2.o || (n2.o = l(n2.t));
        }
        function N(n2, r2, t2) {
          var e2 = s(r2) ? b("MapSet").F(r2, t2) : v(r2) ? b("MapSet").T(r2, t2) : n2.O ? function (n3, r3) {
            var t3 = Array.isArray(n3),
              e3 = {
                i: t3 ? 1 : 0,
                A: r3 ? r3.A : _(),
                P: false,
                I: false,
                R: {},
                l: r3,
                t: n3,
                k: null,
                o: null,
                j: null,
                C: false
              },
              i2 = e3,
              o2 = en;
            t3 && (i2 = [e3], o2 = on);
            var u2 = Proxy.revocable(i2, o2),
              a2 = u2.revoke,
              f2 = u2.proxy;
            return e3.k = f2, e3.j = a2, f2;
          }(r2, t2) : b("ES5").J(r2, t2);
          return (t2 ? t2.A : _()).p.push(e2), e2;
        }
        function R(e2) {
          return r(e2) || n(22, e2), function n2(r2) {
            if (!t(r2)) return r2;
            var e3,
              u2 = r2[Q],
              c2 = o(r2);
            if (u2) {
              if (!u2.P && (u2.i < 4 || !b("ES5").K(u2))) return u2.t;
              u2.I = true, e3 = D(r2, c2), u2.I = false;
            } else e3 = D(r2, c2);
            return i(e3, function (r3, t2) {
              u2 && a(u2.t, r3) === t2 || f(e3, r3, n2(t2));
            }), 3 === c2 ? new Set(e3) : e3;
          }(e2);
        }
        function D(n2, r2) {
          switch (r2) {
            case 2:
              return new Map(n2);
            case 3:
              return Array.from(n2);
          }
          return l(n2);
        }
        function F() {
          function t2(n2, r2) {
            var t3 = s2[n2];
            return t3 ? t3.enumerable = r2 : s2[n2] = t3 = {
              configurable: true,
              enumerable: r2,
              get: function get() {
                var r3 = this[Q];
                return en.get(r3, n2);
              },
              set: function set(r3) {
                var t4 = this[Q];
                en.set(t4, n2, r3);
              }
            }, t3;
          }
          function e2(n2) {
            for (var r2 = n2.length - 1; r2 >= 0; r2--) {
              var t3 = n2[r2][Q];
              if (!t3.P) switch (t3.i) {
                case 5:
                  a2(t3) && k(t3);
                  break;
                case 4:
                  o2(t3) && k(t3);
              }
            }
          }
          function o2(n2) {
            for (var r2 = n2.t, t3 = n2.k, e3 = nn(t3), i2 = e3.length - 1; i2 >= 0; i2--) {
              var o3 = e3[i2];
              if (o3 !== Q) {
                var a3 = r2[o3];
                if (void 0 === a3 && !u(r2, o3)) return true;
                var f3 = t3[o3],
                  s3 = f3 && f3[Q];
                if (s3 ? s3.t !== a3 : !c(f3, a3)) return true;
              }
            }
            var v2 = !!r2[Q];
            return e3.length !== nn(r2).length + (v2 ? 0 : 1);
          }
          function a2(n2) {
            var r2 = n2.k;
            if (r2.length !== n2.t.length) return true;
            var t3 = Object.getOwnPropertyDescriptor(r2, r2.length - 1);
            if (t3 && !t3.get) return true;
            for (var e3 = 0; e3 < r2.length; e3++) if (!r2.hasOwnProperty(e3)) return true;
            return false;
          }
          var s2 = {};
          m("ES5", {
            J: function J(n2, r2) {
              var e3 = Array.isArray(n2),
                i2 = function (n3, r3) {
                  if (n3) {
                    for (var e4 = Array(r3.length), i3 = 0; i3 < r3.length; i3++) Object.defineProperty(e4, "" + i3, t2(i3, true));
                    return e4;
                  }
                  var o4 = rn(r3);
                  delete o4[Q];
                  for (var u2 = nn(o4), a3 = 0; a3 < u2.length; a3++) {
                    var f3 = u2[a3];
                    o4[f3] = t2(f3, n3 || !!o4[f3].enumerable);
                  }
                  return Object.create(Object.getPrototypeOf(r3), o4);
                }(e3, n2),
                o3 = {
                  i: e3 ? 5 : 4,
                  A: r2 ? r2.A : _(),
                  P: false,
                  I: false,
                  R: {},
                  l: r2,
                  t: n2,
                  k: i2,
                  o: null,
                  g: false,
                  C: false
                };
              return Object.defineProperty(i2, Q, {
                value: o3,
                writable: true
              }), i2;
            },
            S: function S(n2, t3, o3) {
              o3 ? r(t3) && t3[Q].A === n2 && e2(n2.p) : (n2.u && function n3(r2) {
                if (r2 && "object" == typeof r2) {
                  var t4 = r2[Q];
                  if (t4) {
                    var e3 = t4.t,
                      o4 = t4.k,
                      f3 = t4.R,
                      c2 = t4.i;
                    if (4 === c2) i(o4, function (r3) {
                      r3 !== Q && (void 0 !== e3[r3] || u(e3, r3) ? f3[r3] || n3(o4[r3]) : (f3[r3] = true, k(t4)));
                    }), i(e3, function (n4) {
                      void 0 !== o4[n4] || u(o4, n4) || (f3[n4] = false, k(t4));
                    });else if (5 === c2) {
                      if (a2(t4) && (k(t4), f3.length = true), o4.length < e3.length) for (var s3 = o4.length; s3 < e3.length; s3++) f3[s3] = false;else for (var v2 = e3.length; v2 < o4.length; v2++) f3[v2] = true;
                      for (var p2 = Math.min(o4.length, e3.length), l2 = 0; l2 < p2; l2++) o4.hasOwnProperty(l2) || (f3[l2] = true), void 0 === f3[l2] && n3(o4[l2]);
                    }
                  }
                }
              }(n2.p[0]), e2(n2.p));
            },
            K: function K(n2) {
              return 4 === n2.i ? o2(n2) : a2(n2);
            }
          });
        }
        var G,
          U,
          W = "undefined" != typeof Symbol && "symbol" == typeof Symbol("x"),
          X = "undefined" != typeof Map,
          q = "undefined" != typeof Set,
          B = "undefined" != typeof Proxy && void 0 !== Proxy.revocable && "undefined" != typeof Reflect,
          H = W ? Symbol.for("immer-nothing") : ((G = {})["immer-nothing"] = true, G),
          L = W ? Symbol.for("immer-draftable") : "__$immer_draftable",
          Q = W ? Symbol.for("immer-state") : "__$immer_state",
          Z = "" + Object.prototype.constructor,
          nn = "undefined" != typeof Reflect && Reflect.ownKeys ? Reflect.ownKeys : void 0 !== Object.getOwnPropertySymbols ? function (n2) {
            return Object.getOwnPropertyNames(n2).concat(Object.getOwnPropertySymbols(n2));
          } : Object.getOwnPropertyNames,
          rn = Object.getOwnPropertyDescriptors || function (n2) {
            var r2 = {};
            return nn(n2).forEach(function (t2) {
              r2[t2] = Object.getOwnPropertyDescriptor(n2, t2);
            }), r2;
          },
          tn = {},
          en = {
            get: function get(n2, r2) {
              if (r2 === Q) return n2;
              var e2 = p(n2);
              if (!u(e2, r2)) return function (n3, r3, t2) {
                var e3,
                  i3 = I(r3, t2);
                return i3 ? "value" in i3 ? i3.value : null === (e3 = i3.get) || void 0 === e3 ? void 0 : e3.call(n3.k) : void 0;
              }(n2, e2, r2);
              var i2 = e2[r2];
              return n2.I || !t(i2) ? i2 : i2 === z(n2.t, r2) ? (E(n2), n2.o[r2] = N(n2.A.h, i2, n2)) : i2;
            },
            has: function has(n2, r2) {
              return r2 in p(n2);
            },
            ownKeys: function ownKeys(n2) {
              return Reflect.ownKeys(p(n2));
            },
            set: function set(n2, r2, t2) {
              var e2 = I(p(n2), r2);
              if (null == e2 ? void 0 : e2.set) return e2.set.call(n2.k, t2), true;
              if (!n2.P) {
                var i2 = z(p(n2), r2),
                  o2 = null == i2 ? void 0 : i2[Q];
                if (o2 && o2.t === t2) return n2.o[r2] = t2, n2.R[r2] = false, true;
                if (c(t2, i2) && (void 0 !== t2 || u(n2.t, r2))) return true;
                E(n2), k(n2);
              }
              return n2.o[r2] === t2 && (void 0 !== t2 || r2 in n2.o) || Number.isNaN(t2) && Number.isNaN(n2.o[r2]) || (n2.o[r2] = t2, n2.R[r2] = true), true;
            },
            deleteProperty: function deleteProperty(n2, r2) {
              return void 0 !== z(n2.t, r2) || r2 in n2.t ? (n2.R[r2] = false, E(n2), k(n2)) : delete n2.R[r2], n2.o && delete n2.o[r2], true;
            },
            getOwnPropertyDescriptor: function getOwnPropertyDescriptor(n2, r2) {
              var t2 = p(n2),
                e2 = Reflect.getOwnPropertyDescriptor(t2, r2);
              return e2 ? {
                writable: true,
                configurable: 1 !== n2.i || "length" !== r2,
                enumerable: e2.enumerable,
                value: t2[r2]
              } : e2;
            },
            defineProperty: function defineProperty() {
              n(11);
            },
            getPrototypeOf: function getPrototypeOf(n2) {
              return Object.getPrototypeOf(n2.t);
            },
            setPrototypeOf: function setPrototypeOf() {
              n(12);
            }
          },
          on = {};
        i(en, function (n2, r2) {
          on[n2] = function () {
            return arguments[0] = arguments[0][0], r2.apply(this, arguments);
          };
        }), on.deleteProperty = function (r2, t2) {
          return on.set.call(this, r2, t2, void 0);
        }, on.set = function (r2, t2, e2) {
          return en.set.call(this, r2[0], t2, e2, r2[0]);
        };
        var un = function () {
            function e2(r2) {
              var e3 = this;
              this.O = B, this.D = true, this.produce = function (r3, i3, o2) {
                if ("function" == typeof r3 && "function" != typeof i3) {
                  var u2 = i3;
                  i3 = r3;
                  var a2 = e3;
                  return function (n2) {
                    var r4 = this;
                    void 0 === n2 && (n2 = u2);
                    for (var t2 = arguments.length, e4 = Array(t2 > 1 ? t2 - 1 : 0), o3 = 1; o3 < t2; o3++) e4[o3 - 1] = arguments[o3];
                    return a2.produce(n2, function (n3) {
                      var t3;
                      return (t3 = i3).call.apply(t3, [r4, n3].concat(e4));
                    });
                  };
                }
                var f2;
                if ("function" != typeof i3 && n(6), void 0 !== o2 && "function" != typeof o2 && n(7), t(r3)) {
                  var c2 = w(e3),
                    s2 = N(e3, r3, void 0),
                    v2 = true;
                  try {
                    f2 = i3(s2), v2 = false;
                  } finally {
                    v2 ? g(c2) : O(c2);
                  }
                  return "undefined" != typeof Promise && f2 instanceof Promise ? f2.then(function (n2) {
                    return j(c2, o2), P(n2, c2);
                  }, function (n2) {
                    throw g(c2), n2;
                  }) : (j(c2, o2), P(f2, c2));
                }
                if (!r3 || "object" != typeof r3) {
                  if (void 0 === (f2 = i3(r3)) && (f2 = r3), f2 === H && (f2 = void 0), e3.D && d(f2, true), o2) {
                    var p2 = [],
                      l2 = [];
                    b("Patches").M(r3, f2, p2, l2), o2(p2, l2);
                  }
                  return f2;
                }
                n(21, r3);
              }, this.produceWithPatches = function (n2, r3) {
                if ("function" == typeof n2) return function (r4) {
                  for (var t3 = arguments.length, i4 = Array(t3 > 1 ? t3 - 1 : 0), o3 = 1; o3 < t3; o3++) i4[o3 - 1] = arguments[o3];
                  return e3.produceWithPatches(r4, function (r5) {
                    return n2.apply(void 0, [r5].concat(i4));
                  });
                };
                var t2,
                  i3,
                  o2 = e3.produce(n2, r3, function (n3, r4) {
                    t2 = n3, i3 = r4;
                  });
                return "undefined" != typeof Promise && o2 instanceof Promise ? o2.then(function (n3) {
                  return [n3, t2, i3];
                }) : [o2, t2, i3];
              }, "boolean" == typeof (null == r2 ? void 0 : r2.useProxies) && this.setUseProxies(r2.useProxies), "boolean" == typeof (null == r2 ? void 0 : r2.autoFreeze) && this.setAutoFreeze(r2.autoFreeze);
            }
            var i2 = e2.prototype;
            return i2.createDraft = function (e3) {
              t(e3) || n(8), r(e3) && (e3 = R(e3));
              var i3 = w(this),
                o2 = N(this, e3, void 0);
              return o2[Q].C = true, O(i3), o2;
            }, i2.finishDraft = function (r2, t2) {
              var e3 = r2 && r2[Q];
              var i3 = e3.A;
              return j(i3, t2), P(void 0, i3);
            }, i2.setAutoFreeze = function (n2) {
              this.D = n2;
            }, i2.setUseProxies = function (r2) {
              r2 && !B && n(20), this.O = r2;
            }, i2.applyPatches = function (n2, t2) {
              var e3;
              for (e3 = t2.length - 1; e3 >= 0; e3--) {
                var i3 = t2[e3];
                if (0 === i3.path.length && "replace" === i3.op) {
                  n2 = i3.value;
                  break;
                }
              }
              e3 > -1 && (t2 = t2.slice(e3 + 1));
              var o2 = b("Patches").$;
              return r(n2) ? o2(n2, t2) : this.produce(n2, function (n3) {
                return o2(n3, t2);
              });
            }, e2;
          }(),
          an = new un(),
          fn = an.produce;
        an.produceWithPatches.bind(an);
        an.setAutoFreeze.bind(an);
        an.setUseProxies.bind(an);
        an.applyPatches.bind(an);
        an.createDraft.bind(an);
        an.finishDraft.bind(an);
        function ownKeys(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function (sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread2(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = null != arguments[i] ? arguments[i] : {};
            i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
              _defineProperty$5(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function formatProdErrorMessage(code) {
          return "Minified Redux error #" + code + "; visit https://redux.js.org/Errors?code=" + code + " for the full message or use the non-minified dev environment for full errors. ";
        }
        var $$observable = function () {
          return typeof Symbol === "function" && Symbol.observable || "@@observable";
        }();
        var randomString = function randomString2() {
          return Math.random().toString(36).substring(7).split("").join(".");
        };
        var ActionTypes = {
          INIT: "@@redux/INIT" + randomString(),
          REPLACE: "@@redux/REPLACE" + randomString(),
          PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
            return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
          }
        };
        function isPlainObject$2(obj) {
          if (typeof obj !== "object" || obj === null) return false;
          var proto = obj;
          while (Object.getPrototypeOf(proto) !== null) {
            proto = Object.getPrototypeOf(proto);
          }
          return Object.getPrototypeOf(obj) === proto;
        }
        function createStore(reducer, preloadedState, enhancer) {
          var _ref2;
          if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
            throw new Error(formatProdErrorMessage(0));
          }
          if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
            enhancer = preloadedState;
            preloadedState = void 0;
          }
          if (typeof enhancer !== "undefined") {
            if (typeof enhancer !== "function") {
              throw new Error(formatProdErrorMessage(1));
            }
            return enhancer(createStore)(reducer, preloadedState);
          }
          if (typeof reducer !== "function") {
            throw new Error(formatProdErrorMessage(2));
          }
          var currentReducer = reducer;
          var currentState = preloadedState;
          var currentListeners = [];
          var nextListeners = currentListeners;
          var isDispatching = false;
          function ensureCanMutateNextListeners() {
            if (nextListeners === currentListeners) {
              nextListeners = currentListeners.slice();
            }
          }
          function getState() {
            if (isDispatching) {
              throw new Error(formatProdErrorMessage(3));
            }
            return currentState;
          }
          function subscribe(listener) {
            if (typeof listener !== "function") {
              throw new Error(formatProdErrorMessage(4));
            }
            if (isDispatching) {
              throw new Error(formatProdErrorMessage(5));
            }
            var isSubscribed = true;
            ensureCanMutateNextListeners();
            nextListeners.push(listener);
            return function unsubscribe() {
              if (!isSubscribed) {
                return;
              }
              if (isDispatching) {
                throw new Error(formatProdErrorMessage(6));
              }
              isSubscribed = false;
              ensureCanMutateNextListeners();
              var index = nextListeners.indexOf(listener);
              nextListeners.splice(index, 1);
              currentListeners = null;
            };
          }
          function dispatch(action) {
            if (!isPlainObject$2(action)) {
              throw new Error(formatProdErrorMessage(7));
            }
            if (typeof action.type === "undefined") {
              throw new Error(formatProdErrorMessage(8));
            }
            if (isDispatching) {
              throw new Error(formatProdErrorMessage(9));
            }
            try {
              isDispatching = true;
              currentState = currentReducer(currentState, action);
            } finally {
              isDispatching = false;
            }
            var listeners = currentListeners = nextListeners;
            for (var i = 0; i < listeners.length; i++) {
              var listener = listeners[i];
              listener();
            }
            return action;
          }
          function replaceReducer(nextReducer) {
            if (typeof nextReducer !== "function") {
              throw new Error(formatProdErrorMessage(10));
            }
            currentReducer = nextReducer;
            dispatch({
              type: ActionTypes.REPLACE
            });
          }
          function observable() {
            var _ref;
            var outerSubscribe = subscribe;
            return _ref = {
              /**
               * The minimal observable subscription method.
               * @param {Object} observer Any object that can be used as an observer.
               * The observer object should have a `next` method.
               * @returns {subscription} An object with an `unsubscribe` method that can
               * be used to unsubscribe the observable from the store, and prevent further
               * emission of values from the observable.
               */
              subscribe: function subscribe2(observer) {
                if (typeof observer !== "object" || observer === null) {
                  throw new Error(formatProdErrorMessage(11));
                }
                function observeState() {
                  if (observer.next) {
                    observer.next(getState());
                  }
                }
                observeState();
                var unsubscribe = outerSubscribe(observeState);
                return {
                  unsubscribe
                };
              }
            }, _ref[$$observable] = function () {
              return this;
            }, _ref;
          }
          dispatch({
            type: ActionTypes.INIT
          });
          return _ref2 = {
            dispatch,
            subscribe,
            getState,
            replaceReducer
          }, _ref2[$$observable] = observable, _ref2;
        }
        function assertReducerShape(reducers) {
          Object.keys(reducers).forEach(function (key) {
            var reducer = reducers[key];
            var initialState = reducer(void 0, {
              type: ActionTypes.INIT
            });
            if (typeof initialState === "undefined") {
              throw new Error(formatProdErrorMessage(12));
            }
            if (typeof reducer(void 0, {
              type: ActionTypes.PROBE_UNKNOWN_ACTION()
            }) === "undefined") {
              throw new Error(formatProdErrorMessage(13));
            }
          });
        }
        function combineReducers(reducers) {
          var reducerKeys = Object.keys(reducers);
          var finalReducers = {};
          for (var i = 0; i < reducerKeys.length; i++) {
            var key = reducerKeys[i];
            if (typeof reducers[key] === "function") {
              finalReducers[key] = reducers[key];
            }
          }
          var finalReducerKeys = Object.keys(finalReducers);
          var shapeAssertionError;
          try {
            assertReducerShape(finalReducers);
          } catch (e) {
            shapeAssertionError = e;
          }
          return function combination(state, action) {
            if (state === void 0) {
              state = {};
            }
            if (shapeAssertionError) {
              throw shapeAssertionError;
            }
            var hasChanged = false;
            var nextState = {};
            for (var _i = 0; _i < finalReducerKeys.length; _i++) {
              var _key = finalReducerKeys[_i];
              var reducer = finalReducers[_key];
              var previousStateForKey = state[_key];
              var nextStateForKey = reducer(previousStateForKey, action);
              if (typeof nextStateForKey === "undefined") {
                action && action.type;
                throw new Error(formatProdErrorMessage(14));
              }
              nextState[_key] = nextStateForKey;
              hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
            }
            hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
            return hasChanged ? nextState : state;
          };
        }
        function compose() {
          for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
            funcs[_key] = arguments[_key];
          }
          if (funcs.length === 0) {
            return function (arg) {
              return arg;
            };
          }
          if (funcs.length === 1) {
            return funcs[0];
          }
          return funcs.reduce(function (a, b) {
            return function () {
              return a(b.apply(void 0, arguments));
            };
          });
        }
        function applyMiddleware() {
          for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
            middlewares[_key] = arguments[_key];
          }
          return function (createStore2) {
            return function () {
              var store = createStore2.apply(void 0, arguments);
              var _dispatch = function dispatch() {
                throw new Error(formatProdErrorMessage(15));
              };
              var middlewareAPI = {
                getState: store.getState,
                dispatch: function dispatch() {
                  return _dispatch.apply(void 0, arguments);
                }
              };
              var chain = middlewares.map(function (middleware) {
                return middleware(middlewareAPI);
              });
              _dispatch = compose.apply(void 0, chain)(store.dispatch);
              return _objectSpread2(_objectSpread2({}, store), {}, {
                dispatch: _dispatch
              });
            };
          };
        }

        /** A function that accepts a potential "extra argument" value to be injected later,
         * and returns an instance of the thunk middleware that uses that value
         */
        function createThunkMiddleware(extraArgument) {
          // Standard Redux middleware definition pattern:
          // See: https://redux.js.org/tutorials/fundamentals/part-4-store#writing-custom-middleware
          var middleware = function middleware(_ref) {
            var dispatch = _ref.dispatch,
              getState = _ref.getState;
            return function (next) {
              return function (action) {
                // The thunk middleware looks for any functions that were passed to `store.dispatch`.
                // If this "action" is really a function, call it and return the result.
                if (typeof action === 'function') {
                  // Inject the store's `dispatch` and `getState` methods, as well as any "extra arg"
                  return action(dispatch, getState, extraArgument);
                } // Otherwise, pass the action down the middleware chain as usual

                return next(action);
              };
            };
          };
          return middleware;
        }
        var thunk = createThunkMiddleware(); // Attach the factory function so users can create a customized version
        // with whatever "extra arg" they want to inject into their thunks

        thunk.withExtraArgument = createThunkMiddleware;
        const thunkMiddleware = thunk;
        var __extends = /* @__PURE__ */function () {
          var _extendStatics = function extendStatics(d, b) {
            _extendStatics = Object.setPrototypeOf || {
              __proto__: []
            } instanceof Array && function (d2, b2) {
              d2.__proto__ = b2;
            } || function (d2, b2) {
              for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
            };
            return _extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            _extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();
        var __generator = function __generator(thisArg, body) {
          var _ = {
              label: 0,
              sent: function sent() {
                if (t[0] & 1) throw t[1];
                return t[1];
              },
              trys: [],
              ops: []
            },
            f,
            y,
            t,
            g;
          return g = {
            next: verb(0),
            "throw": verb(1),
            "return": verb(2)
          }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
          }), g;
          function verb(n) {
            return function (v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return {
                    value: op[1],
                    done: false
                  };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2]) _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
            if (op[0] & 5) throw op[1];
            return {
              value: op[0] ? op[1] : void 0,
              done: true
            };
          }
        };
        var __spreadArray = function __spreadArray(to, from) {
          for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];
          return to;
        };
        var __defProp = Object.defineProperty;
        var __defProps = Object.defineProperties;
        var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
        var __getOwnPropSymbols = Object.getOwnPropertySymbols;
        var __hasOwnProp = Object.prototype.hasOwnProperty;
        var __propIsEnum = Object.prototype.propertyIsEnumerable;
        var __defNormalProp = function __defNormalProp(obj, key, value) {
          return key in obj ? __defProp(obj, key, {
            enumerable: true,
            configurable: true,
            writable: true,
            value
          }) : obj[key] = value;
        };
        var __spreadValues = function __spreadValues(a, b) {
          for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
          if (__getOwnPropSymbols) for (var _i = 0, _c = __getOwnPropSymbols(b); _i < _c.length; _i++) {
            var prop = _c[_i];
            if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
          }
          return a;
        };
        var __spreadProps = function __spreadProps(a, b) {
          return __defProps(a, __getOwnPropDescs(b));
        };
        var __async = function __async(__this, __arguments, generator) {
          return new Promise(function (resolve, reject) {
            var fulfilled = function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            };
            var rejected = function rejected(value) {
              try {
                step(generator.throw(value));
              } catch (e) {
                reject(e);
              }
            };
            var step = function step(x) {
              return x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
            };
            step((generator = generator.apply(__this, __arguments)).next());
          });
        };
        var composeWithDevTools = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function () {
          if (arguments.length === 0) return void 0;
          if (typeof arguments[0] === "object") return compose;
          return compose.apply(null, arguments);
        };
        function isPlainObject$1(value) {
          if (typeof value !== "object" || value === null) return false;
          var proto = Object.getPrototypeOf(value);
          if (proto === null) return true;
          var baseProto = proto;
          while (Object.getPrototypeOf(baseProto) !== null) {
            baseProto = Object.getPrototypeOf(baseProto);
          }
          return proto === baseProto;
        }
        var MiddlewareArray = /** @class */
        function (_super) {
          __extends(MiddlewareArray2, _super);
          function MiddlewareArray2() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            var _this = _super.apply(this, args) || this;
            Object.setPrototypeOf(_this, MiddlewareArray2.prototype);
            return _this;
          }
          Object.defineProperty(MiddlewareArray2, Symbol.species, {
            get: function get() {
              return MiddlewareArray2;
            },
            enumerable: false,
            configurable: true
          });
          MiddlewareArray2.prototype.concat = function () {
            var arr = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              arr[_i] = arguments[_i];
            }
            return _super.prototype.concat.apply(this, arr);
          };
          MiddlewareArray2.prototype.prepend = function () {
            var arr = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              arr[_i] = arguments[_i];
            }
            if (arr.length === 1 && Array.isArray(arr[0])) {
              return new (MiddlewareArray2.bind.apply(MiddlewareArray2, __spreadArray([void 0], arr[0].concat(this))))();
            }
            return new (MiddlewareArray2.bind.apply(MiddlewareArray2, __spreadArray([void 0], arr.concat(this))))();
          };
          return MiddlewareArray2;
        }(Array);
        var EnhancerArray = /** @class */
        function (_super) {
          __extends(EnhancerArray2, _super);
          function EnhancerArray2() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            var _this = _super.apply(this, args) || this;
            Object.setPrototypeOf(_this, EnhancerArray2.prototype);
            return _this;
          }
          Object.defineProperty(EnhancerArray2, Symbol.species, {
            get: function get() {
              return EnhancerArray2;
            },
            enumerable: false,
            configurable: true
          });
          EnhancerArray2.prototype.concat = function () {
            var arr = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              arr[_i] = arguments[_i];
            }
            return _super.prototype.concat.apply(this, arr);
          };
          EnhancerArray2.prototype.prepend = function () {
            var arr = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              arr[_i] = arguments[_i];
            }
            if (arr.length === 1 && Array.isArray(arr[0])) {
              return new (EnhancerArray2.bind.apply(EnhancerArray2, __spreadArray([void 0], arr[0].concat(this))))();
            }
            return new (EnhancerArray2.bind.apply(EnhancerArray2, __spreadArray([void 0], arr.concat(this))))();
          };
          return EnhancerArray2;
        }(Array);
        function freezeDraftable(val) {
          return t(val) ? fn(val, function () {}) : val;
        }
        function isBoolean$1(x) {
          return typeof x === "boolean";
        }
        function curryGetDefaultMiddleware() {
          return function curriedGetDefaultMiddleware(options) {
            return getDefaultMiddleware(options);
          };
        }
        function getDefaultMiddleware(options) {
          if (options === void 0) {
            options = {};
          }
          var _c = options.thunk,
            thunk = _c === void 0 ? true : _c;
          options.immutableCheck;
          options.serializableCheck;
          var middlewareArray = new MiddlewareArray();
          if (thunk) {
            if (isBoolean$1(thunk)) {
              middlewareArray.push(thunkMiddleware);
            } else {
              middlewareArray.push(thunkMiddleware.withExtraArgument(thunk.extraArgument));
            }
          }
          return middlewareArray;
        }
        var IS_PRODUCTION = true;
        function configureStore(options) {
          var curriedGetDefaultMiddleware = curryGetDefaultMiddleware();
          var _c = options || {},
            _d = _c.reducer,
            reducer = _d === void 0 ? void 0 : _d,
            _e = _c.middleware,
            middleware = _e === void 0 ? curriedGetDefaultMiddleware() : _e,
            _f = _c.devTools,
            devTools = _f === void 0 ? true : _f,
            _g = _c.preloadedState,
            preloadedState = _g === void 0 ? void 0 : _g,
            _h = _c.enhancers,
            enhancers = _h === void 0 ? void 0 : _h;
          var rootReducer;
          if (typeof reducer === "function") {
            rootReducer = reducer;
          } else if (isPlainObject$1(reducer)) {
            rootReducer = combineReducers(reducer);
          } else {
            throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');
          }
          var finalMiddleware = middleware;
          if (typeof finalMiddleware === "function") {
            finalMiddleware = finalMiddleware(curriedGetDefaultMiddleware);
          }
          var middlewareEnhancer = applyMiddleware.apply(void 0, finalMiddleware);
          var finalCompose = compose;
          if (devTools) {
            finalCompose = composeWithDevTools(__spreadValues({
              trace: !IS_PRODUCTION
            }, typeof devTools === "object" && devTools));
          }
          var defaultEnhancers = new EnhancerArray(middlewareEnhancer);
          var storeEnhancers = defaultEnhancers;
          if (Array.isArray(enhancers)) {
            storeEnhancers = __spreadArray([middlewareEnhancer], enhancers);
          } else if (typeof enhancers === "function") {
            storeEnhancers = enhancers(defaultEnhancers);
          }
          var composedEnhancer = finalCompose.apply(void 0, storeEnhancers);
          return createStore(rootReducer, preloadedState, composedEnhancer);
        }
        function createAction(type, prepareAction) {
          function actionCreator() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            if (prepareAction) {
              var prepared = prepareAction.apply(void 0, args);
              if (!prepared) {
                throw new Error("prepareAction did not return an object");
              }
              return __spreadValues(__spreadValues({
                type,
                payload: prepared.payload
              }, "meta" in prepared && {
                meta: prepared.meta
              }), "error" in prepared && {
                error: prepared.error
              });
            }
            return {
              type,
              payload: args[0]
            };
          }
          actionCreator.toString = function () {
            return "" + type;
          };
          actionCreator.type = type;
          actionCreator.match = function (action) {
            return action.type === type;
          };
          return actionCreator;
        }
        function executeReducerBuilderCallback(builderCallback) {
          var actionsMap = {};
          var actionMatchers = [];
          var defaultCaseReducer;
          var builder = {
            addCase: function addCase(typeOrActionCreator, reducer) {
              var type = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;
              if (type in actionsMap) {
                throw new Error("addCase cannot be called with two reducers for the same action type");
              }
              actionsMap[type] = reducer;
              return builder;
            },
            addMatcher: function addMatcher(matcher, reducer) {
              actionMatchers.push({
                matcher,
                reducer
              });
              return builder;
            },
            addDefaultCase: function addDefaultCase(reducer) {
              defaultCaseReducer = reducer;
              return builder;
            }
          };
          builderCallback(builder);
          return [actionsMap, actionMatchers, defaultCaseReducer];
        }
        function isStateFunction(x) {
          return typeof x === "function";
        }
        function createReducer(initialState, mapOrBuilderCallback, actionMatchers, defaultCaseReducer) {
          if (actionMatchers === void 0) {
            actionMatchers = [];
          }
          var _c = typeof mapOrBuilderCallback === "function" ? executeReducerBuilderCallback(mapOrBuilderCallback) : [mapOrBuilderCallback, actionMatchers, defaultCaseReducer],
            actionsMap = _c[0],
            finalActionMatchers = _c[1],
            finalDefaultCaseReducer = _c[2];
          var getInitialState;
          if (isStateFunction(initialState)) {
            getInitialState = function getInitialState() {
              return freezeDraftable(initialState());
            };
          } else {
            var frozenInitialState_1 = freezeDraftable(initialState);
            getInitialState = function getInitialState() {
              return frozenInitialState_1;
            };
          }
          function reducer(state, action) {
            if (state === void 0) {
              state = getInitialState();
            }
            var caseReducers = __spreadArray([actionsMap[action.type]], finalActionMatchers.filter(function (_c2) {
              var matcher = _c2.matcher;
              return matcher(action);
            }).map(function (_c2) {
              var reducer2 = _c2.reducer;
              return reducer2;
            }));
            if (caseReducers.filter(function (cr) {
              return !!cr;
            }).length === 0) {
              caseReducers = [finalDefaultCaseReducer];
            }
            return caseReducers.reduce(function (previousState, caseReducer) {
              if (caseReducer) {
                if (r(previousState)) {
                  var draft = previousState;
                  var result = caseReducer(draft, action);
                  if (result === void 0) {
                    return previousState;
                  }
                  return result;
                } else if (!t(previousState)) {
                  var result = caseReducer(previousState, action);
                  if (result === void 0) {
                    if (previousState === null) {
                      return previousState;
                    }
                    throw Error("A case reducer on a non-draftable value must not return undefined");
                  }
                  return result;
                } else {
                  return fn(previousState, function (draft2) {
                    return caseReducer(draft2, action);
                  });
                }
              }
              return previousState;
            }, state);
          }
          reducer.getInitialState = getInitialState;
          return reducer;
        }
        function getType2(slice, actionKey) {
          return slice + "/" + actionKey;
        }
        function createSlice(options) {
          var name = options.name;
          if (!name) {
            throw new Error("`name` is a required option for createSlice");
          }
          if (typeof process !== "undefined" && false) {
            if (options.initialState === void 0) {
              console.error("You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`");
            }
          }
          var initialState = typeof options.initialState == "function" ? options.initialState : freezeDraftable(options.initialState);
          var reducers = options.reducers || {};
          var reducerNames = Object.keys(reducers);
          var sliceCaseReducersByName = {};
          var sliceCaseReducersByType = {};
          var actionCreators = {};
          reducerNames.forEach(function (reducerName) {
            var maybeReducerWithPrepare = reducers[reducerName];
            var type = getType2(name, reducerName);
            var caseReducer;
            var prepareCallback;
            if ("reducer" in maybeReducerWithPrepare) {
              caseReducer = maybeReducerWithPrepare.reducer;
              prepareCallback = maybeReducerWithPrepare.prepare;
            } else {
              caseReducer = maybeReducerWithPrepare;
            }
            sliceCaseReducersByName[reducerName] = caseReducer;
            sliceCaseReducersByType[type] = caseReducer;
            actionCreators[reducerName] = prepareCallback ? createAction(type, prepareCallback) : createAction(type);
          });
          function buildReducer() {
            var _c = typeof options.extraReducers === "function" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers],
              _d = _c[0],
              extraReducers = _d === void 0 ? {} : _d,
              _e = _c[1],
              actionMatchers = _e === void 0 ? [] : _e,
              _f = _c[2],
              defaultCaseReducer = _f === void 0 ? void 0 : _f;
            var finalCaseReducers = __spreadValues(__spreadValues({}, extraReducers), sliceCaseReducersByType);
            return createReducer(initialState, function (builder) {
              for (var key in finalCaseReducers) {
                builder.addCase(key, finalCaseReducers[key]);
              }
              for (var _i = 0, actionMatchers_1 = actionMatchers; _i < actionMatchers_1.length; _i++) {
                var m = actionMatchers_1[_i];
                builder.addMatcher(m.matcher, m.reducer);
              }
              if (defaultCaseReducer) {
                builder.addDefaultCase(defaultCaseReducer);
              }
            });
          }
          var _reducer;
          return {
            name,
            reducer: function reducer(state, action) {
              if (!_reducer) _reducer = buildReducer();
              return _reducer(state, action);
            },
            actions: actionCreators,
            caseReducers: sliceCaseReducersByName,
            getInitialState: function getInitialState() {
              if (!_reducer) _reducer = buildReducer();
              return _reducer.getInitialState();
            }
          };
        }
        var urlAlphabet = "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW";
        var nanoid = function nanoid(size) {
          if (size === void 0) {
            size = 21;
          }
          var id = "";
          var i = size;
          while (i--) {
            id += urlAlphabet[Math.random() * 64 | 0];
          }
          return id;
        };
        var commonProperties = ["name", "message", "stack", "code"];
        var RejectWithValue = /** @class */
        /* @__PURE__ */function () {
          function RejectWithValue2(payload, meta) {
            this.payload = payload;
            this.meta = meta;
          }
          return RejectWithValue2;
        }();
        var FulfillWithMeta = /** @class */
        /* @__PURE__ */function () {
          function FulfillWithMeta2(payload, meta) {
            this.payload = payload;
            this.meta = meta;
          }
          return FulfillWithMeta2;
        }();
        var miniSerializeError = function miniSerializeError(value) {
          if (typeof value === "object" && value !== null) {
            var simpleError = {};
            for (var _i = 0, commonProperties_1 = commonProperties; _i < commonProperties_1.length; _i++) {
              var property = commonProperties_1[_i];
              if (typeof value[property] === "string") {
                simpleError[property] = value[property];
              }
            }
            return simpleError;
          }
          return {
            message: String(value)
          };
        };
        (function () {
          function createAsyncThunk2(typePrefix, payloadCreator, options) {
            var fulfilled = createAction(typePrefix + "/fulfilled", function (payload, requestId, arg, meta) {
              return {
                payload,
                meta: __spreadProps(__spreadValues({}, meta || {}), {
                  arg,
                  requestId,
                  requestStatus: "fulfilled"
                })
              };
            });
            var pending = createAction(typePrefix + "/pending", function (requestId, arg, meta) {
              return {
                payload: void 0,
                meta: __spreadProps(__spreadValues({}, meta || {}), {
                  arg,
                  requestId,
                  requestStatus: "pending"
                })
              };
            });
            var rejected = createAction(typePrefix + "/rejected", function (error, requestId, arg, payload, meta) {
              return {
                payload,
                error: (options && options.serializeError || miniSerializeError)(error || "Rejected"),
                meta: __spreadProps(__spreadValues({}, meta || {}), {
                  arg,
                  requestId,
                  rejectedWithValue: !!payload,
                  requestStatus: "rejected",
                  aborted: (error == null ? void 0 : error.name) === "AbortError",
                  condition: (error == null ? void 0 : error.name) === "ConditionError"
                })
              };
            });
            var AC = typeof AbortController !== "undefined" ? AbortController : ( /** @class */
            function () {
              function class_1() {
                this.signal = {
                  aborted: false,
                  addEventListener: function addEventListener() {},
                  dispatchEvent: function dispatchEvent() {
                    return false;
                  },
                  onabort: function onabort() {},
                  removeEventListener: function removeEventListener() {},
                  reason: void 0,
                  throwIfAborted: function throwIfAborted() {}
                };
              }
              class_1.prototype.abort = function () {};
              return class_1;
            }());
            function actionCreator(arg) {
              return function (dispatch, getState, extra) {
                var requestId = (options == null ? void 0 : options.idGenerator) ? options.idGenerator(arg) : nanoid();
                var abortController = new AC();
                var abortReason;
                function abort(reason) {
                  abortReason = reason;
                  abortController.abort();
                }
                var promise2 = function () {
                  return __async(this, null, function () {
                    var _a, _b, finalAction, conditionResult, abortedPromise, err_1, skipDispatch;
                    return __generator(this, function (_c) {
                      switch (_c.label) {
                        case 0:
                          _c.trys.push([0, 4,, 5]);
                          conditionResult = (_a = options == null ? void 0 : options.condition) == null ? void 0 : _a.call(options, arg, {
                            getState,
                            extra
                          });
                          if (!isThenable$1(conditionResult)) return [3, 2];
                          return [4, conditionResult];
                        case 1:
                          conditionResult = _c.sent();
                          _c.label = 2;
                        case 2:
                          if (conditionResult === false || abortController.signal.aborted) {
                            throw {
                              name: "ConditionError",
                              message: "Aborted due to condition callback returning false."
                            };
                          }
                          abortedPromise = new Promise(function (_, reject) {
                            return abortController.signal.addEventListener("abort", function () {
                              return reject({
                                name: "AbortError",
                                message: abortReason || "Aborted"
                              });
                            });
                          });
                          dispatch(pending(requestId, arg, (_b = options == null ? void 0 : options.getPendingMeta) == null ? void 0 : _b.call(options, {
                            requestId,
                            arg
                          }, {
                            getState,
                            extra
                          })));
                          return [4, Promise.race([abortedPromise, Promise.resolve(payloadCreator(arg, {
                            dispatch,
                            getState,
                            extra,
                            requestId,
                            signal: abortController.signal,
                            abort,
                            rejectWithValue: function rejectWithValue(value, meta) {
                              return new RejectWithValue(value, meta);
                            },
                            fulfillWithValue: function fulfillWithValue(value, meta) {
                              return new FulfillWithMeta(value, meta);
                            }
                          })).then(function (result) {
                            if (result instanceof RejectWithValue) {
                              throw result;
                            }
                            if (result instanceof FulfillWithMeta) {
                              return fulfilled(result.payload, requestId, arg, result.meta);
                            }
                            return fulfilled(result, requestId, arg);
                          })])];
                        case 3:
                          finalAction = _c.sent();
                          return [3, 5];
                        case 4:
                          err_1 = _c.sent();
                          finalAction = err_1 instanceof RejectWithValue ? rejected(null, requestId, arg, err_1.payload, err_1.meta) : rejected(err_1, requestId, arg);
                          return [3, 5];
                        case 5:
                          skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;
                          if (!skipDispatch) {
                            dispatch(finalAction);
                          }
                          return [2, finalAction];
                      }
                    });
                  });
                }();
                return Object.assign(promise2, {
                  abort,
                  requestId,
                  arg,
                  unwrap: function unwrap() {
                    return promise2.then(unwrapResult);
                  }
                });
              };
            }
            return Object.assign(actionCreator, {
              pending,
              rejected,
              fulfilled,
              typePrefix
            });
          }
          createAsyncThunk2.withTypes = function () {
            return createAsyncThunk2;
          };
          return createAsyncThunk2;
        })();
        function unwrapResult(action) {
          if (action.meta && action.meta.rejectedWithValue) {
            throw action.payload;
          }
          if (action.error) {
            throw action.error;
          }
          return action.payload;
        }
        function isThenable$1(value) {
          return value !== null && typeof value === "object" && typeof value.then === "function";
        }
        var alm = "listenerMiddleware";
        createAction(alm + "/add");
        createAction(alm + "/removeAll");
        createAction(alm + "/remove");
        var promise;
        typeof queueMicrotask === "function" ? queueMicrotask.bind(typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : globalThis) : function (cb) {
          return (promise || (promise = Promise.resolve())).then(cb).catch(function (err) {
            return setTimeout(function () {
              throw err;
            }, 0);
          });
        };
        F();
        let frankieDependents = {};
        const runState = createSlice({
          name: "runState",
          initialState: {
            state: {}
          },
          reducers: {
            valueChange: (state, action) => {
              state = setValueInState(state, action.payload);
            },
            orderChange: (state, action) => {
              let keys = Object.keys(action.payload);
              if (!state.order) {
                state.order = {};
              }
              keys.forEach(key => state.order[key] = action.payload[key]);
            },
            stateReceived: (state, action) => {
              let keys = Object.keys(state);
              keys.forEach(key => delete state[key]);
              state.preview = action.payload.preview;
              let response = action.payload.response;
              frankieDependents = response.state.frankieDependents;
              state.navigation = undefined;
              state.data = {
                survey: response.survey,
                navigationIndex: response.navigationIndex,
                additionalLang: response.additionalLang,
                lang: response.lang,
                responseId: response.responseId
              };
              state.saveTimings = response.saveTimings;
              state.values = response.state.frankieVariables;
            },
            langChange: (state, action) => {
              state.navigation = {
                events: state.timings,
                values: getValues(state.values),
                lang: action.payload.lang,
                navigationDirection: {
                  name: "CHANGE_LANGE"
                }
              };
            },
            navigateNext: state => {
              next$1(state);
            },
            navigatePrevious: state => {
              state.navigation = {
                navigationDirection: {
                  name: "PREV"
                }
              };
            },
            jump: (state, action) => {
              state.navigation = {
                events: state.timings,
                values: getValues(state.values),
                navigationDirection: {
                  name: "JUMP",
                  navigationIndex: action.payload
                }
              };
            }
          }
        });
        const _runState$actions = runState.actions,
          valueChange = _runState$actions.valueChange,
          orderChange = _runState$actions.orderChange,
          stateReceived = _runState$actions.stateReceived,
          langChange = _runState$actions.langChange,
          navigateNext = _runState$actions.navigateNext,
          navigatePrevious = _runState$actions.navigatePrevious,
          jump = _runState$actions.jump;
        exports({
          aJ: valueChange,
          bw: orderChange
        });
        const runState$1 = runState.reducer;
        function onDependencyChanged(values, componentName, variableName, newValue, source) {
          if (typeof values[componentName] === "undefined") {
            return;
          }
          if (values[componentName][variableName] === newValue) {
            console.log("same value - " + componentName + "." + variableName + ": " + newValue);
          } else {
            console.log(componentName + "." + variableName + ": " + JSON.stringify(newValue) + " due to " + source);
            values[componentName][variableName] = newValue;
            getDependents(componentName, variableName).forEach(dependent => {
              onDependencyChanged(values, dependent[0], dependent[1], window.frankieRuntime[dependent[0]][dependent[1]](values), componentName + "." + variableName);
            });
          }
        }
        function getDependents(componentName, variableName) {
          if (typeof frankieDependents[componentName] !== "undefined" && typeof frankieDependents[componentName][variableName] !== "undefined") {
            return frankieDependents[componentName][variableName];
          } else {
            return [];
          }
        }
        function setValueInState(state, payload) {
          let componentCode = payload.componentCode;
          logTimes(state, componentCode);
          let value = payload.value;
          let element = state.values[componentCode];
          let newState = _objectSpread3({}, state);
          if (typeof element !== "undefined" && element["value"] !== value) {
            let time = Date.now();
            onDependencyChanged(state.values, componentCode, "value", value, "VALUE CHANGE");
            console.log("NEW STATE in: " + (Date.now() - time) + " millis");
            return newState;
          }
          return state;
        }
        function logTimes(state, code) {
          if (!state.saveTimings) {
            return;
          }
          if (!state.timings) {
            state.timings = [];
          }
          let element = {
            code,
            time: new Date().toISOString().split(".")[0].replace("T", " "),
            name: "ValueTiming"
          };
          if (state.timings.length > 0 && state.timings[state.timings.length - 1].code === code) {
            state.timings[state.timings.length - 1] = element;
          } else {
            state.timings.push(element);
          }
        }
        function next$1(state) {
          if (!state.values.Survey.validity && !state.values.Survey.show_errors) {
            state.values.Survey.show_errors = true;
          } else {
            state.navigation = {
              events: state.timings,
              values: getValues(state.values),
              navigationDirection: {
                name: "NEXT"
              }
            };
          }
        }
        function getValues(values) {
          let retrunObj = {};
          for (var key in values) {
            if (values.hasOwnProperty(key)) {
              let element = values[key];
              if (element.hasOwnProperty("value")) {
                let value = element["value"];
                if (typeof value !== "undefined") {
                  retrunObj[key + ".value"] = value;
                }
              }
            }
          }
          return retrunObj;
        }
        const isEquivalent = (a, b) => {
          if (typeof a === "function" || typeof b === "function") {
            return false;
          } else if (typeof a !== "object" || typeof b !== "object") {
            return a === b;
          }

          // Create arrays of property names
          let aProps = a ? Object.getOwnPropertyNames(a) : [];
          let bProps = b ? Object.getOwnPropertyNames(b) : [];

          // If number of properties is different,
          // objects are not equivalent
          if (aProps.length !== bProps.length) {
            return false;
          }
          for (var i = 0; i < aProps.length; i++) {
            let propName = aProps[i];

            // If values of same property are not equal,
            // objects are not equivalent
            if (propName !== "key" && !isEquivalent(a[propName], b[propName])) {
              return false;
            }
          }

          // If we made it this far, objects
          // are considered equivalent
          return true;
        };
        const nextId = exports("cs", elements => {
          if (elements.length) {
            let arrayOfIntCodes = elements.filter(el => el.type != "other").map(el => el.code.replace(/^\D+/g, "")).filter(el => el.length > 0);
            if (arrayOfIntCodes.length) {
              let intCodes = arrayOfIntCodes.map(el => parseInt(el)).sort(function (a, b) {
                return a - b;
              });
              if (intCodes) {
                return intCodes[intCodes.length - 1] + 1;
              }
            }
          }
          return 1;
        });
        const instructionByCode = exports("cT", (component, code) => component.instructionList ? component.instructionList.find(el => el.code === code) : undefined);
        const stripTags = exports("bO", string => {
          return string ? string.replace(/<[^>]*>?/gm, "").replace("\n", "").replace("&nbsp;", "") : string;
        });
        const isQuestion = exports("cb", code => /^Q[a-z0-9_]+$/.test(code));
        const isGroup = exports("ca", code => /^G[a-z0-9_]+$/.test(code));
        const lastIndexInArray = (array, func) => {
          if (!array) {
            return -1;
          }
          let index = array.length - 1;
          for (; index >= 0; index--) {
            if (func(array[index])) {
              return index;
            }
          }
          return -1;
        };
        const isNotEmptyHtml = exports("ce", value => value && /[^<br><p><\/p>\s]/gm.test(value));
        var Pages = {};
        var interopRequireDefault = {
          exports: {}
        };
        (function (module) {
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              "default": obj
            };
          }
          module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
        })(interopRequireDefault);
        var interopRequireDefaultExports = exports("Y", interopRequireDefault.exports);
        var createSvgIcon = {};
        const require$$0 = /*@__PURE__*/getAugmentedNamespace(utils$2);
        var hasRequiredCreateSvgIcon;
        function requireCreateSvgIcon() {
          if (hasRequiredCreateSvgIcon) return createSvgIcon;
          hasRequiredCreateSvgIcon = 1;
          (function (exports) {
            'use client';

            Object.defineProperty(exports, "__esModule", {
              value: true
            });
            Object.defineProperty(exports, "default", {
              enumerable: true,
              get: function get() {
                return _utils.createSvgIcon;
              }
            });
            var _utils = require$$0;
          })(createSvgIcon);
          return createSvgIcon;
        }
        var _interopRequireDefault$p = interopRequireDefaultExports;
        Object.defineProperty(Pages, "__esModule", {
          value: true
        });
        var default_1$p = Pages.default = void 0;
        var _createSvgIcon$p = _interopRequireDefault$p(requireCreateSvgIcon());
        var _jsxRuntime$p = jsxRuntimeExports;
        var _default$p = (0, _createSvgIcon$p.default)( /*#__PURE__*/(0, _jsxRuntime$p.jsx)("path", {
          d: "M3 5v6h5L7 7l4 1V3H5c-1.1 0-2 .9-2 2zm5 8H3v6c0 1.1.9 2 2 2h6v-5l-4 1 1-4zm9 4-4-1v5h6c1.1 0 2-.9 2-2v-6h-5l1 4zm2-14h-6v5l4-1-1 4h5V5c0-1.1-.9-2-2-2z"
        }), 'Pages');
        default_1$p = Pages.default = _default$p;
        var Flag = {};
        var _interopRequireDefault$o = interopRequireDefaultExports;
        Object.defineProperty(Flag, "__esModule", {
          value: true
        });
        var default_1$o = Flag.default = void 0;
        var _createSvgIcon$o = _interopRequireDefault$o(requireCreateSvgIcon());
        var _jsxRuntime$o = jsxRuntimeExports;
        var _default$o = (0, _createSvgIcon$o.default)( /*#__PURE__*/(0, _jsxRuntime$o.jsx)("path", {
          d: "M14.4 6 14 4H5v17h2v-7h5.6l.4 2h7V6z"
        }), 'Flag');
        default_1$o = Flag.default = _default$o;
        var Start = {};
        var _interopRequireDefault$n = interopRequireDefaultExports;
        Object.defineProperty(Start, "__esModule", {
          value: true
        });
        var default_1$n = Start.default = void 0;
        var _createSvgIcon$n = _interopRequireDefault$n(requireCreateSvgIcon());
        var _jsxRuntime$n = jsxRuntimeExports;
        var _default$n = (0, _createSvgIcon$n.default)( /*#__PURE__*/(0, _jsxRuntime$n.jsx)("path", {
          d: "M14.59 7.41 18.17 11H6v2h12.17l-3.59 3.59L16 18l6-6-6-6-1.41 1.41zM2 6v12h2V6H2z"
        }), 'Start');
        default_1$n = Start.default = _default$n;
        const leftPanelGroupItem = "_leftPanelGroupItem_1wa4u_1";
        const groupTitle$1 = "_groupTitle_1wa4u_6";
        const iconMenu = "_iconMenu_1wa4u_12";
        const tabHeader = "_tabHeader_1wa4u_16";
        const leftContent = "_leftContent_1wa4u_30";
        const close = "_close_1wa4u_37";
        const styles$8 = {
          leftPanelGroupItem: leftPanelGroupItem,
          groupTitle: groupTitle$1,
          iconMenu: iconMenu,
          tabHeader: tabHeader,
          leftContent: leftContent,
          close: close
        };
        const leftPannelItem = "_leftPannelItem_3isj2_1";
        const icon = "_icon_3isj2_11";
        const title = "_title_3isj2_15";
        const offlineOnly = "_offlineOnly_3isj2_19";
        const isDrayLayer = "_isDrayLayer_3isj2_26";
        const styles$7 = {
          leftPannelItem: leftPannelItem,
          icon: icon,
          title: title,
          offlineOnly: offlineOnly,
          isDrayLayer: isDrayLayer
        };

        /**
         * Create the React Context
         */
        const DndContext = reactExports.createContext({
          dragDropManager: undefined
        });
        function invariant(condition, format, ...args) {
          if (isProduction()) {
            if (format === void 0) {
              throw new Error("invariant requires an error message argument");
            }
          }
          if (!condition) {
            let error;
            if (format === void 0) {
              error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
            } else {
              let argIndex = 0;
              error = new Error(format.replace(/%s/g, function () {
                return args[argIndex++];
              }));
              error.name = "Invariant Violation";
            }
            error.framesToPop = 1;
            throw error;
          }
        }
        function isProduction() {
          return typeof process !== "undefined" && true;
        }

        // cheap lodash replacements
        /**
         * drop-in replacement for _.get
         * @param obj
         * @param path
         * @param defaultValue
         */
        function get(obj, path, defaultValue) {
          return path.split('.').reduce((a, c) => a && a[c] ? a[c] : defaultValue || null, obj);
        }
        /**
         * drop-in replacement for _.without
         */
        function without$1(items, item) {
          return items.filter(i => i !== item);
        }
        /**
         * drop-in replacement for _.isString
         * @param input
         */
        function isObject$1(input) {
          return typeof input === 'object';
        }
        /**
         * replacement for _.xor
         * @param itemsA
         * @param itemsB
         */
        function xor(itemsA, itemsB) {
          const map = new Map();
          const insertItem = item => {
            map.set(item, map.has(item) ? map.get(item) + 1 : 1);
          };
          itemsA.forEach(insertItem);
          itemsB.forEach(insertItem);
          const result = [];
          map.forEach((count, key) => {
            if (count === 1) {
              result.push(key);
            }
          });
          return result;
        }
        /**
         * replacement for _.intersection
         * @param itemsA
         * @param itemsB
         */
        function intersection(itemsA, itemsB) {
          return itemsA.filter(t => itemsB.indexOf(t) > -1);
        }
        const INIT_COORDS = 'dnd-core/INIT_COORDS';
        const BEGIN_DRAG = 'dnd-core/BEGIN_DRAG';
        const PUBLISH_DRAG_SOURCE = 'dnd-core/PUBLISH_DRAG_SOURCE';
        const HOVER = 'dnd-core/HOVER';
        const DROP = 'dnd-core/DROP';
        const END_DRAG = 'dnd-core/END_DRAG';
        function setClientOffset(clientOffset, sourceClientOffset) {
          return {
            type: INIT_COORDS,
            payload: {
              sourceClientOffset: sourceClientOffset || null,
              clientOffset: clientOffset || null
            }
          };
        }
        const ResetCoordinatesAction = {
          type: INIT_COORDS,
          payload: {
            clientOffset: null,
            sourceClientOffset: null
          }
        };
        function createBeginDrag(manager) {
          return function beginDrag(sourceIds = [], options = {
            publishSource: true
          }) {
            const _options$publishSourc = options.publishSource,
              publishSource = _options$publishSourc === void 0 ? true : _options$publishSourc,
              clientOffset = options.clientOffset,
              getSourceClientOffset = options.getSourceClientOffset;
            const monitor = manager.getMonitor();
            const registry = manager.getRegistry();
            // Initialize the coordinates using the client offset
            manager.dispatch(setClientOffset(clientOffset));
            verifyInvariants$1(sourceIds, monitor, registry);
            // Get the draggable source
            const sourceId = getDraggableSource(sourceIds, monitor);
            if (sourceId == null) {
              manager.dispatch(ResetCoordinatesAction);
              return;
            }
            // Get the source client offset
            let sourceClientOffset = null;
            if (clientOffset) {
              if (!getSourceClientOffset) {
                throw new Error('getSourceClientOffset must be defined');
              }
              verifyGetSourceClientOffsetIsFunction(getSourceClientOffset);
              sourceClientOffset = getSourceClientOffset(sourceId);
            }
            // Initialize the full coordinates
            manager.dispatch(setClientOffset(clientOffset, sourceClientOffset));
            const source = registry.getSource(sourceId);
            const item = source.beginDrag(monitor, sourceId);
            // If source.beginDrag returns null, this is an indicator to cancel the drag
            if (item == null) {
              return undefined;
            }
            verifyItemIsObject(item);
            registry.pinSource(sourceId);
            const itemType = registry.getSourceType(sourceId);
            return {
              type: BEGIN_DRAG,
              payload: {
                itemType,
                item,
                sourceId,
                clientOffset: clientOffset || null,
                sourceClientOffset: sourceClientOffset || null,
                isSourcePublic: !!publishSource
              }
            };
          };
        }
        function verifyInvariants$1(sourceIds, monitor, registry) {
          invariant(!monitor.isDragging(), 'Cannot call beginDrag while dragging.');
          sourceIds.forEach(function (sourceId) {
            invariant(registry.getSource(sourceId), 'Expected sourceIds to be registered.');
          });
        }
        function verifyGetSourceClientOffsetIsFunction(getSourceClientOffset) {
          invariant(typeof getSourceClientOffset === 'function', 'When clientOffset is provided, getSourceClientOffset must be a function.');
        }
        function verifyItemIsObject(item) {
          invariant(isObject$1(item), 'Item must be an object.');
        }
        function getDraggableSource(sourceIds, monitor) {
          let sourceId = null;
          for (let i = sourceIds.length - 1; i >= 0; i--) {
            if (monitor.canDragSource(sourceIds[i])) {
              sourceId = sourceIds[i];
              break;
            }
          }
          return sourceId;
        }
        function _defineProperty$4(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function _objectSpread$4(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === 'function') {
              ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
              }));
            }
            ownKeys.forEach(function (key) {
              _defineProperty$4(target, key, source[key]);
            });
          }
          return target;
        }
        function createDrop(manager) {
          return function drop(options = {}) {
            const monitor = manager.getMonitor();
            const registry = manager.getRegistry();
            verifyInvariants(monitor);
            const targetIds = getDroppableTargets(monitor);
            // Multiple actions are dispatched here, which is why this doesn't return an action
            targetIds.forEach((targetId, index) => {
              const dropResult = determineDropResult(targetId, index, registry, monitor);
              const action = {
                type: DROP,
                payload: {
                  dropResult: _objectSpread$4({}, options, dropResult)
                }
              };
              manager.dispatch(action);
            });
          };
        }
        function verifyInvariants(monitor) {
          invariant(monitor.isDragging(), 'Cannot call drop while not dragging.');
          invariant(!monitor.didDrop(), 'Cannot call drop twice during one drag operation.');
        }
        function determineDropResult(targetId, index, registry, monitor) {
          const target = registry.getTarget(targetId);
          let dropResult = target ? target.drop(monitor, targetId) : undefined;
          verifyDropResultType(dropResult);
          if (typeof dropResult === 'undefined') {
            dropResult = index === 0 ? {} : monitor.getDropResult();
          }
          return dropResult;
        }
        function verifyDropResultType(dropResult) {
          invariant(typeof dropResult === 'undefined' || isObject$1(dropResult), 'Drop result must either be an object or undefined.');
        }
        function getDroppableTargets(monitor) {
          const targetIds = monitor.getTargetIds().filter(monitor.canDropOnTarget, monitor);
          targetIds.reverse();
          return targetIds;
        }
        function createEndDrag(manager) {
          return function endDrag() {
            const monitor = manager.getMonitor();
            const registry = manager.getRegistry();
            verifyIsDragging(monitor);
            const sourceId = monitor.getSourceId();
            if (sourceId != null) {
              const source = registry.getSource(sourceId, true);
              source.endDrag(monitor, sourceId);
              registry.unpinSource();
            }
            return {
              type: END_DRAG
            };
          };
        }
        function verifyIsDragging(monitor) {
          invariant(monitor.isDragging(), 'Cannot call endDrag while not dragging.');
        }
        function matchesType(targetType, draggedItemType) {
          if (draggedItemType === null) {
            return targetType === null;
          }
          return Array.isArray(targetType) ? targetType.some(t => t === draggedItemType) : targetType === draggedItemType;
        }
        function createHover(manager) {
          return function hover(targetIdsArg, {
            clientOffset
          } = {}) {
            verifyTargetIdsIsArray(targetIdsArg);
            const targetIds = targetIdsArg.slice(0);
            const monitor = manager.getMonitor();
            const registry = manager.getRegistry();
            const draggedItemType = monitor.getItemType();
            removeNonMatchingTargetIds(targetIds, registry, draggedItemType);
            checkInvariants(targetIds, monitor, registry);
            hoverAllTargets(targetIds, monitor, registry);
            return {
              type: HOVER,
              payload: {
                targetIds,
                clientOffset: clientOffset || null
              }
            };
          };
        }
        function verifyTargetIdsIsArray(targetIdsArg) {
          invariant(Array.isArray(targetIdsArg), 'Expected targetIds to be an array.');
        }
        function checkInvariants(targetIds, monitor, registry) {
          invariant(monitor.isDragging(), 'Cannot call hover while not dragging.');
          invariant(!monitor.didDrop(), 'Cannot call hover after drop.');
          for (let i = 0; i < targetIds.length; i++) {
            const targetId = targetIds[i];
            invariant(targetIds.lastIndexOf(targetId) === i, 'Expected targetIds to be unique in the passed array.');
            const target = registry.getTarget(targetId);
            invariant(target, 'Expected targetIds to be registered.');
          }
        }
        function removeNonMatchingTargetIds(targetIds, registry, draggedItemType) {
          // Remove those targetIds that don't match the targetType.  This
          // fixes shallow isOver which would only be non-shallow because of
          // non-matching targets.
          for (let i = targetIds.length - 1; i >= 0; i--) {
            const targetId = targetIds[i];
            const targetType = registry.getTargetType(targetId);
            if (!matchesType(targetType, draggedItemType)) {
              targetIds.splice(i, 1);
            }
          }
        }
        function hoverAllTargets(targetIds, monitor, registry) {
          // Finally call hover on all matching targets.
          targetIds.forEach(function (targetId) {
            const target = registry.getTarget(targetId);
            target.hover(monitor, targetId);
          });
        }
        function createPublishDragSource(manager) {
          return function publishDragSource() {
            const monitor = manager.getMonitor();
            if (monitor.isDragging()) {
              return {
                type: PUBLISH_DRAG_SOURCE
              };
            }
            return;
          };
        }
        function createDragDropActions(manager) {
          return {
            beginDrag: createBeginDrag(manager),
            publishDragSource: createPublishDragSource(manager),
            hover: createHover(manager),
            drop: createDrop(manager),
            endDrag: createEndDrag(manager)
          };
        }
        class DragDropManagerImpl {
          receiveBackend(backend) {
            this.backend = backend;
          }
          getMonitor() {
            return this.monitor;
          }
          getBackend() {
            return this.backend;
          }
          getRegistry() {
            return this.monitor.registry;
          }
          getActions() {
            /* eslint-disable-next-line @typescript-eslint/no-this-alias */const manager = this;
            const dispatch = this.store.dispatch;
            function bindActionCreator(actionCreator) {
              return (...args) => {
                const action = actionCreator.apply(manager, args);
                if (typeof action !== 'undefined') {
                  dispatch(action);
                }
              };
            }
            const actions = createDragDropActions(this);
            return Object.keys(actions).reduce((boundActions, key) => {
              const action = actions[key];
              boundActions[key] = bindActionCreator(action);
              return boundActions;
            }, {});
          }
          dispatch(action) {
            this.store.dispatch(action);
          }
          constructor(store, monitor) {
            this.isSetUp = false;
            this.handleRefCountChange = () => {
              const shouldSetUp = this.store.getState().refCount > 0;
              if (this.backend) {
                if (shouldSetUp && !this.isSetUp) {
                  this.backend.setup();
                  this.isSetUp = true;
                } else if (!shouldSetUp && this.isSetUp) {
                  this.backend.teardown();
                  this.isSetUp = false;
                }
              }
            };
            this.store = store;
            this.monitor = monitor;
            store.subscribe(this.handleRefCountChange);
          }
        }

        /**
         * Coordinate addition
         * @param a The first coordinate
         * @param b The second coordinate
         */
        function add(a, b) {
          return {
            x: a.x + b.x,
            y: a.y + b.y
          };
        }
        /**
         * Coordinate subtraction
         * @param a The first coordinate
         * @param b The second coordinate
         */
        function subtract(a, b) {
          return {
            x: a.x - b.x,
            y: a.y - b.y
          };
        }
        /**
         * Returns the cartesian distance of the drag source component's position, based on its position
         * at the time when the current drag operation has started, and the movement difference.
         *
         * Returns null if no item is being dragged.
         *
         * @param state The offset state to compute from
         */
        function getSourceClientOffset(state) {
          const clientOffset = state.clientOffset,
            initialClientOffset = state.initialClientOffset,
            initialSourceClientOffset = state.initialSourceClientOffset;
          if (!clientOffset || !initialClientOffset || !initialSourceClientOffset) {
            return null;
          }
          return subtract(add(clientOffset, initialSourceClientOffset), initialClientOffset);
        }
        /**
         * Determines the x,y offset between the client offset and the initial client offset
         *
         * @param state The offset state to compute from
         */
        function getDifferenceFromInitialOffset(state) {
          const clientOffset = state.clientOffset,
            initialClientOffset = state.initialClientOffset;
          if (!clientOffset || !initialClientOffset) {
            return null;
          }
          return subtract(clientOffset, initialClientOffset);
        }
        const NONE = [];
        const ALL = [];
        NONE.__IS_NONE__ = true;
        ALL.__IS_ALL__ = true;
        /**
         * Determines if the given handler IDs are dirty or not.
         *
         * @param dirtyIds The set of dirty handler ids
         * @param handlerIds The set of handler ids to check
         */
        function areDirty(dirtyIds, handlerIds) {
          if (dirtyIds === NONE) {
            return false;
          }
          if (dirtyIds === ALL || typeof handlerIds === 'undefined') {
            return true;
          }
          const commonIds = intersection(handlerIds, dirtyIds);
          return commonIds.length > 0;
        }
        class DragDropMonitorImpl {
          subscribeToStateChange(listener, options = {}) {
            const handlerIds = options.handlerIds;
            invariant(typeof listener === 'function', 'listener must be a function.');
            invariant(typeof handlerIds === 'undefined' || Array.isArray(handlerIds), 'handlerIds, when specified, must be an array of strings.');
            let prevStateId = this.store.getState().stateId;
            const handleChange = () => {
              const state = this.store.getState();
              const currentStateId = state.stateId;
              try {
                const canSkipListener = currentStateId === prevStateId || currentStateId === prevStateId + 1 && !areDirty(state.dirtyHandlerIds, handlerIds);
                if (!canSkipListener) {
                  listener();
                }
              } finally {
                prevStateId = currentStateId;
              }
            };
            return this.store.subscribe(handleChange);
          }
          subscribeToOffsetChange(listener) {
            invariant(typeof listener === 'function', 'listener must be a function.');
            let previousState = this.store.getState().dragOffset;
            const handleChange = () => {
              const nextState = this.store.getState().dragOffset;
              if (nextState === previousState) {
                return;
              }
              previousState = nextState;
              listener();
            };
            return this.store.subscribe(handleChange);
          }
          canDragSource(sourceId) {
            if (!sourceId) {
              return false;
            }
            const source = this.registry.getSource(sourceId);
            invariant(source, `Expected to find a valid source. sourceId=${sourceId}`);
            if (this.isDragging()) {
              return false;
            }
            return source.canDrag(this, sourceId);
          }
          canDropOnTarget(targetId) {
            // undefined on initial render
            if (!targetId) {
              return false;
            }
            const target = this.registry.getTarget(targetId);
            invariant(target, `Expected to find a valid target. targetId=${targetId}`);
            if (!this.isDragging() || this.didDrop()) {
              return false;
            }
            const targetType = this.registry.getTargetType(targetId);
            const draggedItemType = this.getItemType();
            return matchesType(targetType, draggedItemType) && target.canDrop(this, targetId);
          }
          isDragging() {
            return Boolean(this.getItemType());
          }
          isDraggingSource(sourceId) {
            // undefined on initial render
            if (!sourceId) {
              return false;
            }
            const source = this.registry.getSource(sourceId, true);
            invariant(source, `Expected to find a valid source. sourceId=${sourceId}`);
            if (!this.isDragging() || !this.isSourcePublic()) {
              return false;
            }
            const sourceType = this.registry.getSourceType(sourceId);
            const draggedItemType = this.getItemType();
            if (sourceType !== draggedItemType) {
              return false;
            }
            return source.isDragging(this, sourceId);
          }
          isOverTarget(targetId, options = {
            shallow: false
          }) {
            // undefined on initial render
            if (!targetId) {
              return false;
            }
            const shallow = options.shallow;
            if (!this.isDragging()) {
              return false;
            }
            const targetType = this.registry.getTargetType(targetId);
            const draggedItemType = this.getItemType();
            if (draggedItemType && !matchesType(targetType, draggedItemType)) {
              return false;
            }
            const targetIds = this.getTargetIds();
            if (!targetIds.length) {
              return false;
            }
            const index = targetIds.indexOf(targetId);
            if (shallow) {
              return index === targetIds.length - 1;
            } else {
              return index > -1;
            }
          }
          getItemType() {
            return this.store.getState().dragOperation.itemType;
          }
          getItem() {
            return this.store.getState().dragOperation.item;
          }
          getSourceId() {
            return this.store.getState().dragOperation.sourceId;
          }
          getTargetIds() {
            return this.store.getState().dragOperation.targetIds;
          }
          getDropResult() {
            return this.store.getState().dragOperation.dropResult;
          }
          didDrop() {
            return this.store.getState().dragOperation.didDrop;
          }
          isSourcePublic() {
            return Boolean(this.store.getState().dragOperation.isSourcePublic);
          }
          getInitialClientOffset() {
            return this.store.getState().dragOffset.initialClientOffset;
          }
          getInitialSourceClientOffset() {
            return this.store.getState().dragOffset.initialSourceClientOffset;
          }
          getClientOffset() {
            return this.store.getState().dragOffset.clientOffset;
          }
          getSourceClientOffset() {
            return getSourceClientOffset(this.store.getState().dragOffset);
          }
          getDifferenceFromInitialOffset() {
            return getDifferenceFromInitialOffset(this.store.getState().dragOffset);
          }
          constructor(store, registry) {
            this.store = store;
            this.registry = registry;
          }
        }

        // Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
        // have WebKitMutationObserver but not un-prefixed MutationObserver.
        // Must use `global` or `self` instead of `window` to work in both frames and web
        // workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.
        /* globals self */
        const scope = typeof global !== 'undefined' ? global : self;
        const BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;
        function makeRequestCallFromTimer(callback) {
          return function requestCall() {
            // We dispatch a timeout with a specified delay of 0 for engines that
            // can reliably accommodate that request. This will usually be snapped
            // to a 4 milisecond delay, but once we're flushing, there's no delay
            // between events.
            const timeoutHandle = setTimeout(handleTimer, 0);
            // However, since this timer gets frequently dropped in Firefox
            // workers, we enlist an interval handle that will try to fire
            // an event 20 times per second until it succeeds.
            const intervalHandle = setInterval(handleTimer, 50);
            function handleTimer() {
              // Whichever timer succeeds will cancel both timers and
              // execute the callback.
              clearTimeout(timeoutHandle);
              clearInterval(intervalHandle);
              callback();
            }
          };
        }
        // To request a high priority event, we induce a mutation observer by toggling
        // the text of a text node between "1" and "-1".
        function makeRequestCallFromMutationObserver(callback) {
          let toggle = 1;
          const observer = new BrowserMutationObserver(callback);
          const node = document.createTextNode('');
          observer.observe(node, {
            characterData: true
          });
          return function requestCall() {
            toggle = -toggle;
            node.data = toggle;
          };
        }
        const makeRequestCall = typeof BrowserMutationObserver === 'function' ?
        // reliably everywhere they are implemented.
        // They are implemented in all modern browsers.
        //
        // - Android 4-4.3
        // - Chrome 26-34
        // - Firefox 14-29
        // - Internet Explorer 11
        // - iPad Safari 6-7.1
        // - iPhone Safari 7-7.1
        // - Safari 6-7
        makeRequestCallFromMutationObserver :
        // task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
        // 11-12, and in web workers in many engines.
        // Although message channels yield to any queued rendering and IO tasks, they
        // would be better than imposing the 4ms delay of timers.
        // However, they do not work reliably in Internet Explorer or Safari.
        // Internet Explorer 10 is the only browser that has setImmediate but does
        // not have MutationObservers.
        // Although setImmediate yields to the browser's renderer, it would be
        // preferrable to falling back to setTimeout since it does not have
        // the minimum 4ms penalty.
        // Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
        // Desktop to a lesser extent) that renders both setImmediate and
        // MessageChannel useless for the purposes of ASAP.
        // https://github.com/kriskowal/q/issues/396
        // Timers are implemented universally.
        // We fall back to timers in workers in most engines, and in foreground
        // contexts in the following browsers.
        // However, note that even this simple case requires nuances to operate in a
        // broad spectrum of browsers.
        //
        // - Firefox 3-13
        // - Internet Explorer 6-9
        // - iPad Safari 4.3
        // - Lynx 2.8.7
        makeRequestCallFromTimer;
        class AsapQueue {
          // Use the fastest means possible to execute a task in its own turn, with
          // priority over other events including IO, animation, reflow, and redraw
          // events in browsers.
          //
          // An exception thrown by a task will permanently interrupt the processing of
          // subsequent tasks. The higher level `asap` function ensures that if an
          // exception is thrown by a task, that the task queue will continue flushing as
          // soon as possible, but if you use `rawAsap` directly, you are responsible to
          // either ensure that no exceptions are thrown from your task, or to manually
          // call `rawAsap.requestFlush` if an exception is thrown.
          enqueueTask(task) {
            const q = this.queue,
              requestFlush = this.requestFlush;
            if (!q.length) {
              requestFlush();
              this.flushing = true;
            }
            // Equivalent to push, but avoids a function call.
            q[q.length] = task;
          }
          constructor() {
            this.queue = [];
            // We queue errors to ensure they are thrown in right order (FIFO).
            // Array-as-queue is good enough here, since we are just dealing with exceptions.
            this.pendingErrors = [];
            // Once a flush has been requested, no further calls to `requestFlush` are
            // necessary until the next `flush` completes.
            // @ts-ignore
            this.flushing = false;
            // The position of the next task to execute in the task queue. This is
            // preserved between calls to `flush` so that it can be resumed if
            // a task throws an exception.
            this.index = 0;
            // If a task schedules additional tasks recursively, the task queue can grow
            // unbounded. To prevent memory exhaustion, the task queue will periodically
            // truncate already-completed tasks.
            this.capacity = 1024;
            // The flush function processes all tasks that have been scheduled with
            // `rawAsap` unless and until one of those tasks throws an exception.
            // If a task throws an exception, `flush` ensures that its state will remain
            // consistent and will resume where it left off when called again.
            // However, `flush` does not make any arrangements to be called again if an
            // exception is thrown.
            this.flush = () => {
              const q = this.queue;
              while (this.index < q.length) {
                const currentIndex = this.index;
                // Advance the index before calling the task. This ensures that we will
                // begin flushing on the next task the task throws an error.
                this.index++;
                q[currentIndex].call();
                // Prevent leaking memory for long chains of recursive calls to `asap`.
                // If we call `asap` within tasks scheduled by `asap`, the queue will
                // grow, but to avoid an O(n) walk for every task we execute, we don't
                // shift tasks off the queue after they have been executed.
                // Instead, we periodically shift 1024 tasks off the queue.
                if (this.index > this.capacity) {
                  // Manually shift all values starting at the index back to the
                  // beginning of the queue.
                  for (let scan = 0, newLength = q.length - this.index; scan < newLength; scan++) {
                    q[scan] = q[scan + this.index];
                  }
                  q.length -= this.index;
                  this.index = 0;
                }
              }
              q.length = 0;
              this.index = 0;
              this.flushing = false;
            };
            // In a web browser, exceptions are not fatal. However, to avoid
            // slowing down the queue of pending tasks, we rethrow the error in a
            // lower priority turn.
            this.registerPendingError = err => {
              this.pendingErrors.push(err);
              this.requestErrorThrow();
            };
            // `requestFlush` requests that the high priority event queue be flushed as
            // soon as possible.
            // This is useful to prevent an error thrown in a task from stalling the event
            // queue if the exception handled by Node.js’s
            // `process.on("uncaughtException")` or by a domain.
            // `requestFlush` is implemented using a strategy based on data collected from
            // every available SauceLabs Selenium web driver worker at time of writing.
            // https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593
            this.requestFlush = makeRequestCall(this.flush);
            this.requestErrorThrow = makeRequestCallFromTimer(() => {
              // Throw first error
              if (this.pendingErrors.length) {
                throw this.pendingErrors.shift();
              }
            });
          }
        } // The message channel technique was discovered by Malte Ubl and was the
        // original foundation for this library.
        // http://www.nonblocking.io/2011/06/windownexttick.html
        // Safari 6.0.5 (at least) intermittently fails to create message ports on a
        // page's first load. Thankfully, this version of Safari supports
        // MutationObservers, so we don't need to fall back in that case.
        // function makeRequestCallFromMessageChannel(callback) {
        //     var channel = new MessageChannel();
        //     channel.port1.onmessage = callback;
        //     return function requestCall() {
        //         channel.port2.postMessage(0);
        //     };
        // }
        // For reasons explained above, we are also unable to use `setImmediate`
        // under any circumstances.
        // Even if we were, there is another bug in Internet Explorer 10.
        // It is not sufficient to assign `setImmediate` to `requestFlush` because
        // `setImmediate` must be called *by name* and therefore must be wrapped in a
        // closure.
        // Never forget.
        // function makeRequestCallFromSetImmediate(callback) {
        //     return function requestCall() {
        //         setImmediate(callback);
        //     };
        // }
        // Safari 6.0 has a problem where timers will get lost while the user is
        // scrolling. This problem does not impact ASAP because Safari 6.0 supports
        // mutation observers, so that implementation is used instead.
        // However, if we ever elect to use timers in Safari, the prevalent work-around
        // is to add a scroll event listener that calls for a flush.
        // `setTimeout` does not call the passed callback if the delay is less than
        // approximately 7 in web workers in Firefox 8 through 18, and sometimes not
        // even then.
        // This is for `asap.js` only.
        // Its name will be periodically randomized to break any code that depends on
        // // its existence.
        // rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer
        // ASAP was originally a nextTick shim included in Q. This was factored out
        // into this ASAP package. It was later adapted to RSVP which made further
        // amendments. These decisions, particularly to marginalize MessageChannel and
        // to capture the MutationObserver implementation in a closure, were integrated
        // back into ASAP proper.
        // https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js

        // `call`, just like a function.
        class RawTask {
          call() {
            try {
              this.task && this.task();
            } catch (error) {
              this.onError(error);
            } finally {
              this.task = null;
              this.release(this);
            }
          }
          constructor(onError, release) {
            this.onError = onError;
            this.release = release;
            this.task = null;
          }
        }
        class TaskFactory {
          create(task) {
            const tasks = this.freeTasks;
            const t1 = tasks.length ? tasks.pop() : new RawTask(this.onError, t => tasks[tasks.length] = t);
            t1.task = task;
            return t1;
          }
          constructor(onError) {
            this.onError = onError;
            this.freeTasks = [];
          }
        }
        const asapQueue = new AsapQueue();
        const taskFactory = new TaskFactory(asapQueue.registerPendingError);
        /**
         * Calls a task as soon as possible after returning, in its own event, with priority
         * over other events like animation, reflow, and repaint. An error thrown from an
         * event will not interrupt, nor even substantially slow down the processing of
         * other events, but will be rather postponed to a lower priority event.
         * @param {{call}} task A callable object, typically a function that takes no
         * arguments.
         */
        function asap(task) {
          asapQueue.enqueueTask(taskFactory.create(task));
        }
        const ADD_SOURCE = 'dnd-core/ADD_SOURCE';
        const ADD_TARGET = 'dnd-core/ADD_TARGET';
        const REMOVE_SOURCE = 'dnd-core/REMOVE_SOURCE';
        const REMOVE_TARGET = 'dnd-core/REMOVE_TARGET';
        function addSource(sourceId) {
          return {
            type: ADD_SOURCE,
            payload: {
              sourceId
            }
          };
        }
        function addTarget(targetId) {
          return {
            type: ADD_TARGET,
            payload: {
              targetId
            }
          };
        }
        function removeSource(sourceId) {
          return {
            type: REMOVE_SOURCE,
            payload: {
              sourceId
            }
          };
        }
        function removeTarget(targetId) {
          return {
            type: REMOVE_TARGET,
            payload: {
              targetId
            }
          };
        }
        function validateSourceContract(source) {
          invariant(typeof source.canDrag === 'function', 'Expected canDrag to be a function.');
          invariant(typeof source.beginDrag === 'function', 'Expected beginDrag to be a function.');
          invariant(typeof source.endDrag === 'function', 'Expected endDrag to be a function.');
        }
        function validateTargetContract(target) {
          invariant(typeof target.canDrop === 'function', 'Expected canDrop to be a function.');
          invariant(typeof target.hover === 'function', 'Expected hover to be a function.');
          invariant(typeof target.drop === 'function', 'Expected beginDrag to be a function.');
        }
        function validateType(type, allowArray) {
          if (allowArray && Array.isArray(type)) {
            type.forEach(t => validateType(t, false));
            return;
          }
          invariant(typeof type === 'string' || typeof type === 'symbol', allowArray ? 'Type can only be a string, a symbol, or an array of either.' : 'Type can only be a string or a symbol.');
        }
        var HandlerRole;
        (function (HandlerRole) {
          HandlerRole["SOURCE"] = "SOURCE";
          HandlerRole["TARGET"] = "TARGET";
        })(HandlerRole || (HandlerRole = {}));
        let nextUniqueId = 0;
        function getNextUniqueId() {
          return nextUniqueId++;
        }
        function getNextHandlerId(role) {
          const id = getNextUniqueId().toString();
          switch (role) {
            case HandlerRole.SOURCE:
              return `S${id}`;
            case HandlerRole.TARGET:
              return `T${id}`;
            default:
              throw new Error(`Unknown Handler Role: ${role}`);
          }
        }
        function parseRoleFromHandlerId(handlerId) {
          switch (handlerId[0]) {
            case 'S':
              return HandlerRole.SOURCE;
            case 'T':
              return HandlerRole.TARGET;
            default:
              throw new Error(`Cannot parse handler ID: ${handlerId}`);
          }
        }
        function mapContainsValue(map, searchValue) {
          const entries = map.entries();
          let isDone = false;
          do {
            const _entries$next = entries.next(),
              done = _entries$next.done,
              _entries$next$value = _slicedToArray2(_entries$next.value, 2),
              value = _entries$next$value[1];
            if (value === searchValue) {
              return true;
            }
            isDone = !!done;
          } while (!isDone);
          return false;
        }
        class HandlerRegistryImpl {
          addSource(type, source) {
            validateType(type);
            validateSourceContract(source);
            const sourceId = this.addHandler(HandlerRole.SOURCE, type, source);
            this.store.dispatch(addSource(sourceId));
            return sourceId;
          }
          addTarget(type, target) {
            validateType(type, true);
            validateTargetContract(target);
            const targetId = this.addHandler(HandlerRole.TARGET, type, target);
            this.store.dispatch(addTarget(targetId));
            return targetId;
          }
          containsHandler(handler) {
            return mapContainsValue(this.dragSources, handler) || mapContainsValue(this.dropTargets, handler);
          }
          getSource(sourceId, includePinned = false) {
            invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');
            const isPinned = includePinned && sourceId === this.pinnedSourceId;
            const source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId);
            return source;
          }
          getTarget(targetId) {
            invariant(this.isTargetId(targetId), 'Expected a valid target ID.');
            return this.dropTargets.get(targetId);
          }
          getSourceType(sourceId) {
            invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');
            return this.types.get(sourceId);
          }
          getTargetType(targetId) {
            invariant(this.isTargetId(targetId), 'Expected a valid target ID.');
            return this.types.get(targetId);
          }
          isSourceId(handlerId) {
            const role = parseRoleFromHandlerId(handlerId);
            return role === HandlerRole.SOURCE;
          }
          isTargetId(handlerId) {
            const role = parseRoleFromHandlerId(handlerId);
            return role === HandlerRole.TARGET;
          }
          removeSource(sourceId) {
            invariant(this.getSource(sourceId), 'Expected an existing source.');
            this.store.dispatch(removeSource(sourceId));
            asap(() => {
              this.dragSources.delete(sourceId);
              this.types.delete(sourceId);
            });
          }
          removeTarget(targetId) {
            invariant(this.getTarget(targetId), 'Expected an existing target.');
            this.store.dispatch(removeTarget(targetId));
            this.dropTargets.delete(targetId);
            this.types.delete(targetId);
          }
          pinSource(sourceId) {
            const source = this.getSource(sourceId);
            invariant(source, 'Expected an existing source.');
            this.pinnedSourceId = sourceId;
            this.pinnedSource = source;
          }
          unpinSource() {
            invariant(this.pinnedSource, 'No source is pinned at the time.');
            this.pinnedSourceId = null;
            this.pinnedSource = null;
          }
          addHandler(role, type, handler) {
            const id = getNextHandlerId(role);
            this.types.set(id, type);
            if (role === HandlerRole.SOURCE) {
              this.dragSources.set(id, handler);
            } else if (role === HandlerRole.TARGET) {
              this.dropTargets.set(id, handler);
            }
            return id;
          }
          constructor(store) {
            this.types = new Map();
            this.dragSources = new Map();
            this.dropTargets = new Map();
            this.pinnedSourceId = null;
            this.pinnedSource = null;
            this.store = store;
          }
        }
        const strictEquality = (a, b) => a === b;
        /**
         * Determine if two cartesian coordinate offsets are equal
         * @param offsetA
         * @param offsetB
         */
        function areCoordsEqual(offsetA, offsetB) {
          if (!offsetA && !offsetB) {
            return true;
          } else if (!offsetA || !offsetB) {
            return false;
          } else {
            return offsetA.x === offsetB.x && offsetA.y === offsetB.y;
          }
        }
        /**
         * Determines if two arrays of items are equal
         * @param a The first array of items
         * @param b The second array of items
         */
        function areArraysEqual(a, b, isEqual = strictEquality) {
          if (a.length !== b.length) {
            return false;
          }
          for (let i = 0; i < a.length; ++i) {
            if (!isEqual(a[i], b[i])) {
              return false;
            }
          }
          return true;
        }
        function reduce$5(
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        _state = NONE, action) {
          switch (action.type) {
            case HOVER:
              break;
            case ADD_SOURCE:
            case ADD_TARGET:
            case REMOVE_TARGET:
            case REMOVE_SOURCE:
              return NONE;
            case BEGIN_DRAG:
            case PUBLISH_DRAG_SOURCE:
            case END_DRAG:
            case DROP:
            default:
              return ALL;
          }
          const _action$payload = action.payload,
            _action$payload$targe = _action$payload.targetIds,
            targetIds = _action$payload$targe === void 0 ? [] : _action$payload$targe,
            _action$payload$prevT = _action$payload.prevTargetIds,
            prevTargetIds = _action$payload$prevT === void 0 ? [] : _action$payload$prevT;
          const result = xor(targetIds, prevTargetIds);
          const didChange = result.length > 0 || !areArraysEqual(targetIds, prevTargetIds);
          if (!didChange) {
            return NONE;
          }
          // Check the target ids at the innermost position. If they are valid, add them
          // to the result
          const prevInnermostTargetId = prevTargetIds[prevTargetIds.length - 1];
          const innermostTargetId = targetIds[targetIds.length - 1];
          if (prevInnermostTargetId !== innermostTargetId) {
            if (prevInnermostTargetId) {
              result.push(prevInnermostTargetId);
            }
            if (innermostTargetId) {
              result.push(innermostTargetId);
            }
          }
          return result;
        }
        function _defineProperty$3(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function _objectSpread$3(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === 'function') {
              ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
              }));
            }
            ownKeys.forEach(function (key) {
              _defineProperty$3(target, key, source[key]);
            });
          }
          return target;
        }
        const initialState$1 = {
          initialSourceClientOffset: null,
          initialClientOffset: null,
          clientOffset: null
        };
        function reduce$4(state = initialState$1, action) {
          const payload = action.payload;
          switch (action.type) {
            case INIT_COORDS:
            case BEGIN_DRAG:
              return {
                initialSourceClientOffset: payload.sourceClientOffset,
                initialClientOffset: payload.clientOffset,
                clientOffset: payload.clientOffset
              };
            case HOVER:
              if (areCoordsEqual(state.clientOffset, payload.clientOffset)) {
                return state;
              }
              return _objectSpread$3({}, state, {
                clientOffset: payload.clientOffset
              });
            case END_DRAG:
            case DROP:
              return initialState$1;
            default:
              return state;
          }
        }
        function _defineProperty$2(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function _objectSpread$2(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === 'function') {
              ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
              }));
            }
            ownKeys.forEach(function (key) {
              _defineProperty$2(target, key, source[key]);
            });
          }
          return target;
        }
        const initialState = {
          itemType: null,
          item: null,
          sourceId: null,
          targetIds: [],
          dropResult: null,
          didDrop: false,
          isSourcePublic: null
        };
        function reduce$3(state = initialState, action) {
          const payload = action.payload;
          switch (action.type) {
            case BEGIN_DRAG:
              return _objectSpread$2({}, state, {
                itemType: payload.itemType,
                item: payload.item,
                sourceId: payload.sourceId,
                isSourcePublic: payload.isSourcePublic,
                dropResult: null,
                didDrop: false
              });
            case PUBLISH_DRAG_SOURCE:
              return _objectSpread$2({}, state, {
                isSourcePublic: true
              });
            case HOVER:
              return _objectSpread$2({}, state, {
                targetIds: payload.targetIds
              });
            case REMOVE_TARGET:
              if (state.targetIds.indexOf(payload.targetId) === -1) {
                return state;
              }
              return _objectSpread$2({}, state, {
                targetIds: without$1(state.targetIds, payload.targetId)
              });
            case DROP:
              return _objectSpread$2({}, state, {
                dropResult: payload.dropResult,
                didDrop: true,
                targetIds: []
              });
            case END_DRAG:
              return _objectSpread$2({}, state, {
                itemType: null,
                item: null,
                sourceId: null,
                dropResult: null,
                didDrop: false,
                isSourcePublic: null,
                targetIds: []
              });
            default:
              return state;
          }
        }
        function reduce$2(state = 0, action) {
          switch (action.type) {
            case ADD_SOURCE:
            case ADD_TARGET:
              return state + 1;
            case REMOVE_SOURCE:
            case REMOVE_TARGET:
              return state - 1;
            default:
              return state;
          }
        }
        function reduce$1(state = 0) {
          return state + 1;
        }
        function _defineProperty$1(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function _objectSpread$1(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === 'function') {
              ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
              }));
            }
            ownKeys.forEach(function (key) {
              _defineProperty$1(target, key, source[key]);
            });
          }
          return target;
        }
        function reduce(state = {}, action) {
          return {
            dirtyHandlerIds: reduce$5(state.dirtyHandlerIds, {
              type: action.type,
              payload: _objectSpread$1({}, action.payload, {
                prevTargetIds: get(state, 'dragOperation.targetIds', [])
              })
            }),
            dragOffset: reduce$4(state.dragOffset, action),
            refCount: reduce$2(state.refCount, action),
            dragOperation: reduce$3(state.dragOperation, action),
            stateId: reduce$1(state.stateId)
          };
        }
        function createDragDropManager(backendFactory, globalContext = undefined, backendOptions = {}, debugMode = false) {
          const store = makeStoreInstance(debugMode);
          const monitor = new DragDropMonitorImpl(store, new HandlerRegistryImpl(store));
          const manager = new DragDropManagerImpl(store, monitor);
          const backend = backendFactory(manager, globalContext, backendOptions);
          manager.receiveBackend(backend);
          return manager;
        }
        function makeStoreInstance(debugMode) {
          // TODO: if we ever make a react-native version of this,
          // we'll need to consider how to pull off dev-tooling
          const reduxDevTools = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__;
          return createStore(reduce, debugMode && reduxDevTools && reduxDevTools({
            name: 'dnd-core',
            instanceId: 'dnd-core'
          }));
        }
        function _objectWithoutProperties(source, excluded) {
          if (source == null) return {};
          var target = _objectWithoutPropertiesLoose(source, excluded);
          var key, i;
          if (Object.getOwnPropertySymbols) {
            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
            for (i = 0; i < sourceSymbolKeys.length; i++) {
              key = sourceSymbolKeys[i];
              if (excluded.indexOf(key) >= 0) continue;
              if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
              target[key] = source[key];
            }
          }
          return target;
        }
        function _objectWithoutPropertiesLoose(source, excluded) {
          if (source == null) return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;
          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            target[key] = source[key];
          }
          return target;
        }
        let refCount = 0;
        const INSTANCE_SYM = Symbol.for('__REACT_DND_CONTEXT_INSTANCE__');
        var DndProvider = exports("c_", /*#__PURE__*/reactExports.memo(function DndProvider(_param) {
          var children = _param.children,
            props = _objectWithoutProperties(_param, ["children"]);
          const _getDndContextValue = getDndContextValue(props),
            _getDndContextValue2 = _slicedToArray2(_getDndContextValue, 2),
            manager = _getDndContextValue2[0],
            isGlobalInstance = _getDndContextValue2[1];
          /**
          * If the global context was used to store the DND context
          * then where theres no more references to it we should
          * clean it up to avoid memory leaks
          */
          reactExports.useEffect(() => {
            if (isGlobalInstance) {
              const context = getGlobalContext();
              ++refCount;
              return () => {
                if (--refCount === 0) {
                  context[INSTANCE_SYM] = null;
                }
              };
            }
            return;
          }, []);
          return /*#__PURE__*/jsxRuntimeExports.jsx(DndContext.Provider, {
            value: manager,
            children: children
          });
        }));
        function getDndContextValue(props) {
          if ('manager' in props) {
            const manager = {
              dragDropManager: props.manager
            };
            return [manager, false];
          }
          const manager = createSingletonDndContext(props.backend, props.context, props.options, props.debugMode);
          const isGlobalInstance = !props.context;
          return [manager, isGlobalInstance];
        }
        function createSingletonDndContext(backend, context = getGlobalContext(), options, debugMode) {
          const ctx = context;
          if (!ctx[INSTANCE_SYM]) {
            ctx[INSTANCE_SYM] = {
              dragDropManager: createDragDropManager(backend, context, options, debugMode)
            };
          }
          return ctx[INSTANCE_SYM];
        }
        function getGlobalContext() {
          return typeof global !== 'undefined' ? global : window;
        }

        // do not edit .js files directly - edit src/index.jst

        var fastDeepEqual = function equal(a, b) {
          if (a === b) return true;
          if (a && b && typeof a == 'object' && typeof b == 'object') {
            if (a.constructor !== b.constructor) return false;
            var length, i, keys;
            if (Array.isArray(a)) {
              length = a.length;
              if (length != b.length) return false;
              for (i = length; i-- !== 0;) if (!equal(a[i], b[i])) return false;
              return true;
            }
            if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
            if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
            if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
            keys = Object.keys(a);
            length = keys.length;
            if (length !== Object.keys(b).length) return false;
            for (i = length; i-- !== 0;) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
            for (i = length; i-- !== 0;) {
              var key = keys[i];
              if (!equal(a[key], b[key])) return false;
            }
            return true;
          }

          // true if both NaN, false otherwise
          return a !== a && b !== b;
        };
        const equal = /*@__PURE__*/getDefaultExportFromCjs(fastDeepEqual);

        // suppress the useLayoutEffect warning on server side.
        const useIsomorphicLayoutEffect = exports("bE", typeof window !== 'undefined' ? reactExports.useLayoutEffect : reactExports.useEffect);

        /**
         *
         * @param monitor The monitor to collect state from
         * @param collect The collecting function
         * @param onUpdate A method to invoke when updates occur
         */
        function useCollector(monitor, collect, onUpdate) {
          const _reactExports$useStat37 = reactExports.useState(() => collect(monitor)),
            _reactExports$useStat38 = _slicedToArray2(_reactExports$useStat37, 2),
            collected = _reactExports$useStat38[0],
            setCollected = _reactExports$useStat38[1];
          const updateCollected = reactExports.useCallback(() => {
            const nextValue = collect(monitor);
            // This needs to be a deep-equality check because some monitor-collected values
            // include XYCoord objects that may be equivalent, but do not have instance equality.
            if (!equal(collected, nextValue)) {
              setCollected(nextValue);
              if (onUpdate) {
                onUpdate();
              }
            }
          }, [collected, monitor, onUpdate]);
          // update the collected properties after react renders.
          // Note that the "Dustbin Stress Test" fails if this is not
          // done when the component updates
          useIsomorphicLayoutEffect(updateCollected);
          return [collected, updateCollected];
        }
        function useMonitorOutput(monitor, collect, onCollect) {
          const _useCollector = useCollector(monitor, collect, onCollect),
            _useCollector2 = _slicedToArray2(_useCollector, 2),
            collected = _useCollector2[0],
            updateCollected = _useCollector2[1];
          useIsomorphicLayoutEffect(function subscribeToMonitorStateChange() {
            const handlerId = monitor.getHandlerId();
            if (handlerId == null) {
              return;
            }
            return monitor.subscribeToStateChange(updateCollected, {
              handlerIds: [handlerId]
            });
          }, [monitor, updateCollected]);
          return collected;
        }
        function useCollectedProps(collector, monitor, connector) {
          return useMonitorOutput(monitor, collector || (() => ({})), () => connector.reconnect());
        }
        function useOptionalFactory(arg, deps) {
          const memoDeps = [...(deps || [])];
          if (deps == null && typeof arg !== 'function') {
            memoDeps.push(arg);
          }
          return reactExports.useMemo(() => {
            return typeof arg === 'function' ? arg() : arg;
          }, memoDeps);
        }
        function useConnectDragSource(connector) {
          return reactExports.useMemo(() => connector.hooks.dragSource(), [connector]);
        }
        function useConnectDragPreview(connector) {
          return reactExports.useMemo(() => connector.hooks.dragPreview(), [connector]);
        }
        let isCallingCanDrag = false;
        let isCallingIsDragging = false;
        class DragSourceMonitorImpl {
          receiveHandlerId(sourceId) {
            this.sourceId = sourceId;
          }
          getHandlerId() {
            return this.sourceId;
          }
          canDrag() {
            invariant(!isCallingCanDrag, 'You may not call monitor.canDrag() inside your canDrag() implementation. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor');
            try {
              isCallingCanDrag = true;
              return this.internalMonitor.canDragSource(this.sourceId);
            } finally {
              isCallingCanDrag = false;
            }
          }
          isDragging() {
            if (!this.sourceId) {
              return false;
            }
            invariant(!isCallingIsDragging, 'You may not call monitor.isDragging() inside your isDragging() implementation. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor');
            try {
              isCallingIsDragging = true;
              return this.internalMonitor.isDraggingSource(this.sourceId);
            } finally {
              isCallingIsDragging = false;
            }
          }
          subscribeToStateChange(listener, options) {
            return this.internalMonitor.subscribeToStateChange(listener, options);
          }
          isDraggingSource(sourceId) {
            return this.internalMonitor.isDraggingSource(sourceId);
          }
          isOverTarget(targetId, options) {
            return this.internalMonitor.isOverTarget(targetId, options);
          }
          getTargetIds() {
            return this.internalMonitor.getTargetIds();
          }
          isSourcePublic() {
            return this.internalMonitor.isSourcePublic();
          }
          getSourceId() {
            return this.internalMonitor.getSourceId();
          }
          subscribeToOffsetChange(listener) {
            return this.internalMonitor.subscribeToOffsetChange(listener);
          }
          canDragSource(sourceId) {
            return this.internalMonitor.canDragSource(sourceId);
          }
          canDropOnTarget(targetId) {
            return this.internalMonitor.canDropOnTarget(targetId);
          }
          getItemType() {
            return this.internalMonitor.getItemType();
          }
          getItem() {
            return this.internalMonitor.getItem();
          }
          getDropResult() {
            return this.internalMonitor.getDropResult();
          }
          didDrop() {
            return this.internalMonitor.didDrop();
          }
          getInitialClientOffset() {
            return this.internalMonitor.getInitialClientOffset();
          }
          getInitialSourceClientOffset() {
            return this.internalMonitor.getInitialSourceClientOffset();
          }
          getSourceClientOffset() {
            return this.internalMonitor.getSourceClientOffset();
          }
          getClientOffset() {
            return this.internalMonitor.getClientOffset();
          }
          getDifferenceFromInitialOffset() {
            return this.internalMonitor.getDifferenceFromInitialOffset();
          }
          constructor(manager) {
            this.sourceId = null;
            this.internalMonitor = manager.getMonitor();
          }
        }
        function registerTarget(type, target, manager) {
          const registry = manager.getRegistry();
          const targetId = registry.addTarget(type, target);
          return [targetId, () => registry.removeTarget(targetId)];
        }
        function registerSource(type, source, manager) {
          const registry = manager.getRegistry();
          const sourceId = registry.addSource(type, source);
          return [sourceId, () => registry.removeSource(sourceId)];
        }
        function shallowEqual(objA, objB, compare, compareContext) {
          let compareResult = compare ? compare.call(compareContext, objA, objB) : void 0;
          if (compareResult !== void 0) {
            return !!compareResult;
          }
          if (objA === objB) {
            return true;
          }
          if (typeof objA !== 'object' || !objA || typeof objB !== 'object' || !objB) {
            return false;
          }
          const keysA = Object.keys(objA);
          const keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          const bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
          // Test for A's keys different from B.
          for (let idx = 0; idx < keysA.length; idx++) {
            const key = keysA[idx];
            if (!bHasOwnProperty(key)) {
              return false;
            }
            const valueA = objA[key];
            const valueB = objB[key];
            compareResult = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;
            if (compareResult === false || compareResult === void 0 && valueA !== valueB) {
              return false;
            }
          }
          return true;
        }
        function isRef(obj) {
          return (
            // eslint-disable-next-line no-prototype-builtins
            obj !== null && typeof obj === 'object' && Object.prototype.hasOwnProperty.call(obj, 'current')
          );
        }
        function throwIfCompositeComponentElement(element) {
          // Custom components can no longer be wrapped directly in React DnD 2.0
          // so that we don't need to depend on findDOMNode() from react-dom.
          if (typeof element.type === 'string') {
            return;
          }
          const displayName = element.type.displayName || element.type.name || 'the component';
          throw new Error('Only native element nodes can now be passed to React DnD connectors.' + `You can either wrap ${displayName} into a <div>, or turn it into a ` + 'drag source or a drop target itself.');
        }
        function wrapHookToRecognizeElement(hook) {
          return (elementOrNode = null, options = null) => {
            // When passed a node, call the hook straight away.
            if (!reactExports.isValidElement(elementOrNode)) {
              const node = elementOrNode;
              hook(node, options);
              // return the node so it can be chained (e.g. when within callback refs
              // <div ref={node => connectDragSource(connectDropTarget(node))}/>
              return node;
            }
            // If passed a ReactElement, clone it and attach this function as a ref.
            // This helps us achieve a neat API where user doesn't even know that refs
            // are being used under the hood.
            const element = elementOrNode;
            throwIfCompositeComponentElement(element);
            // When no options are passed, use the hook directly
            const ref = options ? node => hook(node, options) : hook;
            return cloneWithRef(element, ref);
          };
        }
        function wrapConnectorHooks(hooks) {
          const wrappedHooks = {};
          Object.keys(hooks).forEach(key => {
            const hook = hooks[key];
            // ref objects should be passed straight through without wrapping
            if (key.endsWith('Ref')) {
              wrappedHooks[key] = hooks[key];
            } else {
              const wrappedHook = wrapHookToRecognizeElement(hook);
              wrappedHooks[key] = () => wrappedHook;
            }
          });
          return wrappedHooks;
        }
        function setRef(ref, node) {
          if (typeof ref === 'function') {
            ref(node);
          } else {
            ref.current = node;
          }
        }
        function cloneWithRef(element, newRef) {
          const previousRef = element.ref;
          invariant(typeof previousRef !== 'string', 'Cannot connect React DnD to an element with an existing string ref. ' + 'Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. ' + 'Read more: https://reactjs.org/docs/refs-and-the-dom.html#callback-refs');
          if (!previousRef) {
            // When there is no ref on the element, use the new ref directly
            return reactExports.cloneElement(element, {
              ref: newRef
            });
          } else {
            return reactExports.cloneElement(element, {
              ref: node => {
                setRef(previousRef, node);
                setRef(newRef, node);
              }
            });
          }
        }
        class SourceConnector {
          receiveHandlerId(newHandlerId) {
            if (this.handlerId === newHandlerId) {
              return;
            }
            this.handlerId = newHandlerId;
            this.reconnect();
          }
          get connectTarget() {
            return this.dragSource;
          }
          get dragSourceOptions() {
            return this.dragSourceOptionsInternal;
          }
          set dragSourceOptions(options) {
            this.dragSourceOptionsInternal = options;
          }
          get dragPreviewOptions() {
            return this.dragPreviewOptionsInternal;
          }
          set dragPreviewOptions(options) {
            this.dragPreviewOptionsInternal = options;
          }
          reconnect() {
            const didChange = this.reconnectDragSource();
            this.reconnectDragPreview(didChange);
          }
          reconnectDragSource() {
            const dragSource = this.dragSource;
            // if nothing has changed then don't resubscribe
            const didChange = this.didHandlerIdChange() || this.didConnectedDragSourceChange() || this.didDragSourceOptionsChange();
            if (didChange) {
              this.disconnectDragSource();
            }
            if (!this.handlerId) {
              return didChange;
            }
            if (!dragSource) {
              this.lastConnectedDragSource = dragSource;
              return didChange;
            }
            if (didChange) {
              this.lastConnectedHandlerId = this.handlerId;
              this.lastConnectedDragSource = dragSource;
              this.lastConnectedDragSourceOptions = this.dragSourceOptions;
              this.dragSourceUnsubscribe = this.backend.connectDragSource(this.handlerId, dragSource, this.dragSourceOptions);
            }
            return didChange;
          }
          reconnectDragPreview(forceDidChange = false) {
            const dragPreview = this.dragPreview;
            // if nothing has changed then don't resubscribe
            const didChange = forceDidChange || this.didHandlerIdChange() || this.didConnectedDragPreviewChange() || this.didDragPreviewOptionsChange();
            if (didChange) {
              this.disconnectDragPreview();
            }
            if (!this.handlerId) {
              return;
            }
            if (!dragPreview) {
              this.lastConnectedDragPreview = dragPreview;
              return;
            }
            if (didChange) {
              this.lastConnectedHandlerId = this.handlerId;
              this.lastConnectedDragPreview = dragPreview;
              this.lastConnectedDragPreviewOptions = this.dragPreviewOptions;
              this.dragPreviewUnsubscribe = this.backend.connectDragPreview(this.handlerId, dragPreview, this.dragPreviewOptions);
            }
          }
          didHandlerIdChange() {
            return this.lastConnectedHandlerId !== this.handlerId;
          }
          didConnectedDragSourceChange() {
            return this.lastConnectedDragSource !== this.dragSource;
          }
          didConnectedDragPreviewChange() {
            return this.lastConnectedDragPreview !== this.dragPreview;
          }
          didDragSourceOptionsChange() {
            return !shallowEqual(this.lastConnectedDragSourceOptions, this.dragSourceOptions);
          }
          didDragPreviewOptionsChange() {
            return !shallowEqual(this.lastConnectedDragPreviewOptions, this.dragPreviewOptions);
          }
          disconnectDragSource() {
            if (this.dragSourceUnsubscribe) {
              this.dragSourceUnsubscribe();
              this.dragSourceUnsubscribe = undefined;
            }
          }
          disconnectDragPreview() {
            if (this.dragPreviewUnsubscribe) {
              this.dragPreviewUnsubscribe();
              this.dragPreviewUnsubscribe = undefined;
              this.dragPreviewNode = null;
              this.dragPreviewRef = null;
            }
          }
          get dragSource() {
            return this.dragSourceNode || this.dragSourceRef && this.dragSourceRef.current;
          }
          get dragPreview() {
            return this.dragPreviewNode || this.dragPreviewRef && this.dragPreviewRef.current;
          }
          clearDragSource() {
            this.dragSourceNode = null;
            this.dragSourceRef = null;
          }
          clearDragPreview() {
            this.dragPreviewNode = null;
            this.dragPreviewRef = null;
          }
          constructor(backend) {
            this.hooks = wrapConnectorHooks({
              dragSource: (node, options) => {
                this.clearDragSource();
                this.dragSourceOptions = options || null;
                if (isRef(node)) {
                  this.dragSourceRef = node;
                } else {
                  this.dragSourceNode = node;
                }
                this.reconnectDragSource();
              },
              dragPreview: (node, options) => {
                this.clearDragPreview();
                this.dragPreviewOptions = options || null;
                if (isRef(node)) {
                  this.dragPreviewRef = node;
                } else {
                  this.dragPreviewNode = node;
                }
                this.reconnectDragPreview();
              }
            });
            this.handlerId = null;
            // The drop target may either be attached via ref or connect function
            this.dragSourceRef = null;
            this.dragSourceOptionsInternal = null;
            // The drag preview may either be attached via ref or connect function
            this.dragPreviewRef = null;
            this.dragPreviewOptionsInternal = null;
            this.lastConnectedHandlerId = null;
            this.lastConnectedDragSource = null;
            this.lastConnectedDragSourceOptions = null;
            this.lastConnectedDragPreview = null;
            this.lastConnectedDragPreviewOptions = null;
            this.backend = backend;
          }
        }

        /**
         * A hook to retrieve the DragDropManager from Context
         */
        function useDragDropManager() {
          const _reactExports$useCont14 = reactExports.useContext(DndContext),
            dragDropManager = _reactExports$useCont14.dragDropManager;
          invariant(dragDropManager != null, 'Expected drag drop context');
          return dragDropManager;
        }
        function useDragSourceConnector(dragSourceOptions, dragPreviewOptions) {
          const manager = useDragDropManager();
          const connector = reactExports.useMemo(() => new SourceConnector(manager.getBackend()), [manager]);
          useIsomorphicLayoutEffect(() => {
            connector.dragSourceOptions = dragSourceOptions || null;
            connector.reconnect();
            return () => connector.disconnectDragSource();
          }, [connector, dragSourceOptions]);
          useIsomorphicLayoutEffect(() => {
            connector.dragPreviewOptions = dragPreviewOptions || null;
            connector.reconnect();
            return () => connector.disconnectDragPreview();
          }, [connector, dragPreviewOptions]);
          return connector;
        }
        function useDragSourceMonitor() {
          const manager = useDragDropManager();
          return reactExports.useMemo(() => new DragSourceMonitorImpl(manager), [manager]);
        }
        class DragSourceImpl {
          beginDrag() {
            const spec = this.spec;
            const monitor = this.monitor;
            let result = null;
            if (typeof spec.item === 'object') {
              result = spec.item;
            } else if (typeof spec.item === 'function') {
              result = spec.item(monitor);
            } else {
              result = {};
            }
            return result !== null && result !== void 0 ? result : null;
          }
          canDrag() {
            const spec = this.spec;
            const monitor = this.monitor;
            if (typeof spec.canDrag === 'boolean') {
              return spec.canDrag;
            } else if (typeof spec.canDrag === 'function') {
              return spec.canDrag(monitor);
            } else {
              return true;
            }
          }
          isDragging(globalMonitor, target) {
            const spec = this.spec;
            const monitor = this.monitor;
            const isDragging = spec.isDragging;
            return isDragging ? isDragging(monitor) : target === globalMonitor.getSourceId();
          }
          endDrag() {
            const spec = this.spec;
            const monitor = this.monitor;
            const connector = this.connector;
            const end = spec.end;
            if (end) {
              end(monitor.getItem(), monitor);
            }
            connector.reconnect();
          }
          constructor(spec, monitor, connector) {
            this.spec = spec;
            this.monitor = monitor;
            this.connector = connector;
          }
        }
        function useDragSource(spec, monitor, connector) {
          const handler = reactExports.useMemo(() => new DragSourceImpl(spec, monitor, connector), [monitor, connector]);
          reactExports.useEffect(() => {
            handler.spec = spec;
          }, [spec]);
          return handler;
        }
        function useDragType(spec) {
          return reactExports.useMemo(() => {
            const result = spec.type;
            invariant(result != null, 'spec.type must be defined');
            return result;
          }, [spec]);
        }
        function useRegisteredDragSource(spec, monitor, connector) {
          const manager = useDragDropManager();
          const handler = useDragSource(spec, monitor, connector);
          const itemType = useDragType(spec);
          useIsomorphicLayoutEffect(function registerDragSource() {
            if (itemType != null) {
              const _registerSource = registerSource(itemType, handler, manager),
                _registerSource2 = _slicedToArray2(_registerSource, 2),
                handlerId = _registerSource2[0],
                unregister = _registerSource2[1];
              monitor.receiveHandlerId(handlerId);
              connector.receiveHandlerId(handlerId);
              return unregister;
            }
            return;
          }, [manager, monitor, connector, handler, itemType]);
        }

        /**
         * useDragSource hook
         * @param sourceSpec The drag source specification (object or function, function preferred)
         * @param deps The memoization deps array to use when evaluating spec changes
         */
        function useDrag(specArg, deps) {
          const spec = useOptionalFactory(specArg, deps);
          invariant(!spec.begin, `useDrag::spec.begin was deprecated in v14. Replace spec.begin() with spec.item(). (see more here - https://react-dnd.github.io/react-dnd/docs/api/use-drag)`);
          const monitor = useDragSourceMonitor();
          const connector = useDragSourceConnector(spec.options, spec.previewOptions);
          useRegisteredDragSource(spec, monitor, connector);
          return [useCollectedProps(spec.collect, monitor, connector), useConnectDragSource(connector), useConnectDragPreview(connector)];
        }
        function NewComponentsItem({
          t,
          item
        }) {
          reactExports.useRef();
          const _useDrag = useDrag({
              type: item.type,
              item,
              collect: monitor => monitor.isDragging()
            }),
            _useDrag2 = _slicedToArray2(_useDrag, 3),
            isDragging = _useDrag2[0],
            drag = _useDrag2[1],
            preview = _useDrag2[2];
          preview(drag);
          return /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
            ref: drag,
            className: styles$7.leftPannelItem + (item !== null && item !== void 0 && item.dragLayer ? " " + styles$7.isDrayLayer : ""),
            children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
              className: styles$7.icon,
              children: item.icon
            }), /* @__PURE__ */jsxRuntimeExports.jsx("span", {
              className: styles$7.title,
              children: t("component_" + item.itemType + "_title")
            }), item.offlineOnly && /* @__PURE__ */jsxRuntimeExports.jsx("span", {
              className: styles$7.offlineOnly,
              children: t("offline_only")
            })]
          });
        }
        var MailOutline = {};
        var _interopRequireDefault$m = interopRequireDefaultExports;
        Object.defineProperty(MailOutline, "__esModule", {
          value: true
        });
        var default_1$m = MailOutline.default = void 0;
        var _createSvgIcon$m = _interopRequireDefault$m(requireCreateSvgIcon());
        var _jsxRuntime$m = jsxRuntimeExports;
        var _default$m = (0, _createSvgIcon$m.default)( /*#__PURE__*/(0, _jsxRuntime$m.jsx)("path", {
          d: "M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 14H4V8l8 5 8-5v10zm-8-7L4 6h16l-8 5z"
        }), 'MailOutline');
        default_1$m = MailOutline.default = _default$m;
        var Abc = {};
        var _interopRequireDefault$l = interopRequireDefaultExports;
        Object.defineProperty(Abc, "__esModule", {
          value: true
        });
        var default_1$l = Abc.default = void 0;
        var _createSvgIcon$l = _interopRequireDefault$l(requireCreateSvgIcon());
        var _jsxRuntime$l = jsxRuntimeExports;
        var _default$l = (0, _createSvgIcon$l.default)( /*#__PURE__*/(0, _jsxRuntime$l.jsx)("path", {
          d: "M21 11h-1.5v-.5h-2v3h2V13H21v1c0 .55-.45 1-1 1h-3c-.55 0-1-.45-1-1v-4c0-.55.45-1 1-1h3c.55 0 1 .45 1 1v1zM8 10v5H6.5v-1.5h-2V15H3v-5c0-.55.45-1 1-1h3c.55 0 1 .45 1 1zm-1.5.5h-2V12h2v-1.5zm7 1.5c.55 0 1 .45 1 1v1c0 .55-.45 1-1 1h-4V9h4c.55 0 1 .45 1 1v1c0 .55-.45 1-1 1zM11 10.5v.75h2v-.75h-2zm2 2.25h-2v.75h2v-.75z"
        }), 'Abc');
        default_1$l = Abc.default = _default$l;
        var Pin = {};
        var _interopRequireDefault$k = interopRequireDefaultExports;
        Object.defineProperty(Pin, "__esModule", {
          value: true
        });
        var default_1$k = Pin.default = void 0;
        var _createSvgIcon$k = _interopRequireDefault$k(requireCreateSvgIcon());
        var _jsxRuntime$k = jsxRuntimeExports;
        var _default$k = (0, _createSvgIcon$k.default)( /*#__PURE__*/(0, _jsxRuntime$k.jsx)("path", {
          d: "M20 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM7.64 15H6.49v-4.5l-.9.66-.58-.89L6.77 9h.87v6zm5.86 0H9.61v-1.02c1.07-1.07 1.77-1.77 2.13-2.15.4-.42.54-.69.54-1.06 0-.4-.31-.72-.81-.72-.52 0-.8.39-.9.72l-1.01-.42c.01-.02.18-.76 1-1.15.69-.33 1.48-.2 1.95.03.86.44.91 1.24.91 1.48 0 .64-.31 1.26-.92 1.86-.25.25-.72.71-1.4 1.39l.03.05h2.37V15zm5.25-.85c-.08.13-.56.85-1.76.85-.04 0-1.6.08-2.05-1.51l1.03-.41c.03.1.19.86 1.02.86.41 0 .89-.28.89-.77 0-.55-.48-.79-1.04-.79h-.5v-1h.46c.33 0 .88-.14.88-.72 0-.39-.31-.65-.75-.65-.5 0-.74.32-.85.64l-.99-.41C15.2 9.9 15.68 9 16.94 9c1.09 0 1.54.64 1.62.75.33.5.28 1.16.02 1.57-.15.22-.32.38-.52.48v.07c.28.11.51.28.68.52.37.52.33 1.27.01 1.76z"
        }), 'Pin');
        default_1$k = Pin.default = _default$k;
        var Feed = {};
        var _interopRequireDefault$j = interopRequireDefaultExports;
        Object.defineProperty(Feed, "__esModule", {
          value: true
        });
        var default_1$j = Feed.default = void 0;
        var _createSvgIcon$j = _interopRequireDefault$j(requireCreateSvgIcon());
        var _jsxRuntime$j = jsxRuntimeExports;
        var _default$j = (0, _createSvgIcon$j.default)( /*#__PURE__*/(0, _jsxRuntime$j.jsx)("path", {
          d: "M16 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V8l-5-5zM7 7h5v2H7V7zm10 10H7v-2h10v2zm0-4H7v-2h10v2zm-2-4V5l4 4h-4z"
        }), 'Feed');
        default_1$j = Feed.default = _default$j;
        var Photo = {};
        var _interopRequireDefault$i = interopRequireDefaultExports;
        Object.defineProperty(Photo, "__esModule", {
          value: true
        });
        var default_1$i = exports("ck", Photo.default = void 0);
        var _createSvgIcon$i = _interopRequireDefault$i(requireCreateSvgIcon());
        var _jsxRuntime$i = jsxRuntimeExports;
        var _default$i = (0, _createSvgIcon$i.default)( /*#__PURE__*/(0, _jsxRuntime$i.jsx)("path", {
          d: "M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z"
        }), 'Photo');
        exports("ck", default_1$i = Photo.default = _default$i);
        var RadioButtonChecked = {};
        var _interopRequireDefault$h = interopRequireDefaultExports;
        Object.defineProperty(RadioButtonChecked, "__esModule", {
          value: true
        });
        var default_1$h = RadioButtonChecked.default = void 0;
        var _createSvgIcon$h = _interopRequireDefault$h(requireCreateSvgIcon());
        var _jsxRuntime$h = jsxRuntimeExports;
        var _default$h = (0, _createSvgIcon$h.default)( /*#__PURE__*/(0, _jsxRuntime$h.jsx)("path", {
          d: "M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
        }), 'RadioButtonChecked');
        default_1$h = RadioButtonChecked.default = _default$h;
        var CheckBox = {};
        var _interopRequireDefault$g = interopRequireDefaultExports;
        Object.defineProperty(CheckBox, "__esModule", {
          value: true
        });
        var default_1$g = CheckBox.default = void 0;
        var _createSvgIcon$g = _interopRequireDefault$g(requireCreateSvgIcon());
        var _jsxRuntime$g = jsxRuntimeExports;
        var _default$g = (0, _createSvgIcon$g.default)( /*#__PURE__*/(0, _jsxRuntime$g.jsx)("path", {
          d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
        }), 'CheckBox');
        default_1$g = CheckBox.default = _default$g;
        var UploadFile = {};
        var _interopRequireDefault$f = interopRequireDefaultExports;
        Object.defineProperty(UploadFile, "__esModule", {
          value: true
        });
        var default_1$f = UploadFile.default = void 0;
        var _createSvgIcon$f = _interopRequireDefault$f(requireCreateSvgIcon());
        var _jsxRuntime$f = jsxRuntimeExports;
        var _default$f = (0, _createSvgIcon$f.default)( /*#__PURE__*/(0, _jsxRuntime$f.jsx)("path", {
          d: "M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm4 18H6V4h7v5h5v11zM8 15.01l1.41 1.41L11 14.84V19h2v-4.16l1.59 1.59L16 15.01 12.01 11z"
        }), 'UploadFile');
        default_1$f = UploadFile.default = _default$f;
        var EventAvailable = {};
        var _interopRequireDefault$e = interopRequireDefaultExports;
        Object.defineProperty(EventAvailable, "__esModule", {
          value: true
        });
        var default_1$e = EventAvailable.default = void 0;
        var _createSvgIcon$e = _interopRequireDefault$e(requireCreateSvgIcon());
        var _jsxRuntime$e = jsxRuntimeExports;
        var _default$e = (0, _createSvgIcon$e.default)( /*#__PURE__*/(0, _jsxRuntime$e.jsx)("path", {
          d: "M16.53 11.06 15.47 10l-4.88 4.88-2.12-2.12-1.06 1.06L10.59 17l5.94-5.94zM19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11z"
        }), 'EventAvailable');
        default_1$e = EventAvailable.default = _default$e;
        var Today = {};
        var _interopRequireDefault$d = interopRequireDefaultExports;
        Object.defineProperty(Today, "__esModule", {
          value: true
        });
        var default_1$d = Today.default = void 0;
        var _createSvgIcon$d = _interopRequireDefault$d(requireCreateSvgIcon());
        var _jsxRuntime$d = jsxRuntimeExports;
        var _default$d = (0, _createSvgIcon$d.default)( /*#__PURE__*/(0, _jsxRuntime$d.jsx)("path", {
          d: "M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"
        }), 'Today');
        default_1$d = Today.default = _default$d;
        var Schedule = {};
        var _interopRequireDefault$c = interopRequireDefaultExports;
        Object.defineProperty(Schedule, "__esModule", {
          value: true
        });
        var default_1$c = Schedule.default = void 0;
        var _createSvgIcon$c = _interopRequireDefault$c(requireCreateSvgIcon());
        var _jsxRuntime$c = jsxRuntimeExports;
        var _default$c = (0, _createSvgIcon$c.default)([/*#__PURE__*/(0, _jsxRuntime$c.jsx)("path", {
          d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
        }, "0"), /*#__PURE__*/(0, _jsxRuntime$c.jsx)("path", {
          d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
        }, "1")], 'Schedule');
        default_1$c = Schedule.default = _default$c;
        var BurstMode = {};
        var _interopRequireDefault$b = interopRequireDefaultExports;
        Object.defineProperty(BurstMode, "__esModule", {
          value: true
        });
        var default_1$b = BurstMode.default = void 0;
        var _createSvgIcon$b = _interopRequireDefault$b(requireCreateSvgIcon());
        var _jsxRuntime$b = jsxRuntimeExports;
        var _default$b = (0, _createSvgIcon$b.default)( /*#__PURE__*/(0, _jsxRuntime$b.jsx)("path", {
          d: "M1 5h2v14H1zm4 0h2v14H5zm17 0H10c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h12c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zM11 17l2.5-3.15L15.29 16l2.5-3.22L21 17H11z"
        }), 'BurstMode');
        default_1$b = BurstMode.default = _default$b;
        var Sort = {};
        var _interopRequireDefault$a = interopRequireDefaultExports;
        Object.defineProperty(Sort, "__esModule", {
          value: true
        });
        var default_1$a = exports("cm", Sort.default = void 0);
        var _createSvgIcon$a = _interopRequireDefault$a(requireCreateSvgIcon());
        var _jsxRuntime$a = jsxRuntimeExports;
        var _default$a = (0, _createSvgIcon$a.default)( /*#__PURE__*/(0, _jsxRuntime$a.jsx)("path", {
          d: "M3 18h6v-2H3v2zM3 6v2h18V6H3zm0 7h12v-2H3v2z"
        }), 'Sort');
        exports("cm", default_1$a = Sort.default = _default$a);
        var Brush = {};
        var _interopRequireDefault$9 = interopRequireDefaultExports;
        Object.defineProperty(Brush, "__esModule", {
          value: true
        });
        var default_1$9 = Brush.default = void 0;
        var _createSvgIcon$9 = _interopRequireDefault$9(requireCreateSvgIcon());
        var _jsxRuntime$9 = jsxRuntimeExports;
        var _default$9 = (0, _createSvgIcon$9.default)( /*#__PURE__*/(0, _jsxRuntime$9.jsx)("path", {
          d: "M7 14c-1.66 0-3 1.34-3 3 0 1.31-1.16 2-2 2 .92 1.22 2.49 2 4 2 2.21 0 4-1.79 4-4 0-1.66-1.34-3-3-3zm13.71-9.37-1.34-1.34a.9959.9959 0 0 0-1.41 0L9 12.25 11.75 15l8.96-8.96c.39-.39.39-1.02 0-1.41z"
        }), 'Brush');
        default_1$9 = Brush.default = _default$9;
        var Videocam = {};
        var _interopRequireDefault$8 = interopRequireDefaultExports;
        Object.defineProperty(Videocam, "__esModule", {
          value: true
        });
        var default_1$8 = exports("ci", Videocam.default = void 0);
        var _createSvgIcon$8 = _interopRequireDefault$8(requireCreateSvgIcon());
        var _jsxRuntime$8 = jsxRuntimeExports;
        var _default$8 = (0, _createSvgIcon$8.default)( /*#__PURE__*/(0, _jsxRuntime$8.jsx)("path", {
          d: "M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4z"
        }), 'Videocam');
        exports("ci", default_1$8 = Videocam.default = _default$8);
        var AutoAwesomeMotion = {};
        var _interopRequireDefault$7 = interopRequireDefaultExports;
        Object.defineProperty(AutoAwesomeMotion, "__esModule", {
          value: true
        });
        var default_1$7 = AutoAwesomeMotion.default = void 0;
        var _createSvgIcon$7 = _interopRequireDefault$7(requireCreateSvgIcon());
        var _jsxRuntime$7 = jsxRuntimeExports;
        var _default$7 = (0, _createSvgIcon$7.default)( /*#__PURE__*/(0, _jsxRuntime$7.jsx)("path", {
          d: "M14 2H4c-1.11 0-2 .9-2 2v10h2V4h10V2zm4 4H8c-1.11 0-2 .9-2 2v10h2V8h10V6zm2 4h-8c-1.11 0-2 .9-2 2v8c0 1.1.89 2 2 2h8c1.1 0 2-.9 2-2v-8c0-1.1-.9-2-2-2z"
        }), 'AutoAwesomeMotion');
        default_1$7 = AutoAwesomeMotion.default = _default$7;
        var Speed = {};
        var _interopRequireDefault$6 = interopRequireDefaultExports;
        Object.defineProperty(Speed, "__esModule", {
          value: true
        });
        var default_1$6 = Speed.default = void 0;
        var _createSvgIcon$6 = _interopRequireDefault$6(requireCreateSvgIcon());
        var _jsxRuntime$6 = jsxRuntimeExports;
        var _default$6 = (0, _createSvgIcon$6.default)( /*#__PURE__*/(0, _jsxRuntime$6.jsx)("path", {
          d: "m20.38 8.57-1.23 1.85a8 8 0 0 1-.22 7.58H5.07A8 8 0 0 1 15.58 6.85l1.85-1.23A10 10 0 0 0 3.35 19a2 2 0 0 0 1.72 1h13.85a2 2 0 0 0 1.74-1 10 10 0 0 0-.27-10.44zm-9.79 6.84a2 2 0 0 0 2.83 0l5.66-8.49-8.49 5.66a2 2 0 0 0 0 2.83z"
        }), 'Speed');
        default_1$6 = Speed.default = _default$6;
        var QrCode = {};
        var _interopRequireDefault$5 = interopRequireDefaultExports;
        Object.defineProperty(QrCode, "__esModule", {
          value: true
        });
        var default_1$5 = QrCode.default = void 0;
        var _createSvgIcon$5 = _interopRequireDefault$5(requireCreateSvgIcon());
        var _jsxRuntime$5 = jsxRuntimeExports;
        var _default$5 = (0, _createSvgIcon$5.default)( /*#__PURE__*/(0, _jsxRuntime$5.jsx)("path", {
          d: "M3 11h8V3H3v8zm2-6h4v4H5V5zM3 21h8v-8H3v8zm2-6h4v4H5v-4zm8-12v8h8V3h-8zm6 6h-4V5h4v4zm0 10h2v2h-2zm-6-6h2v2h-2zm2 2h2v2h-2zm-2 2h2v2h-2zm2 2h2v2h-2zm2-2h2v2h-2zm0-4h2v2h-2zm2 2h2v2h-2z"
        }), 'QrCode');
        default_1$5 = QrCode.default = _default$5;
        var Dvr = {};
        var _interopRequireDefault$4 = interopRequireDefaultExports;
        Object.defineProperty(Dvr, "__esModule", {
          value: true
        });
        var default_1$4 = Dvr.default = void 0;
        var _createSvgIcon$4 = _interopRequireDefault$4(requireCreateSvgIcon());
        var _jsxRuntime$4 = jsxRuntimeExports;
        var _default$4 = (0, _createSvgIcon$4.default)( /*#__PURE__*/(0, _jsxRuntime$4.jsx)("path", {
          d: "M21 3H3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h5v2h8v-2h5c1.1 0 1.99-.9 1.99-2L23 5c0-1.1-.9-2-2-2zm0 14H3V5h18v12zm-2-9H8v2h11V8zm0 4H8v2h11v-2zM7 8H5v2h2V8zm0 4H5v2h2v-2z"
        }), 'Dvr');
        default_1$4 = Dvr.default = _default$4;
        const questionIconByType = (type, size = "medium") => {
          switch (type) {
            case "text":
              return /* @__PURE__ */jsxRuntimeExports.jsx(default_1$l, {
                fontSize: size
              });
            case "paragraph":
              return /* @__PURE__ */jsxRuntimeExports.jsx(default_1$j, {
                fontSize: size
              });
            case "barcode":
              return /* @__PURE__ */jsxRuntimeExports.jsx(default_1$5, {
                fontSize: size
              });
            case "number":
              return /* @__PURE__ */jsxRuntimeExports.jsx(default_1$k, {
                fontSize: size
              });
            case "email":
              return /* @__PURE__ */jsxRuntimeExports.jsx(default_1$m, {
                fontSize: size
              });
            case "icon_scq":
            case "scq":
              return /* @__PURE__ */jsxRuntimeExports.jsx(default_1$h, {
                fontSize: size
              });
            case "image_scq":
              return /* @__PURE__ */jsxRuntimeExports.jsx(default_1$i, {
                fontSize: size
              });
            case "scq_icon_array":
            case "scq_array":
              return /* @__PURE__ */jsxRuntimeExports.jsx(default_1$h, {
                fontSize: size
              });
            case "icon_mcq":
            case "mcq":
              return /* @__PURE__ */jsxRuntimeExports.jsx(default_1$g, {
                fontSize: size
              });
            case "image_mcq":
              return /* @__PURE__ */jsxRuntimeExports.jsx(default_1$b, {
                fontSize: size
              });
            case "nps":
              return /* @__PURE__ */jsxRuntimeExports.jsx(default_1$6, {
                fontSize: size
              });
            case "date":
              return /* @__PURE__ */jsxRuntimeExports.jsx(default_1$d, {
                fontSize: size
              });
            case "date_time":
              return /* @__PURE__ */jsxRuntimeExports.jsx(default_1$e, {
                fontSize: size
              });
            case "time":
              return /* @__PURE__ */jsxRuntimeExports.jsx(default_1$c, {
                fontSize: size
              });
            case "file_upload":
              return /* @__PURE__ */jsxRuntimeExports.jsx(default_1$f, {
                fontSize: size
              });
            case "signature":
              return /* @__PURE__ */jsxRuntimeExports.jsx(default_1$9, {
                fontSize: size
              });
            case "photo_capture":
              return /* @__PURE__ */jsxRuntimeExports.jsx(default_1$i, {
                fontSize: size
              });
            case "video_capture":
              return /* @__PURE__ */jsxRuntimeExports.jsx(default_1$8, {
                fontSize: size
              });
            case "ranking":
              return /* @__PURE__ */jsxRuntimeExports.jsx(default_1$a, {
                fontSize: size
              });
            case "image_ranking":
              return /* @__PURE__ */jsxRuntimeExports.jsx(default_1$7, {
                fontSize: size
              });
            case "text_display":
              return /* @__PURE__ */jsxRuntimeExports.jsx(default_1$4, {
                fontSize: size
              });
            case "image_display":
              return /* @__PURE__ */jsxRuntimeExports.jsx(default_1$i, {
                fontSize: size
              });
            case "video_display":
              return /* @__PURE__ */jsxRuntimeExports.jsx(default_1$8, {
                fontSize: size
              });
          }
        };
        const QUESTION_TYPES = [{
          name: "section_text_based",
          type: "text",
          items: [{
            type: "text",
            icon: questionIconByType("text")
          }, {
            type: "paragraph",
            icon: questionIconByType("paragraph")
          }, {
            type: "number",
            icon: questionIconByType("number")
          }, {
            type: "email",
            icon: questionIconByType("email")
          }]
        }, {
          name: "section_choice_based",
          type: "choice",
          items: [{
            type: "scq",
            icon: questionIconByType("scq")
          }, {
            type: "icon_scq",
            icon: questionIconByType("icon_scq")
          }, {
            type: "image_scq",
            icon: questionIconByType("image_scq")
          }, {
            type: "scq_array",
            icon: questionIconByType("scq_array")
          }, {
            type: "scq_icon_array",
            icon: questionIconByType("scq_icon_array")
          }, {
            type: "mcq",
            icon: questionIconByType("mcq")
          }, {
            type: "icon_mcq",
            icon: questionIconByType("icon_mcq")
          }, {
            type: "image_mcq",
            icon: questionIconByType("image_mcq")
          }, {
            type: "nps",
            icon: questionIconByType("nps")
          }]
        }, {
          name: "section_date_time",
          type: "date-time",
          items: [{
            type: "date",
            icon: questionIconByType("date")
          }, {
            type: "date_time",
            icon: questionIconByType("date_time")
          }, {
            type: "time",
            icon: questionIconByType("time")
          }]
        }, {
          name: "section_file_based",
          type: "file",
          items: [{
            type: "file_upload",
            icon: questionIconByType("file_upload")
          }, {
            type: "signature",
            icon: questionIconByType("signature")
          }, {
            type: "photo_capture",
            offlineOnly: true,
            icon: questionIconByType("photo_capture")
          }, {
            type: "video_capture",
            offlineOnly: true,
            icon: questionIconByType("video_capture")
          }]
        }, {
          name: "section_other",
          type: "other",
          items: [{
            type: "ranking",
            icon: questionIconByType("ranking")
          }, {
            type: "image_ranking",
            icon: questionIconByType("image_ranking")
          }, {
            type: "barcode",
            offlineOnly: true,
            icon: questionIconByType("barcode")
          }]
        }, {
          name: "section_info",
          type: "info",
          items: [{
            type: "text_display",
            isDisplay: true,
            icon: questionIconByType("text_display")
          }, {
            type: "image_display",
            isDisplay: true,
            icon: questionIconByType("image_display")
          }, {
            type: "video_display",
            isDisplay: true,
            icon: questionIconByType("video_display")
          }]
        }];
        const createQuestion = (type, qId, lang) => {
          let code = `Q${qId}`;
          let returnObj = {};
          let state = {
            type
          };
          let newQuestion = {
            code: `Q${qId}`,
            qualifiedCode: `Q${qId}`,
            type
          };
          returnObj[code] = state;
          returnObj.question = newQuestion;
          switch (type) {
            case "text":
              state.instructionList = [{
                code: "value",
                isActive: false,
                returnType: {
                  name: "String"
                },
                text: ""
              }];
              state.maxChars = 30;
              state.showHint = true;
              break;
            case "number":
              state.maxChars = 30;
              state.instructionList = [{
                code: "value",
                isActive: false,
                returnType: {
                  name: "Double"
                },
                text: ""
              }];
              state.showHint = true;
              break;
            case "email":
              state.maxChars = 30;
              state.instructionList = [{
                code: "value",
                isActive: false,
                returnType: {
                  name: "String"
                },
                text: ""
              }];
              state.showHint = true;
              break;
            case "paragraph":
              state.instructionList = [{
                code: "value",
                isActive: false,
                returnType: {
                  name: "String"
                },
                text: ""
              }];
              state.showHint = true;
              break;
            case "barcode":
              state.instructionList = [{
                code: "value",
                isActive: false,
                returnType: {
                  name: "String"
                },
                text: ""
              }, {
                code: "mode",
                isActive: false,
                returnType: {
                  name: "String"
                },
                text: "offline"
              }];
              state.showHint = true;
              break;
            case "scq":
              state.instructionList = [{
                code: "value",
                isActive: false,
                returnType: {
                  name: "String"
                },
                text: ""
              }];
              returnObj[`Q${qId}A1`] = {};
              returnObj[`Q${qId}A2`] = {};
              returnObj[`Q${qId}A3`] = {};
              state.children = [{
                code: "A1",
                qualifiedCode: `Q${qId}A1`
              }, {
                code: "A2",
                qualifiedCode: `Q${qId}A2`
              }, {
                code: "A3",
                qualifiedCode: `Q${qId}A3`
              }];
              break;
            case "icon_scq":
              state.columns = 3;
              state.iconSize = 64;
              state.spacing = 8;
              state.instructionList = [{
                code: "value",
                isActive: false,
                returnType: {
                  name: "String"
                },
                text: ""
              }];
              returnObj[`Q${qId}A1`] = {};
              returnObj[`Q${qId}A2`] = {};
              returnObj[`Q${qId}A3`] = {};
              state.children = [{
                code: "A1",
                qualifiedCode: `Q${qId}A1`
              }, {
                code: "A2",
                qualifiedCode: `Q${qId}A2`
              }, {
                code: "A3",
                qualifiedCode: `Q${qId}A3`
              }];
              break;
            case "image_scq":
              state.columns = 3;
              state.imageAspectRatio = 1;
              state.spacing = 8;
              state.instructionList = [{
                code: "value",
                isActive: false,
                returnType: {
                  name: "String"
                },
                text: ""
              }];
              returnObj[`Q${qId}A1`] = {};
              returnObj[`Q${qId}A2`] = {};
              returnObj[`Q${qId}A3`] = {};
              state.children = [{
                code: "A1",
                qualifiedCode: `Q${qId}A1`
              }, {
                code: "A2",
                qualifiedCode: `Q${qId}A2`
              }, {
                code: "A3",
                qualifiedCode: `Q${qId}A3`
              }];
              break;
            case "mcq":
              returnObj[`Q${qId}A1`] = {
                instructionList: [{
                  code: "value",
                  isActive: false,
                  returnType: {
                    name: "Boolean"
                  },
                  text: ""
                }]
              };
              returnObj[`Q${qId}A2`] = {
                instructionList: [{
                  code: "value",
                  isActive: false,
                  returnType: {
                    name: "Boolean"
                  },
                  text: ""
                }]
              };
              returnObj[`Q${qId}A3`] = {
                instructionList: [{
                  code: "value",
                  isActive: false,
                  returnType: {
                    name: "Boolean"
                  },
                  text: ""
                }]
              };
              state.children = [{
                code: "A1",
                qualifiedCode: `Q${qId}A1`
              }, {
                code: "A2",
                qualifiedCode: `Q${qId}A2`
              }, {
                code: "A3",
                qualifiedCode: `Q${qId}A3`
              }];
              break;
            case "image_ranking":
              state.columns = 3;
              state.imageAspectRatio = 1;
              state.spacing = 8;
              returnObj[`Q${qId}A1`] = {
                instructionList: [{
                  code: "value",
                  isActive: false,
                  returnType: {
                    name: "Int"
                  },
                  text: ""
                }]
              };
              returnObj[`Q${qId}A2`] = {
                instructionList: [{
                  code: "value",
                  isActive: false,
                  returnType: {
                    name: "Int"
                  },
                  text: ""
                }]
              };
              returnObj[`Q${qId}A3`] = {
                instructionList: [{
                  code: "value",
                  isActive: false,
                  returnType: {
                    name: "Int"
                  },
                  text: ""
                }]
              };
              state.children = [{
                code: "A1",
                qualifiedCode: `Q${qId}A1`
              }, {
                code: "A2",
                qualifiedCode: `Q${qId}A2`
              }, {
                code: "A3",
                qualifiedCode: `Q${qId}A3`
              }];
              break;
            case "ranking":
              returnObj[`Q${qId}A1`] = {
                instructionList: [{
                  code: "value",
                  isActive: false,
                  returnType: {
                    name: "Int"
                  },
                  text: ""
                }]
              };
              returnObj[`Q${qId}A2`] = {
                instructionList: [{
                  code: "value",
                  isActive: false,
                  returnType: {
                    name: "Int"
                  },
                  text: ""
                }]
              };
              returnObj[`Q${qId}A3`] = {
                instructionList: [{
                  code: "value",
                  isActive: false,
                  returnType: {
                    name: "Int"
                  },
                  text: ""
                }]
              };
              state.children = [{
                code: "A1",
                qualifiedCode: `Q${qId}A1`
              }, {
                code: "A2",
                qualifiedCode: `Q${qId}A2`
              }, {
                code: "A3",
                qualifiedCode: `Q${qId}A3`
              }];
              break;
            case "nps":
              state.instructionList = [{
                code: "value",
                isActive: false,
                returnType: {
                  name: "Int"
                },
                text: ""
              }];
              break;
            case "icon_mcq":
              state.columns = 3;
              state.columns = 3;
              state.iconSize = 64;
              state.spacing = 8;
              returnObj[`Q${qId}A1`] = {
                instructionList: [{
                  code: "value",
                  isActive: false,
                  returnType: {
                    name: "Boolean"
                  },
                  text: ""
                }]
              };
              returnObj[`Q${qId}A2`] = {
                instructionList: [{
                  code: "value",
                  isActive: false,
                  returnType: {
                    name: "Boolean"
                  },
                  text: ""
                }]
              };
              returnObj[`Q${qId}A3`] = {
                instructionList: [{
                  code: "value",
                  isActive: false,
                  returnType: {
                    name: "Boolean"
                  },
                  text: ""
                }]
              };
              state.children = [{
                code: "A1",
                qualifiedCode: `Q${qId}A1`
              }, {
                code: "A2",
                qualifiedCode: `Q${qId}A2`
              }, {
                code: "A3",
                qualifiedCode: `Q${qId}A3`
              }];
              break;
            case "image_mcq":
              state.columns = 3;
              state.imageAspectRatio = 1;
              state.spacing = 8;
              returnObj[`Q${qId}A1`] = {
                instructionList: [{
                  code: "value",
                  isActive: false,
                  returnType: {
                    name: "Boolean"
                  },
                  text: ""
                }]
              };
              returnObj[`Q${qId}A2`] = {
                instructionList: [{
                  code: "value",
                  isActive: false,
                  returnType: {
                    name: "Boolean"
                  },
                  text: ""
                }]
              };
              returnObj[`Q${qId}A3`] = {
                instructionList: [{
                  code: "value",
                  isActive: false,
                  returnType: {
                    name: "Boolean"
                  },
                  text: ""
                }]
              };
              state.children = [{
                code: "A1",
                qualifiedCode: `Q${qId}A1`
              }, {
                code: "A2",
                qualifiedCode: `Q${qId}A2`
              }, {
                code: "A3",
                qualifiedCode: `Q${qId}A3`
              }];
              break;
            case "scq_icon_array":
              returnObj[`Q${qId}Ac1`] = {
                type: "column"
              };
              returnObj[`Q${qId}Ac2`] = {
                type: "column"
              };
              returnObj[`Q${qId}Ac3`] = {
                type: "column"
              };
              returnObj[`Q${qId}A1`] = {
                type: "row",
                instructionList: [{
                  code: "value",
                  isActive: false,
                  returnType: {
                    name: "String"
                  },
                  text: ""
                }]
              };
              returnObj[`Q${qId}A2`] = {
                type: "row",
                instructionList: [{
                  code: "value",
                  isActive: false,
                  returnType: {
                    name: "String"
                  },
                  text: ""
                }]
              };
              returnObj[`Q${qId}A3`] = {
                type: "row",
                instructionList: [{
                  code: "value",
                  isActive: false,
                  returnType: {
                    name: "String"
                  },
                  text: ""
                }]
              };
              state.children = [{
                code: "Ac1",
                qualifiedCode: `Q${qId}Ac1`,
                type: "column"
              }, {
                code: "Ac2",
                qualifiedCode: `Q${qId}Ac2`,
                type: "column"
              }, {
                code: "Ac3",
                qualifiedCode: `Q${qId}Ac3`,
                type: "column"
              }, {
                code: "A1",
                qualifiedCode: `Q${qId}A1`,
                type: "row"
              }, {
                code: "A2",
                qualifiedCode: `Q${qId}A2`,
                type: "row"
              }, {
                code: "A3",
                qualifiedCode: `Q${qId}A3`,
                type: "row"
              }];
              break;
            case "scq_array":
              returnObj[`Q${qId}Ac1`] = {
                type: "column"
              };
              returnObj[`Q${qId}Ac2`] = {
                type: "column"
              };
              returnObj[`Q${qId}Ac3`] = {
                type: "column"
              };
              returnObj[`Q${qId}A1`] = {
                type: "row",
                instructionList: [{
                  code: "value",
                  isActive: false,
                  returnType: {
                    name: "String"
                  },
                  text: ""
                }]
              };
              returnObj[`Q${qId}A2`] = {
                type: "row",
                instructionList: [{
                  code: "value",
                  isActive: false,
                  returnType: {
                    name: "String"
                  },
                  text: ""
                }]
              };
              returnObj[`Q${qId}A3`] = {
                type: "row",
                instructionList: [{
                  code: "value",
                  isActive: false,
                  returnType: {
                    name: "String"
                  },
                  text: ""
                }]
              };
              state.children = [{
                code: "Ac1",
                qualifiedCode: `Q${qId}Ac1`,
                type: "column"
              }, {
                code: "Ac2",
                qualifiedCode: `Q${qId}Ac2`,
                type: "column"
              }, {
                code: "Ac3",
                qualifiedCode: `Q${qId}Ac3`,
                type: "column"
              }, {
                code: "A1",
                qualifiedCode: `Q${qId}A1`,
                type: "row"
              }, {
                code: "A2",
                qualifiedCode: `Q${qId}A2`,
                type: "row"
              }, {
                code: "A3",
                qualifiedCode: `Q${qId}A3`,
                type: "row"
              }];
              break;
            case "file_upload":
              state.instructionList = [{
                code: "value",
                isActive: false,
                returnType: {
                  name: "File"
                },
                text: ""
              }];
              break;
            case "signature":
              state.instructionList = [{
                code: "value",
                isActive: false,
                returnType: {
                  name: "File"
                },
                text: ""
              }];
              break;
            case "photo_capture":
              state.showHint = true;
              state.instructionList = [{
                code: "value",
                isActive: false,
                returnType: {
                  name: "File"
                },
                text: ""
              }, {
                code: "mode",
                isActive: false,
                returnType: {
                  name: "String"
                },
                text: "offline"
              }];
              break;
            case "video_capture":
              state.showHint = true;
              state.instructionList = [{
                code: "value",
                isActive: false,
                returnType: {
                  name: "File"
                },
                text: ""
              }, {
                code: "mode",
                isActive: false,
                returnType: {
                  name: "String"
                },
                text: "offline"
              }];
              break;
            case "date":
              state.type = "date";
              state.dateFormat = "YYYY/MM/DD";
              state.maxDate = "";
              state.minDate = "";
              state.instructionList = [{
                code: "value",
                isActive: false,
                returnType: {
                  name: "Date"
                },
                text: ""
              }];
              break;
            case "date_time":
              state.dateFormat = "YYYY/MM/DD";
              state.fullDayFormat = false;
              state.maxDate = "";
              state.minDate = "";
              state.instructionList = [{
                code: "value",
                isActive: false,
                returnType: {
                  name: "Date"
                },
                text: ""
              }];
              break;
            case "time":
              state.fullDayFormat = false;
              state.instructionList = [{
                code: "value",
                isActive: false,
                returnType: {
                  name: "Date"
                },
                text: ""
              }];
              break;
          }
          return returnObj;
        };
        const questionDesignError = question => {
          let errors = [];
          switch (question.type) {
            case "scq_icon_array":
            case "scq_array":
              if (!question.children || question.children.filter(child => child.type == "row").length === 0) {
                errors.push({
                  code: "insufficient_rows_min_1",
                  message: "must have at least 1 row"
                });
              }
              if (!question.children || question.children.filter(child => child.type == "column").length < 2) {
                errors.push({
                  code: "insufficient_cols_min_2",
                  message: "must have at least 2 columns"
                });
              }
              break;
            case "image_ranking":
            case "ranking":
            case "image_scq":
            case "scq":
            case "icon_scq":
              if (!question.children || question.children.length < 2) {
                errors.push({
                  code: "insufficient_options_min_2",
                  message: "must have at least 2 options"
                });
              }
              break;
            case "icon_mcq":
            case "image_mcq":
            case "mcq":
              if (!question.children || question.children.length < 1) {
                errors.push({
                  code: "insufficient_options_min_1",
                  message: "must have at least 1 option"
                });
              }
              break;
          }
          return errors;
        };
        var ArrowBack = {};
        var _interopRequireDefault$3 = interopRequireDefaultExports;
        Object.defineProperty(ArrowBack, "__esModule", {
          value: true
        });
        var default_1$3 = ArrowBack.default = void 0;
        var _createSvgIcon$3 = _interopRequireDefault$3(requireCreateSvgIcon());
        var _jsxRuntime$3 = jsxRuntimeExports;
        var _default$3 = (0, _createSvgIcon$3.default)( /*#__PURE__*/(0, _jsxRuntime$3.jsx)("path", {
          d: "M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"
        }), 'ArrowBack');
        default_1$3 = ArrowBack.default = _default$3;
        const groups = [{
          name: "section_sections",
          type: "sections",
          items: [{
            idType: 1,
            type: "welcome",
            icon: /* @__PURE__ */jsxRuntimeExports.jsx(default_1$n, {})
          }, {
            idType: 2,
            type: "group",
            icon: /* @__PURE__ */jsxRuntimeExports.jsx(default_1$p, {})
          }, {
            idType: 3,
            type: "end",
            icon: /* @__PURE__ */jsxRuntimeExports.jsx(default_1$o, {})
          }]
        }];
        function NewComponentsPanel({
          t,
          passedref,
          onClose
        }) {
          return /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
            ref: passedref,
            className: styles$8.leftContent,
            children: [/* @__PURE__ */jsxRuntimeExports.jsxs(Paper$1, {
              elevation: 3,
              sx: {
                display: "flex"
              },
              children: [/* @__PURE__ */jsxRuntimeExports.jsx(IconButton$1, {
                size: "large",
                edge: "start",
                color: "inherit",
                "aria-label": "menu",
                sx: {
                  mr: 2
                },
                onClick: onClose,
                children: /* @__PURE__ */jsxRuntimeExports.jsx(default_1$3, {})
              }), /* @__PURE__ */jsxRuntimeExports.jsx(Typography$1, {
                variant: "h5",
                sx: {
                  flexGrow: 1
                },
                children: "Setup"
              })]
            }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
              children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                style: {
                  padding: "16px"
                },
                children: groups.map((item, index) => /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: styles$8.leftPanelGroupItem,
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: styles$8.groupTitle,
                    children: t(item.name)
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: styles$8.leftItems,
                    children: item.items.map((question, index2) => {
                      const dragItem = {
                        type: "groups",
                        itemType: question.type,
                        droppableId: "new-groups",
                        draggableId: question.type,
                        icon: question.icon
                      };
                      return /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        className: "Draggable",
                        children: /* @__PURE__ */jsxRuntimeExports.jsx(NewComponentsItem, {
                          t,
                          item: dragItem
                        })
                      }, question.type);
                    })
                  })]
                }, index))
              })
            }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
              children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                style: {
                  padding: "16px"
                },
                children: QUESTION_TYPES.map((item, index) => /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: styles$8.leftPanelGroupItem,
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: styles$8.groupTitle,
                    children: t(item.name)
                  }), /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: styles$8.leftItems,
                    children: item.items.map((question, index2) => {
                      const dragItem = {
                        type: "new-questions",
                        itemType: question.type,
                        offlineOnly: question.offlineOnly || false,
                        droppableId: "new-questions",
                        draggableId: question.type,
                        isDisplay: question.isDisplay || false,
                        icon: question.icon
                      };
                      return /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                        children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                          className: "Draggable",
                          children: /* @__PURE__ */jsxRuntimeExports.jsx(NewComponentsItem, {
                            t,
                            item: dragItem
                          })
                        })
                      }, `draggable-${index2}`);
                    })
                  })]
                }, index))
              })
            })]
          });
        }
        const NewComponentsPanel$1 = exports('cy', React.memo(NewComponentsPanel));
        const createGroup = (groupType, gId) => {
          let code = `G${gId}`;
          let state = {
            groupType,
            content: {
              label: {},
              description: {}
            }
          };
          let newGroup = {
            code,
            qualifiedCode: code,
            type: groupType.toLowerCase(),
            groupType
          };
          return {
            newGroup,
            state
          };
        };
        var lodash_clonedeep = {
          exports: {}
        };

        /**
         * lodash (Custom Build) <https://lodash.com/>
         * Build: `lodash modularize exports="npm" -o ./`
         * Copyright jQuery Foundation and other contributors <https://jquery.org/>
         * Released under MIT license <https://lodash.com/license>
         * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
         * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
         */
        lodash_clonedeep.exports;
        (function (module, exports$1) {
          /** Used as the size to enable large array optimizations. */
          var LARGE_ARRAY_SIZE = 200;

          /** Used to stand-in for `undefined` hash values. */
          var HASH_UNDEFINED = '__lodash_hash_undefined__';

          /** Used as references for various `Number` constants. */
          var MAX_SAFE_INTEGER = 9007199254740991;

          /** `Object#toString` result references. */
          var argsTag = '[object Arguments]',
            arrayTag = '[object Array]',
            boolTag = '[object Boolean]',
            dateTag = '[object Date]',
            errorTag = '[object Error]',
            funcTag = '[object Function]',
            genTag = '[object GeneratorFunction]',
            mapTag = '[object Map]',
            numberTag = '[object Number]',
            objectTag = '[object Object]',
            promiseTag = '[object Promise]',
            regexpTag = '[object RegExp]',
            setTag = '[object Set]',
            stringTag = '[object String]',
            symbolTag = '[object Symbol]',
            weakMapTag = '[object WeakMap]';
          var arrayBufferTag = '[object ArrayBuffer]',
            dataViewTag = '[object DataView]',
            float32Tag = '[object Float32Array]',
            float64Tag = '[object Float64Array]',
            int8Tag = '[object Int8Array]',
            int16Tag = '[object Int16Array]',
            int32Tag = '[object Int32Array]',
            uint8Tag = '[object Uint8Array]',
            uint8ClampedTag = '[object Uint8ClampedArray]',
            uint16Tag = '[object Uint16Array]',
            uint32Tag = '[object Uint32Array]';

          /**
           * Used to match `RegExp`
           * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
           */
          var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

          /** Used to match `RegExp` flags from their coerced string values. */
          var reFlags = /\w*$/;

          /** Used to detect host constructors (Safari). */
          var reIsHostCtor = /^\[object .+?Constructor\]$/;

          /** Used to detect unsigned integer values. */
          var reIsUint = /^(?:0|[1-9]\d*)$/;

          /** Used to identify `toStringTag` values supported by `_.clone`. */
          var cloneableTags = {};
          cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
          cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

          /** Detect free variable `global` from Node.js. */
          var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

          /** Detect free variable `self`. */
          var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

          /** Used as a reference to the global object. */
          var root = freeGlobal || freeSelf || Function('return this')();

          /** Detect free variable `exports`. */
          var freeExports = exports$1 && !exports$1.nodeType && exports$1;

          /** Detect free variable `module`. */
          var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

          /** Detect the popular CommonJS extension `module.exports`. */
          var moduleExports = freeModule && freeModule.exports === freeExports;

          /**
           * Adds the key-value `pair` to `map`.
           *
           * @private
           * @param {Object} map The map to modify.
           * @param {Array} pair The key-value pair to add.
           * @returns {Object} Returns `map`.
           */
          function addMapEntry(map, pair) {
            // Don't return `map.set` because it's not chainable in IE 11.
            map.set(pair[0], pair[1]);
            return map;
          }

          /**
           * Adds `value` to `set`.
           *
           * @private
           * @param {Object} set The set to modify.
           * @param {*} value The value to add.
           * @returns {Object} Returns `set`.
           */
          function addSetEntry(set, value) {
            // Don't return `set.add` because it's not chainable in IE 11.
            set.add(value);
            return set;
          }

          /**
           * A specialized version of `_.forEach` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns `array`.
           */
          function arrayEach(array, iteratee) {
            var index = -1,
              length = array ? array.length : 0;
            while (++index < length) {
              if (iteratee(array[index], index, array) === false) {
                break;
              }
            }
            return array;
          }

          /**
           * Appends the elements of `values` to `array`.
           *
           * @private
           * @param {Array} array The array to modify.
           * @param {Array} values The values to append.
           * @returns {Array} Returns `array`.
           */
          function arrayPush(array, values) {
            var index = -1,
              length = values.length,
              offset = array.length;
            while (++index < length) {
              array[offset + index] = values[index];
            }
            return array;
          }

          /**
           * A specialized version of `_.reduce` for arrays without support for
           * iteratee shorthands.
           *
           * @private
           * @param {Array} [array] The array to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @param {*} [accumulator] The initial value.
           * @param {boolean} [initAccum] Specify using the first element of `array` as
           *  the initial value.
           * @returns {*} Returns the accumulated value.
           */
          function arrayReduce(array, iteratee, accumulator, initAccum) {
            var index = -1,
              length = array ? array.length : 0;
            if (initAccum && length) {
              accumulator = array[++index];
            }
            while (++index < length) {
              accumulator = iteratee(accumulator, array[index], index, array);
            }
            return accumulator;
          }

          /**
           * The base implementation of `_.times` without support for iteratee shorthands
           * or max array length checks.
           *
           * @private
           * @param {number} n The number of times to invoke `iteratee`.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns the array of results.
           */
          function baseTimes(n, iteratee) {
            var index = -1,
              result = Array(n);
            while (++index < n) {
              result[index] = iteratee(index);
            }
            return result;
          }

          /**
           * Gets the value at `key` of `object`.
           *
           * @private
           * @param {Object} [object] The object to query.
           * @param {string} key The key of the property to get.
           * @returns {*} Returns the property value.
           */
          function getValue(object, key) {
            return object == null ? undefined : object[key];
          }

          /**
           * Checks if `value` is a host object in IE < 9.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
           */
          function isHostObject(value) {
            // Many host objects are `Object` objects that can coerce to strings
            // despite having improperly defined `toString` methods.
            var result = false;
            if (value != null && typeof value.toString != 'function') {
              try {
                result = !!(value + '');
              } catch (e) {}
            }
            return result;
          }

          /**
           * Converts `map` to its key-value pairs.
           *
           * @private
           * @param {Object} map The map to convert.
           * @returns {Array} Returns the key-value pairs.
           */
          function mapToArray(map) {
            var index = -1,
              result = Array(map.size);
            map.forEach(function (value, key) {
              result[++index] = [key, value];
            });
            return result;
          }

          /**
           * Creates a unary function that invokes `func` with its argument transformed.
           *
           * @private
           * @param {Function} func The function to wrap.
           * @param {Function} transform The argument transform.
           * @returns {Function} Returns the new function.
           */
          function overArg(func, transform) {
            return function (arg) {
              return func(transform(arg));
            };
          }

          /**
           * Converts `set` to an array of its values.
           *
           * @private
           * @param {Object} set The set to convert.
           * @returns {Array} Returns the values.
           */
          function setToArray(set) {
            var index = -1,
              result = Array(set.size);
            set.forEach(function (value) {
              result[++index] = value;
            });
            return result;
          }

          /** Used for built-in method references. */
          var arrayProto = Array.prototype,
            funcProto = Function.prototype,
            objectProto = Object.prototype;

          /** Used to detect overreaching core-js shims. */
          var coreJsData = root['__core-js_shared__'];

          /** Used to detect methods masquerading as native. */
          var maskSrcKey = function () {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
            return uid ? 'Symbol(src)_1.' + uid : '';
          }();

          /** Used to resolve the decompiled source of functions. */
          var funcToString = funcProto.toString;

          /** Used to check objects for own properties. */
          var hasOwnProperty = objectProto.hasOwnProperty;

          /**
           * Used to resolve the
           * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
           * of values.
           */
          var objectToString = objectProto.toString;

          /** Used to detect if a method is native. */
          var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

          /** Built-in value references. */
          var Buffer = moduleExports ? root.Buffer : undefined,
            Symbol = root.Symbol,
            Uint8Array = root.Uint8Array,
            getPrototype = overArg(Object.getPrototypeOf, Object),
            objectCreate = Object.create,
            propertyIsEnumerable = objectProto.propertyIsEnumerable,
            splice = arrayProto.splice;

          /* Built-in method references for those with the same name as other `lodash` methods. */
          var nativeGetSymbols = Object.getOwnPropertySymbols,
            nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
            nativeKeys = overArg(Object.keys, Object);

          /* Built-in method references that are verified to be native. */
          var DataView = getNative(root, 'DataView'),
            Map = getNative(root, 'Map'),
            Promise = getNative(root, 'Promise'),
            Set = getNative(root, 'Set'),
            WeakMap = getNative(root, 'WeakMap'),
            nativeCreate = getNative(Object, 'create');

          /** Used to detect maps, sets, and weakmaps. */
          var dataViewCtorString = toSource(DataView),
            mapCtorString = toSource(Map),
            promiseCtorString = toSource(Promise),
            setCtorString = toSource(Set),
            weakMapCtorString = toSource(WeakMap);

          /** Used to convert symbols to primitives and strings. */
          var symbolProto = Symbol ? Symbol.prototype : undefined,
            symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

          /**
           * Creates a hash object.
           *
           * @private
           * @constructor
           * @param {Array} [entries] The key-value pairs to cache.
           */
          function Hash(entries) {
            var index = -1,
              length = entries ? entries.length : 0;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }

          /**
           * Removes all key-value entries from the hash.
           *
           * @private
           * @name clear
           * @memberOf Hash
           */
          function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
          }

          /**
           * Removes `key` and its value from the hash.
           *
           * @private
           * @name delete
           * @memberOf Hash
           * @param {Object} hash The hash to modify.
           * @param {string} key The key of the value to remove.
           * @returns {boolean} Returns `true` if the entry was removed, else `false`.
           */
          function hashDelete(key) {
            return this.has(key) && delete this.__data__[key];
          }

          /**
           * Gets the hash value for `key`.
           *
           * @private
           * @name get
           * @memberOf Hash
           * @param {string} key The key of the value to get.
           * @returns {*} Returns the entry value.
           */
          function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
              var result = data[key];
              return result === HASH_UNDEFINED ? undefined : result;
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined;
          }

          /**
           * Checks if a hash value for `key` exists.
           *
           * @private
           * @name has
           * @memberOf Hash
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
          }

          /**
           * Sets the hash `key` to `value`.
           *
           * @private
           * @name set
           * @memberOf Hash
           * @param {string} key The key of the value to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns the hash instance.
           */
          function hashSet(key, value) {
            var data = this.__data__;
            data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
            return this;
          }

          // Add methods to `Hash`.
          Hash.prototype.clear = hashClear;
          Hash.prototype['delete'] = hashDelete;
          Hash.prototype.get = hashGet;
          Hash.prototype.has = hashHas;
          Hash.prototype.set = hashSet;

          /**
           * Creates an list cache object.
           *
           * @private
           * @constructor
           * @param {Array} [entries] The key-value pairs to cache.
           */
          function ListCache(entries) {
            var index = -1,
              length = entries ? entries.length : 0;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }

          /**
           * Removes all key-value entries from the list cache.
           *
           * @private
           * @name clear
           * @memberOf ListCache
           */
          function listCacheClear() {
            this.__data__ = [];
          }

          /**
           * Removes `key` and its value from the list cache.
           *
           * @private
           * @name delete
           * @memberOf ListCache
           * @param {string} key The key of the value to remove.
           * @returns {boolean} Returns `true` if the entry was removed, else `false`.
           */
          function listCacheDelete(key) {
            var data = this.__data__,
              index = assocIndexOf(data, key);
            if (index < 0) {
              return false;
            }
            var lastIndex = data.length - 1;
            if (index == lastIndex) {
              data.pop();
            } else {
              splice.call(data, index, 1);
            }
            return true;
          }

          /**
           * Gets the list cache value for `key`.
           *
           * @private
           * @name get
           * @memberOf ListCache
           * @param {string} key The key of the value to get.
           * @returns {*} Returns the entry value.
           */
          function listCacheGet(key) {
            var data = this.__data__,
              index = assocIndexOf(data, key);
            return index < 0 ? undefined : data[index][1];
          }

          /**
           * Checks if a list cache value for `key` exists.
           *
           * @private
           * @name has
           * @memberOf ListCache
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
          }

          /**
           * Sets the list cache `key` to `value`.
           *
           * @private
           * @name set
           * @memberOf ListCache
           * @param {string} key The key of the value to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns the list cache instance.
           */
          function listCacheSet(key, value) {
            var data = this.__data__,
              index = assocIndexOf(data, key);
            if (index < 0) {
              data.push([key, value]);
            } else {
              data[index][1] = value;
            }
            return this;
          }

          // Add methods to `ListCache`.
          ListCache.prototype.clear = listCacheClear;
          ListCache.prototype['delete'] = listCacheDelete;
          ListCache.prototype.get = listCacheGet;
          ListCache.prototype.has = listCacheHas;
          ListCache.prototype.set = listCacheSet;

          /**
           * Creates a map cache object to store key-value pairs.
           *
           * @private
           * @constructor
           * @param {Array} [entries] The key-value pairs to cache.
           */
          function MapCache(entries) {
            var index = -1,
              length = entries ? entries.length : 0;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }

          /**
           * Removes all key-value entries from the map.
           *
           * @private
           * @name clear
           * @memberOf MapCache
           */
          function mapCacheClear() {
            this.__data__ = {
              'hash': new Hash(),
              'map': new (Map || ListCache)(),
              'string': new Hash()
            };
          }

          /**
           * Removes `key` and its value from the map.
           *
           * @private
           * @name delete
           * @memberOf MapCache
           * @param {string} key The key of the value to remove.
           * @returns {boolean} Returns `true` if the entry was removed, else `false`.
           */
          function mapCacheDelete(key) {
            return getMapData(this, key)['delete'](key);
          }

          /**
           * Gets the map value for `key`.
           *
           * @private
           * @name get
           * @memberOf MapCache
           * @param {string} key The key of the value to get.
           * @returns {*} Returns the entry value.
           */
          function mapCacheGet(key) {
            return getMapData(this, key).get(key);
          }

          /**
           * Checks if a map value for `key` exists.
           *
           * @private
           * @name has
           * @memberOf MapCache
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function mapCacheHas(key) {
            return getMapData(this, key).has(key);
          }

          /**
           * Sets the map `key` to `value`.
           *
           * @private
           * @name set
           * @memberOf MapCache
           * @param {string} key The key of the value to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns the map cache instance.
           */
          function mapCacheSet(key, value) {
            getMapData(this, key).set(key, value);
            return this;
          }

          // Add methods to `MapCache`.
          MapCache.prototype.clear = mapCacheClear;
          MapCache.prototype['delete'] = mapCacheDelete;
          MapCache.prototype.get = mapCacheGet;
          MapCache.prototype.has = mapCacheHas;
          MapCache.prototype.set = mapCacheSet;

          /**
           * Creates a stack cache object to store key-value pairs.
           *
           * @private
           * @constructor
           * @param {Array} [entries] The key-value pairs to cache.
           */
          function Stack(entries) {
            this.__data__ = new ListCache(entries);
          }

          /**
           * Removes all key-value entries from the stack.
           *
           * @private
           * @name clear
           * @memberOf Stack
           */
          function stackClear() {
            this.__data__ = new ListCache();
          }

          /**
           * Removes `key` and its value from the stack.
           *
           * @private
           * @name delete
           * @memberOf Stack
           * @param {string} key The key of the value to remove.
           * @returns {boolean} Returns `true` if the entry was removed, else `false`.
           */
          function stackDelete(key) {
            return this.__data__['delete'](key);
          }

          /**
           * Gets the stack value for `key`.
           *
           * @private
           * @name get
           * @memberOf Stack
           * @param {string} key The key of the value to get.
           * @returns {*} Returns the entry value.
           */
          function stackGet(key) {
            return this.__data__.get(key);
          }

          /**
           * Checks if a stack value for `key` exists.
           *
           * @private
           * @name has
           * @memberOf Stack
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function stackHas(key) {
            return this.__data__.has(key);
          }

          /**
           * Sets the stack `key` to `value`.
           *
           * @private
           * @name set
           * @memberOf Stack
           * @param {string} key The key of the value to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns the stack cache instance.
           */
          function stackSet(key, value) {
            var cache = this.__data__;
            if (cache instanceof ListCache) {
              var pairs = cache.__data__;
              if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                pairs.push([key, value]);
                return this;
              }
              cache = this.__data__ = new MapCache(pairs);
            }
            cache.set(key, value);
            return this;
          }

          // Add methods to `Stack`.
          Stack.prototype.clear = stackClear;
          Stack.prototype['delete'] = stackDelete;
          Stack.prototype.get = stackGet;
          Stack.prototype.has = stackHas;
          Stack.prototype.set = stackSet;

          /**
           * Creates an array of the enumerable property names of the array-like `value`.
           *
           * @private
           * @param {*} value The value to query.
           * @param {boolean} inherited Specify returning inherited property names.
           * @returns {Array} Returns the array of property names.
           */
          function arrayLikeKeys(value, inherited) {
            // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
            // Safari 9 makes `arguments.length` enumerable in strict mode.
            var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
            var length = result.length,
              skipIndexes = !!length;
            for (var key in value) {
              if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
                result.push(key);
              }
            }
            return result;
          }

          /**
           * Assigns `value` to `key` of `object` if the existing value is not equivalent
           * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons.
           *
           * @private
           * @param {Object} object The object to modify.
           * @param {string} key The key of the property to assign.
           * @param {*} value The value to assign.
           */
          function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
              object[key] = value;
            }
          }

          /**
           * Gets the index at which the `key` is found in `array` of key-value pairs.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} key The key to search for.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function assocIndexOf(array, key) {
            var length = array.length;
            while (length--) {
              if (eq(array[length][0], key)) {
                return length;
              }
            }
            return -1;
          }

          /**
           * The base implementation of `_.assign` without support for multiple sources
           * or `customizer` functions.
           *
           * @private
           * @param {Object} object The destination object.
           * @param {Object} source The source object.
           * @returns {Object} Returns `object`.
           */
          function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
          }

          /**
           * The base implementation of `_.clone` and `_.cloneDeep` which tracks
           * traversed objects.
           *
           * @private
           * @param {*} value The value to clone.
           * @param {boolean} [isDeep] Specify a deep clone.
           * @param {boolean} [isFull] Specify a clone including symbols.
           * @param {Function} [customizer] The function to customize cloning.
           * @param {string} [key] The key of `value`.
           * @param {Object} [object] The parent object of `value`.
           * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
           * @returns {*} Returns the cloned value.
           */
          function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
            var result;
            if (customizer) {
              result = object ? customizer(value, key, object, stack) : customizer(value);
            }
            if (result !== undefined) {
              return result;
            }
            if (!isObject(value)) {
              return value;
            }
            var isArr = isArray(value);
            if (isArr) {
              result = initCloneArray(value);
              if (!isDeep) {
                return copyArray(value, result);
              }
            } else {
              var tag = getTag(value),
                isFunc = tag == funcTag || tag == genTag;
              if (isBuffer(value)) {
                return cloneBuffer(value, isDeep);
              }
              if (tag == objectTag || tag == argsTag || isFunc && !object) {
                if (isHostObject(value)) {
                  return object ? value : {};
                }
                result = initCloneObject(isFunc ? {} : value);
                if (!isDeep) {
                  return copySymbols(value, baseAssign(result, value));
                }
              } else {
                if (!cloneableTags[tag]) {
                  return object ? value : {};
                }
                result = initCloneByTag(value, tag, baseClone, isDeep);
              }
            }
            // Check for circular references and return its corresponding clone.
            stack || (stack = new Stack());
            var stacked = stack.get(value);
            if (stacked) {
              return stacked;
            }
            stack.set(value, result);
            if (!isArr) {
              var props = isFull ? getAllKeys(value) : keys(value);
            }
            arrayEach(props || value, function (subValue, key) {
              if (props) {
                key = subValue;
                subValue = value[key];
              }
              // Recursively populate clone (susceptible to call stack limits).
              assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
            });
            return result;
          }

          /**
           * The base implementation of `_.create` without support for assigning
           * properties to the created object.
           *
           * @private
           * @param {Object} prototype The object to inherit from.
           * @returns {Object} Returns the new object.
           */
          function baseCreate(proto) {
            return isObject(proto) ? objectCreate(proto) : {};
          }

          /**
           * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
           * `keysFunc` and `symbolsFunc` to get the enumerable property names and
           * symbols of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Function} keysFunc The function to get the keys of `object`.
           * @param {Function} symbolsFunc The function to get the symbols of `object`.
           * @returns {Array} Returns the array of property names and symbols.
           */
          function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result = keysFunc(object);
            return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
          }

          /**
           * The base implementation of `getTag`.
           *
           * @private
           * @param {*} value The value to query.
           * @returns {string} Returns the `toStringTag`.
           */
          function baseGetTag(value) {
            return objectToString.call(value);
          }

          /**
           * The base implementation of `_.isNative` without bad shim checks.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a native function,
           *  else `false`.
           */
          function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) {
              return false;
            }
            var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
          }

          /**
           * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names.
           */
          function baseKeys(object) {
            if (!isPrototype(object)) {
              return nativeKeys(object);
            }
            var result = [];
            for (var key in Object(object)) {
              if (hasOwnProperty.call(object, key) && key != 'constructor') {
                result.push(key);
              }
            }
            return result;
          }

          /**
           * Creates a clone of  `buffer`.
           *
           * @private
           * @param {Buffer} buffer The buffer to clone.
           * @param {boolean} [isDeep] Specify a deep clone.
           * @returns {Buffer} Returns the cloned buffer.
           */
          function cloneBuffer(buffer, isDeep) {
            if (isDeep) {
              return buffer.slice();
            }
            var result = new buffer.constructor(buffer.length);
            buffer.copy(result);
            return result;
          }

          /**
           * Creates a clone of `arrayBuffer`.
           *
           * @private
           * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
           * @returns {ArrayBuffer} Returns the cloned array buffer.
           */
          function cloneArrayBuffer(arrayBuffer) {
            var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array(result).set(new Uint8Array(arrayBuffer));
            return result;
          }

          /**
           * Creates a clone of `dataView`.
           *
           * @private
           * @param {Object} dataView The data view to clone.
           * @param {boolean} [isDeep] Specify a deep clone.
           * @returns {Object} Returns the cloned data view.
           */
          function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
          }

          /**
           * Creates a clone of `map`.
           *
           * @private
           * @param {Object} map The map to clone.
           * @param {Function} cloneFunc The function to clone values.
           * @param {boolean} [isDeep] Specify a deep clone.
           * @returns {Object} Returns the cloned map.
           */
          function cloneMap(map, isDeep, cloneFunc) {
            var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
            return arrayReduce(array, addMapEntry, new map.constructor());
          }

          /**
           * Creates a clone of `regexp`.
           *
           * @private
           * @param {Object} regexp The regexp to clone.
           * @returns {Object} Returns the cloned regexp.
           */
          function cloneRegExp(regexp) {
            var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result.lastIndex = regexp.lastIndex;
            return result;
          }

          /**
           * Creates a clone of `set`.
           *
           * @private
           * @param {Object} set The set to clone.
           * @param {Function} cloneFunc The function to clone values.
           * @param {boolean} [isDeep] Specify a deep clone.
           * @returns {Object} Returns the cloned set.
           */
          function cloneSet(set, isDeep, cloneFunc) {
            var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
            return arrayReduce(array, addSetEntry, new set.constructor());
          }

          /**
           * Creates a clone of the `symbol` object.
           *
           * @private
           * @param {Object} symbol The symbol object to clone.
           * @returns {Object} Returns the cloned symbol object.
           */
          function cloneSymbol(symbol) {
            return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
          }

          /**
           * Creates a clone of `typedArray`.
           *
           * @private
           * @param {Object} typedArray The typed array to clone.
           * @param {boolean} [isDeep] Specify a deep clone.
           * @returns {Object} Returns the cloned typed array.
           */
          function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
          }

          /**
           * Copies the values of `source` to `array`.
           *
           * @private
           * @param {Array} source The array to copy values from.
           * @param {Array} [array=[]] The array to copy values to.
           * @returns {Array} Returns `array`.
           */
          function copyArray(source, array) {
            var index = -1,
              length = source.length;
            array || (array = Array(length));
            while (++index < length) {
              array[index] = source[index];
            }
            return array;
          }

          /**
           * Copies properties of `source` to `object`.
           *
           * @private
           * @param {Object} source The object to copy properties from.
           * @param {Array} props The property identifiers to copy.
           * @param {Object} [object={}] The object to copy properties to.
           * @param {Function} [customizer] The function to customize copied values.
           * @returns {Object} Returns `object`.
           */
          function copyObject(source, props, object, customizer) {
            object || (object = {});
            var index = -1,
              length = props.length;
            while (++index < length) {
              var key = props[index];
              var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
              assignValue(object, key, newValue === undefined ? source[key] : newValue);
            }
            return object;
          }

          /**
           * Copies own symbol properties of `source` to `object`.
           *
           * @private
           * @param {Object} source The object to copy symbols from.
           * @param {Object} [object={}] The object to copy symbols to.
           * @returns {Object} Returns `object`.
           */
          function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
          }

          /**
           * Creates an array of own enumerable property names and symbols of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names and symbols.
           */
          function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
          }

          /**
           * Gets the data for `map`.
           *
           * @private
           * @param {Object} map The map to query.
           * @param {string} key The reference key.
           * @returns {*} Returns the map data.
           */
          function getMapData(map, key) {
            var data = map.__data__;
            return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
          }

          /**
           * Gets the native function at `key` of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {string} key The key of the method to get.
           * @returns {*} Returns the function if it's native, else `undefined`.
           */
          function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined;
          }

          /**
           * Creates an array of the own enumerable symbol properties of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of symbols.
           */
          var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

          /**
           * Gets the `toStringTag` of `value`.
           *
           * @private
           * @param {*} value The value to query.
           * @returns {string} Returns the `toStringTag`.
           */
          var getTag = baseGetTag;

          // Fallback for data views, maps, sets, and weak maps in IE 11,
          // for data views in Edge < 14, and promises in Node.js.
          if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
            getTag = function getTag(value) {
              var result = objectToString.call(value),
                Ctor = result == objectTag ? value.constructor : undefined,
                ctorString = Ctor ? toSource(Ctor) : undefined;
              if (ctorString) {
                switch (ctorString) {
                  case dataViewCtorString:
                    return dataViewTag;
                  case mapCtorString:
                    return mapTag;
                  case promiseCtorString:
                    return promiseTag;
                  case setCtorString:
                    return setTag;
                  case weakMapCtorString:
                    return weakMapTag;
                }
              }
              return result;
            };
          }

          /**
           * Initializes an array clone.
           *
           * @private
           * @param {Array} array The array to clone.
           * @returns {Array} Returns the initialized clone.
           */
          function initCloneArray(array) {
            var length = array.length,
              result = array.constructor(length);

            // Add properties assigned by `RegExp#exec`.
            if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
              result.index = array.index;
              result.input = array.input;
            }
            return result;
          }

          /**
           * Initializes an object clone.
           *
           * @private
           * @param {Object} object The object to clone.
           * @returns {Object} Returns the initialized clone.
           */
          function initCloneObject(object) {
            return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
          }

          /**
           * Initializes an object clone based on its `toStringTag`.
           *
           * **Note:** This function only supports cloning values with tags of
           * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
           *
           * @private
           * @param {Object} object The object to clone.
           * @param {string} tag The `toStringTag` of the object to clone.
           * @param {Function} cloneFunc The function to clone values.
           * @param {boolean} [isDeep] Specify a deep clone.
           * @returns {Object} Returns the initialized clone.
           */
          function initCloneByTag(object, tag, cloneFunc, isDeep) {
            var Ctor = object.constructor;
            switch (tag) {
              case arrayBufferTag:
                return cloneArrayBuffer(object);
              case boolTag:
              case dateTag:
                return new Ctor(+object);
              case dataViewTag:
                return cloneDataView(object, isDeep);
              case float32Tag:
              case float64Tag:
              case int8Tag:
              case int16Tag:
              case int32Tag:
              case uint8Tag:
              case uint8ClampedTag:
              case uint16Tag:
              case uint32Tag:
                return cloneTypedArray(object, isDeep);
              case mapTag:
                return cloneMap(object, isDeep, cloneFunc);
              case numberTag:
              case stringTag:
                return new Ctor(object);
              case regexpTag:
                return cloneRegExp(object);
              case setTag:
                return cloneSet(object, isDeep, cloneFunc);
              case symbolTag:
                return cloneSymbol(object);
            }
          }

          /**
           * Checks if `value` is a valid array-like index.
           *
           * @private
           * @param {*} value The value to check.
           * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
           * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
           */
          function isIndex(value, length) {
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
          }

          /**
           * Checks if `value` is suitable for use as unique object key.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
           */
          function isKeyable(value) {
            var type = typeof value;
            return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
          }

          /**
           * Checks if `func` has its source masked.
           *
           * @private
           * @param {Function} func The function to check.
           * @returns {boolean} Returns `true` if `func` is masked, else `false`.
           */
          function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
          }

          /**
           * Checks if `value` is likely a prototype object.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
           */
          function isPrototype(value) {
            var Ctor = value && value.constructor,
              proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
            return value === proto;
          }

          /**
           * Converts `func` to its source code.
           *
           * @private
           * @param {Function} func The function to process.
           * @returns {string} Returns the source code.
           */
          function toSource(func) {
            if (func != null) {
              try {
                return funcToString.call(func);
              } catch (e) {}
              try {
                return func + '';
              } catch (e) {}
            }
            return '';
          }

          /**
           * This method is like `_.clone` except that it recursively clones `value`.
           *
           * @static
           * @memberOf _
           * @since 1.0.0
           * @category Lang
           * @param {*} value The value to recursively clone.
           * @returns {*} Returns the deep cloned value.
           * @see _.clone
           * @example
           *
           * var objects = [{ 'a': 1 }, { 'b': 2 }];
           *
           * var deep = _.cloneDeep(objects);
           * console.log(deep[0] === objects[0]);
           * // => false
           */
          function cloneDeep(value) {
            return baseClone(value, true, true);
          }

          /**
           * Performs a
           * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * comparison between two values to determine if they are equivalent.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
           * @example
           *
           * var object = { 'a': 1 };
           * var other = { 'a': 1 };
           *
           * _.eq(object, object);
           * // => true
           *
           * _.eq(object, other);
           * // => false
           *
           * _.eq('a', 'a');
           * // => true
           *
           * _.eq('a', Object('a'));
           * // => false
           *
           * _.eq(NaN, NaN);
           * // => true
           */
          function eq(value, other) {
            return value === other || value !== value && other !== other;
          }

          /**
           * Checks if `value` is likely an `arguments` object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an `arguments` object,
           *  else `false`.
           * @example
           *
           * _.isArguments(function() { return arguments; }());
           * // => true
           *
           * _.isArguments([1, 2, 3]);
           * // => false
           */
          function isArguments(value) {
            // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
            return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
          }

          /**
           * Checks if `value` is classified as an `Array` object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an array, else `false`.
           * @example
           *
           * _.isArray([1, 2, 3]);
           * // => true
           *
           * _.isArray(document.body.children);
           * // => false
           *
           * _.isArray('abc');
           * // => false
           *
           * _.isArray(_.noop);
           * // => false
           */
          var isArray = Array.isArray;

          /**
           * Checks if `value` is array-like. A value is considered array-like if it's
           * not a function and has a `value.length` that's an integer greater than or
           * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
           * @example
           *
           * _.isArrayLike([1, 2, 3]);
           * // => true
           *
           * _.isArrayLike(document.body.children);
           * // => true
           *
           * _.isArrayLike('abc');
           * // => true
           *
           * _.isArrayLike(_.noop);
           * // => false
           */
          function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value);
          }

          /**
           * This method is like `_.isArrayLike` except that it also checks if `value`
           * is an object.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an array-like object,
           *  else `false`.
           * @example
           *
           * _.isArrayLikeObject([1, 2, 3]);
           * // => true
           *
           * _.isArrayLikeObject(document.body.children);
           * // => true
           *
           * _.isArrayLikeObject('abc');
           * // => false
           *
           * _.isArrayLikeObject(_.noop);
           * // => false
           */
          function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
          }

          /**
           * Checks if `value` is a buffer.
           *
           * @static
           * @memberOf _
           * @since 4.3.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
           * @example
           *
           * _.isBuffer(new Buffer(2));
           * // => true
           *
           * _.isBuffer(new Uint8Array(2));
           * // => false
           */
          var isBuffer = nativeIsBuffer || stubFalse;

          /**
           * Checks if `value` is classified as a `Function` object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a function, else `false`.
           * @example
           *
           * _.isFunction(_);
           * // => true
           *
           * _.isFunction(/abc/);
           * // => false
           */
          function isFunction(value) {
            // The use of `Object#toString` avoids issues with the `typeof` operator
            // in Safari 8-9 which returns 'object' for typed array and other constructors.
            var tag = isObject(value) ? objectToString.call(value) : '';
            return tag == funcTag || tag == genTag;
          }

          /**
           * Checks if `value` is a valid array-like length.
           *
           * **Note:** This method is loosely based on
           * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
           * @example
           *
           * _.isLength(3);
           * // => true
           *
           * _.isLength(Number.MIN_VALUE);
           * // => false
           *
           * _.isLength(Infinity);
           * // => false
           *
           * _.isLength('3');
           * // => false
           */
          function isLength(value) {
            return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
          }

          /**
           * Checks if `value` is the
           * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
           * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an object, else `false`.
           * @example
           *
           * _.isObject({});
           * // => true
           *
           * _.isObject([1, 2, 3]);
           * // => true
           *
           * _.isObject(_.noop);
           * // => true
           *
           * _.isObject(null);
           * // => false
           */
          function isObject(value) {
            var type = typeof value;
            return !!value && (type == 'object' || type == 'function');
          }

          /**
           * Checks if `value` is object-like. A value is object-like if it's not `null`
           * and has a `typeof` result of "object".
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
           * @example
           *
           * _.isObjectLike({});
           * // => true
           *
           * _.isObjectLike([1, 2, 3]);
           * // => true
           *
           * _.isObjectLike(_.noop);
           * // => false
           *
           * _.isObjectLike(null);
           * // => false
           */
          function isObjectLike(value) {
            return !!value && typeof value == 'object';
          }

          /**
           * Creates an array of the own enumerable property names of `object`.
           *
           * **Note:** Non-object values are coerced to objects. See the
           * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
           * for more details.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.keys(new Foo);
           * // => ['a', 'b'] (iteration order is not guaranteed)
           *
           * _.keys('hi');
           * // => ['0', '1']
           */
          function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
          }

          /**
           * This method returns a new empty array.
           *
           * @static
           * @memberOf _
           * @since 4.13.0
           * @category Util
           * @returns {Array} Returns the new empty array.
           * @example
           *
           * var arrays = _.times(2, _.stubArray);
           *
           * console.log(arrays);
           * // => [[], []]
           *
           * console.log(arrays[0] === arrays[1]);
           * // => false
           */
          function stubArray() {
            return [];
          }

          /**
           * This method returns `false`.
           *
           * @static
           * @memberOf _
           * @since 4.13.0
           * @category Util
           * @returns {boolean} Returns `false`.
           * @example
           *
           * _.times(2, _.stubFalse);
           * // => [false, false]
           */
          function stubFalse() {
            return false;
          }
          module.exports = cloneDeep;
        })(lodash_clonedeep, lodash_clonedeep.exports);
        var lodash_clonedeepExports = lodash_clonedeep.exports;
        const cloneDeep = /*@__PURE__*/getDefaultExportFromCjs(lodash_clonedeepExports);
        const fileTypesToMimesArray = exports("bx", fileTypes => {
          let accepted = [];
          fileTypes === null || fileTypes === void 0 || fileTypes.forEach(el => {
            accepted = accepted.concat(acceptedFileTypes(el));
          });
          return accepted;
        });
        const acceptedFileTypes = fileType => {
          switch (fileType) {
            case "presentation":
              return ["application/mspowerpoint", "application/vnd.google-apps.presentation", "application/vnd.ms-powerpoint", "application/vnd.ms-powerpoint.presentation.macroEnabled.12", "application/vnd.ms-powerpoint.presentation.macroenabled.12", "application/vnd.ms-powerpoint.slideshow.macroEnabled.12", "application/vnd.ms-powerpoint.slideshow.macroenabled.12", "application/vnd.ms-powerpoint.template.macroEnabled.12", "application/vnd.ms-powerpoint.template.macroenabled.12", "application/vnd.oasis.opendocument.presentation", "application/vnd.openxmlformats-officedocument.presentationml.presentation", "application/vnd.openxmlformats-officedocument.presentationml.slideshow", "application/vnd.openxmlformats-officedocument.presentationml.template"];
            case "document":
              return ["application/vnd.google-apps.document", "application/vnd.ms-word", "application/vnd.ms-word.document.macroEnabled.12", "application/vnd.ms-word.document.macroenabled.12", "application/vnd.ms-word.template.macroEnabled.12", "application/vnd.ms-word.template.macroenabled.12", "application/vnd.oasis.opendocument.text", "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "application/vnd.openxmlformats-officedocument.wordprocessingml.template", "text/plain", "application/msword"];
            case "spreadsheet":
              return ["application/msexcel", "application/vnd.google-apps.spreadsheet", "application/vnd.ms-excel", "application/vnd.ms-excel.sheet.macroEnabled.12", "application/vnd.ms-excel.sheet.macroenabled.12", "application/vnd.ms-excel.template.macroEnabled.12", "application/vnd.ms-excel.template.macroenabled.12", "application/vnd.oasis.opendocument.spreadsheet", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "application/vnd.openxmlformats-officedocument.spreadsheetml.template", "text/csv"];
            case "pdf":
              return ["application/pdf"];
            case "image":
              return ["image/bmp", "image/gif", "image/heic", "image/heif", "image/jpeg", "image/png", "image/tiff", "image/vnd.microsoft.icon", "image/webp", "image/x-ms-bmp"];
            case "video":
              return ["application/vnd.google-apps.video", "video/3gpp", "video/3gpp2", "video/avi", "video/flv", "video/mp2t", "video/mp4", "video/mp4v-es", "video/mpeg", "video/ogg", "video/quicktime", "video/vnd.mts", "video/webm", "video/x-flv", "video/x-m4v", "video/x-matroska", "video/x-ms-asf", "video/x-ms-wm", "video/x-ms-wmv", "video/x-ms-wvx", "video/x-msvideo", "video/x-quicktime"];
            case "audio":
              return ["application/vnd.google-apps.audio", "audio/mpeg", "audio/mp3", "audio/mp4", "audio/midi", "audio/x-mid", "audio/x-midi", "audio/wav", "audio/x-wav", "audio/vnd.wav", "audio/flac", "audio/ogg", "audio/vorbis"];
          }
        };
        const jsonToJs = (json, nested, getComponentType) => {
          const key = Object.keys(json)[0];
          const value = json[key];
          switch (key) {
            case "and":
              return wrapIfNested(nested, value.map(el => jsonToJs(el, true, getComponentType)).join(" && "));
            case "or":
              return wrapIfNested(nested, value.map(el => jsonToJs(el, true, getComponentType)).join(" || "));
            case "!":
              return "!" + wrapIfNested(nested, jsonToJs(value, true, getComponentType) + (nested ? ")" : ""));
            case "relevance":
              return `${capture(value)}.relevance`;
            case "not_relevance":
              return `!${capture(value)}.relevance`;
            case "is_online":
              return `Survey.mode=="online"`;
            case "is_offline":
              return `Survey.mode=="offline"`;
            case "validity":
              return `${capture(value)}.validity`;
            case "not_validity":
              return `!${capture(value)}.validity`;
            case "is_void":
              return `FrankieScripts.isVoid(${capture(value)}.value)`;
            case "is_not_void":
              return `FrankieScripts.isNotVoid(${capture(value)}.value)`;
            case "is_file_void":
              let qCode = capture(value);
              return wrapIfNested(nested, `FrankieScripts.isVoid(${qCode}.value) || !${qCode}.value.size || !${qCode}.value.stored_filename`);
            case "is_file_not_void":
              let qCode1 = capture(value);
              return wrapIfNested(nested, `FrankieScripts.isNotVoid(${qCode1}.value) && ${qCode1}.value.size && ${qCode1}.value.stored_filename`);
            case "==":
            case "!=":
            case "<":
            case "<=":
            case ">":
            case ">=":
            case "between":
            case "not_between":
              let type = getComponentType(capture(value[0]));
              let leftOperand = type == "date" || type == "date_time" || type == "time" ? `FrankieScripts.sqlDateTimeToDate(${capture(value[0])}.value)` : `${capture(value[0])}.value`;
              if (["==", "!=", "<", "<=", ">", ">="].includes(key)) {
                return `${leftOperand}${key}${capture(value[1], type)}`;
              } else if (key == "between") {
                return wrapIfNested(nested, `(${leftOperand}>=${capture(value[1], type)} && ${leftOperand}<=${capture(value[2], type)})`);
              } else if (key == "not_between") {
                return wrapIfNested(nested, `(${leftOperand}<${capture(value[1], type)} || ${leftOperand}>${capture(value[2], type)})`);
              } else {
                throw "WTF";
              }
            case "startsWith":
              return wrapIfNested(nested, `(${capture(value[0])}.value && ${capture(value[0])}.value.startsWith(${capture(value[1])})`);
            case "endsWith":
              return wrapIfNested(nested, `(${capture(value[0])}.value && ${capture(value[0])}.value.endsWith(${capture(value[1])})`);
            case "contains":
              return wrapIfNested(nested, `(${capture(value[0])}.value && ${capture(value[0])}.value.contains(${capture(value[1])})`);
            case "not_contains":
              return wrapIfNested(nested, `(${capture(value[0])}.value && !${capture(value[0])}.value.contains(${capture(value[1])})`);
            case "in":
              const code = capture(value[0]);
              if (code == "survey_lang") {
                return `[${value[1].map(el => '"' + el + '"')}].indexOf(Survey.lang) !== -1`;
              }
              return `[${value[1].map(el => '"' + el + '"')}].indexOf(${code}.value) !== -1`;
            case "not_in":
              if (code == "survey_lang") {
                return `[${value[1].map(el => '"' + el + '"')}].indexOf(Survey.lang) == -1`;
              }
              return `[${value[1].map(el => '"' + el + '"')}].indexOf(${code}.value) == -1`;
            case "any_in":
              const questionCode = capture(value[0]);
              return `[${value[1].map(el => questionCode + el + ".value")}].filter(Boolean).length > 0`;
            case "none_in":
              const questionCode1 = capture(value[0]);
              return `[${value[1].map(el => questionCode1 + el + ".value")}].filter(Boolean).length == 0`;
            default:
              return "";
          }
        };
        const wrapIfNested = (nested, text) => {
          return (nested ? "(" : "") + text + (nested ? ")" : "");
        };
        const capture = (value, type) => {
          if (type == "time") {
            return `FrankieScripts.sqlDateTimeToDate(\"1970-01-01 ${integerToTime(value)}\")`;
          } else if (typeof value === "object" && Object.prototype.toString.call(value) === "[object Date]") {
            return type == "date_time" ? `FrankieScripts.sqlDateTimeToDate(\"${toSqlDateTime(value)}\")` : `FrankieScripts.sqlDateTimeToDate(\"${toSqlDateTimeIgnoreTime(value)}\")`;
          }
          if (typeof value === "object") {
            return value[Object.keys(value)[0]];
          } else if (typeof value === "string") {
            return '"' + value + '"';
          } else {
            return value;
          }
        };
        const integerToTime = time => {
          let hours = Math.floor(time / 3600);
          let hoursString = hours >= 10 && hours <= 23 ? "" + hours : "0" + hours;
          let minutes = time % 3600 / 60;
          let minutesString = minutes >= 10 && minutes <= 59 ? "" + minutes : "0" + minutes;
          return hoursString + ":" + minutesString + ":00";
        };
        const toSqlDateTime = date => {
          return date.getFullYear() + "-" + ("00" + (date.getMonth() + 1)).slice(-2) + "-" + ("00" + date.getDate()).slice(-2) + " " + ("00" + date.getHours()).slice(-2) + ":" + ("00" + date.getMinutes()).slice(-2) + ":" + ("00" + date.getSeconds()).slice(-2);
        };
        const toSqlDateTimeIgnoreTime = date => {
          return date.getFullYear() + "-" + ("00" + (date.getMonth() + 1)).slice(-2) + "-" + ("00" + date.getDate()).slice(-2) + " 00:00:00";
        };
        const validationEquation = (qualifiedCode, component, key, validation) => {
          if (!validation.isActive || key == "validation_not_contains" && !validation.not_contains) {
            return {
              code: key,
              remove: true
            };
          }
          let instructionText = "";
          switch (key) {
            case "validation_required":
              instructionText = requiredText(qualifiedCode, component);
              return booleanActiveInstruction(key, instructionText);
            case "validation_min_char_length":
              instructionText = `FrankieScripts.isNotVoid(${qualifiedCode}.value) ` + `&& ${qualifiedCode}.value.length < ${validation.min_length || 0}`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_one_response_per_col":
              instructionText = `FrankieScripts.hasDuplicates([${component.children.filter(el => el.type == "row").map(el => el.qualifiedCode + ".value")}].filter(Boolean))`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_max_char_length":
              instructionText = `FrankieScripts.isNotVoid(${qualifiedCode}.value) ` + `&& ${qualifiedCode}.value.length > ${validation.max_length || 0}`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_contains":
              instructionText = `FrankieScripts.isNotVoid(${qualifiedCode}.value) ` + `&& !${qualifiedCode}.value.includes("${validation.contains || ""}")`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_not_contains":
              instructionText = `FrankieScripts.isNotVoid(${qualifiedCode}.value) ` + `&& ${qualifiedCode}.value.includes("${validation.not_contains}")`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_file_types":
              const mimes = fileTypesToMimesArray(validation.fileTypes);
              instructionText = `FrankieScripts.isNotVoid(${qualifiedCode}.value) ` + `&& ![${mimes.map(el => '"' + el + '"').join(",")}].includes(${qualifiedCode}.value.type)`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_max_file_size":
              instructionText = `FrankieScripts.isNotVoid(${qualifiedCode}.value) ` + `&& ${qualifiedCode}.value.size / 1024 > ${validation.max_size}`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_pattern":
              if (!isValidRegex(validation.pattern)) {
                return {
                  code: key,
                  remove: true
                };
              }
              instructionText = `FrankieScripts.isNotVoid(${qualifiedCode}.value) ` + `&& !RegExp("${validation.pattern}").test(${qualifiedCode}.value)`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_pattern_email":
              instructionText = `FrankieScripts.isNotVoid(${qualifiedCode}.value) ` + `&&  !/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/.test(${qualifiedCode}.value)`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_max_word_count":
              instructionText = `FrankieScripts.isNotVoid(${qualifiedCode}.value) ` + `&&  FrankieScripts.wordCount(${qualifiedCode}.value) > ${validation.max_count || 0}`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_min_word_count":
              instructionText = `FrankieScripts.isNotVoid(${qualifiedCode}.value) ` + `&&  FrankieScripts.wordCount(${qualifiedCode}.value) < ${validation.min_count || 0}`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_between":
              instructionText = `FrankieScripts.isNotVoid(${qualifiedCode}.value) ` + `&& (${qualifiedCode}.value < ${validation.lower_limit || 0} ` + `|| ${qualifiedCode}.value > ${validation.upper_limit || 0})`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_not_between":
              instructionText = `FrankieScripts.isNotVoid(${qualifiedCode}.value) ` + `&& (${qualifiedCode}.value >= ${validation.lower_limit || 0} ` + `&& ${qualifiedCode}.value <= ${validation.upper_limit || 0})`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_lt":
              instructionText = `FrankieScripts.isNotVoid(${qualifiedCode}.value) ` + `&& ${qualifiedCode}.value >= ${validation.number || 0}`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_lte":
              instructionText = `FrankieScripts.isNotVoid(${qualifiedCode}.value) ` + `&& ${qualifiedCode}.value > ${validation.number || 0}`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_gt":
              instructionText = `FrankieScripts.isNotVoid(${qualifiedCode}.value) ` + `&& ${qualifiedCode}.value <= ${validation.number || 0}`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_gte":
              instructionText = `FrankieScripts.isNotVoid(${qualifiedCode}.value) ` + `&& ${qualifiedCode}.value < ${validation.number || 0}`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_equals":
              instructionText = `FrankieScripts.isVoid(${qualifiedCode}.value) ` + `&& ${qualifiedCode}.value != ${validation.number || 0}`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_not_equal":
              instructionText = `FrankieScripts.isVoid(${qualifiedCode}.value) ` + `&& ${qualifiedCode}.value == ${validation.number || 0}`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_min_option_count":
              instructionText = `[${component.children.map(answer => answer.qualifiedCode + ".value")}].filter(Boolean).length ` + `< ${validation.min_count || 0}`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_max_option_count":
              instructionText = `[${component.children.map(answer => answer.qualifiedCode + ".value")}].filter(Boolean).length ` + `> ${validation.max_count || 0}`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_option_count":
              instructionText = `[${component.children.map(answer => answer.qualifiedCode + ".value")}].filter(Boolean).length ` + `!== ${validation.count || 0}`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_min_ranking_count":
              instructionText = `[${component.children.map(answer => answer.qualifiedCode + ".value")}].filter(Boolean).length ` + `< ${validation.min_count || 0}`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_max_ranking_count":
              instructionText = `[${component.children.map(answer => answer.qualifiedCode + ".value")}].filter(Boolean).length ` + `> ${validation.max_count || 0}`;
              return booleanActiveInstruction(key, instructionText);
            case "validation_ranking_count":
              instructionText = `[${component.children.map(answer => answer.qualifiedCode + ".value")}].filter(Boolean).length ` + `!== ${validation.count || 0}`;
              return booleanActiveInstruction(key, instructionText);
          }
        };
        const booleanActiveInstruction = (key, instructionText) => {
          return {
            code: key,
            text: instructionText,
            isActive: true,
            returnType: {
              name: "Boolean"
            }
          };
        };
        const requiredText = (qualifiedCode, component) => {
          if (component.type == "file_upload" || component.type == "signature" || component.type == "photo_capture" || component.type == "video_capture") {
            return `FrankieScripts.isVoid(${qualifiedCode}.value) || !${qualifiedCode}.value.size || !${qualifiedCode}.value.stored_filename`;
          } else if (component.type == "scq_array" || component.type == "scq_icon_array") {
            const rows = component.children.filter(child => child.type == "row");
            return `[${rows.map(answer => answer.qualifiedCode + ".value")}].filter(Boolean).length ` + ` < ` + rows.length;
          } else {
            return `FrankieScripts.isVoid(${qualifiedCode}.value)`;
          }
        };
        const isValidRegex = regex => {
          if (!regex) {
            return false;
          }
          try {
            new RegExp(regex);
          } catch (e) {
            return false;
          }
          return true;
        };
        const cleanupValidationData = (component, key, validation) => {
          switch (key) {
            case "validation_required":
            case "validation_one_response_per_col":
            case "validation_pattern_email":
            case "validation_contains":
            case "validation_not_contains":
            case "validation_pattern":
            case "validation_max_word_count":
            case "validation_min_word_count":
            case "validation_between":
            case "validation_not_between":
            case "validation_lt":
            case "validation_lte":
            case "validation_gt":
            case "validation_gte":
            case "validation_equals":
            case "validation_not_equal":
              return validation;
            case "validation_min_char_length":
              return _objectSpread3(_objectSpread3({}, validation), {}, {
                min_length: Math.min(component.maxChars || 30, validation.min_length)
              });
            case "validation_max_char_length":
              return _objectSpread3(_objectSpread3({}, validation), {}, {
                max_length: Math.max(component.maxChars || 30, validation.max_length)
              });
            case "validation_min_ranking_count":
            case "validation_min_option_count":
              return _objectSpread3(_objectSpread3({}, validation), {}, {
                min_count: Math.min(component.children.length, validation.min_count)
              });
            case "validation_max_ranking_count":
            case "validation_max_option_count":
              return _objectSpread3(_objectSpread3({}, validation), {}, {
                max_count: Math.min(component.children.length, validation.max_count)
              });
            case "validation_ranking_count":
            case "validation_option_count":
              return _objectSpread3(_objectSpread3({}, validation), {}, {
                count: Math.min(component.children.length, validation.count)
              });
            default:
              return validation;
          }
        };
        const buildValidationDefaultData = rule => {
          switch (rule) {
            case "validation_required":
            case "validation_one_response_per_col":
            case "validation_pattern_email":
              return {};
            case "validation_min_char_length":
              return {
                min_length: 2
              };
            case "validation_max_char_length":
              return {
                max_length: 30
              };
            case "validation_contains":
              return {
                contains: ""
              };
            case "validation_not_contains":
              return {
                not_contains: ""
              };
            case "validation_pattern":
              return {
                pattern: ""
              };
            case "validation_max_word_count":
              return {
                max_count: 300
              };
            case "validation_min_word_count":
              return {
                min_count: 300
              };
            case "validation_between":
              return {
                lower_limit: 20,
                upper_limit: 100
              };
            case "validation_not_between":
              return {
                lower_limit: 20,
                upper_limit: 100
              };
            case "validation_lt":
              return {
                number: 20
              };
            case "validation_lte":
              return {
                number: 20
              };
            case "validation_gt":
              return {
                number: 20
              };
            case "validation_gte":
              return {
                number: 20
              };
            case "validation_equals":
              return {
                number: 20
              };
            case "validation_not_equal":
              return {
                number: 20
              };
            case "validation_min_ranking_count":
            case "validation_min_option_count":
              return {
                min_count: 1
              };
            case "validation_max_ranking_count":
            case "validation_max_option_count":
              return {
                max_count: 1
              };
            case "validation_ranking_count":
            case "validation_option_count":
              return {
                count: 1
              };
            case "validation_file_types":
              return {
                fileTypes: ["image"]
              };
            case "validation_max_file_size":
              return {
                max_size: 250
              };
            default:
              throw "unrecognized rule " + rule;
          }
        };
        const scqSkipEquations = (qualifiedCode, component, skipLogic) => {
          const instructionList = [];
          component.children.forEach(el => {
            const key = el.code;
            const skipObj = skipLogic[key];
            const instructionCode = "skip_to_on_" + key;
            if (!skipObj || !skipObj.skipTo || skipObj.skipTo == "proceed") {
              instructionList.push({
                code: instructionCode,
                remove: true
              });
            } else {
              component.instructionList.find(el => el.code == instructionCode);
              const instruction = {
                code: instructionCode,
                condition: qualifiedCode + '.value == "' + key + '"',
                isActive: true,
                toEnd: skipObj.toEnd || false,
                skipToComponent: skipObj.skipTo
              };
              instructionList.push(instruction);
            }
          });
          return instructionList;
        };
        const conditionalRelevanceEquation = (logic, rule, state) => {
          const code = "conditional_relevance";
          if (rule == "show_always") {
            return {
              code,
              remove: true
            };
          } else if (rule == "hide_always") {
            return {
              code,
              text: "false",
              isActive: false,
              returnType: {
                name: "Boolean"
              }
            };
          }
          const text = jsonToJs(logic, false, code => state[code].type);
          if (rule == "show_if") {
            return {
              code,
              text,
              isActive: true,
              returnType: {
                name: "Boolean"
              }
            };
          } else if (rule == "hide_if") {
            return {
              code,
              text: `!${text}`,
              isActive: true,
              returnType: {
                name: "Boolean"
              }
            };
          } else {
            throw "WTF";
          }
        };
        const reorder = (list, startIndex, endIndex) => {
          const result = Array.from(list);
          const _result$splice = result.splice(startIndex, 1),
            _result$splice2 = _slicedToArray2(_result$splice, 1),
            removed = _result$splice2[0];
          result.splice(endIndex, 0, removed);
          return result;
        };
        const nextGroupId = groups => {
          if (groups && groups.length) {
            return groups.map(group => parseInt(group.code.replace("G", ""))).sort(function (a, b) {
              return a - b;
            })[groups.length - 1] + 1;
          }
          return 1;
        };
        const nextQuestionId = (state, groups) => {
          if (groups.length) {
            let questions = [];
            groups.forEach(group => {
              let groupObj = state[group.code];
              if (groupObj.children) {
                groupObj.children.forEach(question => {
                  questions.push(parseInt(question.code.replace("Q", "")));
                });
              }
            });
            if (questions.length) {
              return questions.sort(function (a, b) {
                return a - b;
              })[questions.length - 1] + 1;
            }
          }
          return 1;
        };
        const buildReferenceInstruction = (content, name, key) => {
          const allMatches = getAllMatches(content);
          if (allMatches.length) {
            return {
              code: `reference_${name}_${key}`,
              references: allMatches,
              lang: key
            };
          } else {
            return {
              code: `reference_${name}_${key}`,
              remove: true
            };
          }
        };
        const getAllMatches = inputString => {
          const regex = /data-instruction=(\"|\')([\w\.!\"!\']+)(\"|\')/g;
          var m;
          var returnList = [];
          do {
            m = regex.exec(inputString);
            if (m) {
              returnList.push(m[2]);
            }
          } while (m);
          return returnList;
        };
        const surveySetup = exports("ax", {
          code: "Survey",
          rules: [{
            title: "theme",
            rules: ["theme"]
          }, {
            title: "navigation_options",
            key: "navigation",
            rules: ["navigationMode", "allowPrevious", "allowIncomplete", "allowJump", "skipInvalid"]
          }, {
            title: "order_priority",
            key: "random",
            rules: ["randomize_groups", "prioritize_groups"]
          }]
        });
        const setupOptions = exports("cc", type => {
          switch (type) {
            case "group":
            case "welcome":
            case "end":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "setup",
                key: "setup",
                rules: ["showDescription"]
              }, {
                title: "order_priority",
                key: "random",
                rules: ["randomize_questions", "prioritize_questions"]
              }];
            case "text_display":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "setup",
                key: "setup",
                rules: ["showDescription"]
              }];
            case "image_display":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "setup",
                key: "setup",
                rules: ["showDescription"]
              }];
            case "video_display":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "setup",
                key: "setup",
                rules: ["showDescription"]
              }, {
                title: "video_options",
                key: "video_options",
                rules: ["audio_only", "loop"]
              }];
            case "text":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "setup",
                key: "setup",
                rules: ["showDescription", "maxChars", "hint"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_required", "validation_max_char_length", "validation_min_char_length", "validation_pattern", "validation_contains", "validation_not_contains"]
              }];
            case "other_text":
              return [{
                title: "setup",
                key: "setup",
                rules: ["maxChars"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_required", "validation_max_char_length", "validation_min_char_length", "validation_pattern", "validation_contains", "validation_not_contains"]
              }];
            case "number":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "setup",
                key: "setup",
                rules: ["showDescription", "maxChars", "decimal_separator", "hint"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_required", "validation_between", "validation_not_between", "validation_lt", "validation_lte", "validation_gt", "validation_gte", "validation_equals", "validation_not_equal"]
              }];
            case "email":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "setup",
                key: "setup",
                rules: ["showDescription", "maxChars", "hint"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_required", "validation_pattern_email", "validation_max_char_length", "validation_min_char_length"]
              }];
            case "paragraph":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "setup",
                key: "setup",
                rules: ["showDescription", "minRows", "showWordCount", "hint"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_required", "validation_max_word_count", "validation_min_word_count", "validation_contains", "validation_not_contains"]
              }];
            case "file_upload":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "setup",
                key: "setup",
                rules: ["showDescription"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_required", "validation_file_types", "validation_max_file_size"]
              }];
            case "signature":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "setup",
                key: "setup",
                rules: ["showDescription"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_required"]
              }];
            case "photo_capture":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "setup",
                key: "setup",
                rules: ["showDescription", "hint"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_required", "validation_max_file_size"]
              }];
            case "barcode":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "setup",
                key: "setup",
                rules: ["showDescription", "hint"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_required"]
              }];
            case "video_capture":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "setup",
                key: "setup",
                rules: ["showDescription", "hint"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_required", "validation_max_file_size"]
              }];
            case "date_time":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "setup",
                key: "setup",
                rules: ["showDescription", "dateFormat", "fullDayFormat", "maxDate", "minDate"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_required"]
              }];
            case "date":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "setup",
                key: "setup",
                rules: ["showDescription", "dateFormat", "maxDate", "minDate"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_required"]
              }];
            case "time":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "setup",
                key: "setup",
                rules: ["showDescription", "fullDayFormat"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_required"]
              }];
            case "scq":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "setup",
                key: "setup",
                rules: ["showDescription"]
              }, {
                title: "skip_logic",
                key: "skip_logic",
                rules: ["skip_logic"]
              }, {
                title: "order_priority",
                key: "random",
                rules: ["randomize_options", "prioritize_options"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_required"]
              }];
            case "icon_scq":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "setup",
                key: "setup",
                rules: ["showDescription"]
              }, {
                title: "skip_logic",
                key: "skip_logic",
                rules: ["skip_logic"]
              }, {
                title: "order_priority",
                key: "random",
                rules: ["randomize_options", "prioritize_options"]
              }, {
                title: "display",
                key: "display",
                rules: ["hideText", "columns", "iconSize", "spacing"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_required"]
              }];
            case "image_scq":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "setup",
                key: "setup",
                rules: ["showDescription"]
              }, {
                title: "display",
                key: "display",
                rules: ["hideText", "columns", "imageAspectRatio", "spacing"]
              }, {
                title: "skip_logic",
                key: "skip_logic",
                rules: ["skip_logic"]
              }, {
                title: "order_priority",
                key: "random",
                rules: ["randomize_options", "prioritize_options"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_required"]
              }];
            case "mcq":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "order_priority",
                key: "random",
                rules: ["randomize_options", "prioritize_options"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_min_option_count", "validation_max_option_count", "validation_option_count"]
              }];
            case "ranking":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "order_priority",
                key: "random",
                rules: ["randomize_options", "prioritize_options"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_min_ranking_count", "validation_max_ranking_count", "validation_ranking_count"]
              }];
            case "image_ranking":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "setup",
                key: "setup",
                rules: ["showDescription"]
              }, {
                title: "display",
                key: "display",
                rules: ["hideText", "columns", "imageAspectRatio", "spacing"]
              }, {
                title: "order_priority",
                key: "random",
                rules: ["randomize_options", "prioritize_options"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_min_ranking_count", "validation_max_ranking_count", "validation_ranking_count"]
              }];
            case "icon_mcq":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "setup",
                key: "setup",
                rules: ["showDescription"]
              }, {
                title: "display",
                key: "display",
                rules: ["hideText", "columns", "iconSize", "spacing"]
              }, {
                title: "order_priority",
                key: "random",
                rules: ["randomize_options", "prioritize_options"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_min_option_count", "validation_max_option_count", "validation_option_count"]
              }];
            case "image_mcq":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "setup",
                key: "setup",
                rules: ["showDescription"]
              }, {
                title: "display",
                key: "display",
                rules: ["hideText", "columns", "imageAspectRatio", "spacing"]
              }, {
                title: "order_priority",
                key: "random",
                rules: ["randomize_options", "prioritize_options"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_min_option_count", "validation_max_option_count", "validation_option_count"]
              }];
            case "scq_icon_array":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "order_priority",
                key: "random",
                rules: ["randomize_rows", "prioritize_rows", "randomize_columns", "prioritize_columns"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_required", "validation_one_response_per_col"]
              }];
            case "scq_array":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "order_priority",
                key: "random",
                rules: ["randomize_rows", "prioritize_rows", "randomize_columns", "prioritize_columns"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_required", "validation_one_response_per_col"]
              }];
            case "nps":
              return [{
                title: "show_hide",
                key: "relevance",
                rules: ["relevance"]
              }, {
                title: "setup",
                key: "setup",
                rules: ["showDescription", "lower_bound_hint", "higher_bound_hint"]
              }, {
                title: "validation",
                key: "validation",
                rules: ["validation_required"]
              }];
          }
        });
        const reservedKeys = ["setup"];
        const designState = createSlice({
          name: "designState",
          initialState: {
            state: {}
          },
          reducers: {
            designStateReceived: (state, action) => {
              let keys = Object.keys(state).filter(el => !reservedKeys.includes(el));
              let newState = action.payload;
              keys = Object.keys(newState);
              keys.forEach(key => {
                if (!isEquivalent(state[key], newState[key])) {
                  state[key] = newState[key];
                }
              });
            },
            setup(state, action) {
              var _state$setup, _state$setup2;
              const payload = action.payload;
              // we want to ignore multiple clicks on the same setup button
              // but acknowledge when we highlight or expand a specific section
              if (payload.code != ((_state$setup = state.setup) === null || _state$setup === void 0 ? void 0 : _state$setup.code) || !isEquivalent(payload.rules, (_state$setup2 = state.setup) === null || _state$setup2 === void 0 ? void 0 : _state$setup2.rules) || payload.expanded || payload.highlighted) {
                state.setup = action.payload;
              }
            },
            newVersionReceived(state, action) {
              const payload = action.payload;
              state.versionDto = payload;
            },
            setupToggleExpand(state, action) {
              const key = action.payload;
              if (!state.setup.expanded) {
                state.setup.expanded = [];
              }
              if (!state.setup.expanded.includes(key)) {
                state.setup.expanded.push(key);
              } else {
                state.setup.expanded.splice(state.setup.expanded.indexOf(key), 1);
              }
            },
            changeValidationValue(state, action) {
              let payload = action.payload;
              if (!state[payload.code]["validation"]) {
                state[payload.code]["validation"] = {};
              }
              if (!state[payload.code]["validation"][payload.rule]) {
                state[payload.code]["validation"][payload.rule] = buildValidationDefaultData(payload.rule);
              }
              state[payload.code]["validation"][payload.rule][payload.key] = payload.value;
              processValidation(state, payload.code, payload.rule, payload.rule != "content");
            },
            resetSetup(state) {
              delete state["setup"];
            },
            changeAttribute: (state, action) => {
              let payload = action.payload;
              console.log(payload);
              if (action.payload.key == "content" || action.payload.key == "instructionList" || action.payload.key == "relevance" || action.payload.key == "resources") {
                throw "We are changing attributes way too much than we should";
              }
              state[payload.code][payload.key] = payload.value;
              if (action.payload.key == "maxChars") {
                cleanupValidation(state, payload.code);
              } else if (action.payload.key == "dateFormat") {
                addMaskedValuesInstructions(payload.code, state[payload.code], state);
              } else if (action.payload.key == "fullDayFormat") {
                addMaskedValuesInstructions(payload.code, state[payload.code], state);
              } else if (action.payload.key == "decimal_separator") {
                addMaskedValuesInstructions(payload.code, state[payload.code], state);
              } else if (["randomize_questions", "randomize_groups", "randomize_options", "randomize_rows", "randomize_columns"].indexOf(action.payload.key) > -1) {
                updateRandomByRule(state[payload.code], action.payload.key);
              } else if (["prioritize_questions", "prioritize_groups", "prioritize_options", "prioritize_rows", "prioritize_columns"].indexOf(action.payload.key) > -1) {
                if (!payload.value) {
                  removeInstruction(state[payload.code], "priority_groups");
                }
              }
            },
            toggleComponentCollapse: (state, action) => {
              let groupCode = action.payload;
              state[groupCode].collapsed = !(state[groupCode].collapsed || false);
            },
            changeRelevance: (state, action) => {
              let payload = action.payload;
              state[payload.code].relevance = payload.value;
              addRelevanceInstructions(state, payload.code, payload.value);
            },
            cloneQuestion: (state, action) => {
              var _survey$children;
              const code = action.payload;
              const survey = state.Survey;
              const group = (_survey$children = survey.children) === null || _survey$children === void 0 || (_survey$children = _survey$children.map(group => state[group.code])) === null || _survey$children === void 0 || (_survey$children = _survey$children.filter(group => group.children && group.children.findIndex(child => child.code == code) !== -1)) === null || _survey$children === void 0 ? void 0 : _survey$children[0];
              if (!group) {
                return;
              }
              const newQuestionId = "Q" + nextQuestionId(state, survey.children);
              const questionChild = group.children.find(el => el.code == code);
              const newQuestion = {
                type: questionChild.type,
                code: newQuestionId,
                qualifiedCode: newQuestionId
              };
              creatNewState(state, state[code], newQuestionId, code, newQuestionId);
              group.children.splice(group.children.indexOf(questionChild) + 1, 0, newQuestion);
              designState.caseReducers.setup(state, {
                payload: {
                  code: newQuestionId,
                  rules: setupOptions(newQuestion.type)
                }
              });
              cleanupRandomRules(group);
            },
            removeAnswer: (state, action) => {
              var _state$setup3;
              const answerQualifiedCode = action.payload;
              const codes = splitQuestionCodes(answerQualifiedCode);
              let question = state[codes[0]];
              question.children = question.children.filter(el => el.code !== codes[1]);
              delete state[answerQualifiedCode];
              // could be otherText
              if ((_state$setup3 = state.setup) !== null && _state$setup3 !== void 0 && (_state$setup3 = _state$setup3.code) !== null && _state$setup3 !== void 0 && _state$setup3.includes(answerQualifiedCode)) {
                designState.caseReducers.resetSetup(state);
              }
              question.designErrors = questionDesignError(question);
              cleanupValidation(state, codes[0]);
              addMaskedValuesInstructions(codes[0], question, state);
              cleanupRandomRules(question);
            },
            addNewAnswer: (state, action) => {
              const lang = state.langInfo.mainLang;
              const payload = action.payload;
              const answer = payload.answer;
              const label = payload.label;
              const instructionList = payload.instructionList;
              const qualifiedCode = answer.qualifiedCode;
              state[qualifiedCode] = {};
              if (!insertAnswer(state, answer)) {
                return;
              }
              if (label) {
                state[qualifiedCode].content = {
                  label: {
                    [lang]: label
                  }
                };
              }
              if (answer.type) {
                state[qualifiedCode].type = answer.type;
              }
              instructionList === null || instructionList === void 0 || instructionList.forEach(instruction => changeInstruction(state[qualifiedCode], instruction));
            },
            deleteGroup: (state, action) => {
              var _state$setup4, _survey$children2;
              const groupCode = action.payload;
              if (((_state$setup4 = state.setup) === null || _state$setup4 === void 0 ? void 0 : _state$setup4.code) == groupCode) {
                designState.caseReducers.resetSetup(state);
              }
              if (state[groupCode].groupType == "END") {
                state.error = {
                  message: "There must always be an end group. for an end message "
                };
                return;
              }
              const survey = state.Survey;
              const index = (_survey$children2 = survey.children) === null || _survey$children2 === void 0 ? void 0 : _survey$children2.findIndex(x => x.code === groupCode);
              survey.children.splice(index, 1);
              delete state[groupCode];
              cleanupRandomRules(survey);
            },
            deleteQuestion: (state, action) => {
              var _state$setup5, _survey$children3;
              const questionCode = action.payload;
              if (((_state$setup5 = state.setup) === null || _state$setup5 === void 0 ? void 0 : _state$setup5.code) == questionCode) {
                designState.caseReducers.resetSetup(state);
              }
              const survey = state.Survey;
              const group = (_survey$children3 = survey.children) === null || _survey$children3 === void 0 || (_survey$children3 = _survey$children3.map(group => state[group.code])) === null || _survey$children3 === void 0 || (_survey$children3 = _survey$children3.filter(group => group.children && group.children.findIndex(child => child.code == questionCode) !== -1)) === null || _survey$children3 === void 0 ? void 0 : _survey$children3[0];
              if (!group) {
                return;
              }
              const questionIndex = group.children.findIndex(x => x.code === questionCode);
              let children = [...group.children];
              if (children.length === 1) {
                group.children = [];
              } else {
                group.children.splice(questionIndex, 1);
              }
              delete state[questionCode];
              cleanupRandomRules(group);
            },
            onAddComponentsVisibilityChange: (state, action) => {
              state.addComponentsVisibility = action.payload;
            },
            changeContent: (state, action) => {
              let payload = action.payload;
              if (!state[payload.code].content) {
                state[payload.code].content = {};
                state[payload.code].content[payload.key] = {};
              } else if (!state[payload.code].content[payload.key]) {
                state[payload.code].content[payload.key] = {};
              }
              const referenceInstruction = buildReferenceInstruction(payload.value, payload.key, payload.lang);
              changeInstruction(state[payload.code], referenceInstruction);
              state[payload.code].content[payload.key][payload.lang] = payload.value;
            },
            changeResources: (state, action) => {
              let payload = action.payload;
              if (!state[payload.code].resources) {
                state[payload.code].resources = {};
              }
              state[payload.code].resources[payload.key] = payload.value;
            },
            updateRandom: (state, action) => {
              const payload = action.payload;
              const componentState = state[payload.code];
              if (payload.groups) {
                const instruction = {
                  code: "random_group",
                  groups: payload.groups
                };
                changeInstruction(componentState, instruction);
              } else {
                removeInstruction(componentState, "random_group");
              }
            },
            updatePriority: (state, action) => {
              const payload = action.payload;
              const componentState = state[payload.code];
              if (payload.priorities) {
                const instruction = {
                  code: "priority_groups",
                  priorities: payload.priorities
                };
                changeInstruction(componentState, instruction);
              } else {
                removeInstruction(componentState, "priority_groups");
              }
            },
            updateRandomByType: (state, action) => {
              var _state$payload$code, _randomInstruction$gr;
              const payload = action.payload;
              const componentState = state[payload.code];
              const otherChildrenCodes = (_state$payload$code = state[payload.code]) === null || _state$payload$code === void 0 || (_state$payload$code = _state$payload$code.children) === null || _state$payload$code === void 0 || (_state$payload$code = _state$payload$code.filter(el => el.type !== payload.type)) === null || _state$payload$code === void 0 ? void 0 : _state$payload$code.map(el => el.code);
              const randomInstruction = instructionByCode(componentState, "random_group");
              const otherRandomOrders = (randomInstruction === null || randomInstruction === void 0 || (_randomInstruction$gr = randomInstruction.groups) === null || _randomInstruction$gr === void 0 ? void 0 : _randomInstruction$gr.filter(x => x.length && x.some(elem => otherChildrenCodes.includes(elem)))) || [];
              const groups = payload.groups.concat(otherRandomOrders);
              if (groups) {
                const instruction = {
                  code: "random_group",
                  groups
                };
                changeInstruction(componentState, instruction);
              } else {
                removeInstruction(componentState, "random_group");
              }
            },
            updatePriorityByType: (state, action) => {
              var _state$payload$code2, _priorityInstruction$;
              const payload = action.payload;
              const componentState = state[payload.code];
              const otherChildrenCodes = (_state$payload$code2 = state[payload.code]) === null || _state$payload$code2 === void 0 || (_state$payload$code2 = _state$payload$code2.children) === null || _state$payload$code2 === void 0 || (_state$payload$code2 = _state$payload$code2.filter(el => el.type !== payload.type)) === null || _state$payload$code2 === void 0 ? void 0 : _state$payload$code2.map(el => el.code);
              const priorityInstruction = instructionByCode(componentState, "priority_groups");
              const otherPriorities = (priorityInstruction === null || priorityInstruction === void 0 || (_priorityInstruction$ = priorityInstruction.priorities) === null || _priorityInstruction$ === void 0 ? void 0 : _priorityInstruction$.filter(x => x && x.weights.some(el => otherChildrenCodes.includes(el.code)))) || [];
              const priorities = payload.priorities.concat(otherPriorities);
              if (priorities) {
                const instruction = {
                  code: "priority_groups",
                  priorities
                };
                changeInstruction(componentState, instruction);
              } else {
                removeInstruction(componentState, "priority_groups");
              }
            },
            removeSkipDestination: (state, action) => {
              const payload = action.payload;
              delete state[payload.code].skip_logic[payload.answerCode];
              addSkipInstructions(state, payload.code, state[payload.code].skip_logic);
            },
            editSkipDestination: (state, action) => {
              var _state$payload$code$s;
              const payload = action.payload;
              if (!state[payload.code].skip_logic) {
                state[payload.code].skip_logic = {};
              }
              if (!state[payload.code].skip_logic[payload.answerCode]) {
                state[payload.code].skip_logic[payload.answerCode] = {};
              }
              if (((_state$payload$code$s = state[payload.code].skip_logic) === null || _state$payload$code$s === void 0 ? void 0 : _state$payload$code$s[payload.answerCode].skipTo) !== payload.skipTo) {
                state[payload.code].skip_logic[payload.answerCode] = {
                  skipTo: payload.skipTo
                };
                addSkipInstructions(state, payload.code, state[payload.code].skip_logic);
              }
            },
            editSkipToEnd: (state, action) => {
              const payload = action.payload;
              state[payload.code].skip_logic[payload.answerCode].toEnd = payload.toEnd;
              addSkipInstructions(state, payload.code, state[payload.code].skip_logic);
            },
            onBaseLangChanged: (state, action) => {
              var _state$Survey$additio;
              state.langInfo.mainLang = action.payload.code;
              state.Survey.defaultLang = action.payload;
              state.Survey.additionalLang = (_state$Survey$additio = state.Survey.additionalLang) === null || _state$Survey$additio === void 0 ? void 0 : _state$Survey$additio.filter(language => language.code !== action.payload.code);
              state.langInfo.lang = action.payload.code;
              state.langInfo.onMainLang = true;
              state.langInfo.languagesList = [action.payload].concat(state.Survey.additionalLang || []);
            },
            onAdditionalLangAdded: (state, action) => {
              state.Survey.additionalLang = (state.Survey.additionalLang || []).concat(action.payload);
              state.langInfo.languagesList = [state.Survey.defaultLang].concat(state.Survey.additionalLang || []);
            },
            onAdditionalLangRemoved: (state, action) => {
              state.Survey.additionalLang = state.Survey.additionalLang.filter(language => language.code !== action.payload.code);
              state.langInfo.languagesList = [state.Survey.defaultLang].concat(state.Survey.additionalLang || []);
            },
            changeLang: (state, action) => {
              state.langInfo.lang = action.payload;
              state.langInfo.onMainLang = state.langInfo.lang == state.langInfo.mainLang;
            },
            onResetLang: state => {
              state.langInfo.lang = state.langInfo.mainLang;
              state.langInfo.onMainLang = true;
            },
            setSaving: (state, action) => {
              state.isSaving = action.payload;
            },
            setUpdating: (state, action) => {
              state.isUpdating = action.payload;
            },
            onDrag: (state, action) => {
              const payload = action.payload;
              switch (payload.type) {
                case "reorder_questions":
                  reorderQuestions(state, state.Survey, payload);
                  break;
                case "reparent_question":
                  reparentQuestion(state, state.Survey, payload);
                  break;
                case "reorder_groups":
                  reorderGroups(state.Survey, payload);
                  break;
                case "reorder_answers":
                  reorderAnswers(state, payload);
                  break;
                case "reorder_answers_by_type":
                  reorderAnswersByType(state, payload);
                  break;
                case "new_question":
                  newQuestion(state, payload);
                  break;
                case "new_group":
                  if (payload.groupType == "group") {
                    newGroup(state, payload);
                  } else if (payload.groupType == "end" || payload.groupType == "welcome") {
                    specialGroup(state, payload);
                  }
                  break;
              }
            },
            collapseAllGroups: state => {
              state.Survey.children.forEach(group => state[group.code].collapsed = true);
            }
          }
        });
        const _designState$actions = designState.actions,
          newVersionReceived = _designState$actions.newVersionReceived,
          designStateReceived = _designState$actions.designStateReceived,
          onBaseLangChanged = _designState$actions.onBaseLangChanged,
          onAdditionalLangAdded = _designState$actions.onAdditionalLangAdded,
          onAdditionalLangRemoved = _designState$actions.onAdditionalLangRemoved,
          changeLang = _designState$actions.changeLang,
          onResetLang = _designState$actions.onResetLang,
          onAddComponentsVisibilityChange = _designState$actions.onAddComponentsVisibilityChange,
          changeAttribute = _designState$actions.changeAttribute,
          changeTimeFormats = _designState$actions.changeTimeFormats,
          changeContent = _designState$actions.changeContent,
          changeResources = _designState$actions.changeResources,
          deleteQuestion = _designState$actions.deleteQuestion,
          cloneQuestion = _designState$actions.cloneQuestion,
          deleteGroup = _designState$actions.deleteGroup,
          addNewAnswer = _designState$actions.addNewAnswer,
          removeAnswer = _designState$actions.removeAnswer,
          setup = _designState$actions.setup,
          setupToggleExpand = _designState$actions.setupToggleExpand,
          resetSetup = _designState$actions.resetSetup,
          changeValidationValue = _designState$actions.changeValidationValue,
          updateRandom = _designState$actions.updateRandom,
          updatePriority = _designState$actions.updatePriority,
          updateRandomByType = _designState$actions.updateRandomByType,
          updatePriorityByType = _designState$actions.updatePriorityByType,
          removeSkipDestination = _designState$actions.removeSkipDestination,
          editSkipDestination = _designState$actions.editSkipDestination,
          editSkipToEnd = _designState$actions.editSkipToEnd,
          changeRelevance = _designState$actions.changeRelevance,
          onDrag = _designState$actions.onDrag,
          collapseAllGroups = _designState$actions.collapseAllGroups,
          toggleComponentCollapse = _designState$actions.toggleComponentCollapse,
          setSaving$1 = _designState$actions.setSaving,
          setUpdating$1 = _designState$actions.setUpdating;
        exports({
          af: newVersionReceived,
          az: designStateReceived,
          ak: onBaseLangChanged,
          al: onAdditionalLangAdded,
          am: onAdditionalLangRemoved,
          aj: changeLang,
          ay: onResetLang,
          ar: onAddComponentsVisibilityChange,
          co: changeAttribute,
          cf: changeContent,
          cj: changeResources,
          cq: deleteQuestion,
          cr: cloneQuestion,
          cu: deleteGroup,
          ct: addNewAnswer,
          cg: removeAnswer,
          aw: setup,
          cY: setupToggleExpand,
          as: resetSetup,
          cA: changeValidationValue,
          cX: updateRandom,
          cV: updatePriority,
          cW: updateRandomByType,
          cU: updatePriorityByType,
          cQ: removeSkipDestination,
          cR: editSkipDestination,
          cS: editSkipToEnd,
          cP: changeRelevance,
          ch: onDrag,
          cv: collapseAllGroups,
          cp: toggleComponentCollapse,
          ad: setSaving$1
        });
        const designState$1 = designState.reducer;
        const changeInstruction = (componentState, instruction) => {
          if (typeof componentState.instructionList === "undefined") {
            componentState.instructionList = [];
          }
          if (instruction.remove) {
            removeInstruction(componentState, instruction.code);
          } else {
            editInstruction(componentState, instruction);
          }
        };

        // there is always an assumption that instructionList exists!!!
        const removeInstruction = (componentState, code) => {
          if (componentState.instructionList.length) {
            const index = componentState.instructionList.findIndex(el => el.code === code);
            if (index < 0) {
              return;
            } else if (componentState.instructionList.length == 1) {
              componentState.instructionList = [];
            } else {
              componentState.instructionList.splice(index, 1);
            }
          }
        };
        const cleanupRandomRules = componentState => {
          if (componentState["randomize_questions"]) {
            updateRandomByRule(componentState, "randomize_questions");
          } else if (componentState["randomize_groups"]) {
            updateRandomByRule(componentState, "randomize_groups");
          } else if (componentState["randomize_options"]) {
            updateRandomByRule(componentState, "randomize_options");
          } else if (componentState["randomize_rows"]) {
            updateRandomByRule(componentState, "randomize_rows");
          } else if (componentState["randomize_columns"]) {
            updateRandomByRule(componentState, "randomize_columns");
          }
        };
        const updateRandomByRule = (componentState, randomRule) => {
          if (["randomize_questions", "randomize_groups", "randomize_options"].indexOf(randomRule) > -1 && componentState[randomRule] !== "custom") {
            var _componentState$child;
            const childCodes = (_componentState$child = componentState.children) === null || _componentState$child === void 0 || (_componentState$child = _componentState$child.filter(it => {
              var _it$groupType, _it$groupType2;
              return ((_it$groupType = it.groupType) === null || _it$groupType === void 0 ? void 0 : _it$groupType.toLowerCase()) != "end" && ((_it$groupType2 = it.groupType) === null || _it$groupType2 === void 0 ? void 0 : _it$groupType2.toLowerCase()) != "welcome";
            })) === null || _componentState$child === void 0 ? void 0 : _componentState$child.map(it => it.code);
            if (childCodes.length == 0 || !componentState[randomRule]) {
              componentState[randomRule] = false;
              removeInstruction(componentState, "random_group");
              return;
            }
            const instruction = {
              code: "random_group",
              groups: [{
                codes: childCodes,
                randomOption: componentState[randomRule]
              }]
            };
            changeInstruction(componentState, instruction);
          } else if (["randomize_rows"].indexOf(randomRule) > -1 && componentState[randomRule] !== "custom") {
            var _componentState$child2;
            const childCodes = (_componentState$child2 = componentState.children) === null || _componentState$child2 === void 0 || (_componentState$child2 = _componentState$child2.filter(child => child.type == "row")) === null || _componentState$child2 === void 0 ? void 0 : _componentState$child2.map(it => it.code);
            if (childCodes.length == 0 || !componentState[randomRule]) {
              componentState[randomRule] = false;
              removeInstruction(componentState, "random_group");
              return;
            }
            const instruction = {
              code: "random_group",
              groups: [{
                codes: childCodes,
                randomOption: componentState[randomRule]
              }]
            };
            changeInstruction(componentState, instruction);
          } else if (["randomize_columns"].indexOf(randomRule) > -1 && componentState[randomRule] !== "custom") {
            var _componentState$child3;
            const childCodes = (_componentState$child3 = componentState.children) === null || _componentState$child3 === void 0 || (_componentState$child3 = _componentState$child3.filter(child => child.type == "column")) === null || _componentState$child3 === void 0 ? void 0 : _componentState$child3.map(it => it.code);
            if (childCodes.length == 0 || !componentState[randomRule]) {
              componentState[randomRule] = false;
              removeInstruction(componentState, "random_group");
              return;
            }
            const instruction = {
              code: "random_group",
              groups: [{
                codes: childCodes,
                randomOption: componentState[randomRule]
              }]
            };
            changeInstruction(componentState, instruction);
          }
        };

        // there is always an assumption that instructionList exists!!!
        const editInstruction = (componentState, instruction) => {
          const index = componentState.instructionList.findIndex(el => el.code === instruction.code);
          if (index < 0) {
            componentState.instructionList.push(instruction);
          } else {
            componentState.instructionList[index] = instruction;
          }
        };
        const reparentQuestion = (state, survey, payload) => {
          var _destinationGroup$chi;
          let index = buildIndex(state, survey.children);
          const sourceGroup = state[payload.source];
          const destinationGroup = state[payload.destination];
          const sourceQuestionIndex = sourceGroup.children.findIndex(question => question.code == payload.id);
          const destinationQuestionIndex = index.indexOf(payload.destination) > index.indexOf(payload.source) ? 0 : ((_destinationGroup$chi = destinationGroup.children) === null || _destinationGroup$chi === void 0 ? void 0 : _destinationGroup$chi.length) || 0;
          const question = sourceGroup.children[sourceQuestionIndex];
          if (!question) {
            return;
          }
          sourceGroup.children.splice(sourceQuestionIndex, 1);
          if (!destinationGroup.children) {
            destinationGroup.children = [];
          }
          destinationGroup.children.splice(destinationQuestionIndex, 0, question);
          cleanupRandomRules(destinationGroup);
          cleanupRandomRules(sourceGroup);
        };
        const reorderQuestions = (state, survey, payload) => {
          const sourceGroup = state[payload.source];
          const destinationGroup = state[payload.destination];
          const sourceQuestionIndex = sourceGroup.children.findIndex(question => question.code == payload.id);
          const destinationQuestionIndex = payload.toIndex - 1;
          const question = sourceGroup.children[sourceQuestionIndex];
          sourceGroup.children.splice(sourceQuestionIndex, 1);
          if (!destinationGroup.children) {
            destinationGroup.children = [];
          }
          destinationGroup.children.splice(destinationQuestionIndex, 0, question);
          cleanupRandomRules(destinationGroup);
          cleanupRandomRules(sourceGroup);
        };
        const newQuestion = (state, payload) => {
          const survey = state.Survey;
          let questionId = nextQuestionId(state, survey.children);
          const questionObject = createQuestion(payload.questionType, questionId, state.langInfo.mainLang);
          const destinationGroup = state[payload.destination];
          const destinationQuestionIndex = payload.toIndex;
          if (!destinationGroup.children) {
            destinationGroup.children = [];
          }
          Object.keys(questionObject).filter(key => key != "question").forEach(key => {
            state[key] = questionObject[key];
          });
          const newCode = `Q${questionId}`;
          addMaskedValuesInstructions(newCode, questionObject[newCode], state);
          destinationGroup.children.splice(destinationQuestionIndex, 0, questionObject.question);
          cleanupRandomRules(destinationGroup);
          designState.caseReducers.setup(state, {
            payload: {
              code: newCode,
              rules: setupOptions(payload.questionType)
            }
          });
        };
        const newGroup = (state, payload) => {
          const survey = state.Survey;
          const group = createGroup("GROUP", nextGroupId(survey.children));
          if (!survey.children) {
            survey.children = [];
          }
          if (payload.toIndex == -1) {
            survey.children.push(group.newGroup);
          } else {
            survey.children.splice(payload.toIndex, 0, group.newGroup);
          }
          state[group.newGroup.code] = group.state;
          designState.caseReducers.setup(state, {
            payload: {
              code: group.newGroup.code,
              rules: setupOptions(group.newGroup.type)
            }
          });
          cleanupRandomRules(survey);
        };
        const specialGroup = (state, payload) => {
          const survey = state.Survey;
          if (!survey.children) {
            survey.children = [];
          }
          const index = survey.children.findIndex(group => {
            var _state$group$code$gro;
            return ((_state$group$code$gro = state[group.code].groupType) === null || _state$group$code$gro === void 0 ? void 0 : _state$group$code$gro.toLowerCase()) === payload.groupType;
          });
          if (index !== -1) {
            state.error = {
              message: "cannot have duplicate " + (payload.groupType == "welcome" ? "Welcome groups" : "End groups")
            };
            return;
          }
          if (payload.groupType == "welcome") {
            const group = createGroup("WELCOME", nextGroupId(survey.children));
            survey.children.splice(0, 0, group.newGroup);
            state[group.newGroup.code] = group.state;
            designState.caseReducers.setup(state, {
              payload: {
                code: group.newGroup.code,
                rules: setupOptions(group.newGroup.type)
              }
            });
          } else if (payload.groupType == "end") {
            const group = createGroup("END", nextGroupId(survey.children));
            survey.children.push(group.newGroup);
            state[group.newGroup.code] = group.state;
            designState.caseReducers.setup(state, {
              payload: {
                code: group.newGroup.code,
                rules: setupOptions(group.newGroup.type)
              }
            });
          }
        };
        const reorderGroups = (survey, payload) => {
          survey.children = reorder(survey.children, payload.fromIndex, payload.toIndex);
        };
        const reorderAnswers = (state, payload) => {
          const codes = splitQuestionCodes(payload.id);
          const parentCode = codes.slice(0, codes.length - 1).join("");
          const component = state[parentCode];
          component.children = reorder(component.children, payload.fromIndex, payload.toIndex);
        };
        const reorderAnswersByType = (state, payload) => {
          const codes = splitQuestionCodes(payload.id);
          const parentCode = codes.slice(0, codes.length - 1).join("");
          const component = state[parentCode];
          const type = state[payload.id].type;
          const filteredChildren = component.children.filter(child => child.type == type);
          const fromIndex = component.children.indexOf(filteredChildren[payload.fromIndex]);
          const toIndex = component.children.indexOf(filteredChildren[payload.toIndex]);
          component.children = reorder(component.children, fromIndex, toIndex);
        };
        const insertAnswer = (state, answer) => {
          const codes = splitQuestionCodes(answer.qualifiedCode);
          const parentCode = codes.slice(0, codes.length - 1).join("");
          const component = state[parentCode];
          if (component) {
            if (!component.children) {
              component.children = [];
            }
            const insertIndex = lastIndexInArray(component.children, child => child.type == answer.type || !child.type);
            component.children.splice(insertIndex + 1, 0, answer);
            component.designErrors = questionDesignError(component);
            cleanupValidation(state, parentCode);
            addMaskedValuesInstructions(parentCode, component, state);
            cleanupRandomRules(component);
            return true;
          } else {
            return false;
          }
        };
        const buildIndex = (state, groups) => {
          let retrunRestult = [];
          groups === null || groups === void 0 || groups.forEach(group => {
            retrunRestult.push(group.code);
            let groupObj = state[group.code];
            if (groupObj.children && !groupObj.collapsed) {
              groupObj.children.forEach(question => {
                if (question !== null && question !== void 0 && question.code) {
                  retrunRestult.push(question.code);
                }
              });
            }
          });
          return retrunRestult;
        };
        const splitQuestionCodes = code => {
          return code.split(/(A[a-z_0-9]+|Q[a-z_0-9]+)/).filter(Boolean);
        };
        const addValidationEquation = (state, qualifiedCode, rule) => {
          const component = state[qualifiedCode];
          const validationInstruction = validationEquation(qualifiedCode, component, rule, component["validation"][rule]);
          changeInstruction(component, validationInstruction);
        };
        const processValidation = (state, code, rule, modifyEquation) => {
          const component = state[code];
          if (component.designErrors && component.designErrors.length) {
            component.validation[rule].isActive = false;
            removeInstruction(component, rule);
            return;
          }
          component.validation[rule] = cleanupValidationData(component, rule, component.validation[rule]);
          // we have this special situation that the SCQ array validation is copied to its children
          // This is specifically important when an SCQ array is implemented at SCQ in smaller screens
          if ((component.type == "scq_array" || component.type == "scq_icon_array") && rule == "validation_required") {
            component.children.filter(child => child.type == "row").forEach(row => {
              const child = state[row.qualifiedCode];
              if (!child.validation) {
                child.validation = {};
              }
              child.validation[rule] = component.validation[rule];
              addValidationEquation(state, row.qualifiedCode, rule);
            });
            return;
          }
          if (modifyEquation) {
            addValidationEquation(state, code, rule);
          }
        };
        const cleanupValidation = (state, code) => {
          const component = state[code];
          if (!component.validation) {
            return;
          }
          const ruleKeys = Object.keys(component["validation"]);
          ruleKeys.forEach(key => processValidation(state, code, key, true));
        };
        const addSkipInstructions = (state, code, skipLogic) => {
          const component = state[code];
          if (component.type != "scq" && component.type != "image_scq" && component.type != "icon_scq") {
            return;
          }
          const instructions = scqSkipEquations(code, component, skipLogic);
          instructions.forEach(instruction => {
            changeInstruction(state[code], instruction);
          });
        };
        const addRelevanceInstructions = (state, code, relevance) => {
          const instruction = conditionalRelevanceEquation(relevance.logic, relevance.rule, state);
          changeInstruction(state[code], instruction);
        };
        const addMaskedValuesInstructions = (qualifiedCode, component, state) => {
          if (!component.type || !["mcq", "image_mcq", "icon_mcq", "scq", "icon_scq", "number", "image_scq", "scq_icon_array", "scq_array", "date", "date_time", "time"].includes(component.type)) {
            return;
          }
          switch (component.type) {
            case "date":
              if (component.dateFormat) {
                changeInstruction(component, {
                  code: "masked_value",
                  isActive: true,
                  returnType: {
                    name: "String"
                  },
                  text: `FrankieScripts.formatSqlDate(${qualifiedCode}.value, "${component.dateFormat}")`
                });
              } else {
                changeInstruction(component, {
                  code: "masked_value",
                  remove: true
                });
              }
              break;
            case "time":
              changeInstruction(component, {
                code: "masked_value",
                isActive: true,
                returnType: {
                  name: "String"
                },
                text: `FrankieScripts.formatTime(${qualifiedCode}.value, ${component.fullDayFormat || false})`
              });
              break;
            case "number":
              if (component.decimal_separator == ",") {
                changeInstruction(component, {
                  code: "masked_value",
                  isActive: true,
                  returnType: {
                    name: "String"
                  },
                  text: `${qualifiedCode}.value ? ${qualifiedCode}.value.toString().replace(".",",") : ${qualifiedCode}.value == undefined? "" : ${qualifiedCode}.value`
                });
              } else {
                changeInstruction(component, {
                  code: "masked_value",
                  remove: true
                });
              }
              break;
            case "date_time":
              if (component.dateFormat) {
                changeInstruction(component, {
                  code: "masked_value",
                  isActive: true,
                  returnType: {
                    name: "String"
                  },
                  text: `FrankieScripts.formatSqlDate(${qualifiedCode}.value, "${component.dateFormat}") + " " + FrankieScripts.formatTime(${qualifiedCode}.value, ${component.fullDayFormat || false})`
                });
              } else {
                changeInstruction(component, {
                  code: "masked_value",
                  remove: true
                });
              }
              break;
            case "image_scq":
            case "icon_scq":
            case "scq":
              if (component.children && component.children.length) {
                let objText = "{" + component.children.map(el => el.type == "other" ? `${el.code}: ${el.qualifiedCode}Atext.value` : `${el.code}: ${el.qualifiedCode}.label`).join(",") + "}";
                const instruction = {
                  code: "masked_value",
                  isActive: true,
                  returnType: {
                    name: "String"
                  },
                  text: `${qualifiedCode}.value ? ${objText}[${qualifiedCode}.value] : ''`
                };
                changeInstruction(component, instruction);
              } else {
                changeInstruction(component, {
                  code: "masked_value",
                  remove: true
                });
              }
              break;
            case "image_mcq":
            case "icon_mcq":
            case "mcq":
              if (component.children && component.children.length) {
                let text = "[" + component.children.map(answer => {
                  return `{ value:${answer.qualifiedCode}.value,` + ` label:${answer.type == "other" ? answer.qualifiedCode + "Atext.value" : answer.qualifiedCode + ".label"} }`;
                }).join(", ") + "]";
                const instruction = {
                  code: "masked_value",
                  isActive: true,
                  returnType: {
                    name: "String"
                  },
                  text: `FrankieScripts.listStrings(${text}.filter(function(elem){return elem.value}).map(function(elem){return elem.label}), Survey.lang)`
                };
                changeInstruction(component, instruction);
              } else {
                changeInstruction(component, {
                  code: "masked_value",
                  remove: true
                });
              }
              break;
            case "scq_icon_array":
            case "scq_array":
              if (component.children && component.children.length && component.children.filter(el => el.type == "column").length && component.children.filter(el => el.type === "row").length) {
                let objText = "{" + component.children.filter(el => el.type == "column").map(el => `${el.code}: ${el.qualifiedCode}.label`).join(",") + "}";
                component.children.filter(el => el.type === "row").forEach(el => {
                  const instruction = {
                    code: "masked_value",
                    isActive: true,
                    returnType: {
                      name: "String"
                    },
                    text: `${el.qualifiedCode}.value ? ${objText}[${el.qualifiedCode}.value] : ''`
                  };
                  changeInstruction(state[el.qualifiedCode], instruction);
                });
              } else if (component.children && component.children.filter(el => el.type === "row").length) {
                component.children.filter(el => el.type === "row").forEach(el => {
                  changeInstruction(state[el.qualifiedCode], {
                    code: "masked_value",
                    remove: true
                  });
                });
              }
          }
          return component;
        };
        const creatNewState = (state, toBeCopied, newStateCode, oldQuestionCode, newQuestionCode) => {
          var _newState$instruction3, _state$newStateCode;
          const newState = cloneDeep(toBeCopied);
          if (newState.relevance) {
            var _newState$instruction;
            delete newState.relevance;
            const index = (_newState$instruction = newState.instructionList) === null || _newState$instruction === void 0 ? void 0 : _newState$instruction.findIndex(instruction => instruction.code == "conditional_relevance");
            if (index) {
              var _newState$instruction2;
              (_newState$instruction2 = newState.instructionList) === null || _newState$instruction2 === void 0 || _newState$instruction2.splice(index, 1);
            }
          }
          if (newState.skip_logic) {
            delete newState.skip_logic;
            newState.instructionList = newState.instructionList.filter(eq => !eq.code.startsWith("skip_to_on_"));
          }
          (_newState$instruction3 = newState.instructionList) === null || _newState$instruction3 === void 0 || _newState$instruction3.forEach(eq => {
            eq.text = eq.text.replaceAll(oldQuestionCode, newQuestionCode);
          });
          state[newStateCode] = newState;
          (_state$newStateCode = state[newStateCode]) === null || _state$newStateCode === void 0 || (_state$newStateCode = _state$newStateCode.children) === null || _state$newStateCode === void 0 || _state$newStateCode.forEach(child => {
            let oldChildCode = child.qualifiedCode;
            let newChildCode = child.qualifiedCode.replaceAll(oldQuestionCode, newQuestionCode);
            child.qualifiedCode = newChildCode;
            creatNewState(state, state[oldChildCode], newChildCode, oldQuestionCode, newQuestionCode);
          });
        };
        const editState = createSlice({
          name: "editState",
          initialState: {
            state: {}
          },
          reducers: {
            setSaving: (state, action) => {
              state.isSaving = action.payload;
            },
            setUpdating: (state, action) => {
              state.isUpdating = action.payload;
            },
            surveyReceived: (state, action) => {
              let survey = action.payload;
              if (!isEquivalent(state.survey, survey)) {
                state.survey = survey;
              }
            },
            permissionsReceived: (state, action) => {
              let permissions = action.payload;
              if (!isEquivalent(state.permissions, permissions)) {
                state.permissions = permissions;
              }
            },
            permissionsLoading: (state, action) => {
              state.permissionsLoading = action.payload;
            },
            setLoading: (state, action) => {
              state.loading = action.payload;
            },
            surveyAttributeChanged: (state, action) => {
              let payload = action.payload;
              state.survey[payload.key] = payload.value;
            },
            surveyAttributeChangedImmediate: (state, action) => {
              let payload = action.payload;
              state.survey[payload.key] = payload.value;
            },
            onError: (state, action) => {
              state.loading = false;
              state.error = action.payload;
            },
            onEditErrorSeen: state => {
              state.error.seen = true;
            }
          }
        });
        const _editState$actions = editState.actions,
          surveyReceived = _editState$actions.surveyReceived,
          permissionsReceived = _editState$actions.permissionsReceived,
          permissionsLoading = _editState$actions.permissionsLoading,
          setSaving = _editState$actions.setSaving,
          setUpdating = _editState$actions.setUpdating,
          onError = _editState$actions.onError,
          setLoading = _editState$actions.setLoading,
          onEditErrorSeen = _editState$actions.onEditErrorSeen,
          surveyAttributeChanged = _editState$actions.surveyAttributeChanged,
          surveyAttributeChangedImmediate = _editState$actions.surveyAttributeChangedImmediate;
        exports({
          a6: surveyReceived,
          av: permissionsReceived,
          au: permissionsLoading,
          a7: onError,
          D: setLoading,
          H: onEditErrorSeen,
          a5: surveyAttributeChanged
        });
        const editState$1 = editState.reducer;
        const LANGUAGE_DEF = exports("ai", {
          en: {
            code: "en",
            name: "English"
          },
          de: {
            code: "de",
            name: "Deutsch"
          },
          ar: {
            code: "ar",
            name: "العربية"
          }
        });
        const BG_COLOR = "#d7ccc8";
        const TEXT_COLOR = "#000000CC";
        const PRIMARY_COLOR = "#3f51b5";
        const SECONDARY_COLOR = "#5e35b1";
        const ERR_COLOR = "#f44336";
        const PAPER_COLOR = "#fafafa";
        const defualtTheme = exports("cZ", theme => {
          var _theme$textStyles, _theme$textStyles2, _theme$textStyles3, _theme$textStyles4, _theme$textStyles5, _theme$textStyles6, _theme$textStyles7, _theme$textStyles8, _theme$textStyles9;
          return {
            textStyles: {
              group: {
                font: (theme === null || theme === void 0 || (_theme$textStyles = theme.textStyles) === null || _theme$textStyles === void 0 || (_theme$textStyles = _theme$textStyles.group) === null || _theme$textStyles === void 0 ? void 0 : _theme$textStyles.font) || "Google Sans",
                size: (theme === null || theme === void 0 || (_theme$textStyles2 = theme.textStyles) === null || _theme$textStyles2 === void 0 || (_theme$textStyles2 = _theme$textStyles2.group) === null || _theme$textStyles2 === void 0 ? void 0 : _theme$textStyles2.size) || 26,
                color: (theme === null || theme === void 0 || (_theme$textStyles3 = theme.textStyles) === null || _theme$textStyles3 === void 0 || (_theme$textStyles3 = _theme$textStyles3.group) === null || _theme$textStyles3 === void 0 ? void 0 : _theme$textStyles3.color) || TEXT_COLOR
              },
              question: {
                font: (theme === null || theme === void 0 || (_theme$textStyles4 = theme.textStyles) === null || _theme$textStyles4 === void 0 || (_theme$textStyles4 = _theme$textStyles4.question) === null || _theme$textStyles4 === void 0 ? void 0 : _theme$textStyles4.font) || "Google Sans",
                size: (theme === null || theme === void 0 || (_theme$textStyles5 = theme.textStyles) === null || _theme$textStyles5 === void 0 || (_theme$textStyles5 = _theme$textStyles5.question) === null || _theme$textStyles5 === void 0 ? void 0 : _theme$textStyles5.size) || 18,
                color: (theme === null || theme === void 0 || (_theme$textStyles6 = theme.textStyles) === null || _theme$textStyles6 === void 0 || (_theme$textStyles6 = _theme$textStyles6.question) === null || _theme$textStyles6 === void 0 ? void 0 : _theme$textStyles6.color) || TEXT_COLOR
              },
              text: {
                font: (theme === null || theme === void 0 || (_theme$textStyles7 = theme.textStyles) === null || _theme$textStyles7 === void 0 || (_theme$textStyles7 = _theme$textStyles7.text) === null || _theme$textStyles7 === void 0 ? void 0 : _theme$textStyles7.font) || "Google Sans",
                size: (theme === null || theme === void 0 || (_theme$textStyles8 = theme.textStyles) === null || _theme$textStyles8 === void 0 || (_theme$textStyles8 = _theme$textStyles8.text) === null || _theme$textStyles8 === void 0 ? void 0 : _theme$textStyles8.size) || 14,
                color: (theme === null || theme === void 0 || (_theme$textStyles9 = theme.textStyles) === null || _theme$textStyles9 === void 0 || (_theme$textStyles9 = _theme$textStyles9.text) === null || _theme$textStyles9 === void 0 ? void 0 : _theme$textStyles9.color) || TEXT_COLOR
              }
            },
            palette: {
              type: "light",
              primary: {
                main: (theme === null || theme === void 0 ? void 0 : theme.primaryColor) || PRIMARY_COLOR
              },
              secondary: {
                main: SECONDARY_COLOR
              },
              error: {
                main: ERR_COLOR
              },
              background: {
                default: (theme === null || theme === void 0 ? void 0 : theme.bgColor) || BG_COLOR,
                paper: (theme === null || theme === void 0 ? void 0 : theme.paperColor) || PAPER_COLOR
              }
            }
          };
        });
        const defaultSurveyTheme = exports("cB", {
          textStyles: {
            group: {
              font: "Google Sans",
              size: 26,
              color: TEXT_COLOR
            },
            question: {
              font: "Google Sans",
              size: 18,
              color: TEXT_COLOR
            },
            text: {
              font: "Google Sans",
              size: 14,
              color: TEXT_COLOR
            }
          },
          primaryColor: PRIMARY_COLOR,
          bgColor: BG_COLOR,
          paperColor: PAPER_COLOR
        });
        function bind(fn, thisArg) {
          return function wrap() {
            return fn.apply(thisArg, arguments);
          };
        }

        // utils is a library of generic helper functions non-specific to axios

        const toString = Object.prototype.toString;
        const getPrototypeOf = Object.getPrototypeOf;
        const kindOf = (cache => thing => {
          const str = toString.call(thing);
          return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
        })(Object.create(null));
        const kindOfTest = type => {
          type = type.toLowerCase();
          return thing => kindOf(thing) === type;
        };
        const typeOfTest = type => thing => typeof thing === type;

        /**
         * Determine if a value is an Array
         *
         * @param {Object} val The value to test
         *
         * @returns {boolean} True if value is an Array, otherwise false
         */
        const isArray = Array.isArray;

        /**
         * Determine if a value is undefined
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if the value is undefined, otherwise false
         */
        const isUndefined = typeOfTest('undefined');

        /**
         * Determine if a value is a Buffer
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a Buffer, otherwise false
         */
        function isBuffer(val) {
          return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
        }

        /**
         * Determine if a value is an ArrayBuffer
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is an ArrayBuffer, otherwise false
         */
        const isArrayBuffer = kindOfTest('ArrayBuffer');

        /**
         * Determine if a value is a view on an ArrayBuffer
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
         */
        function isArrayBufferView(val) {
          let result;
          if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
            result = ArrayBuffer.isView(val);
          } else {
            result = val && val.buffer && isArrayBuffer(val.buffer);
          }
          return result;
        }

        /**
         * Determine if a value is a String
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a String, otherwise false
         */
        const isString = typeOfTest('string');

        /**
         * Determine if a value is a Function
         *
         * @param {*} val The value to test
         * @returns {boolean} True if value is a Function, otherwise false
         */
        const isFunction = typeOfTest('function');

        /**
         * Determine if a value is a Number
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a Number, otherwise false
         */
        const isNumber = typeOfTest('number');

        /**
         * Determine if a value is an Object
         *
         * @param {*} thing The value to test
         *
         * @returns {boolean} True if value is an Object, otherwise false
         */
        const isObject = thing => thing !== null && typeof thing === 'object';

        /**
         * Determine if a value is a Boolean
         *
         * @param {*} thing The value to test
         * @returns {boolean} True if value is a Boolean, otherwise false
         */
        const isBoolean = thing => thing === true || thing === false;

        /**
         * Determine if a value is a plain Object
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a plain Object, otherwise false
         */
        const isPlainObject = val => {
          if (kindOf(val) !== 'object') {
            return false;
          }
          const prototype = getPrototypeOf(val);
          return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
        };

        /**
         * Determine if a value is a Date
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a Date, otherwise false
         */
        const isDate = kindOfTest('Date');

        /**
         * Determine if a value is a File
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a File, otherwise false
         */
        const isFile = kindOfTest('File');

        /**
         * Determine if a value is a Blob
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a Blob, otherwise false
         */
        const isBlob = kindOfTest('Blob');

        /**
         * Determine if a value is a FileList
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a File, otherwise false
         */
        const isFileList = kindOfTest('FileList');

        /**
         * Determine if a value is a Stream
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a Stream, otherwise false
         */
        const isStream = val => isObject(val) && isFunction(val.pipe);

        /**
         * Determine if a value is a FormData
         *
         * @param {*} thing The value to test
         *
         * @returns {boolean} True if value is an FormData, otherwise false
         */
        const isFormData = thing => {
          let kind;
          return thing && (typeof FormData === 'function' && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === 'formdata' ||
          // detect form-data instance
          kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]'));
        };

        /**
         * Determine if a value is a URLSearchParams object
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a URLSearchParams object, otherwise false
         */
        const isURLSearchParams = kindOfTest('URLSearchParams');

        /**
         * Trim excess whitespace off the beginning and end of a string
         *
         * @param {String} str The String to trim
         *
         * @returns {String} The String freed of excess whitespace
         */
        const trim$1 = str => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

        /**
         * Iterate over an Array or an Object invoking a function for each item.
         *
         * If `obj` is an Array callback will be called passing
         * the value, index, and complete array for each item.
         *
         * If 'obj' is an Object callback will be called passing
         * the value, key, and complete object for each property.
         *
         * @param {Object|Array} obj The object to iterate
         * @param {Function} fn The callback to invoke for each item
         *
         * @param {Boolean} [allOwnKeys = false]
         * @returns {any}
         */
        function forEach(obj, fn, {
          allOwnKeys = false
        } = {}) {
          // Don't bother if no value provided
          if (obj === null || typeof obj === 'undefined') {
            return;
          }
          let i;
          let l;

          // Force an array if not already something iterable
          if (typeof obj !== 'object') {
            /*eslint no-param-reassign:0*/
            obj = [obj];
          }
          if (isArray(obj)) {
            // Iterate over array values
            for (i = 0, l = obj.length; i < l; i++) {
              fn.call(null, obj[i], i, obj);
            }
          } else {
            // Iterate over object keys
            const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
            const len = keys.length;
            let key;
            for (i = 0; i < len; i++) {
              key = keys[i];
              fn.call(null, obj[key], key, obj);
            }
          }
        }
        function findKey(obj, key) {
          key = key.toLowerCase();
          const keys = Object.keys(obj);
          let i = keys.length;
          let _key;
          while (i-- > 0) {
            _key = keys[i];
            if (key === _key.toLowerCase()) {
              return _key;
            }
          }
          return null;
        }
        const _global = (() => {
          /*eslint no-undef:0*/
          if (typeof globalThis !== "undefined") return globalThis;
          return typeof self !== "undefined" ? self : typeof window !== 'undefined' ? window : global;
        })();
        const isContextDefined = context => !isUndefined(context) && context !== _global;

        /**
         * Accepts varargs expecting each argument to be an object, then
         * immutably merges the properties of each object and returns result.
         *
         * When multiple objects contain the same key the later object in
         * the arguments list will take precedence.
         *
         * Example:
         *
         * ```js
         * var result = merge({foo: 123}, {foo: 456});
         * console.log(result.foo); // outputs 456
         * ```
         *
         * @param {Object} obj1 Object to merge
         *
         * @returns {Object} Result of all merge properties
         */
        function merge( /* obj1, obj2, obj3, ... */
        ) {
          const _ref15 = isContextDefined(this) && this || {},
            caseless = _ref15.caseless;
          const result = {};
          const assignValue = (val, key) => {
            const targetKey = caseless && findKey(result, key) || key;
            if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
              result[targetKey] = merge(result[targetKey], val);
            } else if (isPlainObject(val)) {
              result[targetKey] = merge({}, val);
            } else if (isArray(val)) {
              result[targetKey] = val.slice();
            } else {
              result[targetKey] = val;
            }
          };
          for (let i = 0, l = arguments.length; i < l; i++) {
            arguments[i] && forEach(arguments[i], assignValue);
          }
          return result;
        }

        /**
         * Extends object a by mutably adding to it the properties of object b.
         *
         * @param {Object} a The object to be extended
         * @param {Object} b The object to copy properties from
         * @param {Object} thisArg The object to bind function to
         *
         * @param {Boolean} [allOwnKeys]
         * @returns {Object} The resulting value of object a
         */
        const extend = (a, b, thisArg, {
          allOwnKeys
        } = {}) => {
          forEach(b, (val, key) => {
            if (thisArg && isFunction(val)) {
              a[key] = bind(val, thisArg);
            } else {
              a[key] = val;
            }
          }, {
            allOwnKeys
          });
          return a;
        };

        /**
         * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
         *
         * @param {string} content with BOM
         *
         * @returns {string} content value without BOM
         */
        const stripBOM = content => {
          if (content.charCodeAt(0) === 0xFEFF) {
            content = content.slice(1);
          }
          return content;
        };

        /**
         * Inherit the prototype methods from one constructor into another
         * @param {function} constructor
         * @param {function} superConstructor
         * @param {object} [props]
         * @param {object} [descriptors]
         *
         * @returns {void}
         */
        const inherits = (constructor, superConstructor, props, descriptors) => {
          constructor.prototype = Object.create(superConstructor.prototype, descriptors);
          constructor.prototype.constructor = constructor;
          Object.defineProperty(constructor, 'super', {
            value: superConstructor.prototype
          });
          props && Object.assign(constructor.prototype, props);
        };

        /**
         * Resolve object with deep prototype chain to a flat object
         * @param {Object} sourceObj source object
         * @param {Object} [destObj]
         * @param {Function|Boolean} [filter]
         * @param {Function} [propFilter]
         *
         * @returns {Object}
         */
        const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
          let props;
          let i;
          let prop;
          const merged = {};
          destObj = destObj || {};
          // eslint-disable-next-line no-eq-null,eqeqeq
          if (sourceObj == null) return destObj;
          do {
            props = Object.getOwnPropertyNames(sourceObj);
            i = props.length;
            while (i-- > 0) {
              prop = props[i];
              if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
                destObj[prop] = sourceObj[prop];
                merged[prop] = true;
              }
            }
            sourceObj = filter !== false && getPrototypeOf(sourceObj);
          } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
          return destObj;
        };

        /**
         * Determines whether a string ends with the characters of a specified string
         *
         * @param {String} str
         * @param {String} searchString
         * @param {Number} [position= 0]
         *
         * @returns {boolean}
         */
        const endsWith = (str, searchString, position) => {
          str = String(str);
          if (position === undefined || position > str.length) {
            position = str.length;
          }
          position -= searchString.length;
          const lastIndex = str.indexOf(searchString, position);
          return lastIndex !== -1 && lastIndex === position;
        };

        /**
         * Returns new array from array like object or null if failed
         *
         * @param {*} [thing]
         *
         * @returns {?Array}
         */
        const toArray = thing => {
          if (!thing) return null;
          if (isArray(thing)) return thing;
          let i = thing.length;
          if (!isNumber(i)) return null;
          const arr = new Array(i);
          while (i-- > 0) {
            arr[i] = thing[i];
          }
          return arr;
        };

        /**
         * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
         * thing passed in is an instance of Uint8Array
         *
         * @param {TypedArray}
         *
         * @returns {Array}
         */
        // eslint-disable-next-line func-names
        const isTypedArray = (TypedArray => {
          // eslint-disable-next-line func-names
          return thing => {
            return TypedArray && thing instanceof TypedArray;
          };
        })(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

        /**
         * For each entry in the object, call the function with the key and value.
         *
         * @param {Object<any, any>} obj - The object to iterate over.
         * @param {Function} fn - The function to call for each entry.
         *
         * @returns {void}
         */
        const forEachEntry = (obj, fn) => {
          const generator = obj && obj[Symbol.iterator];
          const iterator = generator.call(obj);
          let result;
          while ((result = iterator.next()) && !result.done) {
            const pair = result.value;
            fn.call(obj, pair[0], pair[1]);
          }
        };

        /**
         * It takes a regular expression and a string, and returns an array of all the matches
         *
         * @param {string} regExp - The regular expression to match against.
         * @param {string} str - The string to search.
         *
         * @returns {Array<boolean>}
         */
        const matchAll = (regExp, str) => {
          let matches;
          const arr = [];
          while ((matches = regExp.exec(str)) !== null) {
            arr.push(matches);
          }
          return arr;
        };

        /* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
        const isHTMLForm = kindOfTest('HTMLFormElement');
        const toCamelCase = str => {
          return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g, function replacer(m, p1, p2) {
            return p1.toUpperCase() + p2;
          });
        };

        /* Creating a function that will check if an object has a property. */
        const hasOwnProperty = (({
          hasOwnProperty
        }) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

        /**
         * Determine if a value is a RegExp object
         *
         * @param {*} val The value to test
         *
         * @returns {boolean} True if value is a RegExp object, otherwise false
         */
        const isRegExp = kindOfTest('RegExp');
        const reduceDescriptors = (obj, reducer) => {
          const descriptors = Object.getOwnPropertyDescriptors(obj);
          const reducedDescriptors = {};
          forEach(descriptors, (descriptor, name) => {
            let ret;
            if ((ret = reducer(descriptor, name, obj)) !== false) {
              reducedDescriptors[name] = ret || descriptor;
            }
          });
          Object.defineProperties(obj, reducedDescriptors);
        };

        /**
         * Makes all methods read-only
         * @param {Object} obj
         */

        const freezeMethods = obj => {
          reduceDescriptors(obj, (descriptor, name) => {
            // skip restricted props in strict mode
            if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
              return false;
            }
            const value = obj[name];
            if (!isFunction(value)) return;
            descriptor.enumerable = false;
            if ('writable' in descriptor) {
              descriptor.writable = false;
              return;
            }
            if (!descriptor.set) {
              descriptor.set = () => {
                throw Error('Can not rewrite read-only method \'' + name + '\'');
              };
            }
          });
        };
        const toObjectSet = (arrayOrString, delimiter) => {
          const obj = {};
          const define = arr => {
            arr.forEach(value => {
              obj[value] = true;
            });
          };
          isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
          return obj;
        };
        const noop = () => {};
        const toFiniteNumber = (value, defaultValue) => {
          value = +value;
          return Number.isFinite(value) ? value : defaultValue;
        };
        const ALPHA = 'abcdefghijklmnopqrstuvwxyz';
        const DIGIT = '0123456789';
        const ALPHABET = {
          DIGIT,
          ALPHA,
          ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
        };
        const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
          let str = '';
          const length = alphabet.length;
          while (size--) {
            str += alphabet[Math.random() * length | 0];
          }
          return str;
        };

        /**
         * If the thing is a FormData object, return true, otherwise return false.
         *
         * @param {unknown} thing - The thing to check.
         *
         * @returns {boolean}
         */
        function isSpecCompliantForm(thing) {
          return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
        }
        const toJSONObject = obj => {
          const stack = new Array(10);
          const visit = (source, i) => {
            if (isObject(source)) {
              if (stack.indexOf(source) >= 0) {
                return;
              }
              if (!('toJSON' in source)) {
                stack[i] = source;
                const target = isArray(source) ? [] : {};
                forEach(source, (value, key) => {
                  const reducedValue = visit(value, i + 1);
                  !isUndefined(reducedValue) && (target[key] = reducedValue);
                });
                stack[i] = undefined;
                return target;
              }
            }
            return source;
          };
          return visit(obj, 0);
        };
        const isAsyncFn = kindOfTest('AsyncFunction');
        const isThenable = thing => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
        const utils$1 = {
          isArray,
          isArrayBuffer,
          isBuffer,
          isFormData,
          isArrayBufferView,
          isString,
          isNumber,
          isBoolean,
          isObject,
          isPlainObject,
          isUndefined,
          isDate,
          isFile,
          isBlob,
          isRegExp,
          isFunction,
          isStream,
          isURLSearchParams,
          isTypedArray,
          isFileList,
          forEach,
          merge,
          extend,
          trim: trim$1,
          stripBOM,
          inherits,
          toFlatObject,
          kindOf,
          kindOfTest,
          endsWith,
          toArray,
          forEachEntry,
          matchAll,
          isHTMLForm,
          hasOwnProperty,
          hasOwnProp: hasOwnProperty,
          // an alias to avoid ESLint no-prototype-builtins detection
          reduceDescriptors,
          freezeMethods,
          toObjectSet,
          toCamelCase,
          noop,
          toFiniteNumber,
          findKey,
          global: _global,
          isContextDefined,
          ALPHABET,
          generateString,
          isSpecCompliantForm,
          toJSONObject,
          isAsyncFn,
          isThenable
        };

        /**
         * Create an Error with the specified message, config, error code, request and response.
         *
         * @param {string} message The error message.
         * @param {string} [code] The error code (for example, 'ECONNABORTED').
         * @param {Object} [config] The config.
         * @param {Object} [request] The request.
         * @param {Object} [response] The response.
         *
         * @returns {Error} The created error.
         */
        function AxiosError(message, code, config, request, response) {
          Error.call(this);
          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
          } else {
            this.stack = new Error().stack;
          }
          this.message = message;
          this.name = 'AxiosError';
          code && (this.code = code);
          config && (this.config = config);
          request && (this.request = request);
          response && (this.response = response);
        }
        utils$1.inherits(AxiosError, Error, {
          toJSON: function toJSON() {
            return {
              // Standard
              message: this.message,
              name: this.name,
              // Microsoft
              description: this.description,
              number: this.number,
              // Mozilla
              fileName: this.fileName,
              lineNumber: this.lineNumber,
              columnNumber: this.columnNumber,
              stack: this.stack,
              // Axios
              config: utils$1.toJSONObject(this.config),
              code: this.code,
              status: this.response && this.response.status ? this.response.status : null
            };
          }
        });
        const prototype$1 = AxiosError.prototype;
        const descriptors = {};
        ['ERR_BAD_OPTION_VALUE', 'ERR_BAD_OPTION', 'ECONNABORTED', 'ETIMEDOUT', 'ERR_NETWORK', 'ERR_FR_TOO_MANY_REDIRECTS', 'ERR_DEPRECATED', 'ERR_BAD_RESPONSE', 'ERR_BAD_REQUEST', 'ERR_CANCELED', 'ERR_NOT_SUPPORT', 'ERR_INVALID_URL'
        // eslint-disable-next-line func-names
        ].forEach(code => {
          descriptors[code] = {
            value: code
          };
        });
        Object.defineProperties(AxiosError, descriptors);
        Object.defineProperty(prototype$1, 'isAxiosError', {
          value: true
        });

        // eslint-disable-next-line func-names
        AxiosError.from = (error, code, config, request, response, customProps) => {
          const axiosError = Object.create(prototype$1);
          utils$1.toFlatObject(error, axiosError, function filter(obj) {
            return obj !== Error.prototype;
          }, prop => {
            return prop !== 'isAxiosError';
          });
          AxiosError.call(axiosError, error.message, code, config, request, response);
          axiosError.cause = error;
          axiosError.name = error.name;
          customProps && Object.assign(axiosError, customProps);
          return axiosError;
        };

        // eslint-disable-next-line strict
        const httpAdapter = null;

        /**
         * Determines if the given thing is a array or js object.
         *
         * @param {string} thing - The object or array to be visited.
         *
         * @returns {boolean}
         */
        function isVisitable(thing) {
          return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
        }

        /**
         * It removes the brackets from the end of a string
         *
         * @param {string} key - The key of the parameter.
         *
         * @returns {string} the key without the brackets.
         */
        function removeBrackets(key) {
          return utils$1.endsWith(key, '[]') ? key.slice(0, -2) : key;
        }

        /**
         * It takes a path, a key, and a boolean, and returns a string
         *
         * @param {string} path - The path to the current key.
         * @param {string} key - The key of the current object being iterated over.
         * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
         *
         * @returns {string} The path to the current key.
         */
        function renderKey(path, key, dots) {
          if (!path) return key;
          return path.concat(key).map(function each(token, i) {
            // eslint-disable-next-line no-param-reassign
            token = removeBrackets(token);
            return !dots && i ? '[' + token + ']' : token;
          }).join(dots ? '.' : '');
        }

        /**
         * If the array is an array and none of its elements are visitable, then it's a flat array.
         *
         * @param {Array<any>} arr - The array to check
         *
         * @returns {boolean}
         */
        function isFlatArray(arr) {
          return utils$1.isArray(arr) && !arr.some(isVisitable);
        }
        const predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
          return /^is[A-Z]/.test(prop);
        });

        /**
         * Convert a data object to FormData
         *
         * @param {Object} obj
         * @param {?Object} [formData]
         * @param {?Object} [options]
         * @param {Function} [options.visitor]
         * @param {Boolean} [options.metaTokens = true]
         * @param {Boolean} [options.dots = false]
         * @param {?Boolean} [options.indexes = false]
         *
         * @returns {Object}
         **/

        /**
         * It converts an object into a FormData object
         *
         * @param {Object<any, any>} obj - The object to convert to form data.
         * @param {string} formData - The FormData object to append to.
         * @param {Object<string, any>} options
         *
         * @returns
         */
        function toFormData(obj, formData, options) {
          if (!utils$1.isObject(obj)) {
            throw new TypeError('target must be an object');
          }

          // eslint-disable-next-line no-param-reassign
          formData = formData || new FormData();

          // eslint-disable-next-line no-param-reassign
          options = utils$1.toFlatObject(options, {
            metaTokens: true,
            dots: false,
            indexes: false
          }, false, function defined(option, source) {
            // eslint-disable-next-line no-eq-null,eqeqeq
            return !utils$1.isUndefined(source[option]);
          });
          const metaTokens = options.metaTokens;
          // eslint-disable-next-line no-use-before-define
          const visitor = options.visitor || defaultVisitor;
          const dots = options.dots;
          const indexes = options.indexes;
          const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
          const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
          if (!utils$1.isFunction(visitor)) {
            throw new TypeError('visitor must be a function');
          }
          function convertValue(value) {
            if (value === null) return '';
            if (utils$1.isDate(value)) {
              return value.toISOString();
            }
            if (!useBlob && utils$1.isBlob(value)) {
              throw new AxiosError('Blob is not supported. Use a Buffer instead.');
            }
            if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
              return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
            }
            return value;
          }

          /**
           * Default visitor.
           *
           * @param {*} value
           * @param {String|Number} key
           * @param {Array<String|Number>} path
           * @this {FormData}
           *
           * @returns {boolean} return true to visit the each prop of the value recursively
           */
          function defaultVisitor(value, key, path) {
            let arr = value;
            if (value && !path && typeof value === 'object') {
              if (utils$1.endsWith(key, '{}')) {
                // eslint-disable-next-line no-param-reassign
                key = metaTokens ? key : key.slice(0, -2);
                // eslint-disable-next-line no-param-reassign
                value = JSON.stringify(value);
              } else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key, '[]')) && (arr = utils$1.toArray(value))) {
                // eslint-disable-next-line no-param-reassign
                key = removeBrackets(key);
                arr.forEach(function each(el, index) {
                  !(utils$1.isUndefined(el) || el === null) && formData.append(
                  // eslint-disable-next-line no-nested-ternary
                  indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + '[]', convertValue(el));
                });
                return false;
              }
            }
            if (isVisitable(value)) {
              return true;
            }
            formData.append(renderKey(path, key, dots), convertValue(value));
            return false;
          }
          const stack = [];
          const exposedHelpers = Object.assign(predicates, {
            defaultVisitor,
            convertValue,
            isVisitable
          });
          function build(value, path) {
            if (utils$1.isUndefined(value)) return;
            if (stack.indexOf(value) !== -1) {
              throw Error('Circular reference detected in ' + path.join('.'));
            }
            stack.push(value);
            utils$1.forEach(value, function each(el, key) {
              const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(formData, el, utils$1.isString(key) ? key.trim() : key, path, exposedHelpers);
              if (result === true) {
                build(el, path ? path.concat(key) : [key]);
              }
            });
            stack.pop();
          }
          if (!utils$1.isObject(obj)) {
            throw new TypeError('data must be an object');
          }
          build(obj);
          return formData;
        }

        /**
         * It encodes a string by replacing all characters that are not in the unreserved set with
         * their percent-encoded equivalents
         *
         * @param {string} str - The string to encode.
         *
         * @returns {string} The encoded string.
         */
        function encode$1(str) {
          const charMap = {
            '!': '%21',
            "'": '%27',
            '(': '%28',
            ')': '%29',
            '~': '%7E',
            '%20': '+',
            '%00': '\x00'
          };
          return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
            return charMap[match];
          });
        }

        /**
         * It takes a params object and converts it to a FormData object
         *
         * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
         * @param {Object<string, any>} options - The options object passed to the Axios constructor.
         *
         * @returns {void}
         */
        function AxiosURLSearchParams(params, options) {
          this._pairs = [];
          params && toFormData(params, this, options);
        }
        const prototype = AxiosURLSearchParams.prototype;
        prototype.append = function append(name, value) {
          this._pairs.push([name, value]);
        };
        prototype.toString = function toString(encoder) {
          const _encode = encoder ? function (value) {
            return encoder.call(this, value, encode$1);
          } : encode$1;
          return this._pairs.map(function each(pair) {
            return _encode(pair[0]) + '=' + _encode(pair[1]);
          }, '').join('&');
        };

        /**
         * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
         * URI encoded counterparts
         *
         * @param {string} val The value to be encoded.
         *
         * @returns {string} The encoded value.
         */
        function encode(val) {
          return encodeURIComponent(val).replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
        }

        /**
         * Build a URL by appending params to the end
         *
         * @param {string} url The base of the url (e.g., http://www.google.com)
         * @param {object} [params] The params to be appended
         * @param {?object} options
         *
         * @returns {string} The formatted url
         */
        function buildURL(url, params, options) {
          /*eslint no-param-reassign:0*/
          if (!params) {
            return url;
          }
          const _encode = options && options.encode || encode;
          const serializeFn = options && options.serialize;
          let serializedParams;
          if (serializeFn) {
            serializedParams = serializeFn(params, options);
          } else {
            serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
          }
          if (serializedParams) {
            const hashmarkIndex = url.indexOf("#");
            if (hashmarkIndex !== -1) {
              url = url.slice(0, hashmarkIndex);
            }
            url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
          }
          return url;
        }
        class InterceptorManager {
          constructor() {
            this.handlers = [];
          }

          /**
           * Add a new interceptor to the stack
           *
           * @param {Function} fulfilled The function to handle `then` for a `Promise`
           * @param {Function} rejected The function to handle `reject` for a `Promise`
           *
           * @return {Number} An ID used to remove interceptor later
           */
          use(fulfilled, rejected, options) {
            this.handlers.push({
              fulfilled,
              rejected,
              synchronous: options ? options.synchronous : false,
              runWhen: options ? options.runWhen : null
            });
            return this.handlers.length - 1;
          }

          /**
           * Remove an interceptor from the stack
           *
           * @param {Number} id The ID that was returned by `use`
           *
           * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
           */
          eject(id) {
            if (this.handlers[id]) {
              this.handlers[id] = null;
            }
          }

          /**
           * Clear all interceptors from the stack
           *
           * @returns {void}
           */
          clear() {
            if (this.handlers) {
              this.handlers = [];
            }
          }

          /**
           * Iterate over all the registered interceptors
           *
           * This method is particularly useful for skipping over any
           * interceptors that may have become `null` calling `eject`.
           *
           * @param {Function} fn The function to call for each interceptor
           *
           * @returns {void}
           */
          forEach(fn) {
            utils$1.forEach(this.handlers, function forEachHandler(h) {
              if (h !== null) {
                fn(h);
              }
            });
          }
        }
        const InterceptorManager$1 = InterceptorManager;
        const transitionalDefaults = {
          silentJSONParsing: true,
          forcedJSONParsing: true,
          clarifyTimeoutError: false
        };
        const URLSearchParams$1 = typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;
        const FormData$1 = typeof FormData !== 'undefined' ? FormData : null;
        const Blob$1 = typeof Blob !== 'undefined' ? Blob : null;
        const platform$1 = {
          isBrowser: true,
          classes: {
            URLSearchParams: URLSearchParams$1,
            FormData: FormData$1,
            Blob: Blob$1
          },
          protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
        };
        const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';

        /**
         * Determine if we're running in a standard browser environment
         *
         * This allows axios to run in a web worker, and react-native.
         * Both environments support XMLHttpRequest, but not fully standard globals.
         *
         * web workers:
         *  typeof window -> undefined
         *  typeof document -> undefined
         *
         * react-native:
         *  navigator.product -> 'ReactNative'
         * nativescript
         *  navigator.product -> 'NativeScript' or 'NS'
         *
         * @returns {boolean}
         */
        const hasStandardBrowserEnv = (product => {
          return hasBrowserEnv && ['ReactNative', 'NativeScript', 'NS'].indexOf(product) < 0;
        })(typeof navigator !== 'undefined' && navigator.product);

        /**
         * Determine if we're running in a standard browser webWorker environment
         *
         * Although the `isStandardBrowserEnv` method indicates that
         * `allows axios to run in a web worker`, the WebWorker will still be
         * filtered out due to its judgment standard
         * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
         * This leads to a problem when axios post `FormData` in webWorker
         */
        const hasStandardBrowserWebWorkerEnv = (() => {
          return typeof WorkerGlobalScope !== 'undefined' &&
          // eslint-disable-next-line no-undef
          self instanceof WorkerGlobalScope && typeof self.importScripts === 'function';
        })();
        const utils = /*#__PURE__*/Object.freeze( /*#__PURE__*/Object.defineProperty({
          __proto__: null,
          hasBrowserEnv,
          hasStandardBrowserEnv,
          hasStandardBrowserWebWorkerEnv
        }, Symbol.toStringTag, {
          value: 'Module'
        }));
        const platform = _objectSpread3(_objectSpread3({}, utils), platform$1);
        function toURLEncodedForm(data, options) {
          return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
            visitor: function visitor(value, key, path, helpers) {
              if (platform.isNode && utils$1.isBuffer(value)) {
                this.append(key, value.toString('base64'));
                return false;
              }
              return helpers.defaultVisitor.apply(this, arguments);
            }
          }, options));
        }

        /**
         * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
         *
         * @param {string} name - The name of the property to get.
         *
         * @returns An array of strings.
         */
        function parsePropPath(name) {
          // foo[x][y][z]
          // foo.x.y.z
          // foo-x-y-z
          // foo x y z
          return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
            return match[0] === '[]' ? '' : match[1] || match[0];
          });
        }

        /**
         * Convert an array to an object.
         *
         * @param {Array<any>} arr - The array to convert to an object.
         *
         * @returns An object with the same keys and values as the array.
         */
        function arrayToObject(arr) {
          const obj = {};
          const keys = Object.keys(arr);
          let i;
          const len = keys.length;
          let key;
          for (i = 0; i < len; i++) {
            key = keys[i];
            obj[key] = arr[key];
          }
          return obj;
        }

        /**
         * It takes a FormData object and returns a JavaScript object
         *
         * @param {string} formData The FormData object to convert to JSON.
         *
         * @returns {Object<string, any> | null} The converted object.
         */
        function formDataToJSON(formData) {
          function buildPath(path, value, target, index) {
            let name = path[index++];
            const isNumericKey = Number.isFinite(+name);
            const isLast = index >= path.length;
            name = !name && utils$1.isArray(target) ? target.length : name;
            if (isLast) {
              if (utils$1.hasOwnProp(target, name)) {
                target[name] = [target[name], value];
              } else {
                target[name] = value;
              }
              return !isNumericKey;
            }
            if (!target[name] || !utils$1.isObject(target[name])) {
              target[name] = [];
            }
            const result = buildPath(path, value, target[name], index);
            if (result && utils$1.isArray(target[name])) {
              target[name] = arrayToObject(target[name]);
            }
            return !isNumericKey;
          }
          if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
            const obj = {};
            utils$1.forEachEntry(formData, (name, value) => {
              buildPath(parsePropPath(name), value, obj, 0);
            });
            return obj;
          }
          return null;
        }

        /**
         * It takes a string, tries to parse it, and if it fails, it returns the stringified version
         * of the input
         *
         * @param {any} rawValue - The value to be stringified.
         * @param {Function} parser - A function that parses a string into a JavaScript object.
         * @param {Function} encoder - A function that takes a value and returns a string.
         *
         * @returns {string} A stringified version of the rawValue.
         */
        function stringifySafely(rawValue, parser, encoder) {
          if (utils$1.isString(rawValue)) {
            try {
              (parser || JSON.parse)(rawValue);
              return utils$1.trim(rawValue);
            } catch (e) {
              if (e.name !== 'SyntaxError') {
                throw e;
              }
            }
          }
          return (encoder || JSON.stringify)(rawValue);
        }
        const defaults = {
          transitional: transitionalDefaults,
          adapter: ['xhr', 'http'],
          transformRequest: [function transformRequest(data, headers) {
            const contentType = headers.getContentType() || '';
            const hasJSONContentType = contentType.indexOf('application/json') > -1;
            const isObjectPayload = utils$1.isObject(data);
            if (isObjectPayload && utils$1.isHTMLForm(data)) {
              data = new FormData(data);
            }
            const isFormData = utils$1.isFormData(data);
            if (isFormData) {
              if (!hasJSONContentType) {
                return data;
              }
              return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
            }
            if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data)) {
              return data;
            }
            if (utils$1.isArrayBufferView(data)) {
              return data.buffer;
            }
            if (utils$1.isURLSearchParams(data)) {
              headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
              return data.toString();
            }
            let isFileList;
            if (isObjectPayload) {
              if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
                return toURLEncodedForm(data, this.formSerializer).toString();
              }
              if ((isFileList = utils$1.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
                const _FormData = this.env && this.env.FormData;
                return toFormData(isFileList ? {
                  'files[]': data
                } : data, _FormData && new _FormData(), this.formSerializer);
              }
            }
            if (isObjectPayload || hasJSONContentType) {
              headers.setContentType('application/json', false);
              return stringifySafely(data);
            }
            return data;
          }],
          transformResponse: [function transformResponse(data) {
            const transitional = this.transitional || defaults.transitional;
            const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
            const JSONRequested = this.responseType === 'json';
            if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
              const silentJSONParsing = transitional && transitional.silentJSONParsing;
              const strictJSONParsing = !silentJSONParsing && JSONRequested;
              try {
                return JSON.parse(data);
              } catch (e) {
                if (strictJSONParsing) {
                  if (e.name === 'SyntaxError') {
                    throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
                  }
                  throw e;
                }
              }
            }
            return data;
          }],
          /**
           * A timeout in milliseconds to abort a request. If set to 0 (default) a
           * timeout is not created.
           */
          timeout: 0,
          xsrfCookieName: 'XSRF-TOKEN',
          xsrfHeaderName: 'X-XSRF-TOKEN',
          maxContentLength: -1,
          maxBodyLength: -1,
          env: {
            FormData: platform.classes.FormData,
            Blob: platform.classes.Blob
          },
          validateStatus: function validateStatus(status) {
            return status >= 200 && status < 300;
          },
          headers: {
            common: {
              'Accept': 'application/json, text/plain, */*',
              'Content-Type': undefined
            }
          }
        };
        utils$1.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], method => {
          defaults.headers[method] = {};
        });
        const defaults$1 = defaults;

        // RawAxiosHeaders whose duplicates are ignored by node
        // c.f. https://nodejs.org/api/http.html#http_message_headers
        const ignoreDuplicateOf = utils$1.toObjectSet(['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent']);

        /**
         * Parse headers into an object
         *
         * ```
         * Date: Wed, 27 Aug 2014 08:58:49 GMT
         * Content-Type: application/json
         * Connection: keep-alive
         * Transfer-Encoding: chunked
         * ```
         *
         * @param {String} rawHeaders Headers needing to be parsed
         *
         * @returns {Object} Headers parsed into an object
         */
        const parseHeaders = rawHeaders => {
          const parsed = {};
          let key;
          let val;
          let i;
          rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
            i = line.indexOf(':');
            key = line.substring(0, i).trim().toLowerCase();
            val = line.substring(i + 1).trim();
            if (!key || parsed[key] && ignoreDuplicateOf[key]) {
              return;
            }
            if (key === 'set-cookie') {
              if (parsed[key]) {
                parsed[key].push(val);
              } else {
                parsed[key] = [val];
              }
            } else {
              parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
            }
          });
          return parsed;
        };
        const $internals = Symbol('internals');
        function normalizeHeader(header) {
          return header && String(header).trim().toLowerCase();
        }
        function normalizeValue(value) {
          if (value === false || value == null) {
            return value;
          }
          return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
        }
        function parseTokens(str) {
          const tokens = Object.create(null);
          const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
          let match;
          while (match = tokensRE.exec(str)) {
            tokens[match[1]] = match[2];
          }
          return tokens;
        }
        const isValidHeaderName = str => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
        function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
          if (utils$1.isFunction(filter)) {
            return filter.call(this, value, header);
          }
          if (isHeaderNameFilter) {
            value = header;
          }
          if (!utils$1.isString(value)) return;
          if (utils$1.isString(filter)) {
            return value.indexOf(filter) !== -1;
          }
          if (utils$1.isRegExp(filter)) {
            return filter.test(value);
          }
        }
        function formatHeader(header) {
          return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
            return char.toUpperCase() + str;
          });
        }
        function buildAccessors(obj, header) {
          const accessorName = utils$1.toCamelCase(' ' + header);
          ['get', 'set', 'has'].forEach(methodName => {
            Object.defineProperty(obj, methodName + accessorName, {
              value: function value(arg1, arg2, arg3) {
                return this[methodName].call(this, header, arg1, arg2, arg3);
              },
              configurable: true
            });
          });
        }
        class AxiosHeaders {
          constructor(headers) {
            headers && this.set(headers);
          }
          set(header, valueOrRewrite, rewrite) {
            const self = this;
            function setHeader(_value, _header, _rewrite) {
              const lHeader = normalizeHeader(_header);
              if (!lHeader) {
                throw new Error('header name must be a non-empty string');
              }
              const key = utils$1.findKey(self, lHeader);
              if (!key || self[key] === undefined || _rewrite === true || _rewrite === undefined && self[key] !== false) {
                self[key || _header] = normalizeValue(_value);
              }
            }
            const setHeaders = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
            if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
              setHeaders(header, valueOrRewrite);
            } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
              setHeaders(parseHeaders(header), valueOrRewrite);
            } else {
              header != null && setHeader(valueOrRewrite, header, rewrite);
            }
            return this;
          }
          get(header, parser) {
            header = normalizeHeader(header);
            if (header) {
              const key = utils$1.findKey(this, header);
              if (key) {
                const value = this[key];
                if (!parser) {
                  return value;
                }
                if (parser === true) {
                  return parseTokens(value);
                }
                if (utils$1.isFunction(parser)) {
                  return parser.call(this, value, key);
                }
                if (utils$1.isRegExp(parser)) {
                  return parser.exec(value);
                }
                throw new TypeError('parser must be boolean|regexp|function');
              }
            }
          }
          has(header, matcher) {
            header = normalizeHeader(header);
            if (header) {
              const key = utils$1.findKey(this, header);
              return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
            }
            return false;
          }
          delete(header, matcher) {
            const self = this;
            let deleted = false;
            function deleteHeader(_header) {
              _header = normalizeHeader(_header);
              if (_header) {
                const key = utils$1.findKey(self, _header);
                if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
                  delete self[key];
                  deleted = true;
                }
              }
            }
            if (utils$1.isArray(header)) {
              header.forEach(deleteHeader);
            } else {
              deleteHeader(header);
            }
            return deleted;
          }
          clear(matcher) {
            const keys = Object.keys(this);
            let i = keys.length;
            let deleted = false;
            while (i--) {
              const key = keys[i];
              if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
                delete this[key];
                deleted = true;
              }
            }
            return deleted;
          }
          normalize(format) {
            const self = this;
            const headers = {};
            utils$1.forEach(this, (value, header) => {
              const key = utils$1.findKey(headers, header);
              if (key) {
                self[key] = normalizeValue(value);
                delete self[header];
                return;
              }
              const normalized = format ? formatHeader(header) : String(header).trim();
              if (normalized !== header) {
                delete self[header];
              }
              self[normalized] = normalizeValue(value);
              headers[normalized] = true;
            });
            return this;
          }
          concat(...targets) {
            return this.constructor.concat(this, ...targets);
          }
          toJSON(asStrings) {
            const obj = Object.create(null);
            utils$1.forEach(this, (value, header) => {
              value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(', ') : value);
            });
            return obj;
          }
          [Symbol.iterator]() {
            return Object.entries(this.toJSON())[Symbol.iterator]();
          }
          toString() {
            return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
          }
          get [Symbol.toStringTag]() {
            return 'AxiosHeaders';
          }
          static from(thing) {
            return thing instanceof this ? thing : new this(thing);
          }
          static concat(first, ...targets) {
            const computed = new this(first);
            targets.forEach(target => computed.set(target));
            return computed;
          }
          static accessor(header) {
            const internals = this[$internals] = this[$internals] = {
              accessors: {}
            };
            const accessors = internals.accessors;
            const prototype = this.prototype;
            function defineAccessor(_header) {
              const lHeader = normalizeHeader(_header);
              if (!accessors[lHeader]) {
                buildAccessors(prototype, _header);
                accessors[lHeader] = true;
              }
            }
            utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
            return this;
          }
        }
        AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

        // reserved names hotfix
        utils$1.reduceDescriptors(AxiosHeaders.prototype, ({
          value
        }, key) => {
          let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
          return {
            get: () => value,
            set(headerValue) {
              this[mapped] = headerValue;
            }
          };
        });
        utils$1.freezeMethods(AxiosHeaders);
        const AxiosHeaders$1 = AxiosHeaders;

        /**
         * Transform the data for a request or a response
         *
         * @param {Array|Function} fns A single function or Array of functions
         * @param {?Object} response The response object
         *
         * @returns {*} The resulting transformed data
         */
        function transformData(fns, response) {
          const config = this || defaults$1;
          const context = response || config;
          const headers = AxiosHeaders$1.from(context.headers);
          let data = context.data;
          utils$1.forEach(fns, function transform(fn) {
            data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
          });
          headers.normalize();
          return data;
        }
        function isCancel(value) {
          return !!(value && value.__CANCEL__);
        }

        /**
         * A `CanceledError` is an object that is thrown when an operation is canceled.
         *
         * @param {string=} message The message.
         * @param {Object=} config The config.
         * @param {Object=} request The request.
         *
         * @returns {CanceledError} The created error.
         */
        function CanceledError(message, config, request) {
          // eslint-disable-next-line no-eq-null,eqeqeq
          AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);
          this.name = 'CanceledError';
        }
        utils$1.inherits(CanceledError, AxiosError, {
          __CANCEL__: true
        });

        /**
         * Resolve or reject a Promise based on response status.
         *
         * @param {Function} resolve A function that resolves the promise.
         * @param {Function} reject A function that rejects the promise.
         * @param {object} response The response.
         *
         * @returns {object} The response.
         */
        function settle(resolve, reject, response) {
          const validateStatus = response.config.validateStatus;
          if (!response.status || !validateStatus || validateStatus(response.status)) {
            resolve(response);
          } else {
            reject(new AxiosError('Request failed with status code ' + response.status, [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4], response.config, response.request, response));
          }
        }
        const cookies = platform.hasStandardBrowserEnv ?
        // Standard browser envs support document.cookie
        {
          write(name, value, expires, path, domain, secure) {
            const cookie = [name + '=' + encodeURIComponent(value)];
            utils$1.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());
            utils$1.isString(path) && cookie.push('path=' + path);
            utils$1.isString(domain) && cookie.push('domain=' + domain);
            secure === true && cookie.push('secure');
            document.cookie = cookie.join('; ');
          },
          read(name) {
            const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
            return match ? decodeURIComponent(match[3]) : null;
          },
          remove(name) {
            this.write(name, '', Date.now() - 86400000);
          }
        } :
        // Non-standard browser env (web workers, react-native) lack needed support.
        {
          write() {},
          read() {
            return null;
          },
          remove() {}
        };

        /**
         * Determines whether the specified URL is absolute
         *
         * @param {string} url The URL to test
         *
         * @returns {boolean} True if the specified URL is absolute, otherwise false
         */
        function isAbsoluteURL(url) {
          // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
          // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
          // by any combination of letters, digits, plus, period, or hyphen.
          return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
        }

        /**
         * Creates a new URL by combining the specified URLs
         *
         * @param {string} baseURL The base URL
         * @param {string} relativeURL The relative URL
         *
         * @returns {string} The combined URL
         */
        function combineURLs(baseURL, relativeURL) {
          return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
        }

        /**
         * Creates a new URL by combining the baseURL with the requestedURL,
         * only when the requestedURL is not already an absolute URL.
         * If the requestURL is absolute, this function returns the requestedURL untouched.
         *
         * @param {string} baseURL The base URL
         * @param {string} requestedURL Absolute or relative URL to combine
         *
         * @returns {string} The combined full path
         */
        function buildFullPath(baseURL, requestedURL) {
          if (baseURL && !isAbsoluteURL(requestedURL)) {
            return combineURLs(baseURL, requestedURL);
          }
          return requestedURL;
        }
        const isURLSameOrigin = platform.hasStandardBrowserEnv ?
        // Standard browser envs have full support of the APIs needed to test
        // whether the request URL is of the same origin as current location.
        function standardBrowserEnv() {
          const msie = /(msie|trident)/i.test(navigator.userAgent);
          const urlParsingNode = document.createElement('a');
          let originURL;

          /**
          * Parse a URL to discover its components
          *
          * @param {String} url The URL to be parsed
          * @returns {Object}
          */
          function resolveURL(url) {
            let href = url;
            if (msie) {
              // IE needs attribute set twice to normalize properties
              urlParsingNode.setAttribute('href', href);
              href = urlParsingNode.href;
            }
            urlParsingNode.setAttribute('href', href);

            // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
            return {
              href: urlParsingNode.href,
              protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
              host: urlParsingNode.host,
              search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
              hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
              hostname: urlParsingNode.hostname,
              port: urlParsingNode.port,
              pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
            };
          }
          originURL = resolveURL(window.location.href);

          /**
          * Determine if a URL shares the same origin as the current location
          *
          * @param {String} requestURL The URL to test
          * @returns {boolean} True if URL shares the same origin, otherwise false
          */
          return function isURLSameOrigin(requestURL) {
            const parsed = utils$1.isString(requestURL) ? resolveURL(requestURL) : requestURL;
            return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
          };
        }() :
        // Non standard browser envs (web workers, react-native) lack needed support.
        function nonStandardBrowserEnv() {
          return function isURLSameOrigin() {
            return true;
          };
        }();
        function parseProtocol(url) {
          const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
          return match && match[1] || '';
        }

        /**
         * Calculate data maxRate
         * @param {Number} [samplesCount= 10]
         * @param {Number} [min= 1000]
         * @returns {Function}
         */
        function speedometer(samplesCount, min) {
          samplesCount = samplesCount || 10;
          const bytes = new Array(samplesCount);
          const timestamps = new Array(samplesCount);
          let head = 0;
          let tail = 0;
          let firstSampleTS;
          min = min !== undefined ? min : 1000;
          return function push(chunkLength) {
            const now = Date.now();
            const startedAt = timestamps[tail];
            if (!firstSampleTS) {
              firstSampleTS = now;
            }
            bytes[head] = chunkLength;
            timestamps[head] = now;
            let i = tail;
            let bytesCount = 0;
            while (i !== head) {
              bytesCount += bytes[i++];
              i = i % samplesCount;
            }
            head = (head + 1) % samplesCount;
            if (head === tail) {
              tail = (tail + 1) % samplesCount;
            }
            if (now - firstSampleTS < min) {
              return;
            }
            const passed = startedAt && now - startedAt;
            return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
          };
        }
        function progressEventReducer(listener, isDownloadStream) {
          let bytesNotified = 0;
          const _speedometer = speedometer(50, 250);
          return e => {
            const loaded = e.loaded;
            const total = e.lengthComputable ? e.total : undefined;
            const progressBytes = loaded - bytesNotified;
            const rate = _speedometer(progressBytes);
            const inRange = loaded <= total;
            bytesNotified = loaded;
            const data = {
              loaded,
              total,
              progress: total ? loaded / total : undefined,
              bytes: progressBytes,
              rate: rate ? rate : undefined,
              estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
              event: e
            };
            data[isDownloadStream ? 'download' : 'upload'] = true;
            listener(data);
          };
        }
        const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';
        const xhrAdapter = isXHRAdapterSupported && function (config) {
          return new Promise(function dispatchXhrRequest(resolve, reject) {
            let requestData = config.data;
            const requestHeaders = AxiosHeaders$1.from(config.headers).normalize();
            let responseType = config.responseType,
              withXSRFToken = config.withXSRFToken;
            let onCanceled;
            function done() {
              if (config.cancelToken) {
                config.cancelToken.unsubscribe(onCanceled);
              }
              if (config.signal) {
                config.signal.removeEventListener('abort', onCanceled);
              }
            }
            let contentType;
            if (utils$1.isFormData(requestData)) {
              if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
                requestHeaders.setContentType(false); // Let the browser set it
              } else if ((contentType = requestHeaders.getContentType()) !== false) {
                // fix semicolon duplication issue for ReactNative FormData implementation
                const _ref16 = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [],
                  _ref17 = _toArray2(_ref16),
                  type = _ref17[0],
                  tokens = _ref17.slice(1);
                requestHeaders.setContentType([type || 'multipart/form-data', ...tokens].join('; '));
              }
            }
            let request = new XMLHttpRequest();

            // HTTP basic authentication
            if (config.auth) {
              const username = config.auth.username || '';
              const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
              requestHeaders.set('Authorization', 'Basic ' + btoa(username + ':' + password));
            }
            const fullPath = buildFullPath(config.baseURL, config.url);
            request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

            // Set the request timeout in MS
            request.timeout = config.timeout;
            function onloadend() {
              if (!request) {
                return;
              }
              // Prepare the response
              const responseHeaders = AxiosHeaders$1.from('getAllResponseHeaders' in request && request.getAllResponseHeaders());
              const responseData = !responseType || responseType === 'text' || responseType === 'json' ? request.responseText : request.response;
              const response = {
                data: responseData,
                status: request.status,
                statusText: request.statusText,
                headers: responseHeaders,
                config,
                request
              };
              settle(function _resolve(value) {
                resolve(value);
                done();
              }, function _reject(err) {
                reject(err);
                done();
              }, response);

              // Clean up request
              request = null;
            }
            if ('onloadend' in request) {
              // Use onloadend if available
              request.onloadend = onloadend;
            } else {
              // Listen for ready state to emulate onloadend
              request.onreadystatechange = function handleLoad() {
                if (!request || request.readyState !== 4) {
                  return;
                }

                // The request errored out and we didn't get a response, this will be
                // handled by onerror instead
                // With one exception: request that using file: protocol, most browsers
                // will return status as 0 even though it's a successful request
                if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
                  return;
                }
                // readystate handler is calling before onerror or ontimeout handlers,
                // so we should call onloadend on the next 'tick'
                setTimeout(onloadend);
              };
            }

            // Handle browser request cancellation (as opposed to a manual cancellation)
            request.onabort = function handleAbort() {
              if (!request) {
                return;
              }
              reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));

              // Clean up request
              request = null;
            };

            // Handle low level network errors
            request.onerror = function handleError() {
              // Real errors are hidden from us by the browser
              // onerror should only fire if it's a network error
              reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));

              // Clean up request
              request = null;
            };

            // Handle timeout
            request.ontimeout = function handleTimeout() {
              let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
              const transitional = config.transitional || transitionalDefaults;
              if (config.timeoutErrorMessage) {
                timeoutErrorMessage = config.timeoutErrorMessage;
              }
              reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, request));

              // Clean up request
              request = null;
            };

            // Add xsrf header
            // This is only done if running in a standard browser environment.
            // Specifically not if we're in a web worker, or react-native.
            if (platform.hasStandardBrowserEnv) {
              withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(config));
              if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(fullPath)) {
                // Add xsrf header
                const xsrfValue = config.xsrfHeaderName && config.xsrfCookieName && cookies.read(config.xsrfCookieName);
                if (xsrfValue) {
                  requestHeaders.set(config.xsrfHeaderName, xsrfValue);
                }
              }
            }

            // Remove Content-Type if data is undefined
            requestData === undefined && requestHeaders.setContentType(null);

            // Add headers to the request
            if ('setRequestHeader' in request) {
              utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
                request.setRequestHeader(key, val);
              });
            }

            // Add withCredentials to request if needed
            if (!utils$1.isUndefined(config.withCredentials)) {
              request.withCredentials = !!config.withCredentials;
            }

            // Add responseType to request if needed
            if (responseType && responseType !== 'json') {
              request.responseType = config.responseType;
            }

            // Handle progress if needed
            if (typeof config.onDownloadProgress === 'function') {
              request.addEventListener('progress', progressEventReducer(config.onDownloadProgress, true));
            }

            // Not all browsers support upload events
            if (typeof config.onUploadProgress === 'function' && request.upload) {
              request.upload.addEventListener('progress', progressEventReducer(config.onUploadProgress));
            }
            if (config.cancelToken || config.signal) {
              // Handle cancellation
              // eslint-disable-next-line func-names
              onCanceled = cancel => {
                if (!request) {
                  return;
                }
                reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
                request.abort();
                request = null;
              };
              config.cancelToken && config.cancelToken.subscribe(onCanceled);
              if (config.signal) {
                config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
              }
            }
            const protocol = parseProtocol(fullPath);
            if (protocol && platform.protocols.indexOf(protocol) === -1) {
              reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));
              return;
            }

            // Send the request
            request.send(requestData || null);
          });
        };
        const knownAdapters = {
          http: httpAdapter,
          xhr: xhrAdapter
        };
        utils$1.forEach(knownAdapters, (fn, value) => {
          if (fn) {
            try {
              Object.defineProperty(fn, 'name', {
                value
              });
            } catch (e) {
              // eslint-disable-next-line no-empty
            }
            Object.defineProperty(fn, 'adapterName', {
              value
            });
          }
        });
        const renderReason = reason => `- ${reason}`;
        const isResolvedHandle = adapter => utils$1.isFunction(adapter) || adapter === null || adapter === false;
        const adapters = {
          getAdapter: adapters => {
            adapters = utils$1.isArray(adapters) ? adapters : [adapters];
            const _adapters = adapters,
              length = _adapters.length;
            let nameOrAdapter;
            let adapter;
            const rejectedReasons = {};
            for (let i = 0; i < length; i++) {
              nameOrAdapter = adapters[i];
              let id;
              adapter = nameOrAdapter;
              if (!isResolvedHandle(nameOrAdapter)) {
                adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
                if (adapter === undefined) {
                  throw new AxiosError(`Unknown adapter '${id}'`);
                }
              }
              if (adapter) {
                break;
              }
              rejectedReasons[id || '#' + i] = adapter;
            }
            if (!adapter) {
              const reasons = Object.entries(rejectedReasons).map(([id, state]) => `adapter ${id} ` + (state === false ? 'is not supported by the environment' : 'is not available in the build'));
              let s = length ? reasons.length > 1 ? 'since :\n' + reasons.map(renderReason).join('\n') : ' ' + renderReason(reasons[0]) : 'as no adapter specified';
              throw new AxiosError(`There is no suitable adapter to dispatch the request ` + s, 'ERR_NOT_SUPPORT');
            }
            return adapter;
          },
          adapters: knownAdapters
        };

        /**
         * Throws a `CanceledError` if cancellation has been requested.
         *
         * @param {Object} config The config that is to be used for the request
         *
         * @returns {void}
         */
        function throwIfCancellationRequested(config) {
          if (config.cancelToken) {
            config.cancelToken.throwIfRequested();
          }
          if (config.signal && config.signal.aborted) {
            throw new CanceledError(null, config);
          }
        }

        /**
         * Dispatch a request to the server using the configured adapter.
         *
         * @param {object} config The config that is to be used for the request
         *
         * @returns {Promise} The Promise to be fulfilled
         */
        function dispatchRequest(config) {
          throwIfCancellationRequested(config);
          config.headers = AxiosHeaders$1.from(config.headers);

          // Transform request data
          config.data = transformData.call(config, config.transformRequest);
          if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
            config.headers.setContentType('application/x-www-form-urlencoded', false);
          }
          const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);
          return adapter(config).then(function onAdapterResolution(response) {
            throwIfCancellationRequested(config);

            // Transform response data
            response.data = transformData.call(config, config.transformResponse, response);
            response.headers = AxiosHeaders$1.from(response.headers);
            return response;
          }, function onAdapterRejection(reason) {
            if (!isCancel(reason)) {
              throwIfCancellationRequested(config);

              // Transform response data
              if (reason && reason.response) {
                reason.response.data = transformData.call(config, config.transformResponse, reason.response);
                reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
              }
            }
            return Promise.reject(reason);
          });
        }
        const headersToObject = thing => thing instanceof AxiosHeaders$1 ? thing.toJSON() : thing;

        /**
         * Config-specific merge-function which creates a new config-object
         * by merging two configuration objects together.
         *
         * @param {Object} config1
         * @param {Object} config2
         *
         * @returns {Object} New object resulting from merging config2 to config1
         */
        function mergeConfig(config1, config2) {
          // eslint-disable-next-line no-param-reassign
          config2 = config2 || {};
          const config = {};
          function getMergedValue(target, source, caseless) {
            if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
              return utils$1.merge.call({
                caseless
              }, target, source);
            } else if (utils$1.isPlainObject(source)) {
              return utils$1.merge({}, source);
            } else if (utils$1.isArray(source)) {
              return source.slice();
            }
            return source;
          }

          // eslint-disable-next-line consistent-return
          function mergeDeepProperties(a, b, caseless) {
            if (!utils$1.isUndefined(b)) {
              return getMergedValue(a, b, caseless);
            } else if (!utils$1.isUndefined(a)) {
              return getMergedValue(undefined, a, caseless);
            }
          }

          // eslint-disable-next-line consistent-return
          function valueFromConfig2(a, b) {
            if (!utils$1.isUndefined(b)) {
              return getMergedValue(undefined, b);
            }
          }

          // eslint-disable-next-line consistent-return
          function defaultToConfig2(a, b) {
            if (!utils$1.isUndefined(b)) {
              return getMergedValue(undefined, b);
            } else if (!utils$1.isUndefined(a)) {
              return getMergedValue(undefined, a);
            }
          }

          // eslint-disable-next-line consistent-return
          function mergeDirectKeys(a, b, prop) {
            if (prop in config2) {
              return getMergedValue(a, b);
            } else if (prop in config1) {
              return getMergedValue(undefined, a);
            }
          }
          const mergeMap = {
            url: valueFromConfig2,
            method: valueFromConfig2,
            data: valueFromConfig2,
            baseURL: defaultToConfig2,
            transformRequest: defaultToConfig2,
            transformResponse: defaultToConfig2,
            paramsSerializer: defaultToConfig2,
            timeout: defaultToConfig2,
            timeoutMessage: defaultToConfig2,
            withCredentials: defaultToConfig2,
            withXSRFToken: defaultToConfig2,
            adapter: defaultToConfig2,
            responseType: defaultToConfig2,
            xsrfCookieName: defaultToConfig2,
            xsrfHeaderName: defaultToConfig2,
            onUploadProgress: defaultToConfig2,
            onDownloadProgress: defaultToConfig2,
            decompress: defaultToConfig2,
            maxContentLength: defaultToConfig2,
            maxBodyLength: defaultToConfig2,
            beforeRedirect: defaultToConfig2,
            transport: defaultToConfig2,
            httpAgent: defaultToConfig2,
            httpsAgent: defaultToConfig2,
            cancelToken: defaultToConfig2,
            socketPath: defaultToConfig2,
            responseEncoding: defaultToConfig2,
            validateStatus: mergeDirectKeys,
            headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
          };
          utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
            const merge = mergeMap[prop] || mergeDeepProperties;
            const configValue = merge(config1[prop], config2[prop], prop);
            utils$1.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
          });
          return config;
        }
        const VERSION = "1.6.2";
        const validators$1 = {};

        // eslint-disable-next-line func-names
        ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
          validators$1[type] = function validator(thing) {
            return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
          };
        });
        const deprecatedWarnings = {};

        /**
         * Transitional option validator
         *
         * @param {function|boolean?} validator - set to false if the transitional option has been removed
         * @param {string?} version - deprecated version / removed since version
         * @param {string?} message - some message with additional info
         *
         * @returns {function}
         */
        validators$1.transitional = function transitional(validator, version, message) {
          function formatMessage(opt, desc) {
            return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
          }

          // eslint-disable-next-line func-names
          return (value, opt, opts) => {
            if (validator === false) {
              throw new AxiosError(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')), AxiosError.ERR_DEPRECATED);
            }
            if (version && !deprecatedWarnings[opt]) {
              deprecatedWarnings[opt] = true;
              // eslint-disable-next-line no-console
              console.warn(formatMessage(opt, ' has been deprecated since v' + version + ' and will be removed in the near future'));
            }
            return validator ? validator(value, opt, opts) : true;
          };
        };

        /**
         * Assert object's properties type
         *
         * @param {object} options
         * @param {object} schema
         * @param {boolean?} allowUnknown
         *
         * @returns {object}
         */

        function assertOptions(options, schema, allowUnknown) {
          if (typeof options !== 'object') {
            throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);
          }
          const keys = Object.keys(options);
          let i = keys.length;
          while (i-- > 0) {
            const opt = keys[i];
            const validator = schema[opt];
            if (validator) {
              const value = options[opt];
              const result = value === undefined || validator(value, opt, options);
              if (result !== true) {
                throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);
              }
              continue;
            }
            if (allowUnknown !== true) {
              throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);
            }
          }
        }
        const validator = {
          assertOptions,
          validators: validators$1
        };
        const validators = validator.validators;

        /**
         * Create a new instance of Axios
         *
         * @param {Object} instanceConfig The default config for the instance
         *
         * @return {Axios} A new instance of Axios
         */
        class Axios {
          constructor(instanceConfig) {
            this.defaults = instanceConfig;
            this.interceptors = {
              request: new InterceptorManager$1(),
              response: new InterceptorManager$1()
            };
          }

          /**
           * Dispatch a request
           *
           * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
           * @param {?Object} config
           *
           * @returns {Promise} The Promise to be fulfilled
           */
          request(configOrUrl, config) {
            /*eslint no-param-reassign:0*/
            // Allow for axios('example/url'[, config]) a la fetch API
            if (typeof configOrUrl === 'string') {
              config = config || {};
              config.url = configOrUrl;
            } else {
              config = configOrUrl || {};
            }
            config = mergeConfig(this.defaults, config);
            const _config = config,
              transitional = _config.transitional,
              paramsSerializer = _config.paramsSerializer,
              headers = _config.headers;
            if (transitional !== undefined) {
              validator.assertOptions(transitional, {
                silentJSONParsing: validators.transitional(validators.boolean),
                forcedJSONParsing: validators.transitional(validators.boolean),
                clarifyTimeoutError: validators.transitional(validators.boolean)
              }, false);
            }
            if (paramsSerializer != null) {
              if (utils$1.isFunction(paramsSerializer)) {
                config.paramsSerializer = {
                  serialize: paramsSerializer
                };
              } else {
                validator.assertOptions(paramsSerializer, {
                  encode: validators.function,
                  serialize: validators.function
                }, true);
              }
            }

            // Set config.method
            config.method = (config.method || this.defaults.method || 'get').toLowerCase();

            // Flatten headers
            let contextHeaders = headers && utils$1.merge(headers.common, headers[config.method]);
            headers && utils$1.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], method => {
              delete headers[method];
            });
            config.headers = AxiosHeaders$1.concat(contextHeaders, headers);

            // filter out skipped interceptors
            const requestInterceptorChain = [];
            let synchronousRequestInterceptors = true;
            this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
              if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
                return;
              }
              synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
              requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
            });
            const responseInterceptorChain = [];
            this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
              responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
            });
            let promise;
            let i = 0;
            let len;
            if (!synchronousRequestInterceptors) {
              const chain = [dispatchRequest.bind(this), undefined];
              chain.unshift.apply(chain, requestInterceptorChain);
              chain.push.apply(chain, responseInterceptorChain);
              len = chain.length;
              promise = Promise.resolve(config);
              while (i < len) {
                promise = promise.then(chain[i++], chain[i++]);
              }
              return promise;
            }
            len = requestInterceptorChain.length;
            let newConfig = config;
            i = 0;
            while (i < len) {
              const onFulfilled = requestInterceptorChain[i++];
              const onRejected = requestInterceptorChain[i++];
              try {
                newConfig = onFulfilled(newConfig);
              } catch (error) {
                onRejected.call(this, error);
                break;
              }
            }
            try {
              promise = dispatchRequest.call(this, newConfig);
            } catch (error) {
              return Promise.reject(error);
            }
            i = 0;
            len = responseInterceptorChain.length;
            while (i < len) {
              promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
            }
            return promise;
          }
          getUri(config) {
            config = mergeConfig(this.defaults, config);
            const fullPath = buildFullPath(config.baseURL, config.url);
            return buildURL(fullPath, config.params, config.paramsSerializer);
          }
        }

        // Provide aliases for supported request methods
        utils$1.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
          /*eslint func-names:0*/
          Axios.prototype[method] = function (url, config) {
            return this.request(mergeConfig(config || {}, {
              method,
              url,
              data: (config || {}).data
            }));
          };
        });
        utils$1.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
          /*eslint func-names:0*/

          function generateHTTPMethod(isForm) {
            return function httpMethod(url, data, config) {
              return this.request(mergeConfig(config || {}, {
                method,
                headers: isForm ? {
                  'Content-Type': 'multipart/form-data'
                } : {},
                url,
                data
              }));
            };
          }
          Axios.prototype[method] = generateHTTPMethod();
          Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
        });
        const Axios$1 = Axios;

        /**
         * A `CancelToken` is an object that can be used to request cancellation of an operation.
         *
         * @param {Function} executor The executor function.
         *
         * @returns {CancelToken}
         */
        class CancelToken {
          constructor(executor) {
            if (typeof executor !== 'function') {
              throw new TypeError('executor must be a function.');
            }
            let resolvePromise;
            this.promise = new Promise(function promiseExecutor(resolve) {
              resolvePromise = resolve;
            });
            const token = this;

            // eslint-disable-next-line func-names
            this.promise.then(cancel => {
              if (!token._listeners) return;
              let i = token._listeners.length;
              while (i-- > 0) {
                token._listeners[i](cancel);
              }
              token._listeners = null;
            });

            // eslint-disable-next-line func-names
            this.promise.then = onfulfilled => {
              let _resolve;
              // eslint-disable-next-line func-names
              const promise = new Promise(resolve => {
                token.subscribe(resolve);
                _resolve = resolve;
              }).then(onfulfilled);
              promise.cancel = function reject() {
                token.unsubscribe(_resolve);
              };
              return promise;
            };
            executor(function cancel(message, config, request) {
              if (token.reason) {
                // Cancellation has already been requested
                return;
              }
              token.reason = new CanceledError(message, config, request);
              resolvePromise(token.reason);
            });
          }

          /**
           * Throws a `CanceledError` if cancellation has been requested.
           */
          throwIfRequested() {
            if (this.reason) {
              throw this.reason;
            }
          }

          /**
           * Subscribe to the cancel signal
           */

          subscribe(listener) {
            if (this.reason) {
              listener(this.reason);
              return;
            }
            if (this._listeners) {
              this._listeners.push(listener);
            } else {
              this._listeners = [listener];
            }
          }

          /**
           * Unsubscribe from the cancel signal
           */

          unsubscribe(listener) {
            if (!this._listeners) {
              return;
            }
            const index = this._listeners.indexOf(listener);
            if (index !== -1) {
              this._listeners.splice(index, 1);
            }
          }

          /**
           * Returns an object that contains a new `CancelToken` and a function that, when called,
           * cancels the `CancelToken`.
           */
          static source() {
            let cancel;
            const token = new CancelToken(function executor(c) {
              cancel = c;
            });
            return {
              token,
              cancel
            };
          }
        }
        const CancelToken$1 = CancelToken;

        /**
         * Syntactic sugar for invoking a function and expanding an array for arguments.
         *
         * Common use case would be to use `Function.prototype.apply`.
         *
         *  ```js
         *  function f(x, y, z) {}
         *  var args = [1, 2, 3];
         *  f.apply(null, args);
         *  ```
         *
         * With `spread` this example can be re-written.
         *
         *  ```js
         *  spread(function(x, y, z) {})([1, 2, 3]);
         *  ```
         *
         * @param {Function} callback
         *
         * @returns {Function}
         */
        function spread(callback) {
          return function wrap(arr) {
            return callback.apply(null, arr);
          };
        }

        /**
         * Determines whether the payload is an error thrown by Axios
         *
         * @param {*} payload The value to test
         *
         * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
         */
        function isAxiosError(payload) {
          return utils$1.isObject(payload) && payload.isAxiosError === true;
        }
        const HttpStatusCode = {
          Continue: 100,
          SwitchingProtocols: 101,
          Processing: 102,
          EarlyHints: 103,
          Ok: 200,
          Created: 201,
          Accepted: 202,
          NonAuthoritativeInformation: 203,
          NoContent: 204,
          ResetContent: 205,
          PartialContent: 206,
          MultiStatus: 207,
          AlreadyReported: 208,
          ImUsed: 226,
          MultipleChoices: 300,
          MovedPermanently: 301,
          Found: 302,
          SeeOther: 303,
          NotModified: 304,
          UseProxy: 305,
          Unused: 306,
          TemporaryRedirect: 307,
          PermanentRedirect: 308,
          BadRequest: 400,
          Unauthorized: 401,
          PaymentRequired: 402,
          Forbidden: 403,
          NotFound: 404,
          MethodNotAllowed: 405,
          NotAcceptable: 406,
          ProxyAuthenticationRequired: 407,
          RequestTimeout: 408,
          Conflict: 409,
          Gone: 410,
          LengthRequired: 411,
          PreconditionFailed: 412,
          PayloadTooLarge: 413,
          UriTooLong: 414,
          UnsupportedMediaType: 415,
          RangeNotSatisfiable: 416,
          ExpectationFailed: 417,
          ImATeapot: 418,
          MisdirectedRequest: 421,
          UnprocessableEntity: 422,
          Locked: 423,
          FailedDependency: 424,
          TooEarly: 425,
          UpgradeRequired: 426,
          PreconditionRequired: 428,
          TooManyRequests: 429,
          RequestHeaderFieldsTooLarge: 431,
          UnavailableForLegalReasons: 451,
          InternalServerError: 500,
          NotImplemented: 501,
          BadGateway: 502,
          ServiceUnavailable: 503,
          GatewayTimeout: 504,
          HttpVersionNotSupported: 505,
          VariantAlsoNegotiates: 506,
          InsufficientStorage: 507,
          LoopDetected: 508,
          NotExtended: 510,
          NetworkAuthenticationRequired: 511
        };
        Object.entries(HttpStatusCode).forEach(([key, value]) => {
          HttpStatusCode[value] = key;
        });
        const HttpStatusCode$1 = HttpStatusCode;

        /**
         * Create an instance of Axios
         *
         * @param {Object} defaultConfig The default config for the instance
         *
         * @returns {Axios} A new instance of Axios
         */
        function createInstance(defaultConfig) {
          const context = new Axios$1(defaultConfig);
          const instance = bind(Axios$1.prototype.request, context);

          // Copy axios.prototype to instance
          utils$1.extend(instance, Axios$1.prototype, context, {
            allOwnKeys: true
          });

          // Copy context to instance
          utils$1.extend(instance, context, null, {
            allOwnKeys: true
          });

          // Factory for creating new instances
          instance.create = function create(instanceConfig) {
            return createInstance(mergeConfig(defaultConfig, instanceConfig));
          };
          return instance;
        }

        // Create the default instance to be exported
        const axios = createInstance(defaults$1);

        // Expose Axios class to allow class inheritance
        axios.Axios = Axios$1;

        // Expose Cancel & CancelToken
        axios.CanceledError = CanceledError;
        axios.CancelToken = CancelToken$1;
        axios.isCancel = isCancel;
        axios.VERSION = VERSION;
        axios.toFormData = toFormData;

        // Expose AxiosError class
        axios.AxiosError = AxiosError;

        // alias for CanceledError for backward compatibility
        axios.Cancel = axios.CanceledError;

        // Expose all/spread
        axios.all = function all(promises) {
          return Promise.all(promises);
        };
        axios.spread = spread;

        // Expose isAxiosError
        axios.isAxiosError = isAxiosError;

        // Expose mergeConfig
        axios.mergeConfig = mergeConfig;
        axios.AxiosHeaders = AxiosHeaders$1;
        axios.formToJSON = thing => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
        axios.getAdapter = adapters.getAdapter;
        axios.HttpStatusCode = HttpStatusCode$1;
        axios.default = axios;

        // this module should only have a default export
        const axios$1 = exports('cn', axios);
        const FRONT_END_HOST = "frankie.app:3000";
        const FRONT_END_DOMAIN = "frankie.app:3000".split(":")[0];
        const PROTOCOL = "https";
        const BACKEND_BASE_URL = `${"https"}://${"api.staging-frankiesurveys.com"}`;

        /*! js-cookie v3.0.5 | MIT */
        /* eslint-disable no-var */
        function assign$1(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              target[key] = source[key];
            }
          }
          return target;
        }
        /* eslint-enable no-var */

        /* eslint-disable no-var */
        var defaultConverter = {
          read: function read(value) {
            if (value[0] === '"') {
              value = value.slice(1, -1);
            }
            return value.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent);
          },
          write: function write(value) {
            return encodeURIComponent(value).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g, decodeURIComponent);
          }
        };
        /* eslint-enable no-var */

        /* eslint-disable no-var */

        function init(converter, defaultAttributes) {
          function set(name, value, attributes) {
            if (typeof document === 'undefined') {
              return;
            }
            attributes = assign$1({}, defaultAttributes, attributes);
            if (typeof attributes.expires === 'number') {
              attributes.expires = new Date(Date.now() + attributes.expires * 864e5);
            }
            if (attributes.expires) {
              attributes.expires = attributes.expires.toUTCString();
            }
            name = encodeURIComponent(name).replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent).replace(/[()]/g, escape);
            var stringifiedAttributes = '';
            for (var attributeName in attributes) {
              if (!attributes[attributeName]) {
                continue;
              }
              stringifiedAttributes += '; ' + attributeName;
              if (attributes[attributeName] === true) {
                continue;
              }

              // Considers RFC 6265 section 5.2:
              // ...
              // 3.  If the remaining unparsed-attributes contains a %x3B (";")
              //     character:
              // Consume the characters of the unparsed-attributes up to,
              // not including, the first %x3B (";") character.
              // ...
              stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
            }
            return document.cookie = name + '=' + converter.write(value, name) + stringifiedAttributes;
          }
          function get(name) {
            if (typeof document === 'undefined' || arguments.length && !name) {
              return;
            }

            // To prevent the for loop in the first place assign an empty array
            // in case there are no cookies at all.
            var cookies = document.cookie ? document.cookie.split('; ') : [];
            var jar = {};
            for (var i = 0; i < cookies.length; i++) {
              var parts = cookies[i].split('=');
              var value = parts.slice(1).join('=');
              try {
                var found = decodeURIComponent(parts[0]);
                jar[found] = converter.read(value, found);
                if (name === found) {
                  break;
                }
              } catch (e) {}
            }
            return name ? jar[name] : jar;
          }
          return Object.create({
            set,
            get,
            remove: function remove(name, attributes) {
              set(name, '', assign$1({}, attributes, {
                expires: -1
              }));
            },
            withAttributes: function withAttributes(attributes) {
              return init(this.converter, assign$1({}, this.attributes, attributes));
            },
            withConverter: function withConverter(converter) {
              return init(assign$1({}, this.converter, converter), this.attributes);
            }
          }, {
            attributes: {
              value: Object.freeze(defaultAttributes)
            },
            converter: {
              value: Object.freeze(converter)
            }
          });
        }
        var api = init(defaultConverter, {
          path: '/'
        });
        class CookiesService {
          setObject(value, key) {
            api.set(key, JSON.stringify(value), {
              domain: FRONT_END_DOMAIN,
              SameSite: "Strict",
              expires: expiry()
            });
          }
          setValue(value, key) {
            api.set(key, value, {
              domain: FRONT_END_DOMAIN,
              SameSite: "Strict",
              expires: expiry()
            });
          }
          getObject(key) {
            const value = api.get(key);
            return value && JSON.parse(value);
          }
          getValue(key) {
            return api.get(key);
          }
          removeByKey(key) {
            api.remove(key, {
              domain: FRONT_END_DOMAIN,
              SameSite: "Strict",
              expires: expiry()
            });
          }
        }
        const expiry = () => {
          const expirationDate = new Date();
          expirationDate.setDate(expirationDate.getDate() + 90);
          return expirationDate;
        };
        const CookiesService$1 = exports('C', new CookiesService());
        class TokenService {
          getRefreshToken() {
            var _this$getUser;
            return (_this$getUser = this.getUser()) === null || _this$getUser === void 0 ? void 0 : _this$getUser.refreshToken;
          }
          getAuthToken() {
            var _this$getUser2;
            return (_this$getUser2 = this.getUser()) === null || _this$getUser2 === void 0 ? void 0 : _this$getUser2.accessToken;
          }
          getUser() {
            const user = CookiesService$1.getObject("user");
            return user;
          }
          isAuthenticated() {
            const authToken = this.getAuthToken();
            return authToken && authToken.length > 0;
          }
          setSession(user) {
            CookiesService$1.setObject(user, "user");
          }
          removeSession() {
            CookiesService$1.removeByKey("user");
          }
        }
        const TokenService$1 = exports('T', new TokenService());
        const REFRESH_URL = "/user/refresh_token";
        const instance$1 = exports("v", axios$1.create({
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
            "Access-Control-Allow-Origin": "*"
          }
        }));
        instance$1.interceptors.request.use(config => {
          const token = TokenService$1.getAuthToken();
          if (config.url !== REFRESH_URL && config.headers != token) {
            config.headers["Authorization"] = "Bearer " + token;
          } else {
            delete config.headers["Authorization"];
          }
          config.baseURL = BACKEND_BASE_URL;
          return config;
        }, error => {
          return Promise.reject(error);
        });
        instance$1.interceptors.response.use(res => {
          return res;
        }, /*#__PURE__*/function () {
          var _ref18 = _asyncToGenerator(function* (err) {
            const originalConfig = err.config;
            // Access Token was expired
            if (originalConfig.url !== REFRESH_URL && err.response && err.response.status === 401 && !originalConfig._retry) {
              originalConfig._retry = true;
              try {
                const rs = yield instance$1.post(`/user/refresh_token`, {
                  accessToken: TokenService$1.getAuthToken(),
                  refreshToken: TokenService$1.getRefreshToken()
                });
                TokenService$1.setSession(rs.data);
                return instance$1(originalConfig);
              } catch (_error) {
                window.location.href = "/login";
                // return Promise.reject(_error);
              }
            }
            return Promise.reject(err);
          });
          return function (_x2) {
            return _ref18.apply(this, arguments);
          };
        }());
        class DesignService {
          getSurveyDesign() {
            const surveyId = sessionStorage.getItem("surveyId");
            return instance$1.get(`/survey/${surveyId}/design`).then(response => {
              return response.data;
            });
          }
          setSurveyDesign(data, params) {
            const surveyId = sessionStorage.getItem("surveyId");
            return instance$1.post(`/survey/${surveyId}/design`, data, {
              params
            }).then(response => {
              return response.data;
            });
          }
          publish(params) {
            const surveyId = sessionStorage.getItem("surveyId");
            return instance$1.post(`/survey/${surveyId}/design/publish`, {}, {
              params
            }).then(response => {
              return response.data;
            });
          }
          uploadResource(file) {
            const surveyId = sessionStorage.getItem("surveyId");
            const formData = new FormData();
            formData.append("file", file);
            return instance$1.post(`/survey/${surveyId}/resource`, formData, {
              headers: {
                Accept: "application/json",
                "Content-Type": "multipart/form-data"
              }
            }).then(response => {
              return response.data;
            });
          }
        }
        const DesignService$1 = exports('ae', new DesignService());
        function GetData(_x3, _x4, _x5) {
          return _GetData.apply(this, arguments);
        }
        function _GetData() {
          _GetData = _asyncToGenerator(function* (setState, setError, langInfo) {
            try {
              const response = yield DesignService$1.getSurveyDesign();
              return processResponse(response, setState, langInfo);
            } catch (err) {
              setError(err);
            }
          });
          return _GetData.apply(this, arguments);
        }
        function SetData(_x6, _x7, _x8) {
          return _SetData.apply(this, arguments);
        }
        function _SetData() {
          _SetData = _asyncToGenerator(function* (state, setState, setError) {
            try {
              const params = new URLSearchParams([["version", state.versionDto.version], ["sub_version", state.versionDto.subVersion]]);
              const response = yield DesignService$1.setSurveyDesign(state, params);
              processResponse(response, setState, state.langInfo);
            } catch (err) {
              GetData(setState, setError, state.langInfo);
              setError(err);
            }
          });
          return _SetData.apply(this, arguments);
        }
        const processResponse = (response, setState, langInfo) => {
          let state = response.designerInput.state;
          if (!state.Survey.theme) {
            state.Survey.theme = defaultSurveyTheme;
          }
          const defaultLang = response.designerInput.state.Survey.defaultLang || LANGUAGE_DEF.en;
          const mainLang = defaultLang.code;
          const lang = (langInfo === null || langInfo === void 0 ? void 0 : langInfo.lang) || defaultLang.code;
          const languagesList = [defaultLang].concat(response.designerInput.state.Survey.additionalLang || []);
          state.langInfo = {
            languagesList,
            mainLang,
            lang,
            onMainLang: lang == mainLang
          };
          state.versionDto = response.versionDto;
          state.componentIndex = response.designerInput.componentIndexList;
          setState(state);
          return state;
        };
        const PROCESSED_ERRORS = exports("a4", {
          NETWORK_ERR: {
            name: "network_err",
            handleGlobally: true
          },
          BACKEND_DOWN: {
            name: "backend_down",
            handleGlobally: true
          },
          WRONG_CREDENTIALS: {
            name: "wrong_credentials",
            handleGlobally: false
          },
          DUPLICATE_EMAIL: {
            name: "duplicate_email",
            handleGlobally: false
          },
          DUPLICATE_SURVEY_NAME: {
            name: "duplicate_survey_name",
            handleGlobally: false
          },
          EXPIRED_RESET_TOKEN: {
            name: "expired_reset_token",
            handleGlobally: false
          },
          WRONG_RESET_TOKEN: {
            name: "wrong_reset_token",
            handleGlobally: false
          },
          USED_CONFIRMATION_TOKEN: {
            name: "used_confirmation_token",
            handleGlobally: false
          },
          EXPIRED_CONFIRMATION_TOKEN: {
            name: "expired_confirmation_token",
            handleGlobally: false
          },
          USER_NOT_FOUND: {
            name: "user_not_found",
            handleGlobally: false
          },
          MISSING_CREDENTIALS: {
            name: "missing_credentials",
            handleGlobally: false
          },
          SURVEY_DESIGN_ERROR: {
            name: "survey_design_error",
            handleGlobally: false
          },
          SURVEY_NOT_ACTIVE: {
            name: "survey_not_active",
            handleGlobally: false
          },
          SURVEY_CLOSED: {
            name: "survey_closed",
            handleGlobally: true
          },
          SURVEY_SCHEDULED: {
            name: "survey_scheduled",
            handleGlobally: false
          },
          SURVEY_EXPIRED: {
            name: "survey_expired",
            handleGlobally: false
          },
          INVALID_SURVEY_DATES: {
            name: "invalid_survey_dates",
            handleGlobally: false
          },
          GOOGLE_AUTH_ERROR: {
            name: "google_auth_error",
            handleGlobally: true
          },
          UNIDENTIFIED_ERROR: {
            name: "unidentified_error",
            handleGlobally: true
          }
        });
        const onApiError = exports("a3", ({
          error,
          globalErrorHandler = {},
          locallErrorHandler = {}
        }) => {
          const processed = !error ? PROCESSED_ERRORS.UNIDENTIFIED_ERROR : processError(error);
          if (processed && processed.handleGlobally) {
            globalErrorHandler(processed);
          } else if (processed) {
            locallErrorHandler(processed);
          }
          return processed;
        });
        const processError = e => {
          var _e$response;
          console.error(e);
          if (e.code == "ERR_NETWORK" && navigator.onLine) {
            return PROCESSED_ERRORS.BACKEND_DOWN;
          } else if (e.code == "ERR_NETWORK" && !navigator.onLine) {
            return PROCESSED_ERRORS.NETWORK_ERR;
          } else if ((_e$response = e.response) !== null && _e$response !== void 0 && (_e$response = _e$response.data) !== null && _e$response !== void 0 && _e$response.error) {
            var _e$response2;
            switch ((_e$response2 = e.response) === null || _e$response2 === void 0 || (_e$response2 = _e$response2.data) === null || _e$response2 === void 0 ? void 0 : _e$response2.error) {
              case "WrongCredentialsException":
                return PROCESSED_ERRORS.WRONG_CREDENTIALS;
              case "DuplicateEmailException":
                return PROCESSED_ERRORS.DUPLICATE_EMAIL;
              case "ExpiredResetTokenException":
                return PROCESSED_ERRORS.EXPIRED_RESET_TOKEN;
              case "WrongResetTokenException":
                return PROCESSED_ERRORS.WRONG_RESET_TOKEN;
              case "UsedConfirmationTokenException":
                return PROCESSED_ERRORS.USED_CONFIRMATION_TOKEN;
              case "ExpiredConfirmationTokenException":
                return PROCESSED_ERRORS.EXPIRED_CONFIRMATION_TOKEN;
              case "UserNotFoundException":
                return PROCESSED_ERRORS.USER_NOT_FOUND;
              case "DuplicateEmailException":
                return PROCESSED_ERRORS.DUPLICATE_EMAIL;
              case "MissingCredentialsException":
                return PROCESSED_ERRORS.MISSING_CREDENTIALS;
              case "SurveyDesignWithErrorException":
                return PROCESSED_ERRORS.SURVEY_DESIGN_ERROR;
              case "DuplicateSurveyException":
                return PROCESSED_ERRORS.DUPLICATE_SURVEY_NAME;
              case "SurveyIsNotActiveException":
                return PROCESSED_ERRORS.SURVEY_NOT_ACTIVE;
              case "SurveyExpiredException":
                return PROCESSED_ERRORS.SURVEY_EXPIRED;
              case "SurveyNotStartedException":
                return PROCESSED_ERRORS.SURVEY_SCHEDULED;
              case "SurveyIsClosedException":
                return PROCESSED_ERRORS.SURVEY_CLOSED;
              case "InvalidSurveyDates":
                return PROCESSED_ERRORS.INVALID_SURVEY_DATES;
              case "GoogleAuthError":
                return PROCESSED_ERRORS.GOOGLE_AUTH_ERROR;
              default:
                return PROCESSED_ERRORS.UNIDENTIFIED_ERROR;
            }
          }
        };
        let saveTimer$1;
        let buffer$1 = [];
        let debounceTime = 3000;
        const saveDebounce$1 = store => {
          if (saveTimer$1) {
            clearTimeout(saveTimer$1);
          }
          saveTimer$1 = setTimeout(() => {
            store.dispatch(setUpdating$1(true));
            const state = store.getState();
            SetData(state.designState, state => {
              setState$1(store, state);
            }, error => {
              setError$1(store, error);
            });
          }, debounceTime);
        };
        const dataSaver = store => next => action => {
          if (!action) {
            return;
          }
          if (!NONE_MUTATING.includes(action.type) && !action.type.startsWith("editState/")) {
            if (!store.getState().designState.isUpdating) {
              store.dispatch(setSaving$1(true));
              saveDebounce$1(store);
            } else {
              buffer$1.push(action);
            }
          }
          return next(action);
        };
        const NONE_MUTATING = ["templateState/setFetching", "designState/setUpdating", "designState/setupToggleExpand", "designState/collapseAllGroups", "designState/toggleComponentCollapse", "designState/resetSetup", "designState/onResetLang", "designState/onAddComponentsVisibilityChange", "designState/setSaving", "designState/changeLang", "designState/setup", "designState/designStateReceived", "designState/newVersionReceived"];
        const setState$1 = (store, state) => {
          store.dispatch(setUpdating$1(false));
          store.dispatch(designStateReceived(state));
          store.dispatch(setSaving$1(false));
          buffer$1.forEach(action => {
            store.dispatch(action);
          });
          buffer$1 = [];
        };
        const setError$1 = (store, error) => {
          onApiError({
            error: error,
            globalErrorHandler: processedError => {
              store.dispatch(onError(processedError));
              store.dispatch(setSaving$1(false));
              store.dispatch(setUpdating$1(false));
            },
            locallErrorHandler: processedError => {
              store.dispatch(onError(processedError));
              store.dispatch(setSaving$1(false));
              store.dispatch(setUpdating$1(false));
            }
          });
        };
        const templateState = createSlice({
          name: "templateState",
          initialState: {
            state: {}
          },
          reducers: {
            setDirty: (state, action) => {
              state[action.payload] = true;
            },
            setFetching: (state, action) => {
              state.isLoading = action.payload;
            }
          }
        });
        const _templateState$action = templateState.actions,
          setDirty = _templateState$action.setDirty,
          setFetching = _templateState$action.setFetching;
        exports("b4", setDirty);
        const templateState$1 = templateState.reducer;
        class SurveyService {
          getAllSurveys() {
            return _asyncToGenerator(function* () {
              return instance$1.get(`/survey/all`).then(response => {
                return response.data;
              });
            })();
          }
          getSurvey() {
            return _asyncToGenerator(function* () {
              const surveyId = sessionStorage.getItem("surveyId");
              return instance$1.get(`/survey/${surveyId}`).then(response => {
                return response.data;
              });
            })();
          }
          createSurvey(data) {
            return _asyncToGenerator(function* () {
              const response = yield instance$1.post(`/survey/create`, data);
              return response.data;
            })();
          }
          putSurvey(data, surveyId) {
            return _asyncToGenerator(function* () {
              const response = yield instance$1.put(`/survey/${surveyId}`, data);
              return response.data;
            })();
          }
          closeSurvey(surveyId) {
            return _asyncToGenerator(function* () {
              const response = yield instance$1.put(`/survey/${surveyId}/close`);
              return response.data;
            })();
          }
          cloneSurvey(surveyId, data) {
            return _asyncToGenerator(function* () {
              const response = yield instance$1.post(`/survey/${surveyId}/clone`, data);
              return response.data;
            })();
          }
          deleteSurvey(surveyId) {
            return _asyncToGenerator(function* () {
              const response = yield instance$1.delete(`/survey/${surveyId}`);
              return response.data;
            })();
          }
          getSurveyPermissionAll(surveyId) {
            return _asyncToGenerator(function* () {
              const response = yield instance$1.get(`/survey/${surveyId}/permission/all`);
              return response.data;
            })();
          }
          removePermission(surveyId, userId) {
            return _asyncToGenerator(function* () {
              const response = yield instance$1.delete(`/survey/${surveyId}/permission/${userId}`);
              return response.data;
            })();
          }
          addPermission(surveyId, userId) {
            return _asyncToGenerator(function* () {
              const response = yield instance$1.post(`/survey/${surveyId}/permission/${userId}`);
              return response.data;
            })();
          }
          editPermission(surveyId, userId, data) {
            return _asyncToGenerator(function* () {
              const response = yield instance$1.put(`/survey/${surveyId}/permission/${userId}`, data);
              return response.data;
            })();
          }
          allResponse(surveyId, dbValues, page, per_page, complete, surveyor) {
            return _asyncToGenerator(function* () {
              const shouldAddComplete = complete === true || complete === false;
              const response = yield instance$1.get(`/survey/${surveyId}/response/all?db_values=${dbValues}&page=${page}&per_page=${per_page}` + `${shouldAddComplete ? `&complete=${complete}` : ""}
        ${surveyor ? `&surveyor=${surveyor}` : ""}`);
              return response.data;
            })();
          }
          exportResponses(surveyId, dbValues, complete) {
            return _asyncToGenerator(function* () {
              const shouldAddComplete = complete === true || complete === false;
              const response = yield instance$1.get(`/survey/${surveyId}/response/export?db_values=${dbValues}` + `${shouldAddComplete ? `&complete=${complete}` : ""}`);
              return response.data;
            })();
          }
          deleteResponse(surveyId, responseId) {
            return _asyncToGenerator(function* () {
              const response = yield instance$1.delete(`/survey/${surveyId}/response/${responseId}`);
              return response;
            })();
          }
          eventResponse(responseId) {
            return _asyncToGenerator(function* () {
              const surveyId = sessionStorage.getItem("surveyId");
              const response = yield instance$1.get(`/survey/${surveyId}/response/${responseId}/events`);
              return response;
            })();
          }
          responseAttach(surveyId, filename) {
            return _asyncToGenerator(function* () {
              const response = yield instance$1.get(`/survey/${surveyId}/response/attach/${filename}`, {
                responseType: "blob"
              });
              return response;
            })();
          }
        }
        const SurveyService$1 = exports('a2', new SurveyService());
        let saveTimer;
        let buffer = [];
        let defaultDebounceTime = 3000;
        function setData(_x9, _x10) {
          return _setData.apply(this, arguments);
        }
        function _setData() {
          _setData = _asyncToGenerator(function* (store, state) {
            SurveyService$1.putSurvey(state.editState.survey, state.editState.survey.id).then(state => {
              setState(store, state);
            }).catch(error => {
              SurveyService$1.getSurvey().then(state => {
                setState(store, state);
              });
              setError(store, error);
            });
          });
          return _setData.apply(this, arguments);
        }
        const saveDebounce = (store, debounceTime) => {
          if (saveTimer) {
            clearTimeout(saveTimer);
          }
          saveTimer = setTimeout(() => {
            store.dispatch(setUpdating(true));
            const state = store.getState();
            setData(store, state);
          }, debounceTime);
        };
        const editDataSaver = store => next => action => {
          if (action.type == "editState/surveyAttributeChanged" || action.type == "editState/surveyAttributeChangedImmediate") {
            if (!store.getState().editState.isUpdating) {
              store.dispatch(setSaving(true));
              let debounceTime = defaultDebounceTime;
              if (action.type == "editState/surveyAttributeChangedImmediate") {
                debounceTime = 0;
              }
              saveDebounce(store, debounceTime);
            } else {
              buffer.push(action);
            }
          }
          return next(action);
        };
        const setState = (store, state) => {
          store.dispatch(setUpdating(false));
          store.dispatch(surveyReceived(state));
          store.dispatch(setSaving(false));
          buffer.forEach(action => {
            store.dispatch(action);
          });
          store.dispatch(onError(""));
          buffer = [];
        };
        const setError = (store, error) => {
          onApiError({
            error: error,
            globalErrorHandler: processedError => {
              store.dispatch(onError(processedError));
              store.dispatch(setSaving(false));
              store.dispatch(setUpdating(false));
            },
            locallErrorHandler: processedError => {
              store.dispatch(onError(processedError));
              store.dispatch(setSaving(false));
              store.dispatch(setUpdating(false));
            }
          });
        };
        const runStore = exports("aD", configureStore({
          reducer: {
            templateState: templateState$1,
            runState: runState$1
          }
        }));
        const manageStore = exports("U", configureStore({
          reducer: {
            templateState: templateState$1,
            designState: designState$1,
            editState: editState$1
          },
          middleware: getDefaultMiddleware => getDefaultMiddleware().concat(dataSaver, editDataSaver)
        }));
        const instance = exports("t", axios$1.create({
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
            "Access-Control-Allow-Origin": "*"
          }
        }));
        instance.interceptors.request.use(config => {
          config.baseURL = BACKEND_BASE_URL;
          return config;
        }, error => {
          return Promise.reject(error);
        });
        class RunService {
          start(lang, preview = false, guest = false, mode = "online") {
            return _asyncToGenerator(function* () {
              const surveyId = sessionStorage.getItem("surveyId");
              if (guest) {
                const response = yield instance.post(`/guest/survey/${surveyId}/preview/start?mode=${mode}`, {
                  lang
                });
                return response.data;
              } else if (preview) {
                const response = yield instance$1.post(`/survey/${surveyId}/preview/start?mode=${mode}`, {
                  lang
                });
                return response.data;
              } else {
                const response_1 = yield instance.post(`/survey/${surveyId}/run/start`, {
                  lang
                });
                return response_1.data;
              }
            })();
          }
          navigate(payload, preview = false, guest = false, mode = "online") {
            return _asyncToGenerator(function* () {
              const surveyId = sessionStorage.getItem("surveyId");
              if (guest) {
                const response = yield instance.post(`/guest/survey/${surveyId}/preview/navigate?mode=${mode}`, payload);
                return response.data;
              }
              if (preview) {
                const response = yield instance$1.post(`/survey/${surveyId}/preview/navigate?mode=${mode}`, payload);
                return response.data;
              } else {
                const response_1 = yield instance.post(`/survey/${surveyId}/run/navigate`, payload);
                return response_1.data;
              }
            })();
          }
          runtimeJs(preview, guest = false) {
            return _asyncToGenerator(function* () {
              const surveyId = sessionStorage.getItem("surveyId");
              if (guest) {
                const response = yield instance.get(`/guest/survey/${surveyId}/preview/runtime.js`);
                return response.data;
              } else if (preview) {
                const response = yield instance$1.get(`/survey/${surveyId}/preview/runtime.js`);
                return response.data;
              } else {
                const response_1 = yield instance.get(`/survey/${surveyId}/run/runtime.js`);
                return response_1.data;
              }
            })();
          }
          runtimeUrl() {
            const surveyId = sessionStorage.getItem("surveyId");
            return BACKEND_BASE_URL + `/survey/${surveyId}/run/runtime.js`;
          }
          previewUrl(fileName) {
            const surveyId = sessionStorage.getItem("surveyId");
            return BACKEND_BASE_URL + `/survey/${surveyId}/response/attach/${fileName}`;
          }
          uploadResponseFile(key, preview, file) {
            return _asyncToGenerator(function* () {
              const surveyId = sessionStorage.getItem("surveyId");
              const responseId = sessionStorage.getItem("responseId");
              const formData = new FormData();
              formData.append("file", file);
              const api = preview ? instance$1 : instance;
              const url = preview ? `/survey/${surveyId}/response/preview/attach/${responseId}/${key}` : `/survey/${surveyId}/response/attach/${responseId}/${key}`;
              const response = yield api.post(url, formData, {
                headers: {
                  Accept: "application/json",
                  "Content-Type": "multipart/form-data"
                }
              });
              return response.data;
            })();
          }
          uploadResponseBlob(key, preview, blob, fileName) {
            return _asyncToGenerator(function* () {
              const surveyId = sessionStorage.getItem("surveyId");
              const responseId = sessionStorage.getItem("responseId");
              const formData = new FormData();
              formData.append("file", blob, fileName);
              const api = preview ? instance$1 : instance;
              const url = preview ? `/survey/${surveyId}/response/preview/attach/${responseId}/${key}` : `/survey/${surveyId}/response/attach/${responseId}/${key}`;
              const response = yield api.post(url, formData, {
                headers: {
                  Accept: "application/json",
                  "Content-Type": "multipart/form-data"
                }
              });
              return response.data;
            })();
          }
        }
        const RunService$1 = new RunService();
        const getparam = exports("aG", (params, key) => {
          if (window["Android"]) {
            return window["Android"].getParam(key);
          } else {
            return params[key];
          }
        });
        const startNavigation = (lang, preview, guest, mode) => {
          if (window["Android"]) {
            return new Promise((resolve, reject) => {
              window["Android"].start();
              window["navigateOffline"] = res => {
                resolve(res);
              };
            });
          } else {
            return RunService$1.start(lang, preview, guest, mode);
          }
        };
        const continueNavigation = (payload, responseId, preview, guest, mode) => {
          const finalObj = _objectSpread3(_objectSpread3({}, payload), {}, {
            responseId: responseId
          });
          if (window["Android"]) {
            return new Promise((resolve, reject) => {
              window["Android"].navigate(JSON.stringify(finalObj));
              window["navigateOffline"] = res => {
                resolve(res);
              };
            });
          } else {
            return RunService$1.navigate(finalObj, preview, guest, mode);
          }
        };
        const uploadFile = exports("bc", (key, preview, selectedFile) => {
          if (window["Android"]) {
            return new Promise((resolve, reject) => {
              window["Android"].uploadFile(key, selectedFile.name);
              window["onFileUploaded"] = res => {
                resolve(res);
              };
            });
          }
          return RunService$1.uploadResponseFile(key, preview, selectedFile);
        });
        const uploadDataUrl = exports("ba", (key, preview, dataurl, fileName) => {
          if (window["Android"]) {
            return new Promise((resolve, reject) => {
              window["Android"].uploadDataUrl(key, dataurl, fileName);
              window["onDataUrlUploaded"] = res => {
                resolve(res);
              };
            });
          }
          const blob = dataURLtoBlob(dataurl);
          return RunService$1.uploadResponseBlob(key, preview, blob, fileName);
        });
        const dataURLtoBlob = dataurl => {
          var arr = dataurl.split(","),
            mime = arr[0].match(/:(.*?);/)[1],
            bstr = atob(arr[1]),
            n = bstr.length,
            u8arr = new Uint8Array(n);
          while (n--) {
            u8arr[n] = bstr.charCodeAt(n);
          }
          return new Blob([u8arr], {
            type: mime
          });
        };
        const downloadFileAsBase64 = exports("b7", url => {
          return fetch(url).then(response => response.blob()).then(blob => new Promise(callback => {
            let reader = new FileReader();
            reader.onload = function () {
              callback(this.result);
            };
            reader.readAsDataURL(blob);
          }));
        });
        const previewUrl = exports("b8", filename => {
          return RunService$1.previewUrl(filename);
        });
        const loadScript = (preview, guest) => new Promise((resolve, reject) => {
          RunService$1.runtimeJs(preview, guest).then(data => {
            const script = document.createElement("script");
            script.innerHTML = data;
            document.body.appendChild(script);
            resolve();
          }).catch(err => {
            reject(err);
          });
        });
        const mainContainer = "_mainContainer_1xzji_1";
        const surveyDesignError = "_surveyDesignError_1xzji_5";
        const styles$6 = {
          mainContainer: mainContainer,
          surveyDesignError: surveyDesignError
        };
        var MS = '-ms-';
        var MOZ = '-moz-';
        var WEBKIT = '-webkit-';
        var COMMENT = 'comm';
        var RULESET = 'rule';
        var DECLARATION = 'decl';
        var MEDIA = '@media';
        var IMPORT = '@import';
        var SUPPORTS = '@supports';
        var KEYFRAMES = '@keyframes';

        /**
         * @param {number}
         * @return {number}
         */
        var abs = Math.abs;

        /**
         * @param {number}
         * @return {string}
         */
        var from = String.fromCharCode;

        /**
         * @param {object}
         * @return {object}
         */
        var assign = Object.assign;

        /**
         * @param {string} value
         * @param {number} length
         * @return {number}
         */
        function hash(value, length) {
          return charat(value, 0) ^ 45 ? (((length << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
        }

        /**
         * @param {string} value
         * @return {string}
         */
        function trim(value) {
          return value.trim();
        }

        /**
         * @param {string} value
         * @param {RegExp} pattern
         * @return {string?}
         */
        function match(value, pattern) {
          return (value = pattern.exec(value)) ? value[0] : value;
        }

        /**
         * @param {string} value
         * @param {(string|RegExp)} pattern
         * @param {string} replacement
         * @return {string}
         */
        function replace(value, pattern, replacement) {
          return value.replace(pattern, replacement);
        }

        /**
         * @param {string} value
         * @param {string} search
         * @return {number}
         */
        function indexof(value, search) {
          return value.indexOf(search);
        }

        /**
         * @param {string} value
         * @param {number} index
         * @return {number}
         */
        function charat(value, index) {
          return value.charCodeAt(index) | 0;
        }

        /**
         * @param {string} value
         * @param {number} begin
         * @param {number} end
         * @return {string}
         */
        function substr(value, begin, end) {
          return value.slice(begin, end);
        }

        /**
         * @param {string} value
         * @return {number}
         */
        function strlen(value) {
          return value.length;
        }

        /**
         * @param {any[]} value
         * @return {number}
         */
        function sizeof(value) {
          return value.length;
        }

        /**
         * @param {any} value
         * @param {any[]} array
         * @return {any}
         */
        function append(value, array) {
          return array.push(value), value;
        }

        /**
         * @param {string[]} array
         * @param {function} callback
         * @return {string}
         */
        function combine(array, callback) {
          return array.map(callback).join('');
        }

        /**
         * @param {string[]} array
         * @param {RegExp} pattern
         * @return {string[]}
         */
        function filter(array, pattern) {
          return array.filter(function (value) {
            return !match(value, pattern);
          });
        }
        var line = 1;
        var column = 1;
        var length = 0;
        var position = 0;
        var character = 0;
        var characters = '';

        /**
         * @param {string} value
         * @param {object | null} root
         * @param {object | null} parent
         * @param {string} type
         * @param {string[] | string} props
         * @param {object[] | string} children
         * @param {object[]} siblings
         * @param {number} length
         */
        function node(value, root, parent, type, props, children, length, siblings) {
          return {
            value: value,
            root: root,
            parent: parent,
            type: type,
            props: props,
            children: children,
            line: line,
            column: column,
            length: length,
            return: '',
            siblings: siblings
          };
        }

        /**
         * @param {object} root
         * @param {object} props
         * @return {object}
         */
        function copy(root, props) {
          return assign(node('', null, null, '', null, null, 0, root.siblings), root, {
            length: -root.length
          }, props);
        }

        /**
         * @param {object} root
         */
        function lift(root) {
          while (root.root) root = copy(root.root, {
            children: [root]
          });
          append(root, root.siblings);
        }

        /**
         * @return {number}
         */
        function char() {
          return character;
        }

        /**
         * @return {number}
         */
        function prev() {
          character = position > 0 ? charat(characters, --position) : 0;
          if (column--, character === 10) column = 1, line--;
          return character;
        }

        /**
         * @return {number}
         */
        function next() {
          character = position < length ? charat(characters, position++) : 0;
          if (column++, character === 10) column = 1, line++;
          return character;
        }

        /**
         * @return {number}
         */
        function peek() {
          return charat(characters, position);
        }

        /**
         * @return {number}
         */
        function caret() {
          return position;
        }

        /**
         * @param {number} begin
         * @param {number} end
         * @return {string}
         */
        function slice(begin, end) {
          return substr(characters, begin, end);
        }

        /**
         * @param {number} type
         * @return {number}
         */
        function token(type) {
          switch (type) {
            // \0 \t \n \r \s whitespace token
            case 0:
            case 9:
            case 10:
            case 13:
            case 32:
              return 5;
            // ! + , / > @ ~ isolate token
            case 33:
            case 43:
            case 44:
            case 47:
            case 62:
            case 64:
            case 126:
            // ; { } breakpoint token
            case 59:
            case 123:
            case 125:
              return 4;
            // : accompanied token
            case 58:
              return 3;
            // " ' ( [ opening delimit token
            case 34:
            case 39:
            case 40:
            case 91:
              return 2;
            // ) ] closing delimit token
            case 41:
            case 93:
              return 1;
          }
          return 0;
        }

        /**
         * @param {string} value
         * @return {any[]}
         */
        function alloc(value) {
          return line = column = 1, length = strlen(characters = value), position = 0, [];
        }

        /**
         * @param {any} value
         * @return {any}
         */
        function dealloc(value) {
          return characters = '', value;
        }

        /**
         * @param {number} type
         * @return {string}
         */
        function delimit(type) {
          return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
        }

        /**
         * @param {number} type
         * @return {string}
         */
        function whitespace(type) {
          while (character = peek()) if (character < 33) next();else break;
          return token(type) > 2 || token(character) > 3 ? '' : ' ';
        }

        /**
         * @param {number} index
         * @param {number} count
         * @return {string}
         */
        function escaping(index, count) {
          while (--count && next())
          // not 0-9 A-F a-f
          if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97) break;
          return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
        }

        /**
         * @param {number} type
         * @return {number}
         */
        function delimiter(type) {
          while (next()) switch (character) {
            // ] ) " '
            case type:
              return position;
            // " '
            case 34:
            case 39:
              if (type !== 34 && type !== 39) delimiter(character);
              break;
            // (
            case 40:
              if (type === 41) delimiter(type);
              break;
            // \
            case 92:
              next();
              break;
          }
          return position;
        }

        /**
         * @param {number} type
         * @param {number} index
         * @return {number}
         */
        function commenter(type, index) {
          while (next())
          // //
          if (type + character === 47 + 10) break;
          // /*
          else if (type + character === 42 + 42 && peek() === 47) break;
          return '/*' + slice(index, position - 1) + '*' + from(type === 47 ? type : next());
        }

        /**
         * @param {number} index
         * @return {string}
         */
        function identifier(index) {
          while (!token(peek())) next();
          return slice(index, position);
        }

        /**
         * @param {string} value
         * @return {object[]}
         */
        function compile(value) {
          return dealloc(parse('', null, null, null, [''], value = alloc(value), 0, [0], value));
        }

        /**
         * @param {string} value
         * @param {object} root
         * @param {object?} parent
         * @param {string[]} rule
         * @param {string[]} rules
         * @param {string[]} rulesets
         * @param {number[]} pseudo
         * @param {number[]} points
         * @param {string[]} declarations
         * @return {object}
         */
        function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
          var index = 0;
          var offset = 0;
          var length = pseudo;
          var atrule = 0;
          var property = 0;
          var previous = 0;
          var variable = 1;
          var scanning = 1;
          var ampersand = 1;
          var character = 0;
          var type = '';
          var props = rules;
          var children = rulesets;
          var reference = rule;
          var characters = type;
          while (scanning) switch (previous = character, character = next()) {
            // (
            case 40:
              if (previous != 108 && charat(characters, length - 1) == 58) {
                if (indexof(characters += replace(delimit(character), '&', '&\f'), '&\f') != -1) ampersand = -1;
                break;
              }
            // " ' [
            case 34:
            case 39:
            case 91:
              characters += delimit(character);
              break;
            // \t \n \r \s
            case 9:
            case 10:
            case 13:
            case 32:
              characters += whitespace(previous);
              break;
            // \
            case 92:
              characters += escaping(caret() - 1, 7);
              continue;
            // /
            case 47:
              switch (peek()) {
                case 42:
                case 47:
                  append(comment(commenter(next(), caret()), root, parent, declarations), declarations);
                  break;
                default:
                  characters += '/';
              }
              break;
            // {
            case 123 * variable:
              points[index++] = strlen(characters) * ampersand;
            // } ; \0
            case 125 * variable:
            case 59:
            case 0:
              switch (character) {
                // \0 }
                case 0:
                case 125:
                  scanning = 0;
                // ;
                case 59 + offset:
                  if (ampersand == -1) characters = replace(characters, /\f/g, '');
                  if (property > 0 && strlen(characters) - length) append(property > 32 ? declaration(characters + ';', rule, parent, length - 1, declarations) : declaration(replace(characters, ' ', '') + ';', rule, parent, length - 2, declarations), declarations);
                  break;
                // @ ;
                case 59:
                  characters += ';';
                // { rule/at-rule
                default:
                  append(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length, rulesets), rulesets);
                  if (character === 123) if (offset === 0) parse(characters, root, reference, reference, props, rulesets, length, points, children);else switch (atrule === 99 && charat(characters, 3) === 110 ? 100 : atrule) {
                    // d l m s
                    case 100:
                    case 108:
                    case 109:
                    case 115:
                      parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length, children), children), rules, children, length, points, rule ? props : children);
                      break;
                    default:
                      parse(characters, reference, reference, reference, [''], children, 0, points, children);
                  }
              }
              index = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo;
              break;
            // :
            case 58:
              length = 1 + strlen(characters), property = previous;
            default:
              if (variable < 1) if (character == 123) --variable;else if (character == 125 && variable++ == 0 && prev() == 125) continue;
              switch (characters += from(character), character * variable) {
                // &
                case 38:
                  ampersand = offset > 0 ? 1 : (characters += '\f', -1);
                  break;
                // ,
                case 44:
                  points[index++] = (strlen(characters) - 1) * ampersand, ampersand = 1;
                  break;
                // @
                case 64:
                  // -
                  if (peek() === 45) characters += delimit(next());
                  atrule = peek(), offset = length = strlen(type = characters += identifier(caret())), character++;
                  break;
                // -
                case 45:
                  if (previous === 45 && strlen(characters) == 2) variable = 0;
              }
          }
          return rulesets;
        }

        /**
         * @param {string} value
         * @param {object} root
         * @param {object?} parent
         * @param {number} index
         * @param {number} offset
         * @param {string[]} rules
         * @param {number[]} points
         * @param {string} type
         * @param {string[]} props
         * @param {string[]} children
         * @param {number} length
         * @param {object[]} siblings
         * @return {object}
         */
        function ruleset(value, root, parent, index, offset, rules, points, type, props, children, length, siblings) {
          var post = offset - 1;
          var rule = offset === 0 ? rules : [''];
          var size = sizeof(rule);
          for (var i = 0, j = 0, k = 0; i < index; ++i) for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x) if (z = trim(j > 0 ? rule[x] + ' ' + y : replace(y, /&\f/g, rule[x]))) props[k++] = z;
          return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length, siblings);
        }

        /**
         * @param {number} value
         * @param {object} root
         * @param {object?} parent
         * @param {object[]} siblings
         * @return {object}
         */
        function comment(value, root, parent, siblings) {
          return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0, siblings);
        }

        /**
         * @param {string} value
         * @param {object} root
         * @param {object?} parent
         * @param {number} length
         * @param {object[]} siblings
         * @return {object}
         */
        function declaration(value, root, parent, length, siblings) {
          return node(value, root, parent, DECLARATION, substr(value, 0, length), substr(value, length + 1, -1), length, siblings);
        }

        /**
         * @param {string} value
         * @param {number} length
         * @param {object[]} children
         * @return {string}
         */
        function prefix(value, length, children) {
          switch (hash(value, length)) {
            // color-adjust
            case 5103:
              return WEBKIT + 'print-' + value + value;
            // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)
            case 5737:
            case 4201:
            case 3177:
            case 3433:
            case 1641:
            case 4457:
            case 2921:
            // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break
            case 5572:
            case 6356:
            case 5844:
            case 3191:
            case 6645:
            case 3005:
            // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,
            case 6391:
            case 5879:
            case 5623:
            case 6135:
            case 4599:
            case 4855:
            // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)
            case 4215:
            case 6389:
            case 5109:
            case 5365:
            case 5621:
            case 3829:
              return WEBKIT + value + value;
            // tab-size
            case 4789:
              return MOZ + value + value;
            // appearance, user-select, transform, hyphens, text-size-adjust
            case 5349:
            case 4246:
            case 4810:
            case 6968:
            case 2756:
              return WEBKIT + value + MOZ + value + MS + value + value;
            // writing-mode
            case 5936:
              switch (charat(value, length + 11)) {
                // vertical-l(r)
                case 114:
                  return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb') + value;
                // vertical-r(l)
                case 108:
                  return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') + value;
                // horizontal(-)tb
                case 45:
                  return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'lr') + value;
                // default: fallthrough to below
              }
            // flex, flex-direction, scroll-snap-type, writing-mode
            case 6828:
            case 4268:
            case 2903:
              return WEBKIT + value + MS + value + value;
            // order
            case 6165:
              return WEBKIT + value + MS + 'flex-' + value + value;
            // align-items
            case 5187:
              return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + 'box-$1$2' + MS + 'flex-$1$2') + value;
            // align-self
            case 5443:
              return WEBKIT + value + MS + 'flex-item-' + replace(value, /flex-|-self/g, '') + (!match(value, /flex-|baseline/) ? MS + 'grid-row-' + replace(value, /flex-|-self/g, '') : '') + value;
            // align-content
            case 4675:
              return WEBKIT + value + MS + 'flex-line-pack' + replace(value, /align-content|flex-|-self/g, '') + value;
            // flex-shrink
            case 5548:
              return WEBKIT + value + MS + replace(value, 'shrink', 'negative') + value;
            // flex-basis
            case 5292:
              return WEBKIT + value + MS + replace(value, 'basis', 'preferred-size') + value;
            // flex-grow
            case 6060:
              return WEBKIT + 'box-' + replace(value, '-grow', '') + WEBKIT + value + MS + replace(value, 'grow', 'positive') + value;
            // transition
            case 4554:
              return WEBKIT + replace(value, /([^-])(transform)/g, '$1' + WEBKIT + '$2') + value;
            // cursor
            case 6187:
              return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + '$1'), /(image-set)/, WEBKIT + '$1'), value, '') + value;
            // background, background-image
            case 5495:
            case 3959:
              return replace(value, /(image-set\([^]*)/, WEBKIT + '$1' + '$`$1');
            // justify-content
            case 4968:
              return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + 'box-pack:$3' + MS + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + WEBKIT + value + value;
            // justify-self
            case 4200:
              if (!match(value, /flex-|baseline/)) return MS + 'grid-column-align' + substr(value, length) + value;
              break;
            // grid-template-(columns|rows)
            case 2592:
            case 3360:
              return MS + replace(value, 'template-', '') + value;
            // grid-(row|column)-start
            case 4384:
            case 3616:
              if (children && children.some(function (element, index) {
                return length = index, match(element.props, /grid-\w+-end/);
              })) {
                return ~indexof(value + (children = children[length].value), 'span') ? value : MS + replace(value, '-start', '') + value + MS + 'grid-row-span:' + (~indexof(children, 'span') ? match(children, /\d+/) : +match(children, /\d+/) - +match(value, /\d+/)) + ';';
              }
              return MS + replace(value, '-start', '') + value;
            // grid-(row|column)-end
            case 4896:
            case 4128:
              return children && children.some(function (element) {
                return match(element.props, /grid-\w+-start/);
              }) ? value : MS + replace(replace(value, '-end', '-span'), 'span ', '') + value;
            // (margin|padding)-inline-(start|end)
            case 4095:
            case 3583:
            case 4068:
            case 2532:
              return replace(value, /(.+)-inline(.+)/, WEBKIT + '$1$2') + value;
            // (min|max)?(width|height|inline-size|block-size)
            case 8116:
            case 7059:
            case 5753:
            case 5535:
            case 5445:
            case 5701:
            case 4933:
            case 4677:
            case 5533:
            case 5789:
            case 5021:
            case 4765:
              // stretch, max-content, min-content, fill-available
              if (strlen(value) - 1 - length > 6) switch (charat(value, length + 1)) {
                // (m)ax-content, (m)in-content
                case 109:
                  // -
                  if (charat(value, length + 4) !== 45) break;
                // (f)ill-available, (f)it-content
                case 102:
                  return replace(value, /(.+:)(.+)-([^]+)/, '$1' + WEBKIT + '$2-$3' + '$1' + MOZ + (charat(value, length + 3) == 108 ? '$3' : '$2-$3')) + value;
                // (s)tretch
                case 115:
                  return ~indexof(value, 'stretch') ? prefix(replace(value, 'stretch', 'fill-available'), length, children) + value : value;
              }
              break;
            // grid-(column|row)
            case 5152:
            case 5920:
              return replace(value, /(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/, function (_, a, b, c, d, e, f) {
                return MS + a + ':' + b + f + (c ? MS + a + '-span:' + (d ? e : +e - +b) + f : '') + value;
              });
            // position: sticky
            case 4949:
              // stick(y)?
              if (charat(value, length + 6) === 121) return replace(value, ':', ':' + WEBKIT) + value;
              break;
            // display: (flex|inline-flex|grid|inline-grid)
            case 6444:
              switch (charat(value, charat(value, 14) === 45 ? 18 : 11)) {
                // (inline-)?fle(x)
                case 120:
                  return replace(value, /(.+:)([^;\s!]+)(;|(\s+)?!.+)?/, '$1' + WEBKIT + (charat(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + WEBKIT + '$2$3' + '$1' + MS + '$2box$3') + value;
                // (inline-)?gri(d)
                case 100:
                  return replace(value, ':', ':' + MS) + value;
              }
              break;
            // scroll-margin, scroll-margin-(top|right|bottom|left)
            case 5719:
            case 2647:
            case 2135:
            case 3927:
            case 2391:
              return replace(value, 'scroll-', 'scroll-snap-') + value;
          }
          return value;
        }

        /**
         * @param {object[]} children
         * @param {function} callback
         * @return {string}
         */
        function serialize(children, callback) {
          var output = '';
          for (var i = 0; i < children.length; i++) output += callback(children[i], i, children, callback) || '';
          return output;
        }

        /**
         * @param {object} element
         * @param {number} index
         * @param {object[]} children
         * @param {function} callback
         */
        function prefixer(element, index, children, callback) {
          if (element.length > -1) if (!element.return) switch (element.type) {
            case DECLARATION:
              element.return = prefix(element.value, element.length, children);
              return;
            case KEYFRAMES:
              return serialize([copy(element, {
                value: replace(element.value, '@', '@' + WEBKIT)
              })], callback);
            case RULESET:
              if (element.length) return combine(children = element.props, function (value) {
                switch (match(value, callback = /(::plac\w+|:read-\w+)/)) {
                  // :read-(only|write)
                  case ':read-only':
                  case ':read-write':
                    lift(copy(element, {
                      props: [replace(value, /:(read-\w+)/, ':' + MOZ + '$1')]
                    }));
                    lift(copy(element, {
                      props: [value]
                    }));
                    assign(element, {
                      props: filter(children, callback)
                    });
                    break;
                  // :placeholder
                  case '::placeholder':
                    lift(copy(element, {
                      props: [replace(value, /:(plac\w+)/, ':' + WEBKIT + 'input-$1')]
                    }));
                    lift(copy(element, {
                      props: [replace(value, /:(plac\w+)/, ':' + MOZ + '$1')]
                    }));
                    lift(copy(element, {
                      props: [replace(value, /:(plac\w+)/, MS + 'input-$1')]
                    }));
                    lift(copy(element, {
                      props: [value]
                    }));
                    assign(element, {
                      props: filter(children, callback)
                    });
                    break;
                }
                return '';
              });
          }
        }
        var cssjanus$1 = {
          exports: {}
        };

        /*!
         * CSSJanus. https://github.com/cssjanus/cssjanus
         *
         * Copyright 2014 Trevor Parscal
         * Copyright 2010 Roan Kattouw
         * Copyright 2008 Google Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */

        (function (module, exports) {
          var cssjanus;

          /**
           * Create a tokenizer object.
           *
           * This utility class is used by CSSJanus to protect strings by replacing them temporarily with
           * tokens and later transforming them back.
           *
           * @class
           * @constructor
           * @param {RegExp} regex Regular expression whose matches to replace by a token
           * @param {string} token Placeholder text
           */
          function Tokenizer(regex, token) {
            var matches = [],
              index = 0;

            /**
             * Add a match.
             *
             * @private
             * @param {string} match Matched string
             * @return {string} Token to leave in the matched string's place
             */
            function tokenizeCallback(match) {
              matches.push(match);
              return token;
            }

            /**
             * Get a match.
             *
             * @private
             * @return {string} Original matched string to restore
             */
            function detokenizeCallback() {
              return matches[index++];
            }
            return {
              /**
               * Replace matching strings with tokens.
               *
               * @param {string} str String to tokenize
               * @return {string} Tokenized string
               */
              tokenize: function tokenize(str) {
                return str.replace(regex, tokenizeCallback);
              },
              /**
               * Restores tokens to their original values.
               *
               * @param {string} str String previously run through tokenize()
               * @return {string} Original string
               */
              detokenize: function detokenize(str) {
                return str.replace(new RegExp('(' + token + ')', 'g'), detokenizeCallback);
              }
            };
          }

          /**
           * Create a CSSJanus object.
           *
           * CSSJanus transforms CSS rules with horizontal relevance so that a left-to-right stylesheet can
           * become a right-to-left stylesheet automatically. Processing can be bypassed for an entire rule
           * or a single property by adding a / * @noflip * / comment above the rule or property.
           *
           * @class
           * @constructor
           */
          function CSSJanus() {
            var
              // Tokens
              temporaryToken = '`TMP`',
              noFlipSingleToken = '`NOFLIP_SINGLE`',
              noFlipClassToken = '`NOFLIP_CLASS`',
              commentToken = '`COMMENT`',
              // Patterns
              nonAsciiPattern = '[^\\u0020-\\u007e]',
              unicodePattern = '(?:(?:\\\\[0-9a-f]{1,6})(?:\\r\\n|\\s)?)',
              numPattern = '(?:[0-9]*\\.[0-9]+|[0-9]+)',
              unitPattern = '(?:em|ex|px|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)',
              directionPattern = 'direction\\s*:\\s*',
              urlSpecialCharsPattern = '[!#$%&*-~]',
              validAfterUriCharsPattern = '[\'"]?\\s*',
              nonLetterPattern = '(^|[^a-zA-Z])',
              charsWithinSelectorPattern = '[^\\}]*?',
              noFlipPattern = '\\/\\*\\!?\\s*@noflip\\s*\\*\\/',
              commentPattern = '\\/\\*[^*]*\\*+([^\\/*][^*]*\\*+)*\\/',
              escapePattern = '(?:' + unicodePattern + '|\\\\[^\\r\\n\\f0-9a-f])',
              nmstartPattern = '(?:[_a-z]|' + nonAsciiPattern + '|' + escapePattern + ')',
              nmcharPattern = '(?:[_a-z0-9-]|' + nonAsciiPattern + '|' + escapePattern + ')',
              identPattern = '-?' + nmstartPattern + nmcharPattern + '*',
              quantPattern = numPattern + '(?:\\s*' + unitPattern + '|' + identPattern + ')?',
              signedQuantPattern = '((?:-?' + quantPattern + ')|(?:inherit|auto))',
              fourNotationQuantPropsPattern = '((?:margin|padding|border-width)\\s*:\\s*)',
              fourNotationColorPropsPattern = '((?:-color|border-style)\\s*:\\s*)',
              colorPattern = '(#?' + nmcharPattern + '+|(?:rgba?|hsla?)\\([ \\d.,%-]+\\))',
              // The use of a lazy match ("*?") may cause a backtrack limit to be exceeded before finding
              // the intended match. This affects 'urlCharsPattern' and 'lookAheadNotOpenBracePattern'.
              // We have not yet found this problem on Node.js, but we have on PHP 7, where it was
              // mitigated by using a possessive quantifier ("*+"), which are not supported in JS.
              // See <https://github.com/cssjanus/php-cssjanus/issues/14> and <https://phabricator.wikimedia.org/T215746#4944830>.
              urlCharsPattern = '(?:' + urlSpecialCharsPattern + '|' + nonAsciiPattern + '|' + escapePattern + ')*?',
              lookAheadNotLetterPattern = '(?![a-zA-Z])',
              lookAheadNotOpenBracePattern = '(?!(' + nmcharPattern + '|\\r?\\n|\\s|#|\\:|\\.|\\,|\\+|>|~|\\(|\\)|\\[|\\]|=|\\*=|~=|\\^=|\'[^\']*\'|"[^"]*"|' + commentToken + ')*?{)',
              lookAheadNotClosingParenPattern = '(?!' + urlCharsPattern + validAfterUriCharsPattern + '\\))',
              lookAheadForClosingParenPattern = '(?=' + urlCharsPattern + validAfterUriCharsPattern + '\\))',
              suffixPattern = '(\\s*(?:!important\\s*)?[;}])',
              // Regular expressions
              temporaryTokenRegExp = /`TMP`/g,
              commentRegExp = new RegExp(commentPattern, 'gi'),
              noFlipSingleRegExp = new RegExp('(' + noFlipPattern + lookAheadNotOpenBracePattern + '[^;}]+;?)', 'gi'),
              noFlipClassRegExp = new RegExp('(' + noFlipPattern + charsWithinSelectorPattern + '})', 'gi'),
              directionLtrRegExp = new RegExp('(' + directionPattern + ')ltr', 'gi'),
              directionRtlRegExp = new RegExp('(' + directionPattern + ')rtl', 'gi'),
              leftRegExp = new RegExp(nonLetterPattern + '(left)' + lookAheadNotLetterPattern + lookAheadNotClosingParenPattern + lookAheadNotOpenBracePattern, 'gi'),
              rightRegExp = new RegExp(nonLetterPattern + '(right)' + lookAheadNotLetterPattern + lookAheadNotClosingParenPattern + lookAheadNotOpenBracePattern, 'gi'),
              leftInUrlRegExp = new RegExp(nonLetterPattern + '(left)' + lookAheadForClosingParenPattern, 'gi'),
              rightInUrlRegExp = new RegExp(nonLetterPattern + '(right)' + lookAheadForClosingParenPattern, 'gi'),
              ltrInUrlRegExp = new RegExp(nonLetterPattern + '(ltr)' + lookAheadForClosingParenPattern, 'gi'),
              rtlInUrlRegExp = new RegExp(nonLetterPattern + '(rtl)' + lookAheadForClosingParenPattern, 'gi'),
              cursorEastRegExp = new RegExp(nonLetterPattern + '([ns]?)e-resize', 'gi'),
              cursorWestRegExp = new RegExp(nonLetterPattern + '([ns]?)w-resize', 'gi'),
              fourNotationQuantRegExp = new RegExp(fourNotationQuantPropsPattern + signedQuantPattern + '(\\s+)' + signedQuantPattern + '(\\s+)' + signedQuantPattern + '(\\s+)' + signedQuantPattern + suffixPattern, 'gi'),
              fourNotationColorRegExp = new RegExp(fourNotationColorPropsPattern + colorPattern + '(\\s+)' + colorPattern + '(\\s+)' + colorPattern + '(\\s+)' + colorPattern + suffixPattern, 'gi'),
              bgHorizontalPercentageRegExp = new RegExp('(background(?:-position)?\\s*:\\s*(?:[^:;}\\s]+\\s+)*?)(' + quantPattern + ')', 'gi'),
              bgHorizontalPercentageXRegExp = new RegExp('(background-position-x\\s*:\\s*)(-?' + numPattern + '%)', 'gi'),
              // border-radius: <length or percentage>{1,4} [optional: / <length or percentage>{1,4} ]
              borderRadiusRegExp = new RegExp('(border-radius\\s*:\\s*)' + signedQuantPattern + '(?:(?:\\s+' + signedQuantPattern + ')(?:\\s+' + signedQuantPattern + ')?(?:\\s+' + signedQuantPattern + ')?)?' + '(?:(?:(?:\\s*\\/\\s*)' + signedQuantPattern + ')(?:\\s+' + signedQuantPattern + ')?(?:\\s+' + signedQuantPattern + ')?(?:\\s+' + signedQuantPattern + ')?)?' + suffixPattern, 'gi'),
              boxShadowRegExp = new RegExp('(box-shadow\\s*:\\s*(?:inset\\s*)?)' + signedQuantPattern, 'gi'),
              textShadow1RegExp = new RegExp('(text-shadow\\s*:\\s*)' + signedQuantPattern + '(\\s*)' + colorPattern, 'gi'),
              textShadow2RegExp = new RegExp('(text-shadow\\s*:\\s*)' + colorPattern + '(\\s*)' + signedQuantPattern, 'gi'),
              textShadow3RegExp = new RegExp('(text-shadow\\s*:\\s*)' + signedQuantPattern, 'gi'),
              translateXRegExp = new RegExp('(transform\\s*:[^;}]*)(translateX\\s*\\(\\s*)' + signedQuantPattern + '(\\s*\\))', 'gi'),
              translateRegExp = new RegExp('(transform\\s*:[^;}]*)(translate\\s*\\(\\s*)' + signedQuantPattern + '((?:\\s*,\\s*' + signedQuantPattern + '){0,2}\\s*\\))', 'gi');

            /**
             * Invert the horizontal value of a background position property.
             *
             * @private
             * @param {string} match Matched property
             * @param {string} pre Text before value
             * @param {string} value Horizontal value
             * @return {string} Inverted property
             */
            function calculateNewBackgroundPosition(match, pre, value) {
              var idx, len;
              if (value.slice(-1) === '%') {
                idx = value.indexOf('.');
                if (idx !== -1) {
                  // Two off, one for the "%" at the end, one for the dot itself
                  len = value.length - idx - 2;
                  value = 100 - parseFloat(value);
                  value = value.toFixed(len) + '%';
                } else {
                  value = 100 - parseFloat(value) + '%';
                }
              }
              return pre + value;
            }

            /**
             * Invert a set of border radius values.
             *
             * @private
             * @param {Array} values Matched values
             * @return {string} Inverted values
             */
            function flipBorderRadiusValues(values) {
              switch (values.length) {
                case 4:
                  values = [values[1], values[0], values[3], values[2]];
                  break;
                case 3:
                  values = [values[1], values[0], values[1], values[2]];
                  break;
                case 2:
                  values = [values[1], values[0]];
                  break;
                case 1:
                  values = [values[0]];
                  break;
              }
              return values.join(' ');
            }

            /**
             * Invert a set of border radius values.
             *
             * @private
             * @param {string} match Matched property
             * @param {string} pre Text before value
             * @param {string} [firstGroup1]
             * @param {string} [firstGroup2]
             * @param {string} [firstGroup3]
             * @param {string} [firstGroup4]
             * @param {string} [secondGroup1]
             * @param {string} [secondGroup2]
             * @param {string} [secondGroup3]
             * @param {string} [secondGroup4]
             * @param {string} [post] Text after value
             * @return {string} Inverted property
             */
            function calculateNewBorderRadius(match, pre) {
              var values,
                args = [].slice.call(arguments),
                firstGroup = args.slice(2, 6).filter(function (val) {
                  return val;
                }),
                secondGroup = args.slice(6, 10).filter(function (val) {
                  return val;
                }),
                post = args[10] || '';
              if (secondGroup.length) {
                values = flipBorderRadiusValues(firstGroup) + ' / ' + flipBorderRadiusValues(secondGroup);
              } else {
                values = flipBorderRadiusValues(firstGroup);
              }
              return pre + values + post;
            }

            /**
             * Flip the sign of a CSS value, possibly with a unit.
             *
             * We can't just negate the value with unary minus due to the units.
             *
             * @private
             * @param {string} value
             * @return {string}
             */
            function flipSign(value) {
              if (parseFloat(value) === 0) {
                // Don't mangle zeroes
                return value;
              }
              if (value[0] === '-') {
                return value.slice(1);
              }
              return '-' + value;
            }

            /**
             * @private
             * @param {string} match
             * @param {string} property
             * @param {string} offset
             * @return {string}
             */
            function calculateNewShadow(match, property, offset) {
              return property + flipSign(offset);
            }

            /**
             * @private
             * @param {string} match
             * @param {string} property
             * @param {string} prefix
             * @param {string} offset
             * @param {string} suffix
             * @return {string}
             */
            function calculateNewTranslate(match, property, prefix, offset, suffix) {
              return property + prefix + flipSign(offset) + suffix;
            }

            /**
             * @private
             * @param {string} match
             * @param {string} property
             * @param {string} color
             * @param {string} space
             * @param {string} offset
             * @return {string}
             */
            function calculateNewFourTextShadow(match, property, color, space, offset) {
              return property + color + space + flipSign(offset);
            }
            return {
              /**
               * Transform a left-to-right stylesheet to right-to-left.
               *
               * @param {string} css Stylesheet to transform
               * @param {Object} options Options
               * @param {boolean} [options.transformDirInUrl=false] Transform directions in URLs
               * (e.g. 'ltr', 'rtl')
               * @param {boolean} [options.transformEdgeInUrl=false] Transform edges in URLs
               * (e.g. 'left', 'right')
               * @return {string} Transformed stylesheet
               */
              'transform': function transform(css, options) {
                // eslint-disable-line quote-props
                // Use single quotes in this object literal key for closure compiler.
                // Tokenizers
                var noFlipSingleTokenizer = new Tokenizer(noFlipSingleRegExp, noFlipSingleToken),
                  noFlipClassTokenizer = new Tokenizer(noFlipClassRegExp, noFlipClassToken),
                  commentTokenizer = new Tokenizer(commentRegExp, commentToken);

                // Tokenize
                css = commentTokenizer.tokenize(noFlipClassTokenizer.tokenize(noFlipSingleTokenizer.tokenize(
                // We wrap tokens in ` , not ~ like the original implementation does.
                // This was done because ` is not a legal character in CSS and can only
                // occur in URLs, where we escape it to %60 before inserting our tokens.
                css.replace('`', '%60'))));

                // Transform URLs
                if (options.transformDirInUrl) {
                  // Replace 'ltr' with 'rtl' and vice versa in background URLs
                  css = css.replace(ltrInUrlRegExp, '$1' + temporaryToken).replace(rtlInUrlRegExp, '$1ltr').replace(temporaryTokenRegExp, 'rtl');
                }
                if (options.transformEdgeInUrl) {
                  // Replace 'left' with 'right' and vice versa in background URLs
                  css = css.replace(leftInUrlRegExp, '$1' + temporaryToken).replace(rightInUrlRegExp, '$1left').replace(temporaryTokenRegExp, 'right');
                }

                // Transform rules
                css = css
                // Replace direction: ltr; with direction: rtl; and vice versa.
                .replace(directionLtrRegExp, '$1' + temporaryToken).replace(directionRtlRegExp, '$1ltr').replace(temporaryTokenRegExp, 'rtl')
                // Flip rules like left: , padding-right: , etc.
                .replace(leftRegExp, '$1' + temporaryToken).replace(rightRegExp, '$1left').replace(temporaryTokenRegExp, 'right')
                // Flip East and West in rules like cursor: nw-resize;
                .replace(cursorEastRegExp, '$1$2' + temporaryToken).replace(cursorWestRegExp, '$1$2e-resize').replace(temporaryTokenRegExp, 'w-resize')
                // Border radius
                .replace(borderRadiusRegExp, calculateNewBorderRadius)
                // Shadows
                .replace(boxShadowRegExp, calculateNewShadow).replace(textShadow1RegExp, calculateNewFourTextShadow).replace(textShadow2RegExp, calculateNewFourTextShadow).replace(textShadow3RegExp, calculateNewShadow)
                // Translate
                .replace(translateXRegExp, calculateNewTranslate).replace(translateRegExp, calculateNewTranslate)
                // Swap the second and fourth parts in four-part notation rules
                // like padding: 1px 2px 3px 4px;
                .replace(fourNotationQuantRegExp, '$1$2$3$8$5$6$7$4$9').replace(fourNotationColorRegExp, '$1$2$3$8$5$6$7$4$9')
                // Flip horizontal background percentages
                .replace(bgHorizontalPercentageRegExp, calculateNewBackgroundPosition).replace(bgHorizontalPercentageXRegExp, calculateNewBackgroundPosition);

                // Detokenize
                css = noFlipSingleTokenizer.detokenize(noFlipClassTokenizer.detokenize(commentTokenizer.detokenize(css)));
                return css;
              }
            };
          }

          /* Initialization */

          cssjanus = new CSSJanus();

          /* Exports */

          if (module.exports) {
            /**
             * Transform a left-to-right stylesheet to right-to-left.
             *
             * This function is a static wrapper around the transform method of an instance of CSSJanus.
             *
             * @param {string} css Stylesheet to transform
             * @param {Object|boolean} [options] Options object, or transformDirInUrl option (back-compat)
             * @param {boolean} [options.transformDirInUrl=false] Transform directions in URLs
             * (e.g. 'ltr', 'rtl')
             * @param {boolean} [options.transformEdgeInUrl=false] Transform edges in URLs
             * (e.g. 'left', 'right')
             * @param {boolean} [transformEdgeInUrl] Back-compat parameter
             * @return {string} Transformed stylesheet
             */
            exports.transform = function (css, options, transformEdgeInUrl) {
              var norm;
              if (typeof options === 'object') {
                norm = options;
              } else {
                norm = {};
                if (typeof options === 'boolean') {
                  norm.transformDirInUrl = options;
                }
                if (typeof transformEdgeInUrl === 'boolean') {
                  norm.transformEdgeInUrl = transformEdgeInUrl;
                }
              }
              return cssjanus.transform(css, norm);
            };
          } else if (typeof window !== 'undefined') {
            /* global window */
            // Allow cssjanus to be used in a browser.
            // eslint-disable-next-line dot-notation
            window['cssjanus'] = cssjanus;
          }
        })(cssjanus$1, cssjanus$1.exports);
        var cssjanusExports = cssjanus$1.exports;
        const cssjanus = /*@__PURE__*/getDefaultExportFromCjs(cssjanusExports);
        function stringifyPreserveComments(element, index, children) {
          switch (element.type) {
            case IMPORT:
            case DECLARATION:
            case COMMENT:
              return element.return = element.return || element.value;
            case RULESET:
              {
                element.value = Array.isArray(element.props) ? element.props.join(',') : element.props;
                if (Array.isArray(element.children)) {
                  element.children.forEach(function (x) {
                    if (x.type === COMMENT) x.children = x.value;
                  });
                }
              }
          }
          var serializedChildren = serialize(Array.prototype.concat(element.children), stringifyPreserveComments);
          return strlen(serializedChildren) ? element.return = element.value + '{' + serializedChildren + '}' : '';
        }
        function stylisRTLPlugin(element, index, children, callback) {
          if (element.type === KEYFRAMES || element.type === SUPPORTS || element.type === RULESET && (!element.parent || element.parent.type === MEDIA || element.parent.type === RULESET)) {
            var stringified = cssjanus.transform(stringifyPreserveComments(element));
            element.children = stringified ? compile(stringified)[0].children : [];
            element.return = '';
          }
        }
        // stable identifier that will not be dropped by minification unless the whole module
        // is unused
        Object.defineProperty(stylisRTLPlugin, 'name', {
          value: 'stylisRTLPlugin'
        });
        const rtlLanguage = exports("K", ["ar"]);
        const setLangFromSession = exports("L", i18n => {
          const lang = CookiesService$1.getValue("lang");
          if (!lang) {
            return;
          }
          lang && i18n.changeLanguage(lang);
          setDocumentLang(lang);
        });
        const setDocumentLang = exports("y", lang => {
          const dir = rtlLanguage.includes(lang) ? "rtl" : "ltr";
          document.documentElement.setAttribute("lang", lang);
          document.dir = dir;
        });
        const cacheRtl = exports("N", lang => createCache({
          key: rtlLanguage.includes(lang) ? "muirtl" : "muiltr",
          stylisPlugins: rtlLanguage.includes(lang) ? [prefixer, stylisRTLPlugin] : null
        }));
        function Navigation(props) {
          const state = useSelector(state2 => {
            return {
              has_previous: state2.runState.values.Survey.has_previous && state2.runState.data.survey.allowPrevious,
              has_next: state2.runState.values.Survey.has_next,
              can_save: state2.runState.data.survey.allowIncomplete
            };
          }, shallowEqual$1);
          const dispatch = useDispatch();
          const _useTranslation = useTranslation("run"),
            t = _useTranslation.t,
            i18n = _useTranslation.i18n;
          const isRtl = rtlLanguage.includes(i18n.language);
          const previous = () => {
            dispatch(navigatePrevious());
          };
          const next = () => {
            dispatch(navigateNext());
          };
          return props.navigationIndex.name == "end" ? "" : /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
            className: "pb-10 ta-center",
            children: [state.has_previous ? /* @__PURE__ */jsxRuntimeExports.jsx(Button$1, {
              variant: "contained",
              className: isRtl ? "ml-14" : "mr-14",
              onClick: () => {
                previous();
              },
              children: t("previous")
            }) : "", /* @__PURE__ */jsxRuntimeExports.jsx(Button$1, {
              variant: "contained",
              onClick: () => {
                next();
              },
              children: state.has_next ? t("next") : t("finish")
            })]
          });
        }
        const surveyContent = "_surveyContent_11qtt_1";
        const surveyGroups = "_surveyGroups_11qtt_5";
        const cardImage = "_cardImage_11qtt_11";
        const styles$5 = {
          surveyContent: surveyContent,
          surveyGroups: surveyGroups,
          cardImage: cardImage
        };
        const buildResourceUrl = exports("bo", fileName => {
          const surveyId = sessionStorage.getItem("surveyId");
          return `${BACKEND_BASE_URL}/survey/${surveyId}/resource/${fileName}`;
        });
        const sharingUrl = exports("a9", (surveyId, preview, lang) => {
          let segment = "run-survey";
          if (preview) {
            segment = "preview-survey";
          }
          let searchParams = "";
          if (lang) {
            searchParams = `?lang=${lang}`;
          }
          return `${PROTOCOL}://${FRONT_END_HOST}/${segment}/${surveyId}${searchParams}`;
        });
        function getFileFromPath(_x11) {
          return _getFileFromPath.apply(this, arguments);
        }
        function _getFileFromPath() {
          _getFileFromPath = _asyncToGenerator(function* (filePath) {
            const response = yield fetch(filePath);
            const blob = yield response.blob();
            const fileName = filePath.substring(filePath.lastIndexOf("/") + 1);
            return new File([blob], fileName);
          });
          return _getFileFromPath.apply(this, arguments);
        }
        const FORM_ID = "frankie-form";
        const content = "_content_vh4hz_1";
        const question = "_question_vh4hz_8";
        const required = "_required_vh4hz_12";
        const header = "_header_vh4hz_16";
        const textDescription$1 = "_textDescription_vh4hz_20";
        const groupQuestion = "_groupQuestion_vh4hz_25";
        const styles$4 = {
          content: content,
          question: question,
          required: required,
          header: header,
          textDescription: textDescription$1,
          groupQuestion: groupQuestion
        };
        const DateTimeQuestion = React.lazy(() => __vitePreload(() => module.import('./DateTimeQuestion-legacy-WoL7OIFA.js'), false ? "__VITE_PRELOAD__" : void 0));
        const SCQ = React.lazy(() => __vitePreload(() => module.import('./Scq-legacy-dJS_xN1A.js'), false ? "__VITE_PRELOAD__" : void 0));
        const SCQArray = React.lazy(() => __vitePreload(() => module.import('./SCQArray-legacy-HQxKobze.js'), false ? "__VITE_PRELOAD__" : void 0));
        const Signature = React.lazy(() => __vitePreload(() => module.import('./Signature-legacy-rXOPMzWk.js'), false ? "__VITE_PRELOAD__" : void 0));
        const PhotoCapture = React.lazy(() => __vitePreload(() => module.import('./PhotoCapture-legacy-eSozzzFu.js'), false ? "__VITE_PRELOAD__" : void 0));
        const VideoCapture = React.lazy(() => __vitePreload(() => module.import('./VideoCapture-legacy-k9hXJrZd.js'), false ? "__VITE_PRELOAD__" : void 0));
        const MCQ = React.lazy(() => __vitePreload(() => module.import('./Mcq-legacy-RMHvi4l2.js'), false ? "__VITE_PRELOAD__" : void 0));
        const NumberQuestion = React.lazy(() => __vitePreload(() => module.import('./NumberQuestion-legacy-cYrZKTds.js'), false ? "__VITE_PRELOAD__" : void 0));
        const TextQuestion = React.lazy(() => __vitePreload(() => module.import('./TextQuestion-legacy-OFaH7D89.js'), false ? "__VITE_PRELOAD__" : void 0));
        const VideoDisplay = React.lazy(() => __vitePreload(() => module.import('./VideoDisplay-legacy-GkOxFRQq.js'), false ? "__VITE_PRELOAD__" : void 0));
        const ImageDisplay = React.lazy(() => __vitePreload(() => module.import('./ImageDisplay-legacy-BE23Hjtv.js'), false ? "__VITE_PRELOAD__" : void 0));
        const ImageRanking = React.lazy(() => __vitePreload(() => module.import('./ImageRanking-legacy-9j9o2pZX.js'), false ? "__VITE_PRELOAD__" : void 0));
        const ParagraphQuestion = React.lazy(() => __vitePreload(() => module.import('./ParagraphQuestion-legacy-xdfKiICJ.js'), false ? "__VITE_PRELOAD__" : void 0));
        const Barcode = React.lazy(() => __vitePreload(() => module.import('./Barcode-legacy-4CSht8Lh.js'), false ? "__VITE_PRELOAD__" : void 0));
        const EmailQuestion = React.lazy(() => __vitePreload(() => module.import('./EmailQuestion-legacy-syXZOTsG.js'), false ? "__VITE_PRELOAD__" : void 0));
        const ImageScq = React.lazy(() => __vitePreload(() => module.import('./ImageScq-legacy-NJH3ZFWC.js'), false ? "__VITE_PRELOAD__" : void 0));
        const ImageMcq = React.lazy(() => __vitePreload(() => module.import('./ImageMcq-legacy-GwxirxTe.js'), false ? "__VITE_PRELOAD__" : void 0));
        const Ranking = React.lazy(() => __vitePreload(() => module.import('./Ranking-legacy-6gJEJcMr.js'), false ? "__VITE_PRELOAD__" : void 0));
        const NPS = React.lazy(() => __vitePreload(() => module.import('./NPS-legacy-xEuOAdfK.js'), false ? "__VITE_PRELOAD__" : void 0));
        const Content$2 = React.lazy(() => __vitePreload(() => Promise.resolve().then(() => index$1), false ? "__VITE_PRELOAD__" : void 0));
        const Validation = React.lazy(() => __vitePreload(() => module.import('./index-legacy-JNavHwgI.js'), false ? "__VITE_PRELOAD__" : void 0));
        const FileUpload = React.lazy(() => __vitePreload(() => module.import('./FileUpload-legacy-x51pcD1t.js'), false ? "__VITE_PRELOAD__" : void 0));
        const IconScq = React.lazy(() => __vitePreload(() => module.import('./IconScq-legacy-GpX1ZLXq.js'), false ? "__VITE_PRELOAD__" : void 0));
        const IconMcq = React.lazy(() => __vitePreload(() => module.import('./IconMcq-legacy-rjleFpNz.js'), false ? "__VITE_PRELOAD__" : void 0));
        const SCQIconArray = React.lazy(() => __vitePreload(() => module.import('./SCQIconArray-legacy-PCa10eEg.js'), false ? "__VITE_PRELOAD__" : void 0));
        function Question(props) {
          var _props$component$cont, _props$component$cont2, _props$component$cont3, _props$component$cont4;
          console.log("rendering: " + props.component.code);
          const state = useSelector(state2 => {
            let questionState = state2.runState.values[props.component.qualifiedCode];
            let show_errors = state2.runState.values.Survey.show_errors;
            let isDirty = state2.templateState[props.component.qualifiedCode];
            let validity = questionState === null || questionState === void 0 ? void 0 : questionState.validity;
            let invalid = (show_errors || isDirty) && validity === false;
            return {
              showQuestion: typeof (questionState === null || questionState === void 0 ? void 0 : questionState.relevance) === "undefined" || (questionState === null || questionState === void 0 ? void 0 : questionState.relevance),
              invalid,
              showValidation: invalid
            };
          }, shallowEqual$1);
          const theme = useTheme();
          const showDescription = ((_props$component$cont = props.component.content) === null || _props$component$cont === void 0 ? void 0 : _props$component$cont.description) && stripTags(props.component.content.description).length > 0;
          const showTitle = ((_props$component$cont2 = props.component.content) === null || _props$component$cont2 === void 0 ? void 0 : _props$component$cont2.label) && stripTags((_props$component$cont3 = props.component.content) === null || _props$component$cont3 === void 0 ? void 0 : _props$component$cont3.label).length > 0;
          const showHeader = showTitle || showDescription;
          const showQuestion = () => {
            switch (props.component.type) {
              case "date_time":
                return /* @__PURE__ */jsxRuntimeExports.jsx(DateTimeQuestion, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "date":
                return /* @__PURE__ */jsxRuntimeExports.jsx(DateTimeQuestion, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "time":
                return /* @__PURE__ */jsxRuntimeExports.jsx(DateTimeQuestion, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "scq":
                return /* @__PURE__ */jsxRuntimeExports.jsx(SCQ, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "scq_array":
                return /* @__PURE__ */jsxRuntimeExports.jsx(SCQArray, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "scq_icon_array":
                return /* @__PURE__ */jsxRuntimeExports.jsx(SCQIconArray, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "file_upload":
                return /* @__PURE__ */jsxRuntimeExports.jsx(FileUpload, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "signature":
                return /* @__PURE__ */jsxRuntimeExports.jsx(Signature, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "photo_capture":
                return /* @__PURE__ */jsxRuntimeExports.jsx(PhotoCapture, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "video_capture":
                return /* @__PURE__ */jsxRuntimeExports.jsx(VideoCapture, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "mcq":
                return /* @__PURE__ */jsxRuntimeExports.jsx(MCQ, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "number":
                return /* @__PURE__ */jsxRuntimeExports.jsx(NumberQuestion, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "text":
                return /* @__PURE__ */jsxRuntimeExports.jsx(TextQuestion, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "video_display":
                return /* @__PURE__ */jsxRuntimeExports.jsx(VideoDisplay, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "image_display":
                return /* @__PURE__ */jsxRuntimeExports.jsx(ImageDisplay, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "image_ranking":
                return /* @__PURE__ */jsxRuntimeExports.jsx(ImageRanking, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "paragraph":
                return /* @__PURE__ */jsxRuntimeExports.jsx(ParagraphQuestion, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "barcode":
                return /* @__PURE__ */jsxRuntimeExports.jsx(Barcode, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "email":
                return /* @__PURE__ */jsxRuntimeExports.jsx(EmailQuestion, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "image_scq":
                return /* @__PURE__ */jsxRuntimeExports.jsx(ImageScq, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "icon_scq":
                return /* @__PURE__ */jsxRuntimeExports.jsx(IconScq, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "icon_mcq":
                return /* @__PURE__ */jsxRuntimeExports.jsx(IconMcq, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "image_mcq":
                return /* @__PURE__ */jsxRuntimeExports.jsx(ImageMcq, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "ranking":
                return /* @__PURE__ */jsxRuntimeExports.jsx(Ranking, {
                  component: props.component
                }, props.component.qualifiedCode);
              case "nps":
                return /* @__PURE__ */jsxRuntimeExports.jsx(NPS, {
                  component: props.component
                }, props.component.qualifiedCode);
              default:
                return "";
            }
          };
          return state.showQuestion ? /* @__PURE__ */jsxRuntimeExports.jsxs(Box$1, {
            sx: {
              borderColor: state.invalid ? "error.main" : "grey.500",
              backgroundColor: "background.paper"
            },
            className: `${styles$4.groupQuestion}`,
            children: [showHeader && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              className: styles$4.header,
              children: [showTitle && /* @__PURE__ */jsxRuntimeExports.jsx(Box$1, {
                style: {
                  fontFamily: theme.textStyles.question.font,
                  color: theme.textStyles.text.color,
                  fontSize: theme.textStyles.question.size
                },
                children: /* @__PURE__ */jsxRuntimeExports.jsx(Content$2, {
                  className: `${styles$4.content} ${styles$4.question}`,
                  name: "label",
                  lang: props.lang,
                  elementCode: props.component.qualifiedCode,
                  content: (_props$component$cont4 = props.component.content) === null || _props$component$cont4 === void 0 ? void 0 : _props$component$cont4.label
                })
              }), showDescription && /* @__PURE__ */jsxRuntimeExports.jsx(Box$1, {
                className: styles$4.textDescription,
                children: /* @__PURE__ */jsxRuntimeExports.jsx(Content$2, {
                  elementCode: props.component.code,
                  name: "description",
                  lang: props.lang,
                  content: props.component.content.description
                })
              })]
            }), /* @__PURE__ */jsxRuntimeExports.jsx(reactExports.Suspense, {
              fallback: /* @__PURE__ */jsxRuntimeExports.jsx(CircularProgress$1, {}),
              children: showQuestion()
            }), !state.showValidation ? "" : /* @__PURE__ */jsxRuntimeExports.jsx(Validation, {
              component: props.component
            })]
          }) : "";
        }
        const Question$1 = React.memo(Question);
        function Content(props) {
          const isComplex = props.content && props.content.search(/data-instruction/) >= 0;
          const state = useSelector(state2 => {
            if (!props.content || !isComplex || !state2.runState.values[props.elementCode] || !props.name || !props.lang) {
              return void 0;
            } else {
              return state2.runState.values[props.elementCode][`reference_${props.name}_${props.lang}`];
            }
          });
          const lang = useSelector(state2 => {
            return state2.runState.values["Survey"].lang;
          });
          const isRtl = rtlLanguage.includes(lang);
          if (!props.content) {
            return "";
          } else if (!isComplex) {
            return /* @__PURE__ */jsxRuntimeExports.jsx("div", {
              className: `${isRtl ? "rtl" : "ltr"} ql-editor no-padding`,
              dangerouslySetInnerHTML: {
                __html: props.content
              }
            });
          } else {
            return /* @__PURE__ */jsxRuntimeExports.jsx("div", {
              className: `${isRtl ? "rtl" : "ltr"} ql-editor no-padding`,
              dangerouslySetInnerHTML: {
                __html: replaceMentions(props.content, state)
              }
            });
          }
        }
        const Content$1 = React.memo(Content);
        function replaceMentions(html, referenceValue) {
          let doc = document.createElement("div");
          doc.innerHTML = html;
          doc.querySelectorAll("span[data-instruction]").forEach(function (el) {
            let attribute = el.getAttribute("data-instruction");
            if (attribute && referenceValue) {
              let attrArray = attribute.split(".");
              if (attrArray && attrArray.length == 2 && referenceValue[attrArray[0]] && referenceValue[attrArray[0]][attrArray[1]]) {
                el.replaceWith(referenceValue[attrArray[0]][attrArray[1]]);
              } else {
                el.replaceWith("");
              }
            } else {
              el.replaceWith("");
            }
          });
          return doc.innerHTML;
        }
        const index$1 = /*#__PURE__*/Object.freeze( /*#__PURE__*/Object.defineProperty({
          __proto__: null,
          default: Content$1
        }, Symbol.toStringTag, {
          value: 'Module'
        }));
        const textHeader = "_textHeader_1i8wa_1";
        const textDescription = "_textDescription_1i8wa_5";
        const titleRow = "_titleRow_1i8wa_9";
        const groupHeader = "_groupHeader_1i8wa_19";
        const topLevel = "_topLevel_1i8wa_26";
        const styles$3 = {
          textHeader: textHeader,
          textDescription: textDescription,
          titleRow: titleRow,
          groupHeader: groupHeader,
          topLevel: topLevel
        };
        function Group(props) {
          const theme = useTheme();
          const state = useSelector(state2 => {
            let groupState = state2.runState.values[props.group.code];
            return {
              showGroup: typeof (groupState === null || groupState === void 0 ? void 0 : groupState.relevance) === "undefined" || groupState.relevance
            };
          }, shallowEqual$1);
          const showGroup = () => {
            var _props$group$content, _props$group$content2;
            return /* @__PURE__ */jsxRuntimeExports.jsxs(React.Fragment, {
              children: [/* @__PURE__ */jsxRuntimeExports.jsxs(Box$1, {
                sx: {
                  borderColor: "grey.500",
                  boxShadow: 1,
                  backgroundColor: "background.paper"
                },
                className: "card-custom",
                children: [/* @__PURE__ */jsxRuntimeExports.jsx(Box$1, {
                  sx: {
                    backgroundColor: "primary.main",
                    height: "8px"
                  },
                  className: styles$3.groupHeader
                }), /* @__PURE__ */jsxRuntimeExports.jsxs(Box$1, {
                  sx: {
                    backgroundColor: "background.paper"
                  },
                  className: styles$3.titleRow,
                  children: [/* @__PURE__ */jsxRuntimeExports.jsx("div", {
                    className: styles$3.textHeader,
                    style: {
                      fontFamily: theme.textStyles.group.font,
                      color: theme.textStyles.group.color,
                      fontSize: theme.textStyles.group.size
                    },
                    children: /* @__PURE__ */jsxRuntimeExports.jsx(Content$1, {
                      elementCode: props.group.code,
                      name: "label",
                      lang: props.lang,
                      content: (_props$group$content = props.group.content) === null || _props$group$content === void 0 ? void 0 : _props$group$content.label
                    })
                  }), /* @__PURE__ */jsxRuntimeExports.jsx(Box$1, {
                    className: styles$3.textDescription,
                    children: /* @__PURE__ */jsxRuntimeExports.jsx(Content$1, {
                      elementCode: props.group.code,
                      name: "description",
                      lang: props.lang,
                      content: (_props$group$content2 = props.group.content) === null || _props$group$content2 === void 0 ? void 0 : _props$group$content2.description
                    })
                  })]
                })]
              }), props.group && props.group.questions ? props.group.questions.filter(quest => quest.inCurrentNavigation).map(quest => /* @__PURE__ */jsxRuntimeExports.jsx(Question$1, {
                component: quest,
                lang: props.lang
              }, quest.code)) : ""]
            });
          };
          return state.showGroup && (props.group ? showGroup() : "");
        }
        const Group$1 = React.memo(Group);

        // cheap lodash replacements
        function memoize(fn) {
          let result = null;
          const memoized = () => {
            if (result == null) {
              result = fn();
            }
            return result;
          };
          return memoized;
        }
        /**
         * drop-in replacement for _.without
         */
        function without(items, item) {
          return items.filter(i => i !== item);
        }
        function union(itemsA, itemsB) {
          const set = new Set();
          const insertItem = item => set.add(item);
          itemsA.forEach(insertItem);
          itemsB.forEach(insertItem);
          const result = [];
          set.forEach(key => result.push(key));
          return result;
        }
        class EnterLeaveCounter {
          enter(enteringNode) {
            const previousLength = this.entered.length;
            const isNodeEntered = node => this.isNodeInDocument(node) && (!node.contains || node.contains(enteringNode));
            this.entered = union(this.entered.filter(isNodeEntered), [enteringNode]);
            return previousLength === 0 && this.entered.length > 0;
          }
          leave(leavingNode) {
            const previousLength = this.entered.length;
            this.entered = without(this.entered.filter(this.isNodeInDocument), leavingNode);
            return previousLength > 0 && this.entered.length === 0;
          }
          reset() {
            this.entered = [];
          }
          constructor(isNodeInDocument) {
            this.entered = [];
            this.isNodeInDocument = isNodeInDocument;
          }
        }
        class NativeDragSource {
          initializeExposedProperties() {
            Object.keys(this.config.exposeProperties).forEach(property => {
              Object.defineProperty(this.item, property, {
                configurable: true,
                enumerable: true,
                get() {
                  // eslint-disable-next-line no-console
                  console.warn(`Browser doesn't allow reading "${property}" until the drop event.`);
                  return null;
                }
              });
            });
          }
          loadDataTransfer(dataTransfer) {
            if (dataTransfer) {
              const newProperties = {};
              Object.keys(this.config.exposeProperties).forEach(property => {
                const propertyFn = this.config.exposeProperties[property];
                if (propertyFn != null) {
                  newProperties[property] = {
                    value: propertyFn(dataTransfer, this.config.matchesTypes),
                    configurable: true,
                    enumerable: true
                  };
                }
              });
              Object.defineProperties(this.item, newProperties);
            }
          }
          canDrag() {
            return true;
          }
          beginDrag() {
            return this.item;
          }
          isDragging(monitor, handle) {
            return handle === monitor.getSourceId();
          }
          endDrag() {
            // empty
          }
          constructor(config) {
            this.config = config;
            this.item = {};
            this.initializeExposedProperties();
          }
        }
        const FILE = '__NATIVE_FILE__';
        const URL$1 = '__NATIVE_URL__';
        const TEXT = '__NATIVE_TEXT__';
        const HTML = '__NATIVE_HTML__';
        const NativeTypes = /*#__PURE__*/Object.freeze( /*#__PURE__*/Object.defineProperty({
          __proto__: null,
          FILE,
          HTML,
          TEXT,
          URL: URL$1
        }, Symbol.toStringTag, {
          value: 'Module'
        }));
        function getDataFromDataTransfer(dataTransfer, typesToTry, defaultValue) {
          const result = typesToTry.reduce((resultSoFar, typeToTry) => resultSoFar || dataTransfer.getData(typeToTry), '');
          return result != null ? result : defaultValue;
        }
        const nativeTypesConfig = {
          [FILE]: {
            exposeProperties: {
              files: dataTransfer => Array.prototype.slice.call(dataTransfer.files),
              items: dataTransfer => dataTransfer.items,
              dataTransfer: _dataTransfer => _dataTransfer
            },
            matchesTypes: ['Files']
          },
          [HTML]: {
            exposeProperties: {
              html: (dataTransfer, matchesTypes) => getDataFromDataTransfer(dataTransfer, matchesTypes, ''),
              dataTransfer: _dataTransfer2 => _dataTransfer2
            },
            matchesTypes: ['Html', 'text/html']
          },
          [URL$1]: {
            exposeProperties: {
              urls: (dataTransfer, matchesTypes) => getDataFromDataTransfer(dataTransfer, matchesTypes, '').split('\n'),
              dataTransfer: _dataTransfer3 => _dataTransfer3
            },
            matchesTypes: ['Url', 'text/uri-list']
          },
          [TEXT]: {
            exposeProperties: {
              text: (dataTransfer, matchesTypes) => getDataFromDataTransfer(dataTransfer, matchesTypes, ''),
              dataTransfer: _dataTransfer4 => _dataTransfer4
            },
            matchesTypes: ['Text', 'text/plain']
          }
        };
        function createNativeDragSource(type, dataTransfer) {
          const config = nativeTypesConfig[type];
          if (!config) {
            throw new Error(`native type ${type} has no configuration`);
          }
          const result = new NativeDragSource(config);
          result.loadDataTransfer(dataTransfer);
          return result;
        }
        function matchNativeItemType(dataTransfer) {
          if (!dataTransfer) {
            return null;
          }
          const dataTransferTypes = Array.prototype.slice.call(dataTransfer.types || []);
          return Object.keys(nativeTypesConfig).filter(nativeItemType => {
            const typeConfig = nativeTypesConfig[nativeItemType];
            if (!(typeConfig === null || typeConfig === void 0 ? void 0 : typeConfig.matchesTypes)) {
              return false;
            }
            return typeConfig.matchesTypes.some(t => dataTransferTypes.indexOf(t) > -1);
          })[0] || null;
        }
        const isFirefox = memoize(() => /firefox/i.test(navigator.userAgent));
        const isSafari = memoize(() => Boolean(window.safari));
        class MonotonicInterpolant {
          interpolate(x) {
            const xs = this.xs,
              ys = this.ys,
              c1s = this.c1s,
              c2s = this.c2s,
              c3s = this.c3s;
            // The rightmost point in the dataset should give an exact result
            let i = xs.length - 1;
            if (x === xs[i]) {
              return ys[i];
            }
            // Search for the interval x is in, returning the corresponding y if x is one of the original xs
            let low = 0;
            let high = c3s.length - 1;
            let mid;
            while (low <= high) {
              mid = Math.floor(0.5 * (low + high));
              const xHere = xs[mid];
              if (xHere < x) {
                low = mid + 1;
              } else if (xHere > x) {
                high = mid - 1;
              } else {
                return ys[mid];
              }
            }
            i = Math.max(0, high);
            // Interpolate
            const diff = x - xs[i];
            const diffSq = diff * diff;
            return ys[i] + c1s[i] * diff + c2s[i] * diffSq + c3s[i] * diff * diffSq;
          }
          constructor(xs, ys) {
            const length = xs.length;
            // Rearrange xs and ys so that xs is sorted
            const indexes = [];
            for (let i = 0; i < length; i++) {
              indexes.push(i);
            }
            indexes.sort((a, b) => xs[a] < xs[b] ? -1 : 1);
            const dxs = [];
            const ms = [];
            let dx;
            let dy;
            for (let i1 = 0; i1 < length - 1; i1++) {
              dx = xs[i1 + 1] - xs[i1];
              dy = ys[i1 + 1] - ys[i1];
              dxs.push(dx);
              ms.push(dy / dx);
            }
            // Get degree-1 coefficients
            const c1s = [ms[0]];
            for (let i2 = 0; i2 < dxs.length - 1; i2++) {
              const m2 = ms[i2];
              const mNext = ms[i2 + 1];
              if (m2 * mNext <= 0) {
                c1s.push(0);
              } else {
                dx = dxs[i2];
                const dxNext = dxs[i2 + 1];
                const common = dx + dxNext;
                c1s.push(3 * common / ((common + dxNext) / m2 + (common + dx) / mNext));
              }
            }
            c1s.push(ms[ms.length - 1]);
            // Get degree-2 and degree-3 coefficients
            const c2s = [];
            const c3s = [];
            let m;
            for (let i3 = 0; i3 < c1s.length - 1; i3++) {
              m = ms[i3];
              const c1 = c1s[i3];
              const invDx = 1 / dxs[i3];
              const common = c1 + c1s[i3 + 1] - m - m;
              c2s.push((m - c1 - common) * invDx);
              c3s.push(common * invDx * invDx);
            }
            this.xs = xs;
            this.ys = ys;
            this.c1s = c1s;
            this.c2s = c2s;
            this.c3s = c3s;
          }
        }
        const ELEMENT_NODE = 1;
        function getNodeClientOffset(node) {
          const el = node.nodeType === ELEMENT_NODE ? node : node.parentElement;
          if (!el) {
            return null;
          }
          const _el$getBoundingClient = el.getBoundingClientRect(),
            top = _el$getBoundingClient.top,
            left = _el$getBoundingClient.left;
          return {
            x: left,
            y: top
          };
        }
        function getEventClientOffset(e) {
          return {
            x: e.clientX,
            y: e.clientY
          };
        }
        function isImageNode(node) {
          var ref;
          return node.nodeName === 'IMG' && (isFirefox() || !((ref = document.documentElement) === null || ref === void 0 ? void 0 : ref.contains(node)));
        }
        function getDragPreviewSize(isImage, dragPreview, sourceWidth, sourceHeight) {
          let dragPreviewWidth = isImage ? dragPreview.width : sourceWidth;
          let dragPreviewHeight = isImage ? dragPreview.height : sourceHeight;
          // Work around @2x coordinate discrepancies in browsers
          if (isSafari() && isImage) {
            dragPreviewHeight /= window.devicePixelRatio;
            dragPreviewWidth /= window.devicePixelRatio;
          }
          return {
            dragPreviewWidth,
            dragPreviewHeight
          };
        }
        function getDragPreviewOffset(sourceNode, dragPreview, clientOffset, anchorPoint, offsetPoint) {
          // The browsers will use the image intrinsic size under different conditions.
          // Firefox only cares if it's an image, but WebKit also wants it to be detached.
          const isImage = isImageNode(dragPreview);
          const dragPreviewNode = isImage ? sourceNode : dragPreview;
          const dragPreviewNodeOffsetFromClient = getNodeClientOffset(dragPreviewNode);
          const offsetFromDragPreview = {
            x: clientOffset.x - dragPreviewNodeOffsetFromClient.x,
            y: clientOffset.y - dragPreviewNodeOffsetFromClient.y
          };
          const sourceWidth = sourceNode.offsetWidth,
            sourceHeight = sourceNode.offsetHeight;
          const anchorX = anchorPoint.anchorX,
            anchorY = anchorPoint.anchorY;
          const _getDragPreviewSize = getDragPreviewSize(isImage, dragPreview, sourceWidth, sourceHeight),
            dragPreviewWidth = _getDragPreviewSize.dragPreviewWidth,
            dragPreviewHeight = _getDragPreviewSize.dragPreviewHeight;
          const calculateYOffset = () => {
            const interpolantY = new MonotonicInterpolant([0, 0.5, 1], [
            // Dock to the top
            offsetFromDragPreview.y,
            // Align at the center
            offsetFromDragPreview.y / sourceHeight * dragPreviewHeight,
            // Dock to the bottom
            offsetFromDragPreview.y + dragPreviewHeight - sourceHeight]);
            let y = interpolantY.interpolate(anchorY);
            // Work around Safari 8 positioning bug
            if (isSafari() && isImage) {
              // We'll have to wait for @3x to see if this is entirely correct
              y += (window.devicePixelRatio - 1) * dragPreviewHeight;
            }
            return y;
          };
          const calculateXOffset = () => {
            // Interpolate coordinates depending on anchor point
            // If you know a simpler way to do this, let me know
            const interpolantX = new MonotonicInterpolant([0, 0.5, 1], [
            // Dock to the left
            offsetFromDragPreview.x,
            // Align at the center
            offsetFromDragPreview.x / sourceWidth * dragPreviewWidth,
            // Dock to the right
            offsetFromDragPreview.x + dragPreviewWidth - sourceWidth]);
            return interpolantX.interpolate(anchorX);
          };
          // Force offsets if specified in the options.
          const offsetX = offsetPoint.offsetX,
            offsetY = offsetPoint.offsetY;
          const isManualOffsetX = offsetX === 0 || offsetX;
          const isManualOffsetY = offsetY === 0 || offsetY;
          return {
            x: isManualOffsetX ? offsetX : calculateXOffset(),
            y: isManualOffsetY ? offsetY : calculateYOffset()
          };
        }
        class OptionsReader {
          get window() {
            if (this.globalContext) {
              return this.globalContext;
            } else if (typeof window !== 'undefined') {
              return window;
            }
            return undefined;
          }
          get document() {
            var ref;
            if ((ref = this.globalContext) === null || ref === void 0 ? void 0 : ref.document) {
              return this.globalContext.document;
            } else if (this.window) {
              return this.window.document;
            } else {
              return undefined;
            }
          }
          get rootElement() {
            var ref;
            return ((ref = this.optionsArgs) === null || ref === void 0 ? void 0 : ref.rootElement) || this.window;
          }
          constructor(globalContext, options) {
            this.ownerDocument = null;
            this.globalContext = globalContext;
            this.optionsArgs = options;
          }
        }
        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === 'function') {
              ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
              }));
            }
            ownKeys.forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          }
          return target;
        }
        class HTML5BackendImpl {
          /**
          * Generate profiling statistics for the HTML5Backend.
          */
          profile() {
            var ref, ref1;
            return {
              sourcePreviewNodes: this.sourcePreviewNodes.size,
              sourcePreviewNodeOptions: this.sourcePreviewNodeOptions.size,
              sourceNodeOptions: this.sourceNodeOptions.size,
              sourceNodes: this.sourceNodes.size,
              dragStartSourceIds: ((ref = this.dragStartSourceIds) === null || ref === void 0 ? void 0 : ref.length) || 0,
              dropTargetIds: this.dropTargetIds.length,
              dragEnterTargetIds: this.dragEnterTargetIds.length,
              dragOverTargetIds: ((ref1 = this.dragOverTargetIds) === null || ref1 === void 0 ? void 0 : ref1.length) || 0
            };
          }
          // public for test
          get window() {
            return this.options.window;
          }
          get document() {
            return this.options.document;
          }
          /**
          * Get the root element to use for event subscriptions
          */
          get rootElement() {
            return this.options.rootElement;
          }
          setup() {
            const root = this.rootElement;
            if (root === undefined) {
              return;
            }
            if (root.__isReactDndBackendSetUp) {
              throw new Error('Cannot have two HTML5 backends at the same time.');
            }
            root.__isReactDndBackendSetUp = true;
            this.addEventListeners(root);
          }
          teardown() {
            const root = this.rootElement;
            if (root === undefined) {
              return;
            }
            root.__isReactDndBackendSetUp = false;
            this.removeEventListeners(this.rootElement);
            this.clearCurrentDragSourceNode();
            if (this.asyncEndDragFrameId) {
              var ref;
              (ref = this.window) === null || ref === void 0 ? void 0 : ref.cancelAnimationFrame(this.asyncEndDragFrameId);
            }
          }
          connectDragPreview(sourceId, node, options) {
            this.sourcePreviewNodeOptions.set(sourceId, options);
            this.sourcePreviewNodes.set(sourceId, node);
            return () => {
              this.sourcePreviewNodes.delete(sourceId);
              this.sourcePreviewNodeOptions.delete(sourceId);
            };
          }
          connectDragSource(sourceId, node, options) {
            this.sourceNodes.set(sourceId, node);
            this.sourceNodeOptions.set(sourceId, options);
            const handleDragStart = e => this.handleDragStart(e, sourceId);
            const handleSelectStart = e => this.handleSelectStart(e);
            node.setAttribute('draggable', 'true');
            node.addEventListener('dragstart', handleDragStart);
            node.addEventListener('selectstart', handleSelectStart);
            return () => {
              this.sourceNodes.delete(sourceId);
              this.sourceNodeOptions.delete(sourceId);
              node.removeEventListener('dragstart', handleDragStart);
              node.removeEventListener('selectstart', handleSelectStart);
              node.setAttribute('draggable', 'false');
            };
          }
          connectDropTarget(targetId, node) {
            const handleDragEnter = e => this.handleDragEnter(e, targetId);
            const handleDragOver = e => this.handleDragOver(e, targetId);
            const handleDrop = e => this.handleDrop(e, targetId);
            node.addEventListener('dragenter', handleDragEnter);
            node.addEventListener('dragover', handleDragOver);
            node.addEventListener('drop', handleDrop);
            return () => {
              node.removeEventListener('dragenter', handleDragEnter);
              node.removeEventListener('dragover', handleDragOver);
              node.removeEventListener('drop', handleDrop);
            };
          }
          addEventListeners(target) {
            // SSR Fix (https://github.com/react-dnd/react-dnd/pull/813
            if (!target.addEventListener) {
              return;
            }
            target.addEventListener('dragstart', this.handleTopDragStart);
            target.addEventListener('dragstart', this.handleTopDragStartCapture, true);
            target.addEventListener('dragend', this.handleTopDragEndCapture, true);
            target.addEventListener('dragenter', this.handleTopDragEnter);
            target.addEventListener('dragenter', this.handleTopDragEnterCapture, true);
            target.addEventListener('dragleave', this.handleTopDragLeaveCapture, true);
            target.addEventListener('dragover', this.handleTopDragOver);
            target.addEventListener('dragover', this.handleTopDragOverCapture, true);
            target.addEventListener('drop', this.handleTopDrop);
            target.addEventListener('drop', this.handleTopDropCapture, true);
          }
          removeEventListeners(target) {
            // SSR Fix (https://github.com/react-dnd/react-dnd/pull/813
            if (!target.removeEventListener) {
              return;
            }
            target.removeEventListener('dragstart', this.handleTopDragStart);
            target.removeEventListener('dragstart', this.handleTopDragStartCapture, true);
            target.removeEventListener('dragend', this.handleTopDragEndCapture, true);
            target.removeEventListener('dragenter', this.handleTopDragEnter);
            target.removeEventListener('dragenter', this.handleTopDragEnterCapture, true);
            target.removeEventListener('dragleave', this.handleTopDragLeaveCapture, true);
            target.removeEventListener('dragover', this.handleTopDragOver);
            target.removeEventListener('dragover', this.handleTopDragOverCapture, true);
            target.removeEventListener('drop', this.handleTopDrop);
            target.removeEventListener('drop', this.handleTopDropCapture, true);
          }
          getCurrentSourceNodeOptions() {
            const sourceId = this.monitor.getSourceId();
            const sourceNodeOptions = this.sourceNodeOptions.get(sourceId);
            return _objectSpread({
              dropEffect: this.altKeyPressed ? 'copy' : 'move'
            }, sourceNodeOptions || {});
          }
          getCurrentDropEffect() {
            if (this.isDraggingNativeItem()) {
              // It makes more sense to default to 'copy' for native resources
              return 'copy';
            }
            return this.getCurrentSourceNodeOptions().dropEffect;
          }
          getCurrentSourcePreviewNodeOptions() {
            const sourceId = this.monitor.getSourceId();
            const sourcePreviewNodeOptions = this.sourcePreviewNodeOptions.get(sourceId);
            return _objectSpread({
              anchorX: 0.5,
              anchorY: 0.5,
              captureDraggingState: false
            }, sourcePreviewNodeOptions || {});
          }
          isDraggingNativeItem() {
            const itemType = this.monitor.getItemType();
            return Object.keys(NativeTypes).some(key => NativeTypes[key] === itemType);
          }
          beginDragNativeItem(type, dataTransfer) {
            this.clearCurrentDragSourceNode();
            this.currentNativeSource = createNativeDragSource(type, dataTransfer);
            this.currentNativeHandle = this.registry.addSource(type, this.currentNativeSource);
            this.actions.beginDrag([this.currentNativeHandle]);
          }
          setCurrentDragSourceNode(node) {
            this.clearCurrentDragSourceNode();
            this.currentDragSourceNode = node;
            // A timeout of > 0 is necessary to resolve Firefox issue referenced
            // See:
            //   * https://github.com/react-dnd/react-dnd/pull/928
            //   * https://github.com/react-dnd/react-dnd/issues/869
            const MOUSE_MOVE_TIMEOUT = 1000;
            // Receiving a mouse event in the middle of a dragging operation
            // means it has ended and the drag source node disappeared from DOM,
            // so the browser didn't dispatch the dragend event.
            //
            // We need to wait before we start listening for mousemove events.
            // This is needed because the drag preview needs to be drawn or else it fires an 'mousemove' event
            // immediately in some browsers.
            //
            // See:
            //   * https://github.com/react-dnd/react-dnd/pull/928
            //   * https://github.com/react-dnd/react-dnd/issues/869
            //
            this.mouseMoveTimeoutTimer = setTimeout(() => {
              var ref;
              return (ref = this.rootElement) === null || ref === void 0 ? void 0 : ref.addEventListener('mousemove', this.endDragIfSourceWasRemovedFromDOM, true);
            }, MOUSE_MOVE_TIMEOUT);
          }
          clearCurrentDragSourceNode() {
            if (this.currentDragSourceNode) {
              this.currentDragSourceNode = null;
              if (this.rootElement) {
                var ref;
                (ref = this.window) === null || ref === void 0 ? void 0 : ref.clearTimeout(this.mouseMoveTimeoutTimer || undefined);
                this.rootElement.removeEventListener('mousemove', this.endDragIfSourceWasRemovedFromDOM, true);
              }
              this.mouseMoveTimeoutTimer = null;
              return true;
            }
            return false;
          }
          handleDragStart(e, sourceId) {
            if (e.defaultPrevented) {
              return;
            }
            if (!this.dragStartSourceIds) {
              this.dragStartSourceIds = [];
            }
            this.dragStartSourceIds.unshift(sourceId);
          }
          handleDragEnter(_e, targetId) {
            this.dragEnterTargetIds.unshift(targetId);
          }
          handleDragOver(_e, targetId) {
            if (this.dragOverTargetIds === null) {
              this.dragOverTargetIds = [];
            }
            this.dragOverTargetIds.unshift(targetId);
          }
          handleDrop(_e, targetId) {
            this.dropTargetIds.unshift(targetId);
          }
          constructor(manager, globalContext, options) {
            this.sourcePreviewNodes = new Map();
            this.sourcePreviewNodeOptions = new Map();
            this.sourceNodes = new Map();
            this.sourceNodeOptions = new Map();
            this.dragStartSourceIds = null;
            this.dropTargetIds = [];
            this.dragEnterTargetIds = [];
            this.currentNativeSource = null;
            this.currentNativeHandle = null;
            this.currentDragSourceNode = null;
            this.altKeyPressed = false;
            this.mouseMoveTimeoutTimer = null;
            this.asyncEndDragFrameId = null;
            this.dragOverTargetIds = null;
            this.lastClientOffset = null;
            this.hoverRafId = null;
            this.getSourceClientOffset = sourceId => {
              const source = this.sourceNodes.get(sourceId);
              return source && getNodeClientOffset(source) || null;
            };
            this.endDragNativeItem = () => {
              if (!this.isDraggingNativeItem()) {
                return;
              }
              this.actions.endDrag();
              if (this.currentNativeHandle) {
                this.registry.removeSource(this.currentNativeHandle);
              }
              this.currentNativeHandle = null;
              this.currentNativeSource = null;
            };
            this.isNodeInDocument = node => {
              // Check the node either in the main document or in the current context
              return Boolean(node && this.document && this.document.body && this.document.body.contains(node));
            };
            this.endDragIfSourceWasRemovedFromDOM = () => {
              const node = this.currentDragSourceNode;
              if (node == null || this.isNodeInDocument(node)) {
                return;
              }
              if (this.clearCurrentDragSourceNode() && this.monitor.isDragging()) {
                this.actions.endDrag();
              }
              this.cancelHover();
            };
            this.scheduleHover = dragOverTargetIds => {
              if (this.hoverRafId === null && typeof requestAnimationFrame !== 'undefined') {
                this.hoverRafId = requestAnimationFrame(() => {
                  if (this.monitor.isDragging()) {
                    this.actions.hover(dragOverTargetIds || [], {
                      clientOffset: this.lastClientOffset
                    });
                  }
                  this.hoverRafId = null;
                });
              }
            };
            this.cancelHover = () => {
              if (this.hoverRafId !== null && typeof cancelAnimationFrame !== 'undefined') {
                cancelAnimationFrame(this.hoverRafId);
                this.hoverRafId = null;
              }
            };
            this.handleTopDragStartCapture = () => {
              this.clearCurrentDragSourceNode();
              this.dragStartSourceIds = [];
            };
            this.handleTopDragStart = e => {
              if (e.defaultPrevented) {
                return;
              }
              const dragStartSourceIds = this.dragStartSourceIds;
              this.dragStartSourceIds = null;
              const clientOffset = getEventClientOffset(e);
              // Avoid crashing if we missed a drop event or our previous drag died
              if (this.monitor.isDragging()) {
                this.actions.endDrag();
                this.cancelHover();
              }
              // Don't publish the source just yet (see why below)
              this.actions.beginDrag(dragStartSourceIds || [], {
                publishSource: false,
                getSourceClientOffset: this.getSourceClientOffset,
                clientOffset
              });
              const dataTransfer = e.dataTransfer;
              const nativeType = matchNativeItemType(dataTransfer);
              if (this.monitor.isDragging()) {
                if (dataTransfer && typeof dataTransfer.setDragImage === 'function') {
                  // Use custom drag image if user specifies it.
                  // If child drag source refuses drag but parent agrees,
                  // use parent's node as drag image. Neither works in IE though.
                  const sourceId = this.monitor.getSourceId();
                  const sourceNode = this.sourceNodes.get(sourceId);
                  const dragPreview = this.sourcePreviewNodes.get(sourceId) || sourceNode;
                  if (dragPreview) {
                    const _this$getCurrentSourc = this.getCurrentSourcePreviewNodeOptions(),
                      anchorX = _this$getCurrentSourc.anchorX,
                      anchorY = _this$getCurrentSourc.anchorY,
                      offsetX = _this$getCurrentSourc.offsetX,
                      offsetY = _this$getCurrentSourc.offsetY;
                    const anchorPoint = {
                      anchorX,
                      anchorY
                    };
                    const offsetPoint = {
                      offsetX,
                      offsetY
                    };
                    const dragPreviewOffset = getDragPreviewOffset(sourceNode, dragPreview, clientOffset, anchorPoint, offsetPoint);
                    dataTransfer.setDragImage(dragPreview, dragPreviewOffset.x, dragPreviewOffset.y);
                  }
                }
                try {
                  // Firefox won't drag without setting data
                  dataTransfer === null || dataTransfer === void 0 ? void 0 : dataTransfer.setData('application/json', {});
                } catch (err) {
                  // IE doesn't support MIME types in setData
                }
                // Store drag source node so we can check whether
                // it is removed from DOM and trigger endDrag manually.
                this.setCurrentDragSourceNode(e.target);
                // Now we are ready to publish the drag source.. or are we not?
                const _this$getCurrentSourc2 = this.getCurrentSourcePreviewNodeOptions(),
                  captureDraggingState = _this$getCurrentSourc2.captureDraggingState;
                if (!captureDraggingState) {
                  // Usually we want to publish it in the next tick so that browser
                  // is able to screenshot the current (not yet dragging) state.
                  //
                  // It also neatly avoids a situation where render() returns null
                  // in the same tick for the source element, and browser freaks out.
                  setTimeout(() => this.actions.publishDragSource(), 0);
                } else {
                  // In some cases the user may want to override this behavior, e.g.
                  // to work around IE not supporting custom drag previews.
                  //
                  // When using a custom drag layer, the only way to prevent
                  // the default drag preview from drawing in IE is to screenshot
                  // the dragging state in which the node itself has zero opacity
                  // and height. In this case, though, returning null from render()
                  // will abruptly end the dragging, which is not obvious.
                  //
                  // This is the reason such behavior is strictly opt-in.
                  this.actions.publishDragSource();
                }
              } else if (nativeType) {
                // A native item (such as URL) dragged from inside the document
                this.beginDragNativeItem(nativeType);
              } else if (dataTransfer && !dataTransfer.types && (e.target && !e.target.hasAttribute || !e.target.hasAttribute('draggable'))) {
                // Looks like a Safari bug: dataTransfer.types is null, but there was no draggable.
                // Just let it drag. It's a native type (URL or text) and will be picked up in
                // dragenter handler.
                return;
              } else {
                // If by this time no drag source reacted, tell browser not to drag.
                e.preventDefault();
              }
            };
            this.handleTopDragEndCapture = () => {
              if (this.clearCurrentDragSourceNode() && this.monitor.isDragging()) {
                // Firefox can dispatch this event in an infinite loop
                // if dragend handler does something like showing an alert.
                // Only proceed if we have not handled it already.
                this.actions.endDrag();
              }
              this.cancelHover();
            };
            this.handleTopDragEnterCapture = e => {
              this.dragEnterTargetIds = [];
              if (this.isDraggingNativeItem()) {
                var ref;
                (ref = this.currentNativeSource) === null || ref === void 0 ? void 0 : ref.loadDataTransfer(e.dataTransfer);
              }
              const isFirstEnter = this.enterLeaveCounter.enter(e.target);
              if (!isFirstEnter || this.monitor.isDragging()) {
                return;
              }
              const dataTransfer = e.dataTransfer;
              const nativeType = matchNativeItemType(dataTransfer);
              if (nativeType) {
                // A native item (such as file or URL) dragged from outside the document
                this.beginDragNativeItem(nativeType, dataTransfer);
              }
            };
            this.handleTopDragEnter = e => {
              const dragEnterTargetIds = this.dragEnterTargetIds;
              this.dragEnterTargetIds = [];
              if (!this.monitor.isDragging()) {
                // This is probably a native item type we don't understand.
                return;
              }
              this.altKeyPressed = e.altKey;
              // If the target changes position as the result of `dragenter`, `dragover` might still
              // get dispatched despite target being no longer there. The easy solution is to check
              // whether there actually is a target before firing `hover`.
              if (dragEnterTargetIds.length > 0) {
                this.actions.hover(dragEnterTargetIds, {
                  clientOffset: getEventClientOffset(e)
                });
              }
              const canDrop = dragEnterTargetIds.some(targetId => this.monitor.canDropOnTarget(targetId));
              if (canDrop) {
                // IE requires this to fire dragover events
                e.preventDefault();
                if (e.dataTransfer) {
                  e.dataTransfer.dropEffect = this.getCurrentDropEffect();
                }
              }
            };
            this.handleTopDragOverCapture = e => {
              this.dragOverTargetIds = [];
              if (this.isDraggingNativeItem()) {
                var ref;
                (ref = this.currentNativeSource) === null || ref === void 0 ? void 0 : ref.loadDataTransfer(e.dataTransfer);
              }
            };
            this.handleTopDragOver = e => {
              const dragOverTargetIds = this.dragOverTargetIds;
              this.dragOverTargetIds = [];
              if (!this.monitor.isDragging()) {
                // This is probably a native item type we don't understand.
                // Prevent default "drop and blow away the whole document" action.
                e.preventDefault();
                if (e.dataTransfer) {
                  e.dataTransfer.dropEffect = 'none';
                }
                return;
              }
              this.altKeyPressed = e.altKey;
              this.lastClientOffset = getEventClientOffset(e);
              this.scheduleHover(dragOverTargetIds);
              const canDrop = (dragOverTargetIds || []).some(targetId => this.monitor.canDropOnTarget(targetId));
              if (canDrop) {
                // Show user-specified drop effect.
                e.preventDefault();
                if (e.dataTransfer) {
                  e.dataTransfer.dropEffect = this.getCurrentDropEffect();
                }
              } else if (this.isDraggingNativeItem()) {
                // Don't show a nice cursor but still prevent default
                // "drop and blow away the whole document" action.
                e.preventDefault();
              } else {
                e.preventDefault();
                if (e.dataTransfer) {
                  e.dataTransfer.dropEffect = 'none';
                }
              }
            };
            this.handleTopDragLeaveCapture = e => {
              if (this.isDraggingNativeItem()) {
                e.preventDefault();
              }
              const isLastLeave = this.enterLeaveCounter.leave(e.target);
              if (!isLastLeave) {
                return;
              }
              if (this.isDraggingNativeItem()) {
                setTimeout(() => this.endDragNativeItem(), 0);
              }
              this.cancelHover();
            };
            this.handleTopDropCapture = e => {
              this.dropTargetIds = [];
              if (this.isDraggingNativeItem()) {
                var ref;
                e.preventDefault();
                (ref = this.currentNativeSource) === null || ref === void 0 ? void 0 : ref.loadDataTransfer(e.dataTransfer);
              } else if (matchNativeItemType(e.dataTransfer)) {
                // Dragging some elements, like <a> and <img> may still behave like a native drag event,
                // even if the current drag event matches a user-defined type.
                // Stop the default behavior when we're not expecting a native item to be dropped.
                e.preventDefault();
              }
              this.enterLeaveCounter.reset();
            };
            this.handleTopDrop = e => {
              const dropTargetIds = this.dropTargetIds;
              this.dropTargetIds = [];
              this.actions.hover(dropTargetIds, {
                clientOffset: getEventClientOffset(e)
              });
              this.actions.drop({
                dropEffect: this.getCurrentDropEffect()
              });
              if (this.isDraggingNativeItem()) {
                this.endDragNativeItem();
              } else if (this.monitor.isDragging()) {
                this.actions.endDrag();
              }
              this.cancelHover();
            };
            this.handleSelectStart = e => {
              const target = e.target;
              // Only IE requires us to explicitly say
              // we want drag drop operation to start
              if (typeof target.dragDrop !== 'function') {
                return;
              }
              // Inputs and textareas should be selectable
              if (target.tagName === 'INPUT' || target.tagName === 'SELECT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {
                return;
              }
              // For other targets, ask IE
              // to enable drag and drop
              e.preventDefault();
              target.dragDrop();
            };
            this.options = new OptionsReader(globalContext, options);
            this.actions = manager.getActions();
            this.monitor = manager.getMonitor();
            this.registry = manager.getRegistry();
            this.enterLeaveCounter = new EnterLeaveCounter(this.isNodeInDocument);
          }
        }
        const HTML5Backend = exports("c$", function createBackend(manager, context, options) {
          return new HTML5BackendImpl(manager, context, options);
        });
        function Survey({
          navigationIndex,
          survey,
          lang
        }) {
          var _survey$resources;
          const theme = useTheme();
          return /* @__PURE__ */jsxRuntimeExports.jsx(DndProvider, {
            backend: HTML5Backend,
            children: /* @__PURE__ */jsxRuntimeExports.jsx("form", {
              id: FORM_ID,
              className: styles$5.surveyPage,
              style: {
                backgroundColor: theme.palette.background.default,
                fontFamily: theme.textStyles.text.font,
                color: theme.textStyles.text.color,
                fontSize: theme.textStyles.text.size
              },
              children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
                className: styles$5.surveyContent,
                children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                  className: styles$5.surveyGroups,
                  children: [(_survey$resources = survey.resources) !== null && _survey$resources !== void 0 && _survey$resources.headerImage ? /* @__PURE__ */jsxRuntimeExports.jsx(CardMedia$1, {
                    className: styles$5.cardImage,
                    component: "img",
                    image: buildResourceUrl(survey.resources.headerImage)
                  }) : null, survey && survey.groups ? survey.groups.filter(group => group.inCurrentNavigation).map(group => /* @__PURE__ */jsxRuntimeExports.jsx(Group$1, {
                    group,
                    lang: lang.code
                  }, group.code)) : "", /* @__PURE__ */jsxRuntimeExports.jsx(Navigation, {
                    navigationIndex
                  })]
                })
              })
            })
          });
        }
        var Menu = {};
        var _interopRequireDefault$2 = interopRequireDefaultExports;
        Object.defineProperty(Menu, "__esModule", {
          value: true
        });
        var default_1$2 = Menu.default = void 0;
        var _createSvgIcon$2 = _interopRequireDefault$2(requireCreateSvgIcon());
        var _jsxRuntime$2 = jsxRuntimeExports;
        var _default$2 = (0, _createSvgIcon$2.default)( /*#__PURE__*/(0, _jsxRuntime$2.jsx)("path", {
          d: "M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
        }), 'Menu');
        default_1$2 = Menu.default = _default$2;
        function SurveyAppBar({
          showBack,
          label,
          onBackClick,
          toggleDrawer
        }) {
          return /* @__PURE__ */jsxRuntimeExports.jsx(AppBar$1, {
            position: "fixed",
            children: /* @__PURE__ */jsxRuntimeExports.jsxs(Toolbar$1, {
              style: {
                fontSize: "32px",
                lineHeight: "1.334",
                fontWeight: "400"
              },
              children: [showBack && /* @__PURE__ */jsxRuntimeExports.jsx(IconButton$1, {
                size: "large",
                edge: "start",
                color: "inherit",
                "aria-label": "menu",
                sx: {
                  mr: 2
                },
                onClick: onBackClick,
                children: /* @__PURE__ */jsxRuntimeExports.jsx(default_1$3, {})
              }), /* @__PURE__ */jsxRuntimeExports.jsx(IconButton$1, {
                size: "large",
                edge: "start",
                color: "inherit",
                "aria-label": "menu",
                sx: {
                  mr: 2
                },
                onClick: toggleDrawer(true),
                children: /* @__PURE__ */jsxRuntimeExports.jsx(default_1$2, {})
              }), /* @__PURE__ */jsxRuntimeExports.jsx(Content$1, {
                elementCode: "Survey",
                name: "label",
                content: label
              })]
            })
          });
        }
        function ChangeLang(props) {
          useSelector(state2 => {
            return {
              navigate: state2.runState.navigate,
              lang: state2.runState.lang
            };
          }, shallowEqual$1);
          const dispatch = useDispatch();
          const _useTranslation2 = useTranslation("run"),
            t = _useTranslation2.t;
          return /* @__PURE__ */jsxRuntimeExports.jsxs(FormControl$1, {
            variant: "standard",
            children: [/* @__PURE__ */jsxRuntimeExports.jsx(InputLabel$1, {
              id: "change-lang-label",
              children: t("lang")
            }), /* @__PURE__ */jsxRuntimeExports.jsxs(Select$1, {
              labelId: "change-lang-label",
              sx: {
                backgroundColor: "background.paper",
                color: "primary.main"
              },
              id: "ChangeLang",
              label: t("lang"),
              value: props.lang.code,
              onChange: event => {
                dispatch(langChange({
                  lang: event.target.value
                }));
              },
              children: [/* @__PURE__ */jsxRuntimeExports.jsx(MenuItem$1, {
                value: props.lang.code,
                children: props.lang.name
              }), props.additionalLang ? props.additionalLang.map((lang, index) => {
                return /* @__PURE__ */jsxRuntimeExports.jsx(MenuItem$1, {
                  value: lang.code,
                  children: lang.name
                }, index);
              }) : ""]
            })]
          });
        }
        const drawer = "_drawer_k998h_2";
        const styles$2 = {
          drawer: drawer
        };
        const groupCard = "_groupCard_1t5ma_1";
        const groupTitle = "_groupTitle_1t5ma_6";
        const questionTitle = "_questionTitle_1t5ma_10";
        const validationIcon = "_validationIcon_1t5ma_16";
        const bullet = "_bullet_1t5ma_23";
        const styles$1 = {
          groupCard: groupCard,
          groupTitle: groupTitle,
          questionTitle: questionTitle,
          validationIcon: validationIcon,
          bullet: bullet
        };
        var CheckCircle = {};
        var _interopRequireDefault$1 = interopRequireDefaultExports;
        Object.defineProperty(CheckCircle, "__esModule", {
          value: true
        });
        var default_1$1 = CheckCircle.default = void 0;
        var _createSvgIcon$1 = _interopRequireDefault$1(requireCreateSvgIcon());
        var _jsxRuntime$1 = jsxRuntimeExports;
        var _default$1 = (0, _createSvgIcon$1.default)( /*#__PURE__*/(0, _jsxRuntime$1.jsx)("path", {
          d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
        }), 'CheckCircle');
        default_1$1 = CheckCircle.default = _default$1;
        var Circle = {};
        var _interopRequireDefault = interopRequireDefaultExports;
        Object.defineProperty(Circle, "__esModule", {
          value: true
        });
        var default_1 = Circle.default = void 0;
        var _createSvgIcon = _interopRequireDefault(requireCreateSvgIcon());
        var _jsxRuntime = jsxRuntimeExports;
        var _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
          d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2z"
        }), 'Circle');
        default_1 = Circle.default = _default;
        function SurveyIndex(props) {
          const theme = useTheme$4();
          const dispatch = useDispatch();
          const relevance_map = useSelector(state => {
            return state.runState.values["Survey"].relevance_map;
          }, shallowEqual$1);
          const validity_map = useSelector(state => {
            return state.runState.values["Survey"].validity_map;
          }, shallowEqual$1);
          const canJump = useSelector(state => {
            return state.runState.data.survey.allowJump;
          }, shallowEqual$1);
          const isCurrentGroup = groupCode => {
            return props.navigationIndex.name == "group" && groupCode == props.navigationIndex.groupId;
          };
          const isCurrentQuestion = questionCode => {
            return props.navigationIndex.name == "question" && questionCode == props.navigationIndex.questionId;
          };
          const isGroupClickable = groupCode => canJump && !isCurrentGroup(groupCode) && props.navigationIndex.name == "group";
          const isQuestionClickable = questionCode => canJump && !isCurrentQuestion(questionCode) && props.navigationIndex.name == "question";
          const onGroupClicked = groupCode => {
            if (isGroupClickable(groupCode)) {
              dispatch(jump(_objectSpread3(_objectSpread3({}, props.navigationIndex), {}, {
                groupId: groupCode
              })));
            }
          };
          const onQuestionClicked = questionCode => {
            if (isQuestionClickable(questionCode)) {
              dispatch(jump(_objectSpread3(_objectSpread3({}, props.navigationIndex), {}, {
                questionId: questionCode
              })));
            }
          };
          return /* @__PURE__ */jsxRuntimeExports.jsx("div", {
            className: styles$1.surveyContent,
            children: props.survey && props.survey.groups ? props.survey.groups.filter(group => relevance_map[group.code] && group.groupType != "END").map(group => {
              var _group$content;
              return /* @__PURE__ */jsxRuntimeExports.jsxs(Card$1, {
                onClick: () => onGroupClicked(group.code),
                className: styles$1.groupCard,
                style: {
                  backgroundColor: isCurrentGroup(group.code) ? "beige" : theme.palette.background.paper,
                  cursor: isGroupClickable(group.code) ? "pointer" : "default"
                },
                children: [/* @__PURE__ */jsxRuntimeExports.jsxs(Box$3, {
                  className: styles$1.groupTitle,
                  children: [stripTags((_group$content = group.content) === null || _group$content === void 0 ? void 0 : _group$content.label), " "]
                }), group.questions.filter(question => relevance_map[question.code]).map(question => {
                  var _question$content;
                  return /* @__PURE__ */jsxRuntimeExports.jsxs(Box$3, {
                    onClick: () => onQuestionClicked(question.code),
                    className: styles$1.questionTitle,
                    style: {
                      backgroundColor: isCurrentQuestion(question.code) ? "beige" : "inherit",
                      cursor: isGroupClickable(group.code) ? "inherit" : isQuestionClickable(group.code) ? "pointer" : "default"
                    },
                    children: [validity_map[question.code] ? /* @__PURE__ */jsxRuntimeExports.jsx(default_1$1, {
                      className: styles$1.validationIcon
                    }) : /* @__PURE__ */jsxRuntimeExports.jsx(default_1, {
                      className: styles$1.bullet
                    }), stripTags((_question$content = question.content) === null || _question$content === void 0 ? void 0 : _question$content.label)]
                  }, question.code);
                })]
              }, group.code);
            }) : ""
          });
        }
        function SurveyDrawer({
          survey,
          navigationIndex,
          lang,
          expanded,
          additionalLang,
          toggleDrawer
        }) {
          return /* @__PURE__ */jsxRuntimeExports.jsx(Drawer$1, {
            anchor: "left",
            transitionDuration: expanded !== COLLAPSE_IMMEDIATE ? 500 : 0,
            open: expanded == EXPAND,
            onClose: toggleDrawer(false),
            children: /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
              className: styles$2.drawer,
              children: [/* @__PURE__ */jsxRuntimeExports.jsx(ChangeLang, {
                lang,
                additionalLang
              }), /* @__PURE__ */jsxRuntimeExports.jsx(SurveyIndex, {
                navigationIndex,
                survey
              })]
            })
          });
        }
        const SurveyDrawer$1 = React.memo(SurveyDrawer);
        const COLLAPSE_IMMEDIATE = "COLLAPSE_IMMEDIATE";
        const COLLAPSE = "COLLAPSE";
        const EXPAND = "EXPAND";
        const loading = "_loading_c5al4_1";
        const loadingWrapper = "_loadingWrapper_c5al4_14";
        const styles = {
          loading: loading,
          loadingWrapper: loadingWrapper
        };
        function LoadingIndicator() {
          return /* @__PURE__ */jsxRuntimeExports.jsx("div", {
            className: styles.loading,
            children: /* @__PURE__ */jsxRuntimeExports.jsx("div", {
              className: styles.loadingWrapper,
              children: /* @__PURE__ */jsxRuntimeExports.jsxs("video", {
                controls: false,
                autoPlay: true,
                muted: true,
                loop: true,
                children: [/* @__PURE__ */jsxRuntimeExports.jsx("source", {
                  src: "/loading-qlarr.mp4",
                  type: "video/mp4"
                }), /* @__PURE__ */jsxRuntimeExports.jsx(CircularProgress$1, {})]
              })
            })
          });
        }
        function StatefulLoadingIndicator() {
          const isLoading = useSelector(state => {
            return state.editState.loading;
          });
          return isLoading ? /* @__PURE__ */jsxRuntimeExports.jsx(LoadingIndicator, {}) : /* @__PURE__ */jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, {});
        }
        function ErrorDialog({
          setErrorSeen,
          error
        }) {
          const _useTranslation3 = useTranslation("manage"),
            t = _useTranslation3.t;
          return /* @__PURE__ */jsxRuntimeExports.jsxs(Dialog$1, {
            open: true,
            onClose: () => setErrorSeen(),
            "aria-labelledby": "alert-dialog-title-error",
            "aria-describedby": "alert-dialog-description",
            children: [/* @__PURE__ */jsxRuntimeExports.jsx(DialogTitle$1, {
              id: "alert-dialog-title-error",
              children: "Error"
            }), /* @__PURE__ */jsxRuntimeExports.jsx(DialogContent$1, {
              children: t("processed_errors." + error.name)
            }), /* @__PURE__ */jsxRuntimeExports.jsx(DialogActions$1, {
              children: /* @__PURE__ */jsxRuntimeExports.jsx(Button$1, {
                onClick: () => setErrorSeen(),
                children: "OK"
              })
            })]
          });
        }
        function RunSurvey({
          preview,
          guest,
          mode
        }) {
          var _data$survey, _data$survey2, _data$survey3;
          const location = useLocation();
          const searchParams = new URLSearchParams(location.search);
          const responseId = searchParams.get("response_id");
          const lang = searchParams.get("lang");
          const _React$useState = React.useState(COLLAPSE),
            _React$useState2 = _slicedToArray2(_React$useState, 2),
            expanded = _React$useState2[0],
            setExpanded = _React$useState2[1];
          const _React$useState3 = React.useState(false),
            _React$useState4 = _slicedToArray2(_React$useState3, 2),
            render = _React$useState4[0],
            setRender = _React$useState4[1];
          const _React$useState5 = React.useState(false),
            _React$useState6 = _slicedToArray2(_React$useState5, 2),
            error = _React$useState6[0],
            setError = _React$useState6[1];
          const _React$useState7 = React.useState(false),
            _React$useState8 = _slicedToArray2(_React$useState7, 2),
            inlineError = _React$useState8[0],
            setInlineError = _React$useState8[1];
          window["handleBack"] = () => {
            const result = expanded === EXPAND;
            setExpanded(COLLAPSE);
            return result;
          };
          const data = useSelector(state => {
            return state.runState.data;
          }, shallowEqual$1);
          const isLoading = useSelector(state => state.templateState.isLoading);
          const navigation = useSelector(state => {
            return state.runState.navigation;
          }, shallowEqual$1);
          const _useTranslation4 = useTranslation("run"),
            t = _useTranslation4.t,
            i18n = _useTranslation4.i18n;
          const dispatch = useDispatch();
          reactExports.useEffect(() => {
            if (navigation) {
              setExpanded(COLLAPSE_IMMEDIATE);
              continueNav(navigation, data.responseId);
            }
          }, [navigation]);
          reactExports.useEffect(() => {
            if (rtlLanguage.includes(i18n.language)) {
              document.dir = "rtl";
            } else {
              document.dir = "ltr";
            }
          }, [i18n.language]);
          const handleError = error2 => {
            const procesed = processError(error2);
            if ([PROCESSED_ERRORS.SURVEY_DESIGN_ERROR, PROCESSED_ERRORS.SURVEY_NOT_ACTIVE, PROCESSED_ERRORS.SURVEY_CLOSED, PROCESSED_ERRORS.SURVEY_EXPIRED, PROCESSED_ERRORS.SURVEY_SCHEDULED].indexOf(procesed) > -1) {
              setInlineError(procesed);
            } else {
              setError(procesed);
            }
            dispatch(setFetching(false));
          };
          const startNav = () => {
            startNavigation(lang, preview, guest, mode).then(response => {
              setRender(true);
              dispatch(stateReceived({
                response,
                preview
              }));
              sessionStorage.setItem("responseId", response.responseId);
              i18n.changeLanguage(response.lang.code);
              dispatch(setFetching(false));
            }).catch(err => {
              handleError(err);
            });
          };
          const continueNav = (payload, responseId2) => {
            dispatch(setFetching(true));
            continueNavigation(payload, responseId2, preview, guest, mode).then(response => {
              setRender(true);
              dispatch(stateReceived({
                response,
                preview
              }));
              sessionStorage.setItem("responseId", response.responseId);
              i18n.changeLanguage(response.lang.code);
              dispatch(setFetching(false));
            }).catch(err => {
              handleError(err);
            });
          };
          reactExports.useEffect(() => {
            document.body.style.overflow = "visible";
            dispatch(setFetching(true));
            loadScript(preview, guest).then(() => {
              if (responseId) {
                continueNav({
                  navigationDirection: {
                    name: "RESUME"
                  }
                }, responseId);
              } else {
                startNav();
              }
            }).catch(err => {
              handleError(err);
            });
          }, []);
          const theme = React.useCallback(createTheme(_objectSpread3(_objectSpread3({}, defualtTheme(data === null || data === void 0 || (_data$survey = data.survey) === null || _data$survey === void 0 ? void 0 : _data$survey.theme)), {}, {
            direction: rtlLanguage.includes(i18n.language) ? "rtl" : "ltr"
          })), [i18n.language, data === null || data === void 0 || (_data$survey2 = data.survey) === null || _data$survey2 === void 0 ? void 0 : _data$survey2.theme]);
          const cacheRtlMemo = reactExports.useMemo(() => cacheRtl(i18n.language), [i18n.language]);
          const toggleDrawer = open => event => {
            if (event.type === "keydown" && (event.key === "Tab" || event.key === "Shift")) {
              return;
            }
            setExpanded(open ? EXPAND : COLLAPSE);
          };
          const navigate = useNavigate();
          const onBackClick = () => {
            if (window["Android"]) {
              window["Android"].onBackPressed();
            } else {
              navigate(-1);
            }
          };
          const showBack = window["Android"] || mode == "offline" && navigate.length > 1;
          return /* @__PURE__ */jsxRuntimeExports.jsx(CacheProvider, {
            value: cacheRtlMemo,
            children: /* @__PURE__ */jsxRuntimeExports.jsxs(ThemeProvider, {
              theme,
              children: [error && /* @__PURE__ */jsxRuntimeExports.jsx(ErrorDialog, {
                error,
                setErrorSeen: () => {
                  setError(null);
                }
              }), isLoading ? /* @__PURE__ */jsxRuntimeExports.jsx(LoadingIndicator, {}) : null, render && /* @__PURE__ */jsxRuntimeExports.jsxs("div", {
                className: styles$6.mainContainer,
                style: {
                  backgroundColor: theme.palette.background.default,
                  fontFamily: theme.textStyles.text.font,
                  color: theme.textStyles.text.color,
                  fontSize: theme.textStyles.text.size
                },
                children: [/* @__PURE__ */jsxRuntimeExports.jsx(SurveyAppBar, {
                  toggleDrawer,
                  onBackClick,
                  label: data === null || data === void 0 || (_data$survey3 = data.survey) === null || _data$survey3 === void 0 || (_data$survey3 = _data$survey3.content) === null || _data$survey3 === void 0 ? void 0 : _data$survey3.label,
                  showBack
                }), /* @__PURE__ */jsxRuntimeExports.jsx(Toolbar$1, {}), /* @__PURE__ */jsxRuntimeExports.jsx(SurveyMemo, {
                  survey: data === null || data === void 0 ? void 0 : data.survey,
                  navigationIndex: data === null || data === void 0 ? void 0 : data.navigationIndex,
                  lang: data === null || data === void 0 ? void 0 : data.lang,
                  additionalLang: data === null || data === void 0 ? void 0 : data.additionalLang
                }, "Survey"), /* @__PURE__ */jsxRuntimeExports.jsx(SurveyDrawer$1, {
                  survey: data === null || data === void 0 ? void 0 : data.survey,
                  expanded,
                  navigationIndex: data === null || data === void 0 ? void 0 : data.navigationIndex,
                  lang: data === null || data === void 0 ? void 0 : data.lang,
                  additionalLang: data === null || data === void 0 ? void 0 : data.additionalLang,
                  toggleDrawer
                })]
              }), inlineError && /* @__PURE__ */jsxRuntimeExports.jsx(Box$1, {
                className: styles$6.surveyDesignError,
                children: /* @__PURE__ */jsxRuntimeExports.jsx("span", {
                  children: t(`processed_errors.${inlineError.name}`)
                })
              })]
            })
          });
        }
        const SurveyMemo = React.memo(Survey);
        const index = /*#__PURE__*/Object.freeze( /*#__PURE__*/Object.defineProperty({
          __proto__: null,
          default: RunSurvey
        }, Symbol.toStringTag, {
          value: 'Module'
        }));
        exports("d1", index);
        function Android() {
          const surveyId = getparam(useParams(), "surveyId");
          sessionStorage.setItem("surveyId", surveyId);
          return /* @__PURE__ */jsxRuntimeExports.jsx(Provider, {
            store: runStore,
            children: /* @__PURE__ */jsxRuntimeExports.jsx(RunSurvey, {})
          });
        }
        const Android$1 = /*#__PURE__*/Object.freeze( /*#__PURE__*/Object.defineProperty({
          __proto__: null,
          default: Android
        }, Symbol.toStringTag, {
          value: 'Module'
        }));
        instance$2.init({
          interpolation: {
            escapeValue: false
          },
          // React already does escaping
          lng: "en",
          fallbackLng: "en",
          resources: {
            en: {
              design: design_en,
              run: run_en,
              manage: manage_en
            },
            de: {
              design: design_de,
              run: run_de,
              manage: manage_de
            },
            ar: {
              design: design_ar,
              run: run_ar,
              manage: manage_ar
            }
          }
        });
        const container = document.getElementById("root");
        const root = createRoot(container);
        root.render( /* @__PURE__ */jsxRuntimeExports.jsx(I18nextProvider, {
          i18n: instance$2,
          children: /* @__PURE__ */jsxRuntimeExports.jsx(BrowserRouter, {
            children: /* @__PURE__ */jsxRuntimeExports.jsx(Android, {})
          })
        }));
        unregister();
      }
    };
  });
})();
//# sourceMappingURL=index-legacy-T3s18jo3.js.map
