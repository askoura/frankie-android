{"version":3,"file":"index-1b853303.js","sources":["../../node_modules/@mui/icons-material/esm/Add.js","../../src/components/manage/CountsByRole/index.jsx","../../src/components/manage/HeaderContent/index.jsx","../../src/components/manage/Survey/index.jsx","../../src/pages/manage/Dashboard/index.jsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');","import { Box, Button, Card } from \"@mui/material\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { routes } from \"~/routes\";\nimport styles from \"./CountsByRole.module.css\";\n\nexport const CountsByRole = ({ countByRole }) => {\n  const navigate = useNavigate();\n  const { t } = useTranslation(\"manage\");\n\n  return (\n    <Card className={styles.byRoleWrap}>\n      <Box>\n        <Box component=\"b\">\n          <Box component=\"span\">\n            {countByRole?.superAdmin} {t(\"super_admins\")} ,\n          </Box>\n          <Box component=\"span\">\n            {countByRole?.surveyAdmin} {t(\"admins\")},\n          </Box>\n          <Box component=\"span\">\n            {countByRole?.surveyor} {t(\"surveyors\")},\n          </Box>\n        </Box>\n        <Box component=\"span\"> {t(\"registered\")}</Box>\n      </Box>\n      <Button\n        onClick={() => {\n          navigate(routes.manageUsers);\n        }}\n      >\n        {t(\"manage_users\")}\n      </Button>\n    </Card>\n  );\n};\n","import { Stack, Button, Typography } from \"@mui/material\";\nimport { Add } from \"@mui/icons-material\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { routes } from \"~/routes\";\nimport TokenService from \"~/services/TokenService\";\nimport { ROLES } from \"~/constants/roles\";\n\nexport const HeaderContent = () => {\n  const navigate = useNavigate();\n  const { t } = useTranslation(\"manage\");\n  const clickAdd = () => {\n    navigate(routes.createSurvey);\n  };\n\n  const shouldShowClickAdd = () => {\n    const roles = TokenService.getUser().roles;\n    if (\n      roles.indexOf(ROLES.SUPER_ADMIN) > -1 ||\n      roles.indexOf(ROLES.SURVEY_ADMIN) > -1\n    ) {\n      return true;\n    }\n    return false\n  };\n  return (\n    <Stack\n      sx={{ p: \"10px\" }}\n      flexDirection=\"row\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <Stack flexDirection=\"row\" alignItems=\"center\" gap={2}>\n        <Typography sx={{ fontSize: \"20px\" }}>{t(\"my_surveys\")}</Typography>\n        {shouldShowClickAdd() && (\n          <Button onClick={clickAdd}>\n            <Add />\n            {t(\"new_survey\")}\n          </Button>\n        )}\n      </Stack>\n    </Stack>\n  );\n};\n","import { Link } from \"react-router-dom\";\nimport { Box, Typography, IconButton, Card } from \"@mui/material\";\nimport { Edit, Palette, Preview } from \"@mui/icons-material\";\n\nimport styles from \"./Survey.module.css\";\nimport {\n  dayMonthUeatFormat,\n  serverDateTimeToLocalDateTime,\n} from \"~/utils/DateUtils\";\nimport { useTranslation } from \"react-i18next\";\nimport { isSurveyAdmin } from \"~/constants/roles\";\n\nconst STATUS = {\n  DRAFT: \"draft\",\n  CLOSED: \"closed\",\n  ACTIVE: \"active\",\n  EXPIRED: \"expired\",\n  SCHEDULED: \"schedules\",\n};\n\nconst BG = {\n  LIGHTBLUE: \"lightblue\",\n  RED: \"red\",\n  GREEN: \"green\",\n  ORANGE: \"orange\",\n  GRAY: \"gray\",\n};\n\nconst status = (survey) => {\n  switch (survey.status) {\n    case \"draft\":\n      return STATUS.DRAFT;\n    case \"closed\":\n      return STATUS.CLOSED;\n    case \"active\":\n      if (\n        survey.endDate &&\n        serverDateTimeToLocalDateTime(survey.endDate) < Date.now()\n      ) {\n        return STATUS.EXPIRED;\n      } else if (\n        survey.startDate &&\n        serverDateTimeToLocalDateTime(survey.startDate) > Date.now()\n      ) {\n        return STATUS.SCHEDULED;\n      } else {\n        return STATUS.ACTIVE;\n      }\n    default:\n      return STATUS.DRAFT;\n  }\n};\n\nconst bgHeader = (status) => {\n  switch (status) {\n    case STATUS.DRAFT:\n      return BG.LIGHTBLUE;\n    case STATUS.CLOSED:\n      return BG.RED;\n    case STATUS.EXPIRED:\n      return BG.ORANGE;\n    case STATUS.SCHEDULED:\n      return BG.GRAY;\n    case STATUS.ACTIVE:\n      return BG.GREEN;\n    default:\n      return;\n  }\n};\n\nexport const Survey = ({ survey }) => {\n  const { t } = useTranslation(\"manage\");\n  const surveyStatus = status(survey);\n  return (\n    <Card sx={{ borderRadius: \"10px\" }}>\n      <Box\n        className={styles.surveyHeader}\n        sx={{ background: bgHeader(surveyStatus) }}\n      >\n        {surveyStatus}\n      </Box>\n      <Box className={styles.contentCard}>\n        <Link to={`/design-survey/${survey.id}`} title=\"Design\">\n          <Typography variant=\"h5\">{survey.name}</Typography>\n        </Link>\n        <Box sx={{ mt: \"5px\" }}>\n          {t(\"added\")}\n          {dayMonthUeatFormat(\n            serverDateTimeToLocalDateTime(survey.creationDate)\n          )}\n        </Box>\n        <Box>\n          {t(\"last_modified\")}{\" \"}\n          {dayMonthUeatFormat(\n            serverDateTimeToLocalDateTime(survey.lastModified)\n          )}\n        </Box>\n        {t(\"responses_count\")} {survey?.responsesCount}\n        {survey?.latestVersion?.published === false && (\n          <>\n            {\" \"}\n            <br /> <span>Unpublished Changes</span>{\" \"}\n          </>\n        )}\n      </Box>\n    </Card>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Box, CircularProgress, Stack } from \"@mui/material\";\nimport SurveyService from \"~/services/SurveyService\";\nimport TokenService from \"~/services/TokenService\";\nimport UserService from \"~/services/UserService\";\nimport styles from \"./Dashboard.module.css\";\nimport { CountsByRole } from \"~/components/manage/CountsByRole\";\nimport { HeaderContent } from \"~/components/manage/HeaderContent\";\nimport { Survey } from \"~/components/manage/Survey\";\nimport { Header } from \"~/components/manage/Header\";\nimport { ROLES } from \"~/constants/roles\";\nimport { PROCESSED_ERRORS, processError } from \"~/utils/errorsProcessor\";\nimport ProcessedError from \"~/components/manage/ProcessedError\";\n\nfunction Dashboard() {\n  const [surveys, setSurveys] = useState([]);\n  const [fetchingSurveys, setFetchingSurveys] = useState(true);\n  const [countByRole, setCountByRole] = useState(null);\n  const [processedError, setProcessedError] = useState(\"\");\n  const [showError, setShowError] = useState(false);\n\n  const user = TokenService.getUser();\n  const isSuperAdmin = user.roles.includes(ROLES.SUPER_ADMIN);\n\n  useEffect(() => {\n    if (isSuperAdmin) {\n      UserService.getCountByRole().then((res) => {\n        if (res) {\n          setCountByRole(res);\n        }\n      });\n    }\n\n    const processApirror = (e) => {\n      setFetchingSurveys(false);\n      const processed = processError(e);\n      switch (processed) {\n        case PROCESSED_ERRORS.NETWORK_ERR:\n        case PROCESSED_ERRORS.BACKEND_DOWN:\n          setShowError(true);\n          setProcessedError(processed);\n          break;\n        default:\n          break;\n      }\n    };\n\n    SurveyService.getAllSurveys()\n      .then((data) => {\n        if (data) {\n          setFetchingSurveys(false);\n          setSurveys(data);\n        }\n      })\n      .catch((e) => processApirror(e));\n  }, []);\n\n  return (\n    <Box className={styles.mainContainer}>\n      <Header />\n      {showError && (\n        <ProcessedError\n          error={processedError}\n          handleClose={() => setShowError(false)}\n        />\n      )}\n      {isSuperAdmin && <CountsByRole countByRole={countByRole} />}\n      <Box className={styles.content}>\n        <HeaderContent />\n        <Stack flexDirection=\"row\" gap={4} flexWrap=\"wrap\">\n          {!fetchingSurveys ? (\n            surveys?.map((survey) => {\n              return <Survey key={survey.id} survey={survey} />;\n            })\n          ) : (\n            <div className={styles.loadingWrapper}>\n              <CircularProgress />\n            </div>\n          )}\n        </Stack>\n      </Box>\n    </Box>\n  );\n}\n\nexport default Dashboard;\n"],"names":["_jsx","jsxs","styles","jsx","status","Fragment","useState","useEffect"],"mappings":"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","x_google_ignoreList":[0]}