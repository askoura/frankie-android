{"version":3,"file":"index-8e75a887.js","sources":["../../src/components/manage/SurveyMode/index.jsx","../../src/pages/manage/CreateSurvey/index.jsx"],"sourcesContent":["import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormControl, MenuItem, InputLabel, Select } from \"@mui/material\";\nimport { SURVEY_MODE } from \"~/constants/survey\";\n\nexport const SurveyMode = ({\n  surveyMode,\n  onSurveyModeChanged,\n}) => {\n  const { t } = useTranslation(\"manage\");\n\n  return (\n    <FormControl fullWidth>\n      <InputLabel id=\"survey-mode-label\">{t(\"label.survey_mode\")}</InputLabel>\n      <Select\n        labelId=\"survey-mode-label\"\n        id=\"demo-simple-select\"\n        value={surveyMode}\n        label={t(\"label.survey_mode\")}\n        onChange={onSurveyModeChanged}\n      >\n        <MenuItem value={SURVEY_MODE.WEB}>\n          {t(`mode.${SURVEY_MODE.WEB}`)}\n        </MenuItem>\n        <MenuItem value={SURVEY_MODE.OFFLINE}>\n          {t(`mode.${SURVEY_MODE.OFFLINE}`)}\n        </MenuItem>\n        <MenuItem value={SURVEY_MODE.MIXED}>\n          {t(`mode.${SURVEY_MODE.MIXED}`)}\n        </MenuItem>\n      </Select>\n    </FormControl>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Box,\n  Button,\n  Card,\n  TextField,\n  FormGroup,\n  FormHelperText,\n  Typography,\n  Stack,\n} from \"@mui/material\";\n\nimport SurveyService from \"~/services/SurveyService\";\nimport { routes } from \"~/routes\";\nimport { PROCESSED_ERRORS, onApiError } from \"~/utils/errorsProcessor\";\nimport styles from \"./CreateSurvey.module.css\";\nimport { localDateToServerDateTime } from \"~/utils/DateUtils\";\nimport { SurveyMode } from \"~/components/manage/SurveyMode\";\nimport { SurveyActiveFromTo } from \"~/components/manage/SurveyActiveFromTo\";\nimport { SURVEY_MODE } from \"~/constants/survey\";\nimport { onError, setLoading } from \"~/state/edit/editState\";\nimport { useDispatch } from \"react-redux\";\n\nfunction CreateSurvey() {\n  const navigate = useNavigate();\n  const { t } = useTranslation(\"manage\");\n  const dispatch = useDispatch();\n\n  const [surveyName, setSurveyName] = useState(\"\");\n  const [surveyNameError, setSurveyNameError] = useState(\"\");\n  const [surveyDateError, setSurveyDateError] = useState(\"\");\n\n  const [surveyMode, setSurveyMode] = useState(SURVEY_MODE.MIXED);\n\n  const [surveyActiveFrom, setSurveyActiveFrom] = useState(null);\n  const [surveyActiveTo, setSurveyActiveTo] = useState(null);\n\n  const onSurveyNameChanged = (e) => {\n    setSurveyName(e.target.value);\n    setSurveyNameError(\"\");\n  };\n\n  const onSurveyModeChanged = (e) => {\n    setSurveyMode(e.target.value);\n  };\n\n  const onSurveyActiveFromChanged = (value) => {\n    setSurveyDateError(\"\");\n    setSurveyActiveFrom(value.toDate());\n  };\n\n  const onSurveyActiveToChanged = (value) => {\n    setSurveyDateError(\"\");\n    setSurveyActiveTo(value.toDate());\n  };\n\n  const validate = () => {\n    setSurveyNameError(\"\");\n\n    if (surveyName.length == 0) {\n      setSurveyNameError(t(\"survey_required\"));\n      return false;\n    }\n\n    return true;\n  };\n\n  const goDashboard = () => {\n    navigate(routes.dashboard);\n  };\n\n  const onSubmit = () => {\n    if (!validate()) {\n      return;\n    }\n\n    dispatch(setLoading(true));\n    const data = {\n      name: surveyName,\n      usage: surveyMode,\n    };\n\n    if (surveyActiveFrom) {\n      data.startDate = localDateToServerDateTime(surveyActiveFrom);\n    }\n\n    if (surveyActiveTo) {\n      data.endDate = localDateToServerDateTime(surveyActiveTo);\n    }\n\n    SurveyService.createSurvey(data)\n      .then(() => {\n        goDashboard();\n      })\n      .catch((e) => {\n        onApiError({\n          error: e,\n          globalErrorHandler: (processedError) => {\n            dispatch(onError(processedError));\n          },\n          locallErrorHandler: (processedError) => {\n            if (\n              processedError.name == PROCESSED_ERRORS.DUPLICATE_SURVEY_NAME.name\n            ) {\n              setSurveyNameError(t(`processed_errors.${processedError.name}`));\n            } else if (\n              processedError.name == PROCESSED_ERRORS.INVALID_SURVEY_DATES.name\n            ) {\n              setSurveyDateError(t(`processed_errors.${processedError.name}`));\n            }\n          },\n        });\n      })\n      .finally(() => {\n        dispatch(setLoading(false));\n      });\n  };\n\n  return (\n    <Box className={styles.mainContainer}>\n      <Card className={styles.createUserCard}>\n        <Typography variant=\"h4\">{t(\"create_survey.title\")}</Typography>\n        <FormGroup className={styles.formGroup}>\n          <TextField\n            sx={{ maxWidth: \"400px\" }}\n            error={surveyNameError.length > 0}\n            required={true}\n            value={surveyName}\n            id=\"surveyName\"\n            label={t(\"label.survey_name\")}\n            name=\"surveyName\"\n            onChange={onSurveyNameChanged}\n            variant=\"standard\"\n          />\n          {surveyNameError && (\n            <FormHelperText className={styles.errorText}>\n              {surveyNameError}\n            </FormHelperText>\n          )}\n          <Stack flexDirection=\"row\" gap={5} sx={{ mt: \"40px\" }}>\n            <Box className={styles.blockItem}>\n              <SurveyMode\n                surveyMode={surveyMode}\n                onSurveyModeChanged={onSurveyModeChanged}\n              />\n            </Box>\n            <Box className={styles.blockItem}>\n              <SurveyActiveFromTo\n                error={surveyDateError}\n                surveyActiveFrom={surveyActiveFrom}\n                surveyActiveTo={surveyActiveTo}\n                onSurveyActiveFromChanged={onSurveyActiveFromChanged}\n                onSurveyActiveToChanged={onSurveyActiveToChanged}\n              />\n            </Box>\n          </Stack>\n        </FormGroup>\n        <Box sx={{ display: \"flex\", justifyContent: \"flex-end\", mt: \"40px\" }}>\n          <Button onClick={goDashboard}>{t(\"action_btn.cancel\")}</Button>\n          <Button onClick={onSubmit}>{t(\"action_btn.save\")}</Button>\n        </Box>\n      </Card>\n    </Box>\n  );\n}\n\nexport default CreateSurvey;\n"],"names":["jsxs","jsx","useState"],"mappings":"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"}