{"version":3,"file":"index-50893693.js","sources":["../../src/pages/manage/ResetPassword/index.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport { useNavigate, useParams, useSearchParams } from \"react-router-dom\";\nimport {\n  Button,\n  FormControl,\n  IconButton,\n  Input,\n  InputAdornment,\n  InputLabel,\n  Box,\n  Typography,\n  FormHelperText,\n  FormGroup,\n} from \"@mui/material\";\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\nimport AuthService from \"~/services/AuthService\";\nimport styles from \"./ResetPassword.module.css\";\nimport { useTranslation } from \"react-i18next\";\nimport { AuthWrap } from \"~/components/manage/AuthWrap\";\nimport { PROCESSED_ERRORS, processError } from \"~/utils/errorsProcessor\";\n\nfunction ResetPassword() {\n  const { t } = useTranslation(\"manage\");\n  const [searchParams] = useSearchParams();\n  const token = searchParams.get(\"token\")\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [processedError, setProcessedError] = useState(\"\");\n  const [showError, setShowError] = useState(false);\n\n  const [password, setPassword] = useState(\"\");\n  const [passError, setPassError] = useState(\"\");\n  const [confrimPassword, setConfrimPassword] = useState(\"\");\n  const [confrimPasswordError, setConfrimPasswordError] = useState(\"\");\n\n  const [showPassword, setShowPassword] = useState(false);\n  const handleClickShowPassword = () => setShowPassword((show) => !show);\n\n  const validate = () => {\n    setShowError(false);\n    setConfrimPasswordError(\"\");\n    setPassError(\"\");\n    if (password.length == 0) {\n      setPassError(t(\"password_required\"));\n      return false;\n    }\n    if (confrimPassword.length == 0) {\n      setConfrimPasswordError(t(\"confirm_password_required\"));\n      return false;\n    }\n\n    if (confrimPassword != password) {\n      setConfrimPasswordError(t(\"error.password_should_match\"));\n      return false;\n    }\n\n    return true;\n  };\n\n  const onPasswordChanged = (e) => {\n    setPassword(e.target.value);\n    setPassError(\"\");\n  };\n\n  const onConfirmPasswordChanges = (e) => {\n    setConfrimPassword(e.target.value);\n    setConfrimPasswordError(\"\");\n  };\n\n  const onSubmit = () => {\n    if (!validate()) {\n      return;\n    }\n    setLoading(true);\n    AuthService.resetPassword(token, password)\n      .then((data) => {\n        navigate(\"/\");\n      })\n      .catch((e) => {\n        const processed = processError(e);\n        switch (processed) {\n          case PROCESSED_ERRORS.NETWORK_ERR:\n          case PROCESSED_ERRORS.BACKEND_DOWN:\n            setShowError(true);\n            setProcessedError(processed);\n            break;\n          case PROCESSED_ERRORS.WRONG_RESET_TOKEN:\n          case PROCESSED_ERRORS.EXPIRED_RESET_TOKEN:\n            setProcessedError(processed);\n            break;\n          default:\n            break;\n        }\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n\n  return (\n    <AuthWrap\n      loading={loading}\n      showError={showError}\n      processedError={processedError}\n      handleClose={() => setShowError(false)}\n    >\n      <Box className={styles.wrapper}>\n        <Box className={styles.content}>\n          <Typography variant=\"h4\">{t(\"reset_password.title\")}</Typography>\n          <Box className={styles.form}>\n            <FormGroup>\n              <FormControl\n                required={true}\n                variant=\"standard\"\n                sx={{ mt: \"10px\" }}\n              >\n                <InputLabel htmlFor=\"standard-adornment-password\">\n                  {t(\"label.new_password\")}\n                </InputLabel>\n                <Input\n                  error={passError.length > 0}\n                  onChange={onPasswordChanged}\n                  name=\"password\"\n                  value={password}\n                  id=\"standard-adornment-password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  endAdornment={\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        aria-label=\"toggle password visibility\"\n                        onClick={handleClickShowPassword}\n                      >\n                        {showPassword ? <VisibilityOff /> : <Visibility />}\n                      </IconButton>\n                    </InputAdornment>\n                  }\n                />\n              </FormControl>\n              <FormControl\n                required={true}\n                variant=\"standard\"\n                sx={{ mt: \"10px\" }}\n              >\n                <InputLabel htmlFor=\"standard-adornment-password\">\n                  {t(\"label.confirm_new_password\")}\n                </InputLabel>\n                <Input\n                  error={confrimPasswordError.length > 0}\n                  onChange={onConfirmPasswordChanges}\n                  name=\"cpassword\"\n                  value={confrimPassword}\n                  id=\"standard-adornment-password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  endAdornment={\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        aria-label=\"toggle password visibility\"\n                        onClick={handleClickShowPassword}\n                      >\n                        {showPassword ? <VisibilityOff /> : <Visibility />}\n                      </IconButton>\n                    </InputAdornment>\n                  }\n                />\n              </FormControl>\n              {(processedError == PROCESSED_ERRORS.WRONG_RESET_TOKEN ||\n                processedError == PROCESSED_ERRORS.EXPIRED_RESET_TOKEN) && (\n                <FormHelperText className={styles.errorText}>\n                  {t(`processed_errors.${processedError}`)}\n                </FormHelperText>\n              )}\n              {(passError || confrimPasswordError) && (\n                <FormHelperText className={styles.errorText}>\n                  {passError || confrimPasswordError}\n                </FormHelperText>\n              )}\n            </FormGroup>\n            <Button onClick={onSubmit} sx={{ mt: \"40px\" }}>\n              {t(\"reset_password.reset\")}\n            </Button>\n          </Box>\n        </Box>\n      </Box>\n    </AuthWrap>\n  );\n}\n\nexport default ResetPassword;\n"],"names":["useState","jsx","jsxs"],"mappings":"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"}