{"version":3,"file":"index-legacy-rCsukwH7.js","sources":["../../node_modules/@mui/icons-material/esm/Add.js","../../src/components/manage/CountsByRole/index.jsx","../../src/components/manage/HeaderContent/index.jsx","../../src/components/manage/Survey/index.jsx","../../src/pages/manage/Dashboard/index.jsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');","import { Box, Button, Card } from \"@mui/material\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { routes } from \"~/routes\";\nimport styles from \"./CountsByRole.module.css\";\n\nexport const CountsByRole = ({ countByRole }) => {\n  const navigate = useNavigate();\n  const { t } = useTranslation(\"manage\");\n\n  return (\n    <Card className={styles.byRoleWrap}>\n      <Box>\n        <Box component=\"b\">\n          <Box component=\"span\">\n            {countByRole?.superAdmin} {t(\"super_admins\")} ,\n          </Box>\n          <Box component=\"span\">\n            {countByRole?.surveyAdmin} {t(\"admins\")},\n          </Box>\n          <Box component=\"span\">\n            {countByRole?.surveyor} {t(\"surveyors\")},\n          </Box>\n        </Box>\n        <Box component=\"span\"> {t(\"registered\")}</Box>\n      </Box>\n      <Button\n        onClick={() => {\n          navigate(routes.manageUsers);\n        }}\n      >\n        {t(\"manage_users\")}\n      </Button>\n    </Card>\n  );\n};\n","import { Stack, Button, Typography } from \"@mui/material\";\nimport { Add } from \"@mui/icons-material\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { routes } from \"~/routes\";\nimport TokenService from \"~/services/TokenService\";\nimport { ROLES } from \"~/constants/roles\";\n\nexport const HeaderContent = () => {\n  const navigate = useNavigate();\n  const { t } = useTranslation(\"manage\");\n  const clickAdd = () => {\n    navigate(routes.createSurvey);\n  };\n\n  const shouldShowClickAdd = () => {\n    const roles = TokenService.getUser().roles;\n    if (\n      roles.indexOf(ROLES.SUPER_ADMIN) > -1 ||\n      roles.indexOf(ROLES.SURVEY_ADMIN) > -1\n    ) {\n      return true;\n    }\n    return false\n  };\n  return (\n    <Stack\n      sx={{ p: \"10px\" }}\n      flexDirection=\"row\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <Stack flexDirection=\"row\" alignItems=\"center\" gap={2}>\n        <Typography sx={{ fontSize: \"20px\" }}>{t(\"my_surveys\")}</Typography>\n        {shouldShowClickAdd() && (\n          <Button onClick={clickAdd}>\n            <Add />\n            {t(\"new_survey\")}\n          </Button>\n        )}\n      </Stack>\n    </Stack>\n  );\n};\n","import { Link } from \"react-router-dom\";\nimport { Box, Typography, IconButton, Card } from \"@mui/material\";\nimport { Edit, Palette, Preview } from \"@mui/icons-material\";\n\nimport styles from \"./Survey.module.css\";\nimport {\n  dayMonthUeatFormat,\n  serverDateTimeToLocalDateTime,\n} from \"~/utils/DateUtils\";\nimport { useTranslation } from \"react-i18next\";\nimport { isSurveyAdmin } from \"~/constants/roles\";\n\nconst STATUS = {\n  DRAFT: \"draft\",\n  CLOSED: \"closed\",\n  ACTIVE: \"active\",\n  EXPIRED: \"expired\",\n  SCHEDULED: \"schedules\",\n};\n\nconst BG = {\n  LIGHTBLUE: \"lightblue\",\n  RED: \"red\",\n  GREEN: \"green\",\n  ORANGE: \"orange\",\n  GRAY: \"gray\",\n};\n\nconst status = (survey) => {\n  switch (survey.status) {\n    case \"draft\":\n      return STATUS.DRAFT;\n    case \"closed\":\n      return STATUS.CLOSED;\n    case \"active\":\n      if (\n        survey.endDate &&\n        serverDateTimeToLocalDateTime(survey.endDate) < Date.now()\n      ) {\n        return STATUS.EXPIRED;\n      } else if (\n        survey.startDate &&\n        serverDateTimeToLocalDateTime(survey.startDate) > Date.now()\n      ) {\n        return STATUS.SCHEDULED;\n      } else {\n        return STATUS.ACTIVE;\n      }\n    default:\n      return STATUS.DRAFT;\n  }\n};\n\nconst bgHeader = (status) => {\n  switch (status) {\n    case STATUS.DRAFT:\n      return BG.LIGHTBLUE;\n    case STATUS.CLOSED:\n      return BG.RED;\n    case STATUS.EXPIRED:\n      return BG.ORANGE;\n    case STATUS.SCHEDULED:\n      return BG.GRAY;\n    case STATUS.ACTIVE:\n      return BG.GREEN;\n    default:\n      return;\n  }\n};\n\nexport const Survey = ({ survey }) => {\n  const { t } = useTranslation(\"manage\");\n  const surveyStatus = status(survey);\n  return (\n    <Card sx={{ borderRadius: \"10px\" }}>\n      <Box\n        className={styles.surveyHeader}\n        sx={{ background: bgHeader(surveyStatus) }}\n      >\n        {surveyStatus}\n      </Box>\n      <Box className={styles.contentCard}>\n        <Link to={`/design-survey/${survey.id}`} title=\"Design\">\n          <Typography variant=\"h5\">{survey.name}</Typography>\n        </Link>\n        <Box sx={{ mt: \"5px\" }}>\n          {t(\"added\")}\n          {dayMonthUeatFormat(\n            serverDateTimeToLocalDateTime(survey.creationDate)\n          )}\n        </Box>\n        <Box>\n          {t(\"last_modified\")}{\" \"}\n          {dayMonthUeatFormat(\n            serverDateTimeToLocalDateTime(survey.lastModified)\n          )}\n        </Box>\n        {t(\"responses_count\")} {survey?.responsesCount}\n        {survey?.latestVersion?.published === false && (\n          <>\n            {\" \"}\n            <br /> <span>Unpublished Changes</span>{\" \"}\n          </>\n        )}\n      </Box>\n    </Card>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Box, CircularProgress, Stack } from \"@mui/material\";\nimport SurveyService from \"~/services/SurveyService\";\nimport TokenService from \"~/services/TokenService\";\nimport UserService from \"~/services/UserService\";\nimport styles from \"./Dashboard.module.css\";\nimport { CountsByRole } from \"~/components/manage/CountsByRole\";\nimport { HeaderContent } from \"~/components/manage/HeaderContent\";\nimport { Survey } from \"~/components/manage/Survey\";\nimport { ROLES } from \"~/constants/roles\";\nimport { onError } from \"~/state/edit/editState\";\nimport { useDispatch } from \"react-redux\";\n\nfunction Dashboard() {\n  const [surveys, setSurveys] = useState([]);\n  const [fetchingSurveys, setFetchingSurveys] = useState(true);\n  const [countByRole, setCountByRole] = useState(null);\n\n  const user = TokenService.getUser();\n  const isSuperAdmin = user.roles.includes(ROLES.SUPER_ADMIN);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (isSuperAdmin) {\n      UserService.getCountByRole().then((res) => {\n        if (res) {\n          setCountByRole(res);\n        }\n      });\n    }\n\n    const processApirror = (e) => {\n      setFetchingSurveys(false);\n      onApiError({\n        error: e,\n        globalErrorHandler: (processedError) => {\n          dispatch(onError(processedError));\n        },\n      });\n    };\n\n    SurveyService.getAllSurveys()\n      .then((data) => {\n        if (data) {\n          setFetchingSurveys(false);\n          setSurveys(data);\n        }\n      })\n      .catch((e) => processApirror(e));\n  }, []);\n\n  return (\n    <Box className={styles.mainContainer}>\n      {isSuperAdmin && <CountsByRole countByRole={countByRole} />}\n      <Box className={styles.content}>\n        <HeaderContent />\n        <Stack flexDirection=\"row\" gap={4} flexWrap=\"wrap\">\n          {!fetchingSurveys ? (\n            surveys?.map((survey) => {\n              return <Survey key={survey.id} survey={survey} />;\n            })\n          ) : (\n            <div className={styles.loadingWrapper}>\n              <CircularProgress />\n            </div>\n          )}\n        </Stack>\n      </Box>\n    </Box>\n  );\n}\n\nexport default Dashboard;\n"],"names":["Add","createSvgIcon","_jsx","jsx","d","CountsByRole","countByRole","navigate","useNavigate","_useTranslation","useTranslation","t","jsxs","Card","className","styles","byRoleWrap","children","Box","component","superAdmin","surveyAdmin","surveyor","Button","onClick","routes","manageUsers","HeaderContent","_useTranslation2","clickAdd","createSurvey","shouldShowClickAdd","roles","TokenService","getUser","indexOf","ROLES","SUPER_ADMIN","SURVEY_ADMIN","Stack","sx","p","flexDirection","alignItems","justifyContent","gap","Typography","fontSize","STATUS","DRAFT","CLOSED","ACTIVE","EXPIRED","SCHEDULED","BG","LIGHTBLUE","RED","GREEN","ORANGE","GRAY","status","survey","endDate","serverDateTimeToLocalDateTime","Date","now","startDate","bgHeader","Survey","_survey$latestVersion","_useTranslation3","surveyStatus","borderRadius","surveyHeader","background","contentCard","Link","to","id","title","variant","name","mt","dayMonthUeatFormat","creationDate","lastModified","responsesCount","latestVersion","published","Fragment","Dashboard","_reactExports$useStat","useState","_reactExports$useStat2","_slicedToArray","surveys","setSurveys","_reactExports$useStat3","_reactExports$useStat4","fetchingSurveys","setFetchingSurveys","_reactExports$useStat5","_reactExports$useStat6","setCountByRole","user","isSuperAdmin","includes","dispatch","useDispatch","useEffect","UserService","getCountByRole","then","res","processApirror","e","onApiError","error","globalErrorHandler","processedError","onError","SurveyService","getAllSurveys","data","catch","mainContainer","content","flexWrap","map","loadingWrapper","CircularProgress"],"mappings":"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","x_google_ignoreList":[0]}