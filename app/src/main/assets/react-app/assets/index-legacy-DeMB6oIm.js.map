{"version":3,"file":"index-legacy-DeMB6oIm.js","sources":["../../src/pages/manage/ForgotPassword/index.jsx"],"sourcesContent":["import * as Yup from \"yup\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\n\nimport Link from \"@mui/material/Link\";\nimport Stack from \"@mui/material/Stack\";\nimport Typography from \"@mui/material/Typography\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\n\nimport RouterLink from \"~/components/router/router-link\";\nimport Iconify from \"~/components/iconify\";\nimport Image from \"~/components/image/image\";\nimport FormProvider, { RHFTextField } from \"../../../components/hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setLoading } from \"~/state/edit/editState\";\nimport { routes } from \"~/routes\";\nimport { useNavigate } from \"react-router-dom\";\nimport SuccessMessage from \"~/components/common/SuccessMessage/SuccessMessage\";\nimport { useService } from \"~/hooks/use-service\";\n// ----------------------------------------------------------------------\n\nexport default function ForgotPasswordView() {\n  const authService = useService(\"auth\");\n\n  const { t } = useTranslation(\"manage\");\n  const [isSuccess, setSuccess] = useState(false);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const ForgotPasswordSchema = Yup.object().shape({\n    email: Yup.string()\n      .required(\"Email is required\")\n      .email(\"Email must be a valid email address\"),\n  });\n\n  const defaultValues = {\n    email: \"\",\n  };\n\n  const methods = useForm({\n    resolver: yupResolver(ForgotPasswordSchema),\n    defaultValues,\n  });\n\n  const {\n    reset,\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = handleSubmit(async (data) => {\n    try {\n      dispatch(setLoading(true));\n      await authService.forgotPassword(data.email);\n      setSuccess(true);\n    } catch (e) {\n    } finally {\n      dispatch(setLoading(false));\n    }\n  });\n\n  return (\n    <>\n      {isSuccess ? (\n        <SuccessMessage t={t} message=\"forgot_password.success\" />\n      ) : (\n        <Stack sx={{ textAlign: \"center\" }}>\n          <Image\n            alt=\"reset password\"\n            src=\"/ic_lock_password.svg\"\n            sx={{ mb: 5, width: 96, height: 96, mx: \"auto\" }}\n          />\n\n          <Typography variant=\"h3\" paragraph>\n            {t(\"forgot_password.title\")}\n          </Typography>\n\n          <Typography variant=\"body2\" color=\"textSecondary\" mb={5}>\n            {t(\"forgot_password.helper_text\")}\n          </Typography>\n\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n            <RHFTextField\n              name=\"email\"\n              hiddenLabel\n              placeholder=\"Email address\"\n            />\n\n            <LoadingButton\n              fullWidth\n              size=\"large\"\n              color=\"primary\"\n              type=\"submit\"\n              variant=\"contained\"\n              loading={isSubmitting}\n              sx={{ mt: 2.5 }}\n            >\n              {t(\"forgot_password.send\")}\n            </LoadingButton>\n          </FormProvider>\n\n          <Link\n            component={RouterLink}\n            href={routes.login}\n            color=\"inherit\"\n            variant=\"subtitle2\"\n            sx={{\n              mt: 3,\n              mx: \"auto\",\n              alignItems: \"center\",\n              display: \"inline-flex\",\n            }}\n          >\n            <Iconify icon=\"carbon:chevron-left\" width={16} sx={{ mr: 1 }} />\n            {t(\"forgot_password.return_to_signin\")}\n          </Link>\n        </Stack>\n      )}\n    </>\n  );\n}\n"],"names":["ForgotPasswordView","authService","useService","_useTranslation","useTranslation","t","_reactExports$useStat","useState","_reactExports$useStat2","_slicedToArray","isSuccess","setSuccess","dispatch","useDispatch","useNavigate","ForgotPasswordSchema","Yup.object","shape","email","Yup.string","required","defaultValues","methods","useForm","resolver","yupResolver","reset","handleSubmit","isSubmitting","formState","onSubmit","_ref","_asyncToGenerator","data","setLoading","forgotPassword","e","_x","apply","arguments","jsx","Fragment","children","SuccessMessage","message","jsxs","Stack","sx","textAlign","Image","alt","src","mb","width","height","mx","Typography","variant","paragraph","color","FormProvider","RHFTextField","name","hiddenLabel","placeholder","LoadingButton","fullWidth","size","type","loading","mt","Link","component","RouterLink","href","routes","login","alignItems","display","Iconify","icon","mr"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAuBA,SAAwBA,kBAAqBA,CAAA,EAAA;UACrC,MAAAC,WAAA,GAAcC,WAAW,MAAM,CAAA;UAErC,MAAAC,eAAA,GAAcC,cAAA,CAAe,QAAQ,CAAA;YAA7BC,CAAA,GAAAF,eAAA,CAAAE,CAAA;UACR,MAAAC,qBAAA,GAAgCC,sBAAS,KAAK,CAAA;YAAAC,sBAAA,GAAAC,cAAA,CAAAH,qBAAA;YAAvCI,SAAA,GAAAF,sBAAA;YAAWG,UAAU,GAAAH,sBAAA;UAC5B,MAAMI,WAAWC,WAAY,EAAA;UACZC,WAAY,CAAA,CAAA;UAC7B,MAAMC,oBAAuB,GAAAC,QAAW,CAAA,CAAA,CAAEC,KAAM,CAAA;YAC9CC,KAAA,EAAOC,QAAW,CAAA,CAAA,CACfC,SAAS,mBAAmB,CAAA,CAC5BF,MAAM,qCAAqC;UAAA,CAC/C,CAAA;UAED,MAAMG,aAAgB,GAAA;YACpBH,KAAO,EAAA;UAAA,CACT;UAEA,MAAMI,UAAUC,OAAQ,CAAA;YACtBC,QAAA,EAAUC,EAAYV,oBAAoB,CAAA;YAC1CM;UAAA,CACD,CAAA;UAEK,MACJK,KAAA,GAGEJ,OAAA,CAHFI,KAAA;YACAC,YAAA,GAEEL,OAAA,CAFFK,YAAA;YACaC,YAAa,GACxBN,OAAA,CADFO,SAAA,CAAaD,YAAa;UAGtB,MAAAE,QAAA,GAAWH,YAAa;YAAA,IAAAI,IAAA,GAAAC,iBAAA,CAAA,WAAOC,IAAS,EAAA;cACxC,IAAA;gBACOrB,QAAA,CAAAsB,UAAA,CAAW,IAAI,CAAC,CAAA;gBACnB,MAAAjC,WAAA,CAAYkC,cAAe,CAAAF,IAAA,CAAKf,KAAK,CAAA;gBAC3CP,UAAA,CAAW,IAAI,CAAA;uBACRyB,CAAG,EAAA,CAAA,CACV,SAAA;gBACSxB,QAAA,CAAAsB,UAAA,CAAW,KAAK,CAAC,CAAA;cAC5B;YAAA,CACD;YAAA,iBAAAG,EAAA;cAAA,OAAAN,IAAA,CAAAO,KAAA,OAAAC,SAAA;YAAA;UAAA,IAAA;UAED,sBAEKC,iBAAA,CAAAA,GAAA,CAAAC,iBAAA,CAAAA,QAAA,EAAA;YAAAC,QAAA,EAAAhC,SAAA,GAAA,eACE8B,qBAAA,CAAAG,cAAA,EAAA;cAAetC;cAAMuC,OAAQ,EAAA;aAA0B,CAExD,GAAA,eAAAC,iBAAA,CAAAA,IAAA,CAACC,KAAM,EAAA;cAAAC,EAAA,EAAI;gBAAEC,SAAA,EAAW;cACtB,CAAA;cAAAN,QAAA,EAAA,CAAA,eAAAF,iBAAA,CAAAA,GAAA,CAACS,KAAA,EAAA;gBACCC,GAAI,EAAA,gBAAA;gBACJC,GAAI,EAAA,uBAAA;gBACJJ,EAAA,EAAI;kBAAEK,EAAI,EAAA,CAAA;kBAAGC,OAAO,EAAI;kBAAAC,MAAA,EAAQ,EAAI;kBAAAC,EAAA,EAAI;gBAAO;cAAA,CACjD,CAAA,EAEAf,eAAAA,iBAAAA,CAAAA,GAAA,CAACgB;gBAAWC,OAAQ,EAAA,IAAA;gBAAKC,WAAS,IAC/B;gBAAAhB,QAAA,EAAArC,CAAA,CAAE,uBAAuB;eAC5B,CAAA,EAEAmC,eAAAA,iBAAAA,CAAAA,GAAA,CAACgB,UAAW,EAAA;gBAAAC,OAAA,EAAQ,OAAQ;gBAAAE,KAAA,EAAM;gBAAgBP,EAAI,EAAA,CAAA;gBACnDV,QAAE,EAAArC,CAAA,CAAA,6BAA6B;cAClC,CAAA,CAAA,EAAA,sCAECuD,YAAa,EAAA;gBAAAtC,OAAA;gBAAkBQ,QAAU,EAAAH,YAAA,CAAaG,QAAQ,CAC7D;gBAAAY,QAAA,EAAA,CAAA,eAAAF,iBAAA,CAAAA,GAAA,CAACqB,YAAA,EAAA;kBACCC,IAAK,EAAA,OAAA;kBACLC,WAAW,EAAA,IAAA;kBACXC,WAAY,EAAA;gBAAA,CACd,CAAA,EAAA,eAEAxB,iBAAA,CAAAA,GAAA,CAACyB,aAAA,EAAA;kBACCC,SAAS,EAAA,IAAA;kBACTC,IAAK,EAAA,OAAA;kBACLR,KAAM,EAAA,SAAA;kBACNS,IAAK,EAAA,QAAA;kBACLX,OAAQ,EAAA,WAAA;kBACRY,OAAS,EAAAzC,YAAA;kBACTmB,EAAA,EAAI;oBAAEuB,EAAA,EAAI;kBAAI,CAAA;kBAEb5B,YAAE,sBAAsB;gBAAA,CAC3B,CAAA;eACF,CAAA,EAAA,eAEAG,iBAAA,CAAAA,IAAA,CAAC0B,IAAA,EAAA;gBACCC,SAAW,EAAAC,UAAA;gBACXC,MAAMC,MAAO,CAAAC,KAAA;gBACbjB,KAAM,EAAA,SAAA;gBACNF,OAAQ,EAAA,WAAA;gBACRV,EAAI,EAAA;kBACFuB,EAAI,EAAA,CAAA;kBACJf,EAAI,EAAA,MAAA;kBACJsB,UAAY,EAAA,QAAA;kBACZC,OAAS,EAAA;gBACX,CAAA;gBAEApC,QAAA,EAAA,CAACF,eAAAA,iBAAAA,CAAAA,GAAA,CAAAuC,OAAA,EAAA;kBAAQC,MAAK,qBAAsB;kBAAA3B,KAAA,EAAO;kBAAIN,EAAI,EAAA;oBAAEkC,EAAI,EAAA;kBAAK;gBAAA,CAAA,CAAA,EAC7D5E,EAAE,kCAAkC,CAAA;cAAA,CACvC,CAAA;YACF,CAAA;UAEJ,CAAA,CAAA;QAEJ;;;;"}