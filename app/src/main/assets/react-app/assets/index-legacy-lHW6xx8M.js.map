{"version":3,"file":"index-legacy-lHW6xx8M.js","sources":["../../src/components/manage/SurveyMode/index.jsx","../../src/pages/manage/CreateSurvey/index.jsx"],"sourcesContent":["import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormControl, MenuItem, InputLabel, Select } from \"@mui/material\";\nimport { SURVEY_MODE } from \"~/constants/survey\";\n\nexport const SurveyMode = ({\n  surveyMode,\n  onSurveyModeChanged,\n}) => {\n  const { t } = useTranslation(\"manage\");\n\n  return (\n    <FormControl fullWidth>\n      <InputLabel id=\"survey-mode-label\">{t(\"label.survey_mode\")}</InputLabel>\n      <Select\n        labelId=\"survey-mode-label\"\n        id=\"demo-simple-select\"\n        value={surveyMode}\n        label={t(\"label.survey_mode\")}\n        onChange={onSurveyModeChanged}\n      >\n        <MenuItem value={SURVEY_MODE.WEB}>\n          {t(`mode.${SURVEY_MODE.WEB}`)}\n        </MenuItem>\n        <MenuItem value={SURVEY_MODE.OFFLINE}>\n          {t(`mode.${SURVEY_MODE.OFFLINE}`)}\n        </MenuItem>\n        <MenuItem value={SURVEY_MODE.MIXED}>\n          {t(`mode.${SURVEY_MODE.MIXED}`)}\n        </MenuItem>\n      </Select>\n    </FormControl>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Box,\n  Button,\n  Card,\n  TextField,\n  FormGroup,\n  FormHelperText,\n  Typography,\n  Stack,\n} from \"@mui/material\";\n\nimport SurveyService from \"~/services/SurveyService\";\nimport { routes } from \"~/routes\";\nimport { PROCESSED_ERRORS, onApiError } from \"~/utils/errorsProcessor\";\nimport styles from \"./CreateSurvey.module.css\";\nimport { localDateToServerDateTime } from \"~/utils/DateUtils\";\nimport { SurveyMode } from \"~/components/manage/SurveyMode\";\nimport { SurveyActiveFromTo } from \"~/components/manage/SurveyActiveFromTo\";\nimport { SURVEY_MODE } from \"~/constants/survey\";\nimport { onError, setLoading } from \"~/state/edit/editState\";\nimport { useDispatch } from \"react-redux\";\n\nfunction CreateSurvey() {\n  const navigate = useNavigate();\n  const { t } = useTranslation(\"manage\");\n  const dispatch = useDispatch();\n\n  const [surveyName, setSurveyName] = useState(\"\");\n  const [surveyNameError, setSurveyNameError] = useState(\"\");\n  const [surveyDateError, setSurveyDateError] = useState(\"\");\n\n  const [surveyMode, setSurveyMode] = useState(SURVEY_MODE.MIXED);\n\n  const [surveyActiveFrom, setSurveyActiveFrom] = useState(null);\n  const [surveyActiveTo, setSurveyActiveTo] = useState(null);\n\n  const onSurveyNameChanged = (e) => {\n    setSurveyName(e.target.value);\n    setSurveyNameError(\"\");\n  };\n\n  const onSurveyModeChanged = (e) => {\n    setSurveyMode(e.target.value);\n  };\n\n  const onSurveyActiveFromChanged = (value) => {\n    setSurveyDateError(\"\");\n    setSurveyActiveFrom(value.toDate());\n  };\n\n  const onSurveyActiveToChanged = (value) => {\n    setSurveyDateError(\"\");\n    setSurveyActiveTo(value.toDate());\n  };\n\n  const validate = () => {\n    setSurveyNameError(\"\");\n\n    if (surveyName.length == 0) {\n      setSurveyNameError(t(\"survey_required\"));\n      return false;\n    }\n\n    return true;\n  };\n\n  const goDashboard = () => {\n    navigate(routes.dashboard);\n  };\n\n  const onSubmit = () => {\n    if (!validate()) {\n      return;\n    }\n\n    dispatch(setLoading(true));\n    const data = {\n      name: surveyName,\n      usage: surveyMode,\n    };\n\n    if (surveyActiveFrom) {\n      data.startDate = localDateToServerDateTime(surveyActiveFrom);\n    }\n\n    if (surveyActiveTo) {\n      data.endDate = localDateToServerDateTime(surveyActiveTo);\n    }\n\n    SurveyService.createSurvey(data)\n      .then(() => {\n        goDashboard();\n      })\n      .catch((e) => {\n        onApiError({\n          error: e,\n          globalErrorHandler: (processedError) => {\n            dispatch(onError(processedError));\n          },\n          locallErrorHandler: (processedError) => {\n            if (\n              processedError.name == PROCESSED_ERRORS.DUPLICATE_SURVEY_NAME.name\n            ) {\n              setSurveyNameError(t(`processed_errors.${processedError.name}`));\n            } else if (\n              processedError.name == PROCESSED_ERRORS.INVALID_SURVEY_DATES.name\n            ) {\n              setSurveyDateError(t(`processed_errors.${processedError.name}`));\n            }\n          },\n        });\n      })\n      .finally(() => {\n        dispatch(setLoading(false));\n      });\n  };\n\n  return (\n    <Box className={styles.mainContainer}>\n      <Card className={styles.createUserCard}>\n        <Typography variant=\"h4\">{t(\"create_survey.title\")}</Typography>\n        <FormGroup className={styles.formGroup}>\n          <TextField\n            sx={{ maxWidth: \"400px\" }}\n            error={surveyNameError.length > 0}\n            required={true}\n            value={surveyName}\n            id=\"surveyName\"\n            label={t(\"label.survey_name\")}\n            name=\"surveyName\"\n            onChange={onSurveyNameChanged}\n            variant=\"standard\"\n          />\n          {surveyNameError && (\n            <FormHelperText className={styles.errorText}>\n              {surveyNameError}\n            </FormHelperText>\n          )}\n          <Stack flexDirection=\"row\" gap={5} sx={{ mt: \"40px\" }}>\n            <Box className={styles.blockItem}>\n              <SurveyMode\n                surveyMode={surveyMode}\n                onSurveyModeChanged={onSurveyModeChanged}\n              />\n            </Box>\n            <Box className={styles.blockItem}>\n              <SurveyActiveFromTo\n                error={surveyDateError}\n                surveyActiveFrom={surveyActiveFrom}\n                surveyActiveTo={surveyActiveTo}\n                onSurveyActiveFromChanged={onSurveyActiveFromChanged}\n                onSurveyActiveToChanged={onSurveyActiveToChanged}\n              />\n            </Box>\n          </Stack>\n        </FormGroup>\n        <Box sx={{ display: \"flex\", justifyContent: \"flex-end\", mt: \"40px\" }}>\n          <Button onClick={goDashboard}>{t(\"action_btn.cancel\")}</Button>\n          <Button onClick={onSubmit}>{t(\"action_btn.save\")}</Button>\n        </Box>\n      </Card>\n    </Box>\n  );\n}\n\nexport default CreateSurvey;\n"],"names":["SurveyMode","surveyMode","onSurveyModeChanged","_useTranslation","useTranslation","t","jsxs","FormControl","fullWidth","children","jsx","InputLabel","id","Select","labelId","value","label","onChange","MenuItem","SURVEY_MODE","WEB","OFFLINE","MIXED","CreateSurvey","navigate","useNavigate","_useTranslation2","dispatch","useDispatch","_reactExports$useStat","useState","_reactExports$useStat2","_slicedToArray","surveyName","setSurveyName","_reactExports$useStat3","_reactExports$useStat4","surveyNameError","setSurveyNameError","_reactExports$useStat5","_reactExports$useStat6","surveyDateError","setSurveyDateError","_reactExports$useStat7","_reactExports$useStat8","setSurveyMode","_reactExports$useStat9","_reactExports$useStat10","surveyActiveFrom","setSurveyActiveFrom","_reactExports$useStat11","_reactExports$useStat12","surveyActiveTo","setSurveyActiveTo","onSurveyNameChanged","e","target","onSurveyActiveFromChanged","toDate","onSurveyActiveToChanged","validate","length","goDashboard","routes","dashboard","onSubmit","setLoading","data","name","usage","startDate","localDateToServerDateTime","endDate","SurveyService","createSurvey","then","catch","onApiError","error","globalErrorHandler","processedError","onError","locallErrorHandler","PROCESSED_ERRORS","DUPLICATE_SURVEY_NAME","INVALID_SURVEY_DATES","finally","Box","className","styles","mainContainer","Card","createUserCard","Typography","variant","FormGroup","formGroup","TextField","sx","maxWidth","required","FormHelperText","errorText","Stack","flexDirection","gap","mt","blockItem","SurveyActiveFromTo","display","justifyContent","Button","onClick"],"mappings":"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"}