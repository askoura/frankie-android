{"version":3,"file":"index-legacy-DVMGzhN3.js","sources":["../../src/pages/manage/Signup/index.jsx"],"sourcesContent":["import * as Yup from \"yup\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\n\nimport Link from \"@mui/material/Link\";\nimport Stack from \"@mui/material/Stack\";\nimport Divider from \"@mui/material/Divider\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Typography from \"@mui/material/Typography\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\n\nimport RouterLink from \"~/components/router/router-link\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { setLoading } from \"~/state/edit/editState\";\n\nimport { useBoolean } from \"~/hooks/use-boolean\";\nimport Iconify from \"~/components/iconify\";\nimport FormProvider, { RHFTextField } from \"../../../components/hook-form\";\nimport { useState } from \"react\";\nimport { PROCESSED_ERRORS } from \"~/utils/errorsProcessor\";\nimport { useTranslation } from \"react-i18next\";\nimport { GoogleLogin, GoogleOAuthProvider } from \"@react-oauth/google\";\nimport { routes } from \"~/routes\";\nimport { useService } from \"~/hooks/use-service\";\nimport SuccessMessage from \"~/components/common/SuccessMessage/SuccessMessage\";\n\n// ----------------------------------------------------------------------\n\nexport default function SignUpView() {\n  const authService = useService(\"auth\");\n\n  const { t } = useTranslation(\"manage\");\n\n  const passwordShow = useBoolean();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [isSuccess, setSuccess] = useState(false);\n\n  Yup.addMethod(Yup.string, \"noWhitespace\", function (errorMessage) {\n    return this.test(\"no-whitespace\", errorMessage, function (value) {\n      const { path, createError } = this;\n      return value?.trim()\n        ? true\n        : createError({ path, message: errorMessage });\n    });\n  });\n  const RegisterSchema = Yup.object().shape({\n    firstName: Yup.string()\n      .required(t(\"firstname_required\"))\n      .noWhitespace(t(\"error.invalid_first_name\"))\n      .matches(/^[A-Za-z]+$/, t(\"error.invalid_first_name\")),\n    lastName: Yup.string()\n      .required(t(\"lastname_required\"))\n      .noWhitespace(t(\"error.invalid_last_name\"))\n      .matches(/^[A-Za-z]+$/, t(\"error.invalid_last_name\")),\n    email: Yup.string()\n      .required(t(\"email_required\"))\n      .email(t(\"error.invalid_email\")),\n    password: Yup.string()\n      .required(t(\"password_required\"))\n      .matches(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[\\W_]).{8,}$/,\n        t(\"error.invalid_password\")\n      ),\n    confirmPassword: Yup.string()\n      .required(t(\"password_required\"))\n      .oneOf([Yup.ref(\"password\")], t(\"error.password_should_match\")),\n  });\n\n  const defaultValues = {\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  };\n\n  const methods = useForm({\n    resolver: yupResolver(RegisterSchema),\n    defaultValues,\n  });\n  const {\n    setError,\n    reset,\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = handleSubmit(async (data) => {\n    try {\n      let model = {\n        email: data.email,\n        password: data.password,\n        lastName: data.lastName,\n        firstName: data.firstName,\n      };\n      dispatch(setLoading(true));\n      await authService.signup(model);\n      setSuccess(true);\n    } catch (processedError) {\n      if (processedError.name == PROCESSED_ERRORS.DUPLICATE_EMAIL.name) {\n        setError(\"email\", {\n          type: \"manual\",\n          message: t(`processed_errors.${processedError.name}`),\n        });\n      }\n    } finally {\n      dispatch(setLoading(false));\n    }\n  });\n\n  const onGoogleAuthSuccess = (credentialResponse) => {\n    dispatch(setLoading(true));\n    authService\n      .googleSignIn(credentialResponse, dispatch)\n      .then((data) => {\n        const { from } = location.state || { from: { pathname: \"/\" } };\n        navigate(from);\n      })\n      .catch((e) => {\n        // handleError(e);\n      })\n      .finally(() => {\n        dispatch(setLoading(false));\n      });\n  };\n\n  const renderHead = (\n    <div>\n      <Typography variant=\"h3\" paragraph>\n        {t(\"sign_up.get_started\")}\n      </Typography>\n\n      <Typography variant=\"body2\" sx={{ color: \"text.secondary\" }}>\n        {t(\"sign_up.have_account\")}\n        <Link\n          component={RouterLink}\n          href={routes.login}\n          variant=\"subtitle2\"\n          color=\"primary\"\n        >\n          {\" \"}\n          {t(\"login.login\")}\n        </Link>\n      </Typography>\n    </div>\n  );\n\n  const renderSocials = (\n    <Stack direction=\"row\" justifyContent=\"center\">\n      <GoogleOAuthProvider\n        clientId={import.meta.env.VITE_GOOGLE_AUTH_CLIENT_ID}\n      >\n        <GoogleLogin\n          onSuccess={onGoogleAuthSuccess}\n          onError={() => {\n            console.log(\"Login Failed\");\n          }}\n        />\n      </GoogleOAuthProvider>\n    </Stack>\n  );\n\n  const renderForm = (\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={2.5}>\n        <RHFTextField name=\"firstName\" label={t(\"label.first_name\")} />\n        <RHFTextField name=\"lastName\" label={t(\"label.last_name\")} />\n\n        <RHFTextField name=\"email\" label={t(\"label.email\")} />\n\n        <RHFTextField\n          name=\"password\"\n          label={t(\"label.password\")}\n          type={passwordShow.value ? \"text\" : \"password\"}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton onClick={passwordShow.onToggle} edge=\"end\">\n                  <Iconify\n                    icon={\n                      passwordShow.value ? \"carbon:view\" : \"carbon:view-off\"\n                    }\n                  />\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n        />\n\n        <RHFTextField\n          name=\"confirmPassword\"\n          label={t(\"label.confirm_new_password\")}\n          type={passwordShow.value ? \"text\" : \"password\"}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton onClick={passwordShow.onToggle} edge=\"end\">\n                  <Iconify\n                    icon={\n                      passwordShow.value ? \"carbon:view\" : \"carbon:view-off\"\n                    }\n                  />\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n        />\n\n        <LoadingButton\n          fullWidth\n          color=\"primary\"\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n          loading={isSubmitting}\n        >\n          {t(\"sign_up.sign_up\")}\n        </LoadingButton>\n      </Stack>\n    </FormProvider>\n  );\n\n  return (\n    <>\n      {isSuccess ? (\n        <SuccessMessage t={t} message=\"sign_up.success\" />\n      ) : (\n        <>\n          {renderHead}\n\n          {renderForm}\n\n          <Divider>\n            <Typography variant=\"body2\" sx={{ color: \"text.disabled\" }}>\n              or continue with\n            </Typography>\n          </Divider>\n\n          {renderSocials}\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["SignUpView","authService","useService","_useTranslation","useTranslation","t","passwordShow","useBoolean","dispatch","useDispatch","navigate","useNavigate","_reactExports$useStat","useState","_reactExports$useStat2","_slicedToArray","isSuccess","setSuccess","Yup.addMethod","Yup.string","errorMessage","test","value","path","createError","trim","message","RegisterSchema","Yup.object","shape","firstName","required","noWhitespace","matches","lastName","email","password","confirmPassword","oneOf","Yup.ref","defaultValues","methods","useForm","resolver","yupResolver","setError","reset","handleSubmit","isSubmitting","formState","onSubmit","_ref","_asyncToGenerator","data","model","setLoading","signup","processedError","name","PROCESSED_ERRORS","DUPLICATE_EMAIL","type","_x","apply","arguments","onGoogleAuthSuccess","credentialResponse","googleSignIn","then","_ref2","location","state","from","pathname","catch","e","finally","renderHead","children","jsx","Typography","variant","paragraph","jsxs","sx","color","Link","component","RouterLink","href","routes","login","renderSocials","Stack","direction","justifyContent","GoogleOAuthProvider","clientId","GoogleLogin","onSuccess","onError","console","log","renderForm","FormProvider","spacing","RHFTextField","label","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","onToggle","edge","Iconify","icon","LoadingButton","fullWidth","size","loading","Fragment","SuccessMessage","Divider"],"mappings":"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"}