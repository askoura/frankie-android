{"version":3,"file":"index-BaTY5N3H.js","sources":["../../src/pages/manage/Signup/index.jsx"],"sourcesContent":["import * as Yup from \"yup\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\n\nimport Link from \"@mui/material/Link\";\nimport Stack from \"@mui/material/Stack\";\nimport Divider from \"@mui/material/Divider\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Typography from \"@mui/material/Typography\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\n\nimport RouterLink from \"~/components/router/router-link\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { setLoading } from \"~/state/edit/editState\";\n\nimport { useBoolean } from \"~/hooks/use-boolean\";\nimport Iconify from \"~/components/iconify\";\nimport FormProvider, { RHFTextField } from \"../../../components/hook-form\";\nimport { useState } from \"react\";\nimport { PROCESSED_ERRORS } from \"~/utils/errorsProcessor\";\nimport { useTranslation } from \"react-i18next\";\nimport { GoogleLogin, GoogleOAuthProvider } from \"@react-oauth/google\";\nimport { routes } from \"~/routes\";\nimport { useService } from \"~/hooks/use-service\";\nimport SuccessMessage from \"~/components/common/SuccessMessage/SuccessMessage\";\n\n// ----------------------------------------------------------------------\n\nexport default function SignUpView() {\n  const authService = useService(\"auth\");\n\n  const { t } = useTranslation(\"manage\");\n\n  const passwordShow = useBoolean();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [isSuccess, setSuccess] = useState(false);\n\n  Yup.addMethod(Yup.string, \"noWhitespace\", function (errorMessage) {\n    return this.test(\"no-whitespace\", errorMessage, function (value) {\n      const { path, createError } = this;\n      return value?.trim()\n        ? true\n        : createError({ path, message: errorMessage });\n    });\n  });\n  const RegisterSchema = Yup.object().shape({\n    firstName: Yup.string()\n      .required(t(\"firstname_required\"))\n      .noWhitespace(t(\"error.invalid_first_name\"))\n      .matches(/^[A-Za-z]+$/, t(\"error.invalid_first_name\")),\n    lastName: Yup.string()\n      .required(t(\"lastname_required\"))\n      .noWhitespace(t(\"error.invalid_last_name\"))\n      .matches(/^[A-Za-z]+$/, t(\"error.invalid_last_name\")),\n    email: Yup.string()\n      .required(t(\"email_required\"))\n      .email(t(\"error.invalid_email\")),\n    password: Yup.string()\n      .required(t(\"password_required\"))\n      .matches(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[\\W_]).{8,}$/,\n        t(\"error.invalid_password\")\n      ),\n    confirmPassword: Yup.string()\n      .required(t(\"password_required\"))\n      .oneOf([Yup.ref(\"password\")], t(\"error.password_should_match\")),\n  });\n\n  const defaultValues = {\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  };\n\n  const methods = useForm({\n    resolver: yupResolver(RegisterSchema),\n    defaultValues,\n  });\n  const {\n    setError,\n    reset,\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = handleSubmit(async (data) => {\n    try {\n      let model = {\n        email: data.email,\n        password: data.password,\n        lastName: data.lastName,\n        firstName: data.firstName,\n      };\n      dispatch(setLoading(true));\n      await authService.signup(model);\n      setSuccess(true);\n    } catch (processedError) {\n      if (processedError.name == PROCESSED_ERRORS.DUPLICATE_EMAIL.name) {\n        setError(\"email\", {\n          type: \"manual\",\n          message: t(`processed_errors.${processedError.name}`),\n        });\n      }\n    } finally {\n      dispatch(setLoading(false));\n    }\n  });\n\n  const onGoogleAuthSuccess = (credentialResponse) => {\n    dispatch(setLoading(true));\n    authService\n      .googleSignIn(credentialResponse, dispatch)\n      .then((data) => {\n        const { from } = location.state || { from: { pathname: \"/\" } };\n        navigate(from);\n      })\n      .catch((e) => {\n        // handleError(e);\n      })\n      .finally(() => {\n        dispatch(setLoading(false));\n      });\n  };\n\n  const renderHead = (\n    <div>\n      <Typography variant=\"h3\" paragraph>\n        {t(\"sign_up.get_started\")}\n      </Typography>\n\n      <Typography variant=\"body2\" sx={{ color: \"text.secondary\" }}>\n        {t(\"sign_up.have_account\")}\n        <Link\n          component={RouterLink}\n          href={routes.login}\n          variant=\"subtitle2\"\n          color=\"primary\"\n        >\n          {\" \"}\n          {t(\"login.login\")}\n        </Link>\n      </Typography>\n    </div>\n  );\n\n  const renderSocials = (\n    <Stack direction=\"row\" justifyContent=\"center\">\n      <GoogleOAuthProvider\n        clientId={import.meta.env.VITE_GOOGLE_AUTH_CLIENT_ID}\n      >\n        <GoogleLogin\n          onSuccess={onGoogleAuthSuccess}\n          onError={() => {\n            console.log(\"Login Failed\");\n          }}\n        />\n      </GoogleOAuthProvider>\n    </Stack>\n  );\n\n  const renderForm = (\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={2.5}>\n        <RHFTextField name=\"firstName\" label={t(\"label.first_name\")} />\n        <RHFTextField name=\"lastName\" label={t(\"label.last_name\")} />\n\n        <RHFTextField name=\"email\" label={t(\"label.email\")} />\n\n        <RHFTextField\n          name=\"password\"\n          label={t(\"label.password\")}\n          type={passwordShow.value ? \"text\" : \"password\"}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton onClick={passwordShow.onToggle} edge=\"end\">\n                  <Iconify\n                    icon={\n                      passwordShow.value ? \"carbon:view\" : \"carbon:view-off\"\n                    }\n                  />\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n        />\n\n        <RHFTextField\n          name=\"confirmPassword\"\n          label={t(\"label.confirm_new_password\")}\n          type={passwordShow.value ? \"text\" : \"password\"}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton onClick={passwordShow.onToggle} edge=\"end\">\n                  <Iconify\n                    icon={\n                      passwordShow.value ? \"carbon:view\" : \"carbon:view-off\"\n                    }\n                  />\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n        />\n\n        <LoadingButton\n          fullWidth\n          color=\"primary\"\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n          loading={isSubmitting}\n        >\n          {t(\"sign_up.sign_up\")}\n        </LoadingButton>\n      </Stack>\n    </FormProvider>\n  );\n\n  return (\n    <>\n      {isSuccess ? (\n        <SuccessMessage t={t} message=\"sign_up.success\" />\n      ) : (\n        <>\n          {renderHead}\n\n          {renderForm}\n\n          <Divider>\n            <Typography variant=\"body2\" sx={{ color: \"text.disabled\" }}>\n              or continue with\n            </Typography>\n          </Divider>\n\n          {renderSocials}\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["useState","Yup.addMethod","Yup.string","Yup.object","Yup.ref","yupResolver","jsx","jsxs","Fragment"],"mappings":"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"}